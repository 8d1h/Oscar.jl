var documenterSearchIndex = {"docs":
[{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/direct_sum/#Direct-Sums","page":"Direct Sums","title":"Direct Sums","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"AbstractAlgebra allows the construction of the external direct sum of any nonempty vector of finitely presented modules.","category":"page"},{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"As well as implementing the entire Module interface, AbstractAlgebra direct sums also provide the following interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"Note that external direct sums are considered equal iff they are the same object.","category":"page"},{"location":"AbstractAlgebra/docs/src/direct_sum/#Constructors","page":"Direct Sums","title":"Constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"DirectSum(::Vector{<:AbstractAlgebra.FPModule{T}}) where T <: RingElement\nDirectSum(::AbstractAlgebra.FPModule{T}...) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/direct_sum/#AbstractAlgebra.DirectSum-Union{Tuple{Array{var\"#s283\",1} where var\"#s283\"<:AbstractAlgebra.FPModule{T}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Direct Sums","title":"AbstractAlgebra.DirectSum","text":"DirectSum(m::Vector{<:Module{T}}) where T <: RingElement\n\nReturn a tuple M f g consisting of M the direct sum of the modules m (supplied as a vector of modules), a vector f of the canonical injections of the mi into M and a vector g of the canonical projections from M onto the mi.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/direct_sum/#AbstractAlgebra.DirectSum-Union{Tuple{Vararg{AbstractAlgebra.FPModule{T},N} where N}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Direct Sums","title":"AbstractAlgebra.DirectSum","text":"DirectSum(m::Module{T}...) where T <: RingElement\n\nReturn a tuple M f g consisting of M the direct sum of the given modules, a vector f of the canonical injections of the mi into M and a vector g of the canonical projections from M onto the mi.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"julia> F = FreeModule(ZZ, 5)\nFree module of rank 5 over Integers\n\njulia> m1 = F(BigInt[4, 7, 8, 2, 6])\n(4, 7, 8, 2, 6)\n\njulia> m2 = F(BigInt[9, 7, -2, 2, -4])\n(9, 7, -2, 2, -4)\n\njulia> S1, f1 = sub(F, [m1, m2])\n(Submodule over Integers with 2 generators and no relations\n, Module homomorphism with\nDomain: Submodule over Integers with 2 generators and no relations\n\nCodomain: Free module of rank 5 over Integers)\n\njulia> m1 = F(BigInt[3, 1, 7, 7, -7])\n(3, 1, 7, 7, -7)\n\njulia> m2 = F(BigInt[-8, 6, 10, -1, 1])\n(-8, 6, 10, -1, 1)\n\njulia> S2, f2 = sub(F, [m1, m2])\n(Submodule over Integers with 2 generators and no relations\n, Module homomorphism with\nDomain: Submodule over Integers with 2 generators and no relations\n\nCodomain: Free module of rank 5 over Integers)\n\njulia> m1 = F(BigInt[2, 4, 2, -3, -10])\n(2, 4, 2, -3, -10)\n\njulia> m2 = F(BigInt[5, 7, -6, 9, -5])\n(5, 7, -6, 9, -5)\n\njulia> S3, f3 = sub(F, [m1, m2])\n(Submodule over Integers with 2 generators and no relations\n, Module homomorphism with\nDomain: Submodule over Integers with 2 generators and no relations\n\nCodomain: Free module of rank 5 over Integers)\n\njulia> D, f = DirectSum(S1, S2, S3)\n(DirectSumModule over Integers, AbstractAlgebra.Generic.ModuleHomomorphism{BigInt}[Module homomorphism with\nDomain: Submodule over Integers with 2 generators and no relations\n\nCodomain: DirectSumModule over Integers, Module homomorphism with\nDomain: Submodule over Integers with 2 generators and no relations\n\nCodomain: DirectSumModule over Integers, Module homomorphism with\nDomain: Submodule over Integers with 2 generators and no relations\n\nCodomain: DirectSumModule over Integers], AbstractAlgebra.Generic.ModuleHomomorphism{BigInt}[Module homomorphism with\nDomain: DirectSumModule over Integers\nCodomain: Submodule over Integers with 2 generators and no relations\n, Module homomorphism with\nDomain: DirectSumModule over Integers\nCodomain: Submodule over Integers with 2 generators and no relations\n, Module homomorphism with\nDomain: DirectSumModule over Integers\nCodomain: Submodule over Integers with 2 generators and no relations\n])","category":"page"},{"location":"AbstractAlgebra/docs/src/direct_sum/#Functionality-for-direct-sums","page":"Direct Sums","title":"Functionality for direct sums","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"In addition to the Module interface, AbstractAlgebra direct sums implement the following functionality.","category":"page"},{"location":"AbstractAlgebra/docs/src/direct_sum/#Basic-manipulation","page":"Direct Sums","title":"Basic manipulation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"summands(::AbstractAlgebra.Generic.DirectSumModule{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/direct_sum/#AbstractAlgebra.Generic.summands-Union{Tuple{AbstractAlgebra.Generic.DirectSumModule{T}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Direct Sums","title":"AbstractAlgebra.Generic.summands","text":"summands(M::DirectSumModule{T}) where T <: RingElement\n\nReturn the modules that this module is a direct sum of.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"julia> F = FreeModule(ZZ, 5)\nFree module of rank 5 over Integers\n\njulia> m1 = F(BigInt[4, 7, 8, 2, 6])\n(4, 7, 8, 2, 6)\n\njulia> m2 = F(BigInt[9, 7, -2, 2, -4])\n(9, 7, -2, 2, -4)\n\njulia> S1, f1 = sub(F, [m1, m2])\n(Submodule over Integers with 2 generators and no relations\n, Module homomorphism with\nDomain: Submodule over Integers with 2 generators and no relations\n\nCodomain: Free module of rank 5 over Integers)\n\njulia> m1 = F(BigInt[3, 1, 7, 7, -7])\n(3, 1, 7, 7, -7)\n\njulia> m2 = F(BigInt[-8, 6, 10, -1, 1])\n(-8, 6, 10, -1, 1)\n\njulia> S2, f2 = sub(F, [m1, m2])\n(Submodule over Integers with 2 generators and no relations\n, Module homomorphism with\nDomain: Submodule over Integers with 2 generators and no relations\n\nCodomain: Free module of rank 5 over Integers)\n\njulia> m1 = F(BigInt[2, 4, 2, -3, -10])\n(2, 4, 2, -3, -10)\n\njulia> m2 = F(BigInt[5, 7, -6, 9, -5])\n(5, 7, -6, 9, -5)\n\njulia> S3, f3 = sub(F, [m1, m2])\n(Submodule over Integers with 2 generators and no relations\n, Module homomorphism with\nDomain: Submodule over Integers with 2 generators and no relations\n\nCodomain: Free module of rank 5 over Integers)\n\njulia> D, f = DirectSum(S1, S2, S3)\n(DirectSumModule over Integers, AbstractAlgebra.Generic.ModuleHomomorphism{BigInt}[Module homomorphism with\nDomain: Submodule over Integers with 2 generators and no relations\n\nCodomain: DirectSumModule over Integers, Module homomorphism with\nDomain: Submodule over Integers with 2 generators and no relations\n\nCodomain: DirectSumModule over Integers, Module homomorphism with\nDomain: Submodule over Integers with 2 generators and no relations\n\nCodomain: DirectSumModule over Integers], AbstractAlgebra.Generic.ModuleHomomorphism{BigInt}[Module homomorphism with\nDomain: DirectSumModule over Integers\nCodomain: Submodule over Integers with 2 generators and no relations\n, Module homomorphism with\nDomain: DirectSumModule over Integers\nCodomain: Submodule over Integers with 2 generators and no relations\n, Module homomorphism with\nDomain: DirectSumModule over Integers\nCodomain: Submodule over Integers with 2 generators and no relations\n])\n\njulia> summands(D)\n3-element Array{AbstractAlgebra.Generic.Submodule{BigInt},1}:\n Submodule over Integers with 2 generators and no relations\n\n Submodule over Integers with 2 generators and no relations\n\n Submodule over Integers with 2 generators and no relations","category":"page"},{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"    (D::DirectSumModule{T}(::Vector{<:AbstractAlgebra.FPModuleElem{T}}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"Given a vector (or 1-dim array) of module elements, where the i-th entry has to be an element of the i-summand of D, create the corresponding element in D.","category":"page"},{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"julia> N = FreeModule(QQ, 2);\n\njulia> M = FreeModule(QQ, 1);\n\njulia> D, _ = DirectSum(M, N, M);\n\njulia> D([gen(M, 1), gen(N, 1), gen(M, 2)])\n(1//1, 1//1, 0//1, 0//1)","category":"page"},{"location":"AbstractAlgebra/docs/src/direct_sum/#Special-Homomorphisms","page":"Direct Sums","title":"Special Homomorphisms","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"Due to the special structure as direct sums, homomorphisms can be created by specifying homomorphisms for all summands. In case of the codmain being a direct sum as well, any homomorphism may be thought of as a matrix containing maps from the i-th source summand to the j-th target module:","category":"page"},{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"ModuleHomomorphism(D::DirectSumModule{T}, S::DirectSumModule{T}, m::Array{Any, 2}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"Given a matrix m such that the (ij)-th entry is either 0 (Int(0)) or a ModuleHomomorphism from the i-th summand of D to the j-th summand of S, construct the corresponding homomorphism.","category":"page"},{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"ModuleHomomorphism(D::DirectSumModule{T}, S::FPModuleElem{T}, m::Array{ModuleHomomorphism, 1})","category":"page"},{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"Given an array a of ModuleHomomorphism such that a_i, the i-th entry of a is a ModuleHomomorphism from the i-th summand of D into S, construct the direct sum of the components.","category":"page"},{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"Given a matrix m such that the (ij)-th entry is either 0 (Int(0)) or a ModuleHomomorphism from the i-th summand of D to the j-th summand of S, construct the corresponding homomorphism.","category":"page"},{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/direct_sum/","page":"Direct Sums","title":"Direct Sums","text":"julia> N = FreeModule(QQ, 2);\n\njulia> D, _ = DirectSum(N, N);\n\njulia> p = ModuleHomomorphism(N, N, [3,4] .* basis(N));\n\njulia> q = ModuleHomomorphism(N, N, [5,7] .* basis(N));\n\njulia> phi = ModuleHomomorphism(D, D, [p 0; 0 q])\nModule homomorphism with\nDomain: DirectSumModule over Rationals\nCodomain: DirectSumModule over Rationals\n\njulia> r = ModuleHomomorphism(N, D, [2,3] .* gens(D)[1:2])\nModule homomorphism with\nDomain: Vector space of dimension 2 over Rationals\nCodomain: DirectSumModule over Rationals\n\njulia> psi = ModuleHomomorphism(D, D, [r, r])\nModule homomorphism with\nDomain: DirectSumModule over Rationals\nCodomain: DirectSumModule over Rationals","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/#Generic-fraction-fields","page":"Generic fraction fields","title":"Generic fraction fields","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"AbstractAlgebra.jl provides a module, implemented in src/generic/Fraction.jl for generic fraction fields over any gcd domain belonging to the AbstractAlgebra.jl abstract type hierarchy.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"As well as implementing the Fraction Field interface a number of generic algorithms are implemented for fraction fields. We describe this generic functionality below.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"All of the generic functionality is part of a submodule of AbstractAlgebra called Generic. This is exported by default so that it is not necessary to qualify the function names with the submodule name.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/#Types-and-parent-objects","page":"Generic fraction fields","title":"Types and parent objects","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"Fractions implemented using the AbstractAlgebra generics have type Generic.Frac{T} where T is the type of elements of the base ring. See the file src/generic/GenericTypes.jl for details.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"Parent objects of such fraction elements have type Generic.FracField{T}.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"The fraction element types belong to the abstract type AbstractAlgebra.FracElem{T} and the fraction field types belong to the abstract type AbstractAlgebra.FracRing{T}. This enables one to write generic functions that can accept any AbstractAlgebra fraction type.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"Note that both the generic fraction field type Generic.FracField{T} and the abstract type it belongs to, AbstractAlgebra.FracField{T} are both called FracField. The former is a (parameterised) concrete type for a fraction field over a given base ring whose elements have type T. The latter is an abstract type representing all fraction field types in AbstractAlgebra.jl, whether generic or very specialised (e.g. supplied by a C library).","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/#Fraction-field-constructors","page":"Generic fraction fields","title":"Fraction field constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"In order to construct fractions in AbstractAlgebra.jl, one can first construct the fraction field itself. This is accomplished with the following constructor.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"FractionField(R::AbstractAlgebra.Ring; cached::Bool = true)","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"Given a base ring R return the parent object of the fraction field of R. By default the parent object S will depend only on R and will be cached. Setting the optional argument cached to false will prevent the parent object S from being cached.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"Here are some examples of creating fraction fields and making use of the resulting parent objects to coerce various elements into the fraction field.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"julia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integers, x)\n\njulia> S = FractionField(R)\nFraction field of Univariate Polynomial Ring in x over Integers\n\njulia> f = S()\n0\n\njulia> g = S(123)\n123\n\njulia> h = S(BigInt(1234))\n1234\n\njulia> k = S(x + 1)\nx + 1\n","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"All of the examples here are generic fraction fields, but specialised implementations of fraction fields provided by external modules will also usually provide a FractionField constructor to allow creation of the fraction fields they provide.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/#Basic-field-functionality","page":"Generic fraction fields","title":"Basic field functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"Fraction fields in AbstractAlgebra.jl implement the full Field interface. Of course the entire Fraction Field interface is also implemented.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"We give some examples of such functionality.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"julia> R, x = PolynomialRing(QQ, \"x\")\n(Univariate Polynomial Ring in x over Rationals, x)\n\njulia> S = FractionField(R)\nFraction field of Univariate Polynomial Ring in x over Rationals\n\njulia> f = S(x + 1)\nx + 1\n\njulia> g = (x^2 + x + 1)//(x^3 + 3x + 1)\n(x^2 + x + 1)//(x^3 + 3*x + 1)\n\njulia> h = zero(S)\n0\n\njulia> k = one(S)\n1\n\njulia> isone(k)\ntrue\n\njulia> iszero(f)\nfalse\n\njulia> m = characteristic(S)\n0\n\njulia> U = base_ring(S)\nUnivariate Polynomial Ring in x over Rationals\n\njulia> V = base_ring(f)\nUnivariate Polynomial Ring in x over Rationals\n\njulia> T = parent(f)\nFraction field of Univariate Polynomial Ring in x over Rationals\n\njulia> r = deepcopy(f)\nx + 1\n\njulia> n = numerator(g)\nx^2 + x + 1\n\njulia> d = denominator(g)\nx^3 + 3*x + 1\n","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/#Fraction-field-functionality-provided-by-AbstractAlgebra.jl","page":"Generic fraction fields","title":"Fraction field functionality provided by AbstractAlgebra.jl","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"The functionality listed below is automatically provided by AbstractAlgebra.jl for any fraction field module that implements the full Fraction Field interface. This includes AbstractAlgebra.jl's own generic fraction fields.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"But if a C library provides all the functionality documented in the Fraction Field interface, then all the functions described here will also be automatically supplied by AbstractAlgebra.jl for that fraction field type.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"Of course, modules are free to provide specific implementations of the functions described here, that override the generic implementation.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/#Greatest-common-divisor","page":"Generic fraction fields","title":"Greatest common divisor","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"gcd{T <: RingElem}(::FracElem{T}, ::FracElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/#Base.gcd-Union{Tuple{T}, Tuple{FracElem{T},FracElem{T}}} where T<:RingElem","page":"Generic fraction fields","title":"Base.gcd","text":"gcd(a::AbstractAlgebra.FracElem{T}, b::AbstractAlgebra.FracElem{T}) where {T <: RingElem}\n\nReturn a greatest common divisor of a and b if one exists. N.B: we define the GCD of ab and cd to be gcd(ad bc)bd, reduced to lowest terms. This requires the existence of a greatest common divisor function for the base ring.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"julia> R, x = PolynomialRing(QQ, \"x\")\n(Univariate Polynomial Ring in x over Rationals, x)\n\njulia> f = (x + 1)//(x^3 + 3x + 1)\n(x + 1)//(x^3 + 3*x + 1)\n\njulia> g = (x^2 + 2x + 1)//(x^2 + x + 1)\n(x^2 + 2*x + 1)//(x^2 + x + 1)\n\njulia> h = gcd(f, g)\n(x + 1)//(x^5 + x^4 + 4*x^3 + 4*x^2 + 4*x + 1)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/#Square-root","page":"Generic fraction fields","title":"Square root","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"issquare{T <: RingElem}(::FracElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/#AbstractAlgebra.Generic.issquare-Union{Tuple{FracElem{T}}, Tuple{T}} where T<:RingElem","page":"Generic fraction fields","title":"AbstractAlgebra.Generic.issquare","text":"issquare(a::AbstractAlgebra.FracElem{T}) where T <: RingElem\n\nReturn true if a is a square.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"Base.sqrt(::FracElem{T}) where {T <: RingElem}","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/#Base.sqrt-Union{Tuple{FracElem{T}}, Tuple{T}} where T<:RingElem","page":"Generic fraction fields","title":"Base.sqrt","text":"sqrt(a::FlintPuiseuxSeriesElem{T}) where T <: RingElem\n\nReturn the square root of the given Puiseux series.\n\n\n\nBase.sqrt(f::AbstractAlgebra.PolyElem{T}, check::Bool=true) where T <: RingElement\n\nReturn the square root of f if it is a perfect square, otherwise an exception is raised. If check is set to false the function assumes the input is square and may not fully check this.\n\n\n\nsqrt(a::Generic.PuiseuxSeriesElem{T}) where T <: RingElement\n\nReturn the square root of the given Puiseux series a.\n\n\n\nBase.sqrt(a::AbstractAlgebra.FracElem{T}) where T <: RingElem\n\nReturn the square root of a if it is a square, otherwise raise an exception.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"julia> R, x = PolynomialRing(QQ, \"x\")\n(Univariate Polynomial Ring in x over Rationals, x)\n\njulia> S = FractionField(R)\nFraction field of Univariate Polynomial Ring in x over Rationals\n\njulia> a = (21//4*x^6 - 15*x^5 + 27//14*x^4 + 9//20*x^3 + 3//7*x + 9//10)//(x + 3)\n(21//4*x^6 - 15*x^5 + 27//14*x^4 + 9//20*x^3 + 3//7*x + 9//10)//(x + 3)\n\njulia> sqrt(a^2)\n(21//4*x^6 - 15*x^5 + 27//14*x^4 + 9//20*x^3 + 3//7*x + 9//10)//(x + 3)\n\njulia> issquare(a^2)\ntrue","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/#Remove-and-valuation","page":"Generic fraction fields","title":"Remove and valuation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"When working over a Euclidean domain, it is convenient to extend valuations to the fraction field. To facilitate this, we define the following functions.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"remove{T <: RingElem}(::FracElem{T}, ::T)","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/#AbstractAlgebra.Generic.remove-Union{Tuple{T}, Tuple{FracElem{T},T}} where T<:RingElem","page":"Generic fraction fields","title":"AbstractAlgebra.Generic.remove","text":"remove(z::AbstractAlgebra.FracElem{T}, p::T) where {T <: RingElem}\n\nReturn the tuple n x such that z = p^nx where x has valuation 0 at p.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"valuation{T <: RingElem}(::FracElem{T}, ::T)","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/#AbstractAlgebra.Generic.valuation-Union{Tuple{T}, Tuple{FracElem{T},T}} where T<:RingElem","page":"Generic fraction fields","title":"AbstractAlgebra.Generic.valuation","text":"valuation(z::AbstractAlgebra.FracElem{T}, p::T) where {T <: RingElem}\n\nReturn the valuation of z at p.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction/","page":"Generic fraction fields","title":"Generic fraction fields","text":"julia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integers, x)\n\njulia> f = (x + 1)//(x^3 + 3x + 1)\n(x + 1)//(x^3 + 3*x + 1)\n\njulia> g = (x^2 + 1)//(x^2 + x + 1)\n(x^2 + 1)//(x^2 + x + 1)\n\njulia> v, q = remove(f^3*g, x + 1)\n(3, (x^2 + 1)//(x^11 + x^10 + 10*x^9 + 12*x^8 + 39*x^7 + 48*x^6 + 75*x^5 + 75*x^4 + 66*x^3 + 37*x^2 + 10*x + 1))\n\njulia> v = valuation(f^3*g, x + 1)\n3\n","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"CurrentModule = Oscar","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"using Oscar","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"Pages = [\"ca_ideals.md\"]","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Ideals","page":"Ideals","title":"Ideals","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/#Constructors","page":"Ideals","title":"Constructors","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"ideal(g::Array{T, 1}) where {T <: MPolyElem}","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Hecke.ideal-Union{Tuple{Array{T,1}}, Tuple{T}} where T<:MPolyElem","page":"Ideals","title":"Hecke.ideal","text":"ideal(g::Array{T, 1}) where {T <: MPolyElem}\n\nCreate the ideal generated by the polynomials in g. \n\nExample\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> I = ideal([x*y-3*x,y^3-2*x^2*y])\nideal generated by: x*y - 3*x, -2*x^2*y + y^3\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"ideal(Rx::MPolyRing, g::Array{<:Any, 1})","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Hecke.ideal-Tuple{MPolyRing,Array{var\"#s283\",1} where var\"#s283\"}","page":"Ideals","title":"Hecke.ideal","text":"ideal(Rx::MPolyRing, g::Array{<:Any, 1})\n\nCreate the ideal generated by the polynomials in g, specifying the ambient ring of the ideal. \n\nExample\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> J = ideal(R, [(x+y)^2])\nideal generated by: x^2 + 2*x*y + y^2\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Gröbner-Bases","page":"Ideals","title":"Gröbner Bases","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/#Monomial-Orderings","page":"Ideals","title":"Monomial Orderings","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/#Normal-Forms","page":"Ideals","title":"Normal Forms","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/#Computing-Gröbner-Bases","page":"Ideals","title":"Computing Gröbner Bases","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"groebner_basis(I::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Oscar.groebner_basis-Tuple{MPolyIdeal}","page":"Ideals","title":"Oscar.groebner_basis","text":"groebner_basis(I::MPolyIdeal)\n\nGiven an ideal I this function computes a Groebner basis w.r.t. the given monomial ordering of the polynomial ring. The Groebner basis is then returned as an array of multivariate polynomials.\n\nExample\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"], ordering=:degrevlex)\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> I = ideal([x*y-3*x,y^3-2*x^2*y])\nideal generated by: x*y - 3*x, -2*x^2*y + y^3\n\njulia> G = groebner_basis(I)\n3-element Array{fmpq_mpoly,1}:\n x*y - 3*x\n y^3 - 6*x^2\n x^3 - 9//2*x\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"groebner_basis(I::MPolyIdeal, ord::Symbol; complete_reduction::Bool=false)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Oscar.groebner_basis-Tuple{MPolyIdeal,Symbol}","page":"Ideals","title":"Oscar.groebner_basis","text":"groebner_basis(I::MPolyIdeal, ord::Symbol = :degrevlex; complete_reduction::Bool=false)\n\nGiven an ideal I, a monomial ordering ord and an optional parameter complete_reduction this function computes a Groebner basis (if complete_reduction = true the reduced Groebner basis) of I w.r.t. the given monomial ordering ord. The Groebner basis is then returned as an array of multivariate polynomials.\n\nExample\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"], ordering=:degrevlex)\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> I = ideal([x*y-3*x,y^3-2*x^2*y])\nideal generated by: x*y - 3*x, -2*x^2*y + y^3\n\njulia> H = groebner_basis(I, ord=:lex)\n3-element Array{fmpq_mpoly,1}:\n y^4 - 3*y^3\n x*y - 3*x\n -1//6*y^3 + x^2\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Gröbner-Bases-with-transformation-matrix","page":"Ideals","title":"Gröbner Bases with transformation matrix","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"groebner_basis_with_transformation_matrix(I::MPolyIdeal; ord::Symbol = :degrevlex, complete_reduction::Bool=false)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Oscar.groebner_basis_with_transformation_matrix-Tuple{MPolyIdeal}","page":"Ideals","title":"Oscar.groebner_basis_with_transformation_matrix","text":"groebner_basis_with_transformation_matrix(I::MPolyIdeal; ord::Symbol = :degrevlex, complete_reduction::Bool=false)\n\nReturns a pair G, m where G is a Groebner basis of the ideal I with respect to the monomial ordering ord, and m is a transformation matrix from gens(I) to G. If complete_reduction is set to true then G will be the reduced Groebner basis.\n\nExample\n\njulia> R,(x,y) = PolynomialRing(QQ,[\"x\",\"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> I = ideal([x*y^2-1,x^3+y^2+x*y])\nideal generated by: x*y^2 - 1, x^3 + x*y + y^2\n\njulia> G,m = groebner_basis_with_transformation_matrix(I)\n(fmpq_mpoly[x*y^2 - 1, x^3 + x*y + y^2, x^2 + y^4 + y], fmpq_mpoly[1 0; 0 1; -x^2 - y y^2])\n\njulia> m * gens(I) == G\ntrue\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"fglm\n\nGröbner walks\n\nHilbert-driven","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Leading-Ideals","page":"Ideals","title":"Leading Ideals","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"leading_ideal(g::Array{T, 1}, args...) where { T <: MPolyElem }","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Oscar.leading_ideal-Union{Tuple{T}, Tuple{Array{T,1},Vararg{Any,N} where N}} where T<:MPolyElem","page":"Ideals","title":"Oscar.leading_ideal","text":"leading_ideal(g::Array{T, 1}, args...) where { T <: MPolyElem }\n\nGiven an array of multivariate polynomials this function returns the ideal generated by the leading monomials of the given array elements. If not otherwise given as a further argument this is done w.r.t. the degree reverse lexicographical monomial ordering.\n\nExample\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> L = leading_ideal([x*y^2-3*x, x^3-14*y^5])\nideal generated by: x*y^2, x^3\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"leading_ideal(I::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Oscar.leading_ideal-Tuple{MPolyIdeal}","page":"Ideals","title":"Oscar.leading_ideal","text":"leading_ideal(I::MPolyIdeal)\n\nGiven a multivariate polynomial ideal Ì this function returns the leading ideal for I. This is done w.r.t. the given monomial ordering in the polynomial ring of I.\n\nExample\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> I = ideal(R,[x*y^2-3*x, x^3-14*y^5])\nideal generated by: x*y^2 - 3*x, x^3 - 14*y^5\n\njulia> L = leading_ideal(I)\nideal generated by: x*y^2, x^4, x^3\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Gröbner-Bases-over-the-integers","page":"Ideals","title":"Gröbner Bases over the integers","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/#....","page":"Ideals","title":"....","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/#Syzygies","page":"Ideals","title":"Syzygies","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/#Generators-of-syzygies","page":"Ideals","title":"Generators of syzygies","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"syzygy_generators(a::Array{<:MPolyElem, 1})","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Oscar.syzygy_generators-Tuple{Array{var\"#s283\",1} where var\"#s283\"<:MPolyElem}","page":"Ideals","title":"Oscar.syzygy_generators","text":"syzygy_generators(a::Array{<:MPolyElem, 1})\n\nGiven an array of multivariate polynomials this function returns the generators of the syzygy module of the ideal generated by the given array elements.\n\nExample\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> S = syzygy_generators([x^3+y+2,x*y^2-13*x^2,y-14])\n3-element Array{AbstractAlgebra.Generic.FreeModuleElem{fmpq_mpoly},1}:\n (0, -y + 14, -13*x^2 + x*y^2)\n (-169*y + 2366, -13*x*y + 182*x - 196*y + 2744, 13*x^2*y^2 - 2548*x^2 + 196*x*y^2 + 169*y + 338)\n (-13*x^2 + 196*x, -x^3 - 16, x^4*y + 14*x^4 + 13*x^2 + 16*x*y + 28*x)\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Data-Associated-to-Ideals","page":"Ideals","title":"Data Associated to Ideals","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"base_ring(I::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#AbstractAlgebra.base_ring-Tuple{MPolyIdeal}","page":"Ideals","title":"AbstractAlgebra.base_ring","text":"base_ring(I::MPolyIdeal{S}) where {S}\n\nReturn the ambient ring of I.\n\nExample\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> I = ideal(R, [x, y])^2\nideal generated by: x^2, x*y, y^2\n\njulia> base_ring(I)\nMultivariate Polynomial Ring in x, y over Rational Field\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Number-of-Generators","page":"Ideals","title":"Number of Generators","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"ngens(I::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#AbstractAlgebra.Generic.ngens-Tuple{MPolyIdeal}","page":"Ideals","title":"AbstractAlgebra.Generic.ngens","text":"ngens(I::MPolyIdeal)\n\nReturn the number of generators of I.\n\nExample\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> I = ideal(R, [x, y])^2\nideal generated by: x^2, x*y, y^2\n\njulia> ngens(I)\n3\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Generators","page":"Ideals","title":"Generators","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"gens(I::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#AbstractAlgebra.gens-Tuple{MPolyIdeal}","page":"Ideals","title":"AbstractAlgebra.gens","text":"gens(I::MPolyIdeal)\n\nReturn the generators of I as an array of multivariate polynomials.\n\nExample\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> I = ideal(R, [x, y])^2\nideal generated by: x^2, x*y, y^2\n\njulia> gens(I)\n3-element Array{fmpq_mpoly,1}:\n x^2\n x*y\n y^2\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Dimension","page":"Ideals","title":"Dimension","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"dim(I::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#AbstractAlgebra.Generic.dim-Tuple{MPolyIdeal}","page":"Ideals","title":"AbstractAlgebra.Generic.dim","text":"dim(I::MPolyIdeal)\n\nReturn the Krull dimension of I.\n\nExample\n\njulia> R, (x, y, z) = PolynomialRing(QQ, [\"x\", \"y\", \"z\"])\n(Multivariate Polynomial Ring in x, y, z over Rational Field, fmpq_mpoly[x, y, z])\n\njulia> I = ideal(R, [y-x^2, x-z^3])\nideal generated by: -x^2 + y, x - z^3\n\njulia> dim(I)\n1\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Codimension","page":"Ideals","title":"Codimension","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"codim(I::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Oscar.codim-Tuple{MPolyIdeal}","page":"Ideals","title":"Oscar.codim","text":"codim(I::MPolyIdeal)\n\nReturn the codimension of I.\n\nExample\n\njulia> R, (x, y, z) = PolynomialRing(QQ, [\"x\", \"y\", \"z\"])\n(Multivariate Polynomial Ring in x, y, z over Rational Field, fmpq_mpoly[x, y, z])\n\njulia> I = ideal(R, [y-x^2, x-z^3])\nideal generated by: -x^2 + y, x - z^3\n\njulia> codim(I)\n2\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Operations-on-Ideals","page":"Ideals","title":"Operations on Ideals","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/#Simple-ideal-Operations","page":"Ideals","title":"Simple ideal Operations","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/#Powers-of-Ideal","page":"Ideals","title":"Powers of Ideal","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":":^(I::MPolyIdeal, m::Int)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Base.:^-Tuple{MPolyIdeal,Int64}","page":"Ideals","title":"Base.:^","text":":^(I::MPolyIdeal, m::Int)\n\nReturn the m-th power of I. \n\nExample\n\njulia> R, (x, y, z) = PolynomialRing(QQ, [\"x\", \"y\", \"z\"])\n(Multivariate Polynomial Ring in x, y, z over Rational Field, fmpq_mpoly[x, y, z])\n\njulia> I = ideal(R, [x, y])\nideal generated by: x, y\n\njulia> I^3\nideal generated by: x^3, x^2*y, x*y^2, y^3\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Sum-of-Ideals","page":"Ideals","title":"Sum of Ideals","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":":+(I::MPolyIdeal, J::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Base.:+-Tuple{MPolyIdeal,MPolyIdeal}","page":"Ideals","title":"Base.:+","text":":+(I::MPolyIdeal, J::MPolyIdeal)\n\nReturn the sum of I and J. \n\nExample\n\njulia> R, (x, y, z) = PolynomialRing(QQ, [\"x\", \"y\", \"z\"])\n(Multivariate Polynomial Ring in x, y, z over Rational Field, fmpq_mpoly[x, y, z])\n\njulia> I = ideal(R, [x, y])\nideal generated by: x, y\n\njulia> J = ideal(R, [z^2])\nideal generated by: z^2\n\njulia> I+J\nideal generated by: x, y, z^2\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Product-of-Ideals","page":"Ideals","title":"Product of Ideals","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":":*(I::MPolyIdeal, J::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Base.:*-Tuple{MPolyIdeal,MPolyIdeal}","page":"Ideals","title":"Base.:*","text":":*(I::MPolyIdeal, J::MPolyIdeal)\n\nReturn the product of I and J. \n\nExample\n\njulia> R, (x, y, z) = PolynomialRing(QQ, [\"x\", \"y\", \"z\"])\n(Multivariate Polynomial Ring in x, y, z over Rational Field, fmpq_mpoly[x, y, z])\n\njulia> I = ideal(R, [x, y])\nideal generated by: x, y\n\njulia> J = ideal(R, [z^2])\nideal generated by: z^2\n\njulia> I*J\nideal generated by: x*z^2, y*z^2\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Intersection-of-Ideals","page":"Ideals","title":"Intersection of Ideals","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"intersect(I::MPolyIdeal, J::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Base.intersect-Tuple{MPolyIdeal,MPolyIdeal}","page":"Ideals","title":"Base.intersect","text":"intersect(I::MPolyIdeal, Js::MPolyIdeal...)\n\nReturn the intersection of two or more ideals.\n\nExample\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> I = intersect(ideal(R, [x, y])^2, ideal(R, [y^2-x^3+x]))\nideal generated by: x^3*y - x*y - y^3, x^4 - x^2 - x*y^2\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Ideal-Quotients","page":"Ideals","title":"Ideal Quotients","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"Given two ideals I J of a ring R, the ideal quotient of I by J is defined to be the ideal","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"IJ= biglf in Rbig f J subset Ibigrsubset R","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"quotient(I::MPolyIdeal, J::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Hecke.quotient-Tuple{MPolyIdeal,MPolyIdeal}","page":"Ideals","title":"Hecke.quotient","text":"quotient(I::MPolyIdeal, J::MPolyIdeal)\n\nReturn the ideal quotient of I by J. Alternatively, use I:J. \n\nExample\n\njulia> R, (x, y, z) = PolynomialRing(QQ, [\"x\", \"y\", \"z\"])\n(Multivariate Polynomial Ring in x, y, z over Rational Field, fmpq_mpoly[x, y, z])\n\njulia> I = ideal(R, [x^4+x^2*y*z+y^3*z, y^4+x^3*z+x*y^2*z, x^3*y+x*y^3])\nideal generated by: x^4 + x^2*y*z + y^3*z, x^3*z + x*y^2*z + y^4, x^3*y + x*y^3\n\njulia> J = ideal(R,[x,y,z])^2\nideal generated by: x^2, x*y, x*z, y^2, y*z, z^2\n\njulia> L = quotient(I,J)\nideal generated by: x^3*z + x*y^2*z + y^4, x^3*y + x*y^3, x^4 + x^2*y*z + y^3*z, x^3*z^2 - x^2*y*z^2 + x*y^2*z^2 - y^3*z^2, x^2*y^2*z - x^2*y*z^2 - y^3*z^2, x^3*z^2 + x^2*y^3 - x^2*y^2*z + x*y^2*z^2\n\njulia> I:J\nideal generated by: x^3*z + x*y^2*z + y^4, x^3*y + x*y^3, x^4 + x^2*y*z + y^3*z, x^3*z^2 - x^2*y*z^2 + x*y^2*z^2 - y^3*z^2, x^2*y^2*z - x^2*y*z^2 - y^3*z^2, x^3*z^2 + x^2*y^3 - x^2*y^2*z + x*y^2*z^2\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Saturation","page":"Ideals","title":"Saturation","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"Given two ideals I J of a ring R, the saturation of I with respect to J is defined to be the ideal","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"IJ^infty = bigl f in R big f J^m subset I text for some mgeq 1 bigr = textstylebigcuplimits_m=1^infty (IJ^m)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"saturation(I::MPolyIdeal, J::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Oscar.saturation-Tuple{MPolyIdeal,MPolyIdeal}","page":"Ideals","title":"Oscar.saturation","text":"saturation(I::MPolyIdeal, J::MPolyIdeal)\n\nReturn the saturation of I with respect to J.\n\nExample\n\njulia> R, (x, y, z) = PolynomialRing(QQ, [\"x\", \"y\", \"z\"])\n(Multivariate Polynomial Ring in x, y, z over Rational Field, fmpq_mpoly[x, y, z])\n\njulia> I = ideal(R, [x^4+x^2*y*z+y^3*z, y^4+x^3*z+x*y^2*z, x^3*y+x*y^3])\nideal generated by: x^4 + x^2*y*z + y^3*z, x^3*z + x*y^2*z + y^4, x^3*y + x*y^3\n\njulia> J = ideal(R, [x,y,z])^2\nideal generated by: x^2, x*y, x*z, y^2, y*z, z^2\n\njulia> L = saturation(I,J)\nideal generated by: x^3 - x^2*y + x*y^2 - y^3, x^2*y*z + y^4 + y^3*z, x^2*y^2 + y^4\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Elimination","page":"Ideals","title":"Elimination","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"eliminate(I::MPolyIdeal, lv::Array{MPolyElem, 1})","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Oscar.eliminate-Tuple{MPolyIdeal,Array{MPolyElem,1}}","page":"Ideals","title":"Oscar.eliminate","text":"eliminate(I::MPolyIdeal, l::Array{MPolyElem, 1})\n\nGiven a list of polynomials which are variables, these variables are eliminated from I. \n\nThat is, return the ideal of all polynomials in I which only depend on the remaining variables.\n\nExample\n\njulia> R, (t, x, y, z) = PolynomialRing(QQ, [\"t\", \"x\", \"y\", \"z\"])\n(Multivariate Polynomial Ring in t, x, y, z over Rational Field, fmpq_mpoly[t, x, y, z])\n\njulia> I = ideal(R, [t-x, t^2-y, t-z^3])\nideal generated by: t - x, t^2 - y, t - z^3\n\njulia> A = [t]\n1-element Array{fmpq_mpoly,1}:\n t\n\njulia> TC = eliminate(I,A)\nideal generated by: x^2 - y, -x + z^3\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"eliminate(I::MPolyIdeal, li::AbstractArray{Int, 1})","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Oscar.eliminate-Tuple{MPolyIdeal,AbstractArray{Int64,1}}","page":"Ideals","title":"Oscar.eliminate","text":"eliminate(I::MPolyIdeal, l::AbstractArray{Int, 1})\n\nGiven a list of indices which specify variables, these variables are eliminated from I. \n\nThat is, return the ideal of all polynomials in I which only depend on the remaining variables.\n\nExample\n\njulia> R, (t, x, y, z) = PolynomialRing(QQ, [\"t\", \"x\", \"y\", \"z\"])\n(Multivariate Polynomial Ring in t, x, y, z over Rational Field, fmpq_mpoly[t, x, y, z])\n\njulia> I = ideal(R, [t-x, t^2-y, t-z^3])\nideal generated by: t - x, t^2 - y, t - z^3\n\njulia> A = [1]\n1-element Array{Int64,1}:\n 1\n\njulia> TC = eliminate(I,A)\nideal generated by: x^2 - y, -x + z^3\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Homogenization-and-Dehomogenization","page":"Ideals","title":"Homogenization and Dehomogenization","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"homogenize(I,t)   CAVEAT: Als Ideal! Auch poly, vector, etc. Siehe M2.\n\ndehomogenize(I,t)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Tests-on-Ideals","page":"Ideals","title":"Tests on Ideals","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/#Equality-of-Ideals","page":"Ideals","title":"Equality of Ideals","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":":(==)(I::MPolyIdeal, J::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Base.:==-Tuple{MPolyIdeal,MPolyIdeal}","page":"Ideals","title":"Base.:==","text":":(==)(I::MPolyIdeal, J::MPolyIdeal)\n\nReturns true if I=J, false otherwise.\n\nExample\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> I = ideal(R, [x^2])\nideal generated by: x^2\n\njulia> J = ideal(R, [x, y])^2\nideal generated by: x^2, x*y, y^2\n\njulia> I == J\nfalse\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Containment-of-Ideals","page":"Ideals","title":"Containment of Ideals","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"issubset(I::MPolyIdeal, J::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Base.issubset-Tuple{MPolyIdeal,MPolyIdeal}","page":"Ideals","title":"Base.issubset","text":"issubset(I::MPolyIdeal, J::MPolyIdeal)\n\nReturns true if I is contained in J, false otherwise.\n\nExample\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> I = ideal(R, [x^2])\nideal generated by: x^2\n\njulia> J = ideal(R, [x, y])^2\nideal generated by: x^2, x*y, y^2\n\njulia> issubset(I, J)\ntrue\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Ideal-Membership","page":"Ideals","title":"Ideal Membership","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"ideal_membership(f::MPolyElem, I::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Oscar.ideal_membership-Tuple{MPolyElem,MPolyIdeal}","page":"Ideals","title":"Oscar.ideal_membership","text":"ideal_membership(f::MPolyElem, I::MPolyIdeal)\n\nReturns true if f is contained in I, false otherwise. Alternatively, use f in I. \n\nExample\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> f = x^2\nx^2\n\njulia> I = ideal(R, [x, y])^2\nideal generated by: x^2, x*y, y^2\n\njulia> ideal_membership(f, I)\ntrue\n\njulia> g = x\nx\n\njulia> g in I\nfalse\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Radical-Membership","page":"Ideals","title":"Radical Membership","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"radical_membership(f::MPolyElem, I::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Oscar.radical_membership-Tuple{MPolyElem,MPolyIdeal}","page":"Ideals","title":"Oscar.radical_membership","text":"radical_membership(f::MPolyElem, I::MPolyIdeal)\n\nReturns true if f is contained in the radical of I, false otherwise.\n\nExample\n\njulia> R, (x,) = PolynomialRing(QQ, [\"x\"])\n(Multivariate Polynomial Ring in x over Rational Field, fmpq_mpoly[x])\n\njulia> f = x\nx\n\njulia> I = ideal(R,  [x^2])\nideal generated by: x^2\n\njulia> radical_membership(f, I)\ntrue\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Primality-Test","page":"Ideals","title":"Primality Test","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"isprime(I::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Nemo.isprime-Tuple{MPolyIdeal}","page":"Ideals","title":"Nemo.isprime","text":"isprime(I::MPolyIdeal)\n\nReturn true if the ideal I is prime, false otherwise. \n\nCAVEAT: The implementation proceeds by computing the minimal associated primes of I first. This may take some time.\n\nExample\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> I = ideal(R, [x, y])^2\nideal generated by: x^2, x*y, y^2\n\njulia> isprime(I)\nfalse\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Primary-Test","page":"Ideals","title":"Primary Test","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"isprimary(I::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Oscar.isprimary-Tuple{MPolyIdeal}","page":"Ideals","title":"Oscar.isprimary","text":"isprimary(I::MPolyIdeal)\n\nReturn true if the ideal I is primary, false otherwise. \n\nCAVEAT: The implementation proceeds by computing a primary decomposition first. This may take some time.\n\nExample\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> I = ideal(R, [x, y])^2\nideal generated by: x^2, x*y, y^2\n\njulia> isprimary(I)\ntrue\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"homogeneity test:        ishomogeneous(I)\n\n.....","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Decomposition-of-Ideals","page":"Ideals","title":"Decomposition of Ideals","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/#Radical","page":"Ideals","title":"Radical","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"radical(I::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Hecke.radical-Tuple{MPolyIdeal}","page":"Ideals","title":"Hecke.radical","text":"radical(I::MPolyIdeal)\n\nReturn the radical of I. \n\nImplemented Algorithms\n\nIf the base ring of I is a polynomial ring over a field, a combination of the algorithms of Krick and Logar  (with modifications by Laplagne) and Kemper is used. For polynomial rings over the integers, the algorithm proceeds as suggested by  Pfister, Sadiq, and Steidel. See Teresa Krick , Alessandro Logar  (1991), Gregor Kemper  (2002), and Gerhard Pfister , Afshan Sadiq , Stefan Steidel  (2011).\n\nExamples\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> I = intersect(ideal(R, [x, y])^2, ideal(R, [y^2-x^3+x]))\nideal generated by: x^3*y - x*y - y^3, x^4 - x^2 - x*y^2\n\njulia> I = intersect(I, ideal(R, [x-y-1])^2)\nideal generated by: x^5*y - 2*x^4*y^2 - 2*x^4*y + x^3*y^3 + 2*x^3*y^2 - x^2*y^3 + 2*x^2*y^2 + 2*x^2*y + 2*x*y^4 + x*y^3 - 2*x*y^2 - x*y - y^5 - 2*y^4 - y^3, x^6 - 2*x^5 - 3*x^4*y^2 - 2*x^4*y + 2*x^3*y^3 + 3*x^3*y^2 + 2*x^3*y + 2*x^3 + 5*x^2*y^2 + 2*x^2*y - x^2 + 3*x*y^4 - 5*x*y^2 - 2*x*y - 2*y^5 - 4*y^4 - 2*y^3\n\njulia> RI = radical(I)\nideal generated by: x^4 - x^3*y - x^3 - x^2 - x*y^2 + x*y + x + y^3 + y^2\n\njulia> R, (a, b, c, d) = PolynomialRing(ZZ, [\"a\", \"b\", \"c\", \"d\"])\n(Multivariate Polynomial Ring in a, b, c, d over Integer Ring, fmpz_mpoly[a, b, c, d])\n\njulia> I = intersect(ideal(R, [9,a,b]), ideal(R, [3,c]))\nideal generated by: 9, 3*b, 3*a, b*c, a*c\n\njulia> I = intersect(I, ideal(R, [11,2a,7b]))\nideal generated by: 99, 3*b, 3*a, b*c, a*c\n\njulia> I = intersect(I, ideal(R, [13a^2,17b^4]))\nideal generated by: 39*a^2, 13*a^2*c, 51*b^4, 17*b^4*c, 3*a^2*b^4, a^2*b^4*c\n\njulia> I = intersect(I, ideal(R, [9c^5,6d^5]))\nideal generated by: 78*a^2*d^5, 117*a^2*c^5, 102*b^4*d^5, 153*b^4*c^5, 6*a^2*b^4*d^5, 9*a^2*b^4*c^5, 39*a^2*c^5*d^5, 51*b^4*c^5*d^5, 3*a^2*b^4*c^5*d^5\n\njulia> I = intersect(I, ideal(R, [17,a^15,b^15,c^15,d^15]))\nideal generated by: 1326*a^2*d^5, 1989*a^2*c^5, 102*b^4*d^5, 153*b^4*c^5, 663*a^2*c^5*d^5, 51*b^4*c^5*d^5, 78*a^2*d^15, 117*a^2*c^15, 78*a^15*d^5, 117*a^15*c^5, 6*a^2*b^4*d^15, 9*a^2*b^4*c^15, 39*a^2*c^5*d^15, 39*a^2*c^15*d^5, 6*a^2*b^15*d^5, 9*a^2*b^15*c^5, 6*a^15*b^4*d^5, 9*a^15*b^4*c^5, 39*a^15*c^5*d^5, 3*a^2*b^4*c^5*d^15, 3*a^2*b^4*c^15*d^5, 3*a^2*b^15*c^5*d^5, 3*a^15*b^4*c^5*d^5\n\njulia> RI = radical(I)\nideal generated by: 102*b*d, 78*a*d, 51*b*c, 39*a*c, 6*a*b*d, 3*a*b*c\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Primary-Decomposition","page":"Ideals","title":"Primary Decomposition","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"primary_decomposition(I::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Oscar.primary_decomposition-Tuple{MPolyIdeal}","page":"Ideals","title":"Oscar.primary_decomposition","text":"primary_decomposition(I::MPolyIdeal)\n\nReturn a primary decomposition of I. If I is the unit ideal, return [ideal(1)].\n\nImplemented Algorithms\n\nIf the base ring of I is a polynomial ring over a field, the algorithm of Gianni, Trager and Zacharias  is used by default. Alternatively, the algorithm by Shimoyama and Yokoyama can be used by specifying  alg=:SY.  For polynomial rings over the integers, the algorithm proceeds as suggested by  Pfister, Sadiq, and Steidel. See Patrizia Gianni , Barry Trager , Gail Zacharias  (1988), Takeshi Shimoyama , Kazuhiro Yokoyama  (1996), and Gerhard Pfister , Afshan Sadiq , Stefan Steidel  (2011).\n\nExamples\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> I = intersect(ideal(R, [x, y])^2, ideal(R, [y^2-x^3+x]))\nideal generated by: x^3*y - x*y - y^3, x^4 - x^2 - x*y^2\n\njulia> I = intersect(I, ideal(R, [x-y-1])^2)\nideal generated by: x^5*y - 2*x^4*y^2 - 2*x^4*y + x^3*y^3 + 2*x^3*y^2 - x^2*y^3 + 2*x^2*y^2 + 2*x^2*y + 2*x*y^4 + x*y^3 - 2*x*y^2 - x*y - y^5 - 2*y^4 - y^3, x^6 - 2*x^5 - 3*x^4*y^2 - 2*x^4*y + 2*x^3*y^3 + 3*x^3*y^2 + 2*x^3*y + 2*x^3 + 5*x^2*y^2 + 2*x^2*y - x^2 + 3*x*y^4 - 5*x*y^2 - 2*x*y - 2*y^5 - 4*y^4 - 2*y^3\n\njulia> L = primary_decomposition(I)\n3-element Array{Tuple{MPolyIdeal{fmpq_mpoly},MPolyIdeal{fmpq_mpoly}},1}:\n (ideal generated by: x^3 - x - y^2, ideal generated by: x^3 - x - y^2)\n (ideal generated by: x^2 - 2*x*y - 2*x + y^2 + 2*y + 1, ideal generated by: x - y - 1)\n (ideal generated by: y, x^2, ideal generated by: x, y)\n\njulia> L = primary_decomposition(I, alg=:SY)\n3-element Array{Tuple{MPolyIdeal{fmpq_mpoly},MPolyIdeal{fmpq_mpoly}},1}:\n (ideal generated by: x^3 - x - y^2, ideal generated by: x^3 - x - y^2)\n (ideal generated by: x^2 - 2*x*y - 2*x + y^2 + 2*y + 1, ideal generated by: x - y - 1)\n (ideal generated by: y, x^2, ideal generated by: y, x)\n\njulia> R, (a, b, c, d) = PolynomialRing(ZZ, [\"a\", \"b\", \"c\", \"d\"])\n(Multivariate Polynomial Ring in a, b, c, d over Integer Ring, fmpz_mpoly[a, b, c, d])\n\njulia> I = ideal(R, [1326*a^2*d^5, 1989*a^2*c^5, 102*b^4*d^5, 153*b^4*c^5,\n       663*a^2*c^5*d^5, 51*b^4*c^5*d^5, 78*a^2*d^15, 117*a^2*c^15,\n       78*a^15*d^5, 117*a^15*c^5, 6*a^2*b^4*d^15, 9*a^2*b^4*c^15,\n       39*a^2*c^5*d^15, 39*a^2*c^15*d^5, 6*a^2*b^15*d^5, 9*a^2*b^15*c^5,\n       6*a^15*b^4*d^5, 9*a^15*b^4*c^5, 39*a^15*c^5*d^5, 3*a^2*b^4*c^5*d^15,\n       3*a^2*b^4*c^15*d^5, 3*a^2*b^15*c^5*d^5, 3*a^15*b^4*c^5*d^5])\nideal generated by: 1326*a^2*d^5, 1989*a^2*c^5, 102*b^4*d^5, 153*b^4*c^5, 663*a^2*c^5*d^5, 51*b^4*c^5*d^5, 78*a^2*d^15, 117*a^2*c^15, 78*a^15*d^5, 117*a^15*c^5, 6*a^2*b^4*d^15, 9*a^2*b^4*c^15, 39*a^2*c^5*d^15, 39*a^2*c^15*d^5, 6*a^2*b^15*d^5, 9*a^2*b^15*c^5, 6*a^15*b^4*d^5, 9*a^15*b^4*c^5, 39*a^15*c^5*d^5, 3*a^2*b^4*c^5*d^15, 3*a^2*b^4*c^15*d^5, 3*a^2*b^15*c^5*d^5, 3*a^15*b^4*c^5*d^5\n\njulia> L = primary_decomposition(I)\n8-element Array{Tuple{MPolyIdeal{fmpz_mpoly},MPolyIdeal{fmpz_mpoly}},1}:\n (ideal generated by: d^5, c^5, ideal generated by: d, c)\n (ideal generated by: a^2, b^4, ideal generated by: b, a)\n (ideal generated by: 2, c^5, ideal generated by: 2, c)\n (ideal generated by: 3, ideal generated by: 3)\n (ideal generated by: 13, b^4, ideal generated by: 13, b)\n (ideal generated by: 17, a^2, ideal generated by: 17, a)\n (ideal generated by: 17, d^15, c^15, b^15, a^15, ideal generated by: 17, d, c, b, a)\n (ideal generated by: 9, 3*d^5, d^10, ideal generated by: 3, d)\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Minimal-Associated-Primes","page":"Ideals","title":"Minimal Associated Primes","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"minimal_primes(I::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Oscar.minimal_primes-Tuple{MPolyIdeal}","page":"Ideals","title":"Oscar.minimal_primes","text":"minimal_primes(I::MPolyIdeal; alg=:GTZ)\n\nReturn an array containing the minimal associated prime ideals of I. If I is the unit ideal, return [ideal(1)].\n\nImplemented Algorithms\n\nIf the base ring of I is a polynomial ring over a field, the algorithm of Gianni-Trager-Zacharias is used by default and characteristic sets may be used by specifying alg=:charSets. For polynomial rings over the integers,  the algorithm proceeds as suggested by Pfister, Sadiq, and Steidel. See Patrizia Gianni , Barry Trager , Gail Zacharias  (1988) and Gerhard Pfister , Afshan Sadiq , Stefan Steidel  (2011).\n\nExamples\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> I = intersect(ideal(R, [x, y])^2, ideal(R, [y^2-x^3+x]))\nideal generated by: x^3*y - x*y - y^3, x^4 - x^2 - x*y^2\n\njulia> I = intersect(I, ideal(R, [x-y-1])^2)\nideal generated by: x^5*y - 2*x^4*y^2 - 2*x^4*y + x^3*y^3 + 2*x^3*y^2 - x^2*y^3 + 2*x^2*y^2 + 2*x^2*y + 2*x*y^4 + x*y^3 - 2*x*y^2 - x*y - y^5 - 2*y^4 - y^3, x^6 - 2*x^5 - 3*x^4*y^2 - 2*x^4*y + 2*x^3*y^3 + 3*x^3*y^2 + 2*x^3*y + 2*x^3 + 5*x^2*y^2 + 2*x^2*y - x^2 + 3*x*y^4 - 5*x*y^2 - 2*x*y - 2*y^5 - 4*y^4 - 2*y^3\n\njulia> L = minimal_primes(I)\n2-element Array{MPolyIdeal{fmpq_mpoly},1}:\n ideal generated by: x - y - 1\n ideal generated by: x^3 - x - y^2\n\njulia> L = minimal_primes(I, alg=:charSets)\n2-element Array{MPolyIdeal{fmpq_mpoly},1}:\n ideal generated by: x - y - 1\n ideal generated by: x^3 - x - y^2\n\njulia> R, (a, b, c, d) = PolynomialRing(ZZ, [\"a\", \"b\", \"c\", \"d\"])\n(Multivariate Polynomial Ring in a, b, c, d over Integer Ring, fmpz_mpoly[a, b, c, d])\n\njulia> I = ideal(R, [1326*a^2*d^5, 1989*a^2*c^5, 102*b^4*d^5, 153*b^4*c^5,\n       663*a^2*c^5*d^5, 51*b^4*c^5*d^5, 78*a^2*d^15, 117*a^2*c^15,\n       78*a^15*d^5, 117*a^15*c^5, 6*a^2*b^4*d^15, 9*a^2*b^4*c^15,\n       39*a^2*c^5*d^15, 39*a^2*c^15*d^5, 6*a^2*b^15*d^5, 9*a^2*b^15*c^5,\n       6*a^15*b^4*d^5, 9*a^15*b^4*c^5, 39*a^15*c^5*d^5, 3*a^2*b^4*c^5*d^15,\n       3*a^2*b^4*c^15*d^5, 3*a^2*b^15*c^5*d^5, 3*a^15*b^4*c^5*d^5])\nideal generated by: 1326*a^2*d^5, 1989*a^2*c^5, 102*b^4*d^5, 153*b^4*c^5, 663*a^2*c^5*d^5, 51*b^4*c^5*d^5, 78*a^2*d^15, 117*a^2*c^15, 78*a^15*d^5, 117*a^15*c^5, 6*a^2*b^4*d^15, 9*a^2*b^4*c^15, 39*a^2*c^5*d^15, 39*a^2*c^15*d^5, 6*a^2*b^15*d^5, 9*a^2*b^15*c^5, 6*a^15*b^4*d^5, 9*a^15*b^4*c^5, 39*a^15*c^5*d^5, 3*a^2*b^4*c^5*d^15, 3*a^2*b^4*c^15*d^5, 3*a^2*b^15*c^5*d^5, 3*a^15*b^4*c^5*d^5\n\njulia> L = minimal_primes(I)\n6-element Array{MPolyIdeal{fmpz_mpoly},1}:\n ideal generated by: d, c\n ideal generated by: b, a\n ideal generated by: 2, c\n ideal generated by: 3\n ideal generated by: 13, b\n ideal generated by: 17, a\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Weak-Equidimensional-Decomposition","page":"Ideals","title":"Weak Equidimensional Decomposition","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"equidimensional_decomposition_weak(I::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Oscar.equidimensional_decomposition_weak-Tuple{MPolyIdeal}","page":"Ideals","title":"Oscar.equidimensional_decomposition_weak","text":"equidimensional_decomposition_weak(I::MPolyIdeal)\n\nReturn an array of equidimensional ideals where the last element is the equidimensional hull of I, that is, the intersection of the primary components of I of maximal dimension. Each of the previous elements is an ideal of lower dimension whose associated primes are exactly the associated primes of I of that dimension. If I is the unit ideal, return [ideal(1)].\n\nImplemented Algorithms\n\nThe implementation relies on ideas of Eisenbud, Huneke, and Vasconcelos. See David Eisenbud , Craig Huneke , Wolmer Vasconcelos  (1992). \n\nExample\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> I = intersect(ideal(R, [x, y])^2, ideal(R, [y^2-x^3+x]))\nideal generated by: x^3*y - x*y - y^3, x^4 - x^2 - x*y^2\n\njulia> I = intersect(I, ideal(R, [x-y-1])^2)\nideal generated by: x^5*y - 2*x^4*y^2 - 2*x^4*y + x^3*y^3 + 2*x^3*y^2 - x^2*y^3 + 2*x^2*y^2 + 2*x^2*y + 2*x*y^4 + x*y^3 - 2*x*y^2 - x*y - y^5 - 2*y^4 - y^3, x^6 - 2*x^5 - 3*x^4*y^2 - 2*x^4*y + 2*x^3*y^3 + 3*x^3*y^2 + 2*x^3*y + 2*x^3 + 5*x^2*y^2 + 2*x^2*y - x^2 + 3*x*y^4 - 5*x*y^2 - 2*x*y - 2*y^5 - 4*y^4 - 2*y^3\n\njulia> L = equidimensional_decomposition_weak(I)\n2-element Array{MPolyIdeal{fmpq_mpoly},1}:\n ideal generated by: y, x\n ideal generated by: x^5 - 2*x^4*y - 2*x^4 + x^3*y^2 + 2*x^3*y - x^2*y^2 + 2*x^2*y + 2*x^2 + 2*x*y^3 + x*y^2 - 2*x*y - x - y^4 - 2*y^3 - y^2\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Equidimensional-Decomposition-of-radical","page":"Ideals","title":"Equidimensional Decomposition of radical","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"equidimensional_decomposition_radical(I::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Oscar.equidimensional_decomposition_radical-Tuple{MPolyIdeal}","page":"Ideals","title":"Oscar.equidimensional_decomposition_radical","text":"equidimensional_decomposition_radical(I::MPolyIdeal)\n\nReturn an array of equidimensional radical ideals increasingly ordered by dimension. For each dimension, the returned radical ideal is the intersection of the associated primes  of I of that dimension. If I is the unit ideal, return [ideal(1)].\n\nImplemented Algorithms\n\nThe implementation combines the algorithms of Krick and Logar (with modifications by Laplagne) and Kemper. See Teresa Krick , Alessandro Logar  (1991) and Gregor Kemper  (2002).\n\nExample\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> I = intersect(ideal(R, [x, y])^2, ideal(R, [y^2-x^3+x]))\nideal generated by: x^3*y - x*y - y^3, x^4 - x^2 - x*y^2\n\njulia> I = intersect(I, ideal(R, [x-y-1])^2)\nideal generated by: x^5*y - 2*x^4*y^2 - 2*x^4*y + x^3*y^3 + 2*x^3*y^2 - x^2*y^3 + 2*x^2*y^2 + 2*x^2*y + 2*x*y^4 + x*y^3 - 2*x*y^2 - x*y - y^5 - 2*y^4 - y^3, x^6 - 2*x^5 - 3*x^4*y^2 - 2*x^4*y + 2*x^3*y^3 + 3*x^3*y^2 + 2*x^3*y + 2*x^3 + 5*x^2*y^2 + 2*x^2*y - x^2 + 3*x*y^4 - 5*x*y^2 - 2*x*y - 2*y^5 - 4*y^4 - 2*y^3\n\njulia> L = equidimensional_decomposition_radical(I)\n2-element Array{MPolyIdeal{fmpq_mpoly},1}:\n ideal generated by: y, x\n ideal generated by: x^4 - x^3*y - x^3 - x^2 - x*y^2 + x*y + x + y^3 + y^2\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Equidimensional-Hull","page":"Ideals","title":"Equidimensional Hull","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"equidimensional_hull(I::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Oscar.equidimensional_hull-Tuple{MPolyIdeal}","page":"Ideals","title":"Oscar.equidimensional_hull","text":"equidimensional_hull(I::MPolyIdeal)\n\nIf the base ring of I is a polynomial ring over a field, return the intersection of the primary components of I of maximal dimension. In the case of polynomials over the integers, return the intersection of the primary components of I of minimal height.  If I is the unit ideal, return [ideal(1)]. \n\nImplemented Algorithms\n\nFor polynomial rings over a field, the implementation relies on ideas as used by Gianni, Trager, and Zacharias or Krick and Logar. For polynomial rings over the integers,  the algorithm proceeds as suggested by Pfister, Sadiq, and Steidel. See Patrizia Gianni , Barry Trager , Gail Zacharias  (1988), Teresa Krick , Alessandro Logar  (1991),  and Gerhard Pfister , Afshan Sadiq , Stefan Steidel  (2011).\n\nExamples\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> I = intersect(ideal(R, [x, y])^2, ideal(R, [y^2-x^3+x]))\nideal generated by: x^3*y - x*y - y^3, x^4 - x^2 - x*y^2\n\njulia> I = intersect(I, ideal(R, [x-y-1])^2)\nideal generated by: x^5*y - 2*x^4*y^2 - 2*x^4*y + x^3*y^3 + 2*x^3*y^2 - x^2*y^3 + 2*x^2*y^2 + 2*x^2*y + 2*x*y^4 + x*y^3 - 2*x*y^2 - x*y - y^5 - 2*y^4 - y^3, x^6 - 2*x^5 - 3*x^4*y^2 - 2*x^4*y + 2*x^3*y^3 + 3*x^3*y^2 + 2*x^3*y + 2*x^3 + 5*x^2*y^2 + 2*x^2*y - x^2 + 3*x*y^4 - 5*x*y^2 - 2*x*y - 2*y^5 - 4*y^4 - 2*y^3\n\njulia> L = equidimensional_hull(I)\nideal generated by: x^5 - 2*x^4*y - 2*x^4 + x^3*y^2 + 2*x^3*y - x^2*y^2 + 2*x^2*y + 2*x^2 + 2*x*y^3 + x*y^2 - 2*x*y - x - y^4 - 2*y^3 - y^2\n\njulia> R, (a, b, c, d) = PolynomialRing(ZZ, [\"a\", \"b\", \"c\", \"d\"])\n(Multivariate Polynomial Ring in a, b, c, d over Integer Ring, fmpz_mpoly[a, b, c, d])\n\njulia> I = ideal(R, [1326*a^2*d^5, 1989*a^2*c^5, 102*b^4*d^5, 153*b^4*c^5,\n       663*a^2*c^5*d^5, 51*b^4*c^5*d^5, 78*a^2*d^15, 117*a^2*c^15,\n       78*a^15*d^5, 117*a^15*c^5, 6*a^2*b^4*d^15, 9*a^2*b^4*c^15,\n       39*a^2*c^5*d^15, 39*a^2*c^15*d^5, 6*a^2*b^15*d^5, 9*a^2*b^15*c^5,\n       6*a^15*b^4*d^5, 9*a^15*b^4*c^5, 39*a^15*c^5*d^5, 3*a^2*b^4*c^5*d^15,\n       3*a^2*b^4*c^15*d^5, 3*a^2*b^15*c^5*d^5, 3*a^15*b^4*c^5*d^5])\nideal generated by: 1326*a^2*d^5, 1989*a^2*c^5, 102*b^4*d^5, 153*b^4*c^5, 663*a^2*c^5*d^5, 51*b^4*c^5*d^5, 78*a^2*d^15, 117*a^2*c^15, 78*a^15*d^5, 117*a^15*c^5, 6*a^2*b^4*d^15, 9*a^2*b^4*c^15, 39*a^2*c^5*d^15, 39*a^2*c^15*d^5, 6*a^2*b^15*d^5, 9*a^2*b^15*c^5, 6*a^15*b^4*d^5, 9*a^15*b^4*c^5, 39*a^15*c^5*d^5, 3*a^2*b^4*c^5*d^15, 3*a^2*b^4*c^15*d^5, 3*a^2*b^15*c^5*d^5, 3*a^15*b^4*c^5*d^5\n\njulia> L = equidimensional_hull(I)\nideal generated by: 3\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Radical-of-the-Equidimensional-Hull","page":"Ideals","title":"Radical of the Equidimensional Hull","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"equidimensional_hull_radical(I::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_ideals/#Oscar.equidimensional_hull_radical-Tuple{MPolyIdeal}","page":"Ideals","title":"Oscar.equidimensional_hull_radical","text":"equidimensional_hull_radical(I::MPolyIdeal)\n\nReturn the intersection of the associated primes of I of maximal dimension. If I is the unit ideal, return [ideal(1)]. \n\nImplemented Algorithms\n\nThe implementation relies on a combination of the algorithms of Krick and Logar  (with modifications by Laplagne) and Kemper. See Teresa Krick , Alessandro Logar  (1991) and Gregor Kemper  (2002).\n\nExample\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> I = intersect(ideal(R, [x, y])^2, ideal(R, [y^2-x^3+x]))\nideal generated by: x^3*y - x*y - y^3, x^4 - x^2 - x*y^2\n\njulia> I = intersect(I, ideal(R, [x-y-1])^2)\nideal generated by: x^5*y - 2*x^4*y^2 - 2*x^4*y + x^3*y^3 + 2*x^3*y^2 - x^2*y^3 + 2*x^2*y^2 + 2*x^2*y + 2*x*y^4 + x*y^3 - 2*x*y^2 - x*y - y^5 - 2*y^4 - y^3, x^6 - 2*x^5 - 3*x^4*y^2 - 2*x^4*y + 2*x^3*y^3 + 3*x^3*y^2 + 2*x^3*y + 2*x^3 + 5*x^2*y^2 + 2*x^2*y - x^2 + 3*x*y^4 - 5*x*y^2 - 2*x*y - 2*y^5 - 4*y^4 - 2*y^3\n\njulia> L = equidimensional_hull_radical(I)\nideal generated by: x^4 - x^3*y - x^3 - x^2 - x*y^2 + x*y + x + y^3 + y^2\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_ideals/#Absolute-Primary-Decomposition","page":"Ideals","title":"Absolute Primary Decomposition","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_ideals/","page":"Ideals","title":"Ideals","text":"absolute_primary_decomposition(I)               --->  absPrimdecGTZ","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/module/#Module-Interface","page":"Module Interface","title":"Module Interface","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Note: the module infrastructure in AbstractAlgebra should be considered experimental at this stage. This means that the interface may change in the future.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"AbstractAlgebra allows the construction of finitely presented modules (i.e. with finitely many generators and relations), starting from free modules. The generic code provided by AbstractAlgebra will only work for modules over euclidean domains, however there is nothing preventing a library from implementing more general modules using the same interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"All finitely presented module types in AbstractAlgebra follow the following interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Free modules can be built over both commutative and noncommutative rings. Other types of module are restricted to fields and euclidean rings.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/#Types-and-parents","page":"Module Interface","title":"Types and parents","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"AbstractAlgebra provides two abstract types for finitely presented modules and their elements:","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"FPModule{T} is the abstract type for finitely presented module parent","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"types","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"FPModuleElem{T} is the abstract type for finitely presented module","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"element types","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Note that the abstract types are parameterised. The type T should usually be the type of elements of the ring the module is over.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/#Required-functionality-for-modules","page":"Module Interface","title":"Required functionality for modules","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"We suppose that R is a fictitious base ring and that S is a module over R with parent object S of type MyModule{T}. We also assume the elements in the module have type MyModuleElem{T}, where T is the type of elements of the ring the module is over.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Of course, in practice these types may not be parameterised, but we use parameterised types here to make the interface clearer.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Note that the type T must (transitively) belong to the abstract type RingElement or NCRingElem.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"We describe the functionality below for modules over commutative rings, i.e. with element type belonging to RingElement, however similar constructors should be available for element types belonging to NCRingElem instead, for free modules over a noncommutative ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Although not part of the module interface, implementations of modules that wish to follow our interface should use the same function names for submodules, quotient modules, direct sums and module homomorphisms if they wish to remain compatible with our module generics in the future.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/#Basic-manipulation","page":"Module Interface","title":"Basic manipulation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"iszero(m::MyModuleElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Return true if the given module element is zero.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"ngens(M::MyModule{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Return the number of generators of the module M in its current representation.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"gen(M::MyModule{T}, i::Int) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Return the i-th generator (indexed from 1) of the module M.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"gens(M::MyModule{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Return a Julia array of the generators of the module M.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"rels(M::MyModule{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Return a Julia vector of all the relations between the generators of M. Each relation is given as an AbstractAlgebra row matrix.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"julia> M = FreeModule(QQ, 2)\nVector space of dimension 2 over Rationals\n\njulia> n = ngens(M)\n2\n\njulia> G = gens(M)\n2-element Array{AbstractAlgebra.Generic.FreeModuleElem{Rational{BigInt}},1}:\n (1//1, 0//1)\n (0//1, 1//1)\n\njulia> R = rels(M)\nAbstractAlgebra.Generic.MatSpaceElem{Rational{BigInt}}[]\n\njulia> g1 = gen(M, 1)\n(1//1, 0//1)\n\njulia> !iszero(g1)\ntrue\n","category":"page"},{"location":"AbstractAlgebra/docs/src/module/#Element-constructors","page":"Module Interface","title":"Element constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"We can construct elements of a module M by specifying linear combinations of the generators of M. This is done by passing a vector of ring elements.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"(M::AbstractAlgebra.Module{T})(v::Vector{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Construct the element of the module M corrsponding to sum_i givi where gi are the generators of the module M. The resulting element will lie in the module M.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/#Coercions","page":"Module Interface","title":"Coercions","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Given a module M and an element n of a module N, it is possible to coerce n into M using the notation M(n) in certain circumstances.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"In particular the element n will be automatically coerced along any canonical injection of a submodule map and along any canonical projection of a quotient map. There must be a path from N to M along such maps.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"F = FreeModule(ZZ, 3)\n\nS1, f = sub(F, [rand(F, -10:10)])\n\nS, g = sub(F, [rand(F, -10:10)])\nQ, h = quo(F, S)\n\nm = rand(S1, -10:10)\nn = Q(m)","category":"page"},{"location":"AbstractAlgebra/docs/src/module/#Arithmetic-operators","page":"Module Interface","title":"Arithmetic operators","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Elements of a module can be added, subtracted or multiplied by an element of the ring the module is defined over and compared for equality.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"In the case of a noncommutative ring, both left and right scalar multiplication are defined.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/#Generic-functionality-provided","page":"Module Interface","title":"Generic functionality provided","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"AbstractAlgebra provides the following functionality for all module types that implement the interface above. Of course, this functionality can also be provided by special implementations if desired.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/#Basic-manipulation-2","page":"Module Interface","title":"Basic manipulation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"zero(M::AbstractAlgebra.FPModule{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/module/#Base.zero-Union{Tuple{AbstractAlgebra.FPModule{T}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Module Interface","title":"Base.zero","text":"zero(M::AbstractAlgebra.FPModule{T}) where T <: RingElement\n\nReturn the zero element of the module M.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"julia> M = FreeModule(QQ, 2)\nVector space of dimension 2 over Rationals\n\njulia> z = zero(M)\n(0//1, 0//1)","category":"page"},{"location":"AbstractAlgebra/docs/src/module/#Element-indexing","page":"Module Interface","title":"Element indexing","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Base.getindex(m::AbstractAlgebra.FPModuleElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/module/#Base.getindex-Union{Tuple{AbstractAlgebra.FPModuleElem{T}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Module Interface","title":"Base.getindex","text":"getindex(A::SMat, i::Int, j::Int)\n\nGiven a sparse matrix A = (a_ij)_i j, return the entry a_ij.\n\n\n\ngetindex(A::SMat, i::Int) -> SRow\n\nGiven a sparse matrix A and an index i, return the i-th row of A.\n\n\n\ngetindex(a::Fac, b) -> Int\n\nIf b is a factor of a, the corresponding exponent is returned. Otherwise an error is thrown.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"julia> F = FreeModule(ZZ, 3)\nFree module of rank 3 over Integers\n\njulia> m = F(BigInt[2, -5, 4])\n(2, -5, 4)\n\njulia> m[1]\n2","category":"page"},{"location":"AbstractAlgebra/docs/src/module/#Comparison","page":"Module Interface","title":"Comparison","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"==(::AbstractAlgebra.FPModule{T}, ::AbstractAlgebra.FPModule{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/module/#Base.:==-Union{Tuple{T}, Tuple{AbstractAlgebra.FPModule{T},AbstractAlgebra.FPModule{T}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Module Interface","title":"Base.:==","text":"==(M::AbstractAlgebra.FPModule{T}, N::AbstractAlgebra.FPModule{T}) where T <: RingElement\n\nReturn true if the modules are (constructed to be) the same module elementwise. This is not object equality and it is not isomorphism. In fact, each method of constructing modules (submodules, quotient modules, products, etc.) must extend this notion of equality to the modules they create.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"julia> M = FreeModule(QQ, 2)\nVector space of dimension 2 over Rationals\n\njulia> M == M\ntrue\n","category":"page"},{"location":"AbstractAlgebra/docs/src/module/#Isomorphism","page":"Module Interface","title":"Isomorphism","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"isisomorphic(::AbstractAlgebra.FPModule{T}, ::AbstractAlgebra.FPModule{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/module/#AbstractAlgebra.Generic.isisomorphic-Union{Tuple{T}, Tuple{AbstractAlgebra.FPModule{T},AbstractAlgebra.FPModule{T}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Module Interface","title":"AbstractAlgebra.Generic.isisomorphic","text":"isisomorphic(M::AbstractAlgebra.FPModule{T}, N::AbstractAlgebra.FPModule{T}) where T <: RingElement\n\nReturn true if the modules M and N are isomorphic.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Note that this function relies on the Smith normal form over the base ring of the modules being able to be made unique. This is true for Euclidean domains for which divrem has a fixed choice of quotient and remainder, but it will not in general be true for Euclidean rings that are not domains.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"julia> M = FreeModule(ZZ, 3)\nFree module of rank 3 over Integers\n\njulia> m1 = rand(M, -10:10)\n(0, -8, -8)\n\njulia> m2 = rand(M, -10:10)\n(-7, -5, -10)\n\njulia> S, f = sub(M, [m1, m2])\n(Submodule over Integers with 2 generators and no relations\n, Module homomorphism with\nDomain: Submodule over Integers with 2 generators and no relations\n\nCodomain: Free module of rank 3 over Integers)\n\njulia> I, g = image(f)\n(Submodule over Integers with 2 generators and no relations\n, Module homomorphism with\nDomain: Submodule over Integers with 2 generators and no relations\n\nCodomain: Free module of rank 3 over Integers)\n\njulia> isisomorphic(S, I)\ntrue\n","category":"page"},{"location":"AbstractAlgebra/docs/src/module/#Invariant-Factor-Decomposition","page":"Module Interface","title":"Invariant Factor Decomposition","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"For modules over a euclidean domain one can take the invariant factor decomposition to determine the structure of the module. The invariant factors are unique up to multiplication by a unit, and even unique if a  canonical_unit is available for the ring that canonicalises elements.","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"snf(::AbstractAlgebra.FPModule{T}) where T <: RingElement\ninvariant_factors(::AbstractAlgebra.FPModule{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/module/#AbstractAlgebra.Generic.snf-Union{Tuple{AbstractAlgebra.FPModule{T}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Module Interface","title":"AbstractAlgebra.Generic.snf","text":"snf(m::AbstractAlgebra.FPModule{T}) where T <: RingElement\n\nReturn a pair M, f consisting of the invariant factor decomposition M of the module m and a module homomorphism (isomorphisms) f  M to m. The module M is itself a module which can be manipulated as any other module in the system.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/module/#AbstractAlgebra.Generic.invariant_factors-Union{Tuple{AbstractAlgebra.FPModule{T}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Module Interface","title":"AbstractAlgebra.Generic.invariant_factors","text":"invariant_factors(m::AbstractAlgebra.FPModule{T}) where T <: RingElement\n\nReturn a vector of the invariant factors of the module M.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/module/","page":"Module Interface","title":"Module Interface","text":"julia> M = FreeModule(ZZ, 3)\nFree module of rank 3 over Integers\n\njulia> m1 = rand(M, -10:10)\n(9, 7, 7)\n\njulia> m2 = rand(M, -10:10)\n(-6, 2, -8)\n\njulia> S, f = sub(M, [m1, m2])\n(Submodule over Integers with 2 generators and no relations\n, Module homomorphism with\nDomain: Submodule over Integers with 2 generators and no relations\n\nCodomain: Free module of rank 3 over Integers)\n\njulia> Q, g = quo(M, S)\n(Quotient module over Integers with 3 generators and relations:\n[3 9 -1], [0 20 -10], Module homomorphism with\nDomain: Free module of rank 3 over Integers\nCodomain: Quotient module over Integers with 3 generators and relations:\n[3 9 -1], [0 20 -10])\n\njulia> I, f = snf(Q)\n(Invariant factor decomposed module over Integers with invariant factors BigInt[10, 0], Module homomorphism with\nDomain: Invariant factor decomposed module over Integers with invariant factors BigInt[10, 0]\nCodomain: Quotient module over Integers with 3 generators and relations:\n[3 9 -1], [0 20 -10])\n\njulia> invs = invariant_factors(Q)\n2-element Array{BigInt,1}:\n 10\n  0\n","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/#Univariate-Polynomial-Ring-Interface","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Univariate polynomial rings are supported in AbstractAlgebra, and in addition to the standard Ring interface, numerous additional functions are required to be present for univariate polynomial rings.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Univariate polynomial rings can be built over both commutative and noncommutative rings.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Univariate polynomial rings over a field are also Euclidean and therefore such rings must implement the Euclidean interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Since a sparse distributed multivariate format can generally also handle sparse univariate polynomials, the univariate polynomial interface is designed around the assumption that they are dense. This is not a requirement, but it may be easier to use the multivariate interface for sparse univariate types.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/#Types-and-parents","page":"Univariate Polynomial Ring Interface","title":"Types and parents","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"AbstractAlgebra provides two abstract types for polynomial rings and their elements over a commutative ring:","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"PolyRing{T} is the abstract type for univariate polynomial ring parent types\nPolyElem{T} is the abstract type for univariate polynomial types","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Similarly there are two abstract types for polynomial rings and their elements over a noncommutative ring:","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"NCPolyRing{T} is the abstract type for univariate polynomial ring parent types\nNCPolyElem{T} is the abstract type for univariate polynomial types","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"We have that PolyRing{T} <: AbstractAlgebra.Ring and PolyElem{T} <: AbstractAlgebra.RingElem. Similarly we have that NCPolyRing{T} <: AbstractAlgebra.NCRing and  NCPolyElem{T} <: AbstractAlgebra.NCRingElem.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Note that the abstract types are parameterised. The type T should usually be the type of elements of the coefficient ring of the polynomial ring. For example, in the case of mathbbZx the type T would be the type of an integer, e.g. BigInt.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"If the parent object for such a ring has type MyZX and polynomials in that ring have type MyZXPoly then one would have:","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"MyZX <: PolyRing{BigInt}\nMyZXPoly <: PolyElem{BigInt}","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Polynomial rings should be made unique on the system by caching parent objects (unless an optional cache parameter is set to false). Polynomial rings should at least be distinguished based on their base (coefficient) ring. But if they have the same base ring and symbol (for their variable/generator), they should certainly have the same parent object.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"See src/generic/GenericTypes.jl for an example of how to implement such a cache (which usually makes use of a dictionary).","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/#Required-functionality-for-univariate-polynomials","page":"Univariate Polynomial Ring Interface","title":"Required functionality for univariate polynomials","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"In addition to the required functionality for the Ring/NCRing interface (and in the case of polynomials over a field, the Euclidean Ring interface), the Polynomial Ring interface has the following required functions.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"We suppose that R is a fictitious base ring (coefficient ring) and that S is a univariate polynomial ring over R (i.e. S = Rx) with parent object S of type MyPolyRing{T}. We also assume the polynomials in the ring have type MyPoly{T}, where T is the type of elements of the base (coefficient) ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Of course, in practice these types may not be parameterised, but we use parameterised types here to make the interface clearer.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Note that the type T must (transitively) belong to the abstract type RingElem or NCRingElem.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"We describe the functionality below for polynomials over commutative rings, i.e. with element type belonging to RingElem, however similar constructors should be available for element types belonging to NCRingElem instead, if the coefficient ring is noncommutative.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/#Constructors","page":"Univariate Polynomial Ring Interface","title":"Constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"In addition to the standard constructors, the following constructors, taking an array of coefficients, must be available.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"(S::MyPolyRing{T})(A::Array{T, 1}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Create the polynomial in the given ring whose degree i coefficient is given by A[i].","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"(S::MyPolyRing{T})(A::Array{U, 1}) where T <: AbstractAlgebra.RingElem, U <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Create the polynomial in the given ring whose degree i coefficient is given by A[i]. The elements of the array are assumed to be able to be coerced into the base ring R.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"(S::MyPolyRing{T})(A::Array{U, 1}) where T <: AbstractAlgebra.RingElem, U <: Integer","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Create the polynomial in the given ring whose degree i coefficient is given by A[i].","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"It may be desirable to have a additional version of the function that accepts an array of Julia Int values  if this can be done more efficiently.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"julia> S, x = PolynomialRing(QQ, \"x\")\n(Univariate Polynomial Ring in x over Rationals, x)\n\njulia> f = S(Rational{BigInt}[2, 3, 1])\nx^2 + 3*x + 2\n\njulia> g = S(BigInt[1, 0, 4])\n4*x^2 + 1\n\njulia> h = S([4, 7, 2, 9])\n9*x^3 + 2*x^2 + 7*x + 4\n","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/#Data-type-and-parent-object-methods","page":"Univariate Polynomial Ring Interface","title":"Data type and parent object methods","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"var(S::MyPolyRing{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Return a Symbol representing the variable (generator) of the polynomial ring. Note that this is a Symbol not a String, though its string value will usually be used when printing polynomials.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"symbols(S::MyPolyRing{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Return the array [s] where s is a Symbol representing the variable of the given polynomial ring. This is provided for uniformity with the multivariate interface, where there is more than one variable and hence an array of symbols.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"julia> S, x = PolynomialRing(QQ, \"x\")\n(Univariate Polynomial Ring in x over Rationals, x)\n\njulia> vsym = var(S)\n:x\n\njulia> V = symbols(S)\n1-element Array{Symbol,1}:\n :x\n","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/#Basic-manipulation-of-rings-and-elements","page":"Univariate Polynomial Ring Interface","title":"Basic manipulation of rings and elements","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"length(f::MyPoly{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Return the length of the given polynomial. The length of the zero polynomial is defined to be 0, otherwise the length is the degree plus 1. The return value should be of type Int.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"set_length!(f::MyPoly{T}, n::Int) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"This function must zero any coefficients beyond the requested length n and then set the length of the polynomial to n. This function does not need to normalise the polynomial and is not useful to the user, but is used extensively by the AbstractAlgebra generic functionality.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"This function returns the resulting polynomial.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"coeff(f::MyPoly{T}, n::Int) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Return the coefficient of the polynomial f of degree n. If n is larger than the degree of the polynomial, it should return zero in the coefficient ring. ","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"setcoeff!(f::MyPoly{T}, n::Int, a::T) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Set the degree n coefficient of f to a. This mutates the polynomial in-place if possible and returns the mutated polynomial (so that immutable types can also be supported). The function must not assume that the polynomial already has space for n + 1 coefficients. The polynomial must be resized if this is not the case.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Note that this function is not required to normalise the polynomial and is not necessarily useful to the user, but is used extensively by the generic functionality in AbstractAlgebra.jl. It is for setting raw coefficients in the representation.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"normalise(f::MyPoly{T}, n::Int) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Given a polynomial whose length is currently n, including any leading zero coefficients, return the length of the normalised polynomial (either zero or the length of the polynomial with nonzero leading coefficient). Note that the function does not actually perform the normalisation.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"fit!(f::MyPoly{T}, n::Int) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Ensure that the polynomial f internally has space for n coefficients. This function must mutate the function in-place if it is mutable. It does not return the mutated polynomial. Immutable types can still be supported by defining this function to do nothing.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Some interfaces for C polynomial types automatically manage the internal allocation of polynomials in every function that can be called on them. Explicit adjustment by the generic code in AbstractAlgebra.jl is not required. In such cases, this function can also be defined to do nothing.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"julia> S, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integers, x)\n\njulia> f = x^3 + 3x + 1\nx^3 + 3*x + 1\n\njulia> g = S(BigInt[1, 2, 0, 1, 0, 0, 0]);\n\njulia> n = length(f)\n4\n\njulia> c = coeff(f, 1)\n3\n\njulia> g = set_length!(g, normalise(g, 7))\nx^3 + 2*x + 1\n\njulia> g = setcoeff!(g, 2, BigInt(11))\nx^3 + 11*x^2 + 2*x + 1\n\njulia> fit!(g, 8)\n\njulia> g = setcoeff!(g, 7, BigInt(4))\n4*x^7 + x^3 + 11*x^2 + 2*x + 1","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/#Optional-functionality-for-polynomial-rings","page":"Univariate Polynomial Ring Interface","title":"Optional functionality for polynomial rings","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Sometimes parts of the Euclidean Ring interface can and should be implemented for polynomials over a ring that is not necessarily a field.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"When divisibility testing can be implemented for a polynomial ring over a field, it  should be possible to implement the following functions from the Euclidean Ring interface:","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"divides\nremove\nvaluation","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"When the given polynomial ring is a GCD domain, with an effective GCD algorithm, it may be possible to implement the following functions:","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"gcd\nlcm","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Polynomial rings can optionally implement any part of the generic univariate polynomial functionality provided by AbstractAlgebra.jl, using the same interface. ","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial_rings/","page":"Univariate Polynomial Ring Interface","title":"Univariate Polynomial Ring Interface","text":"Obviously additional functionality can also be added to that provided by AbstractAlgebra.jl on an ad hoc basis.","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"CurrentModule = Oscar","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"using Oscar","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"Pages = [\"ca_affine_algebras.md\"]","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Affine-Algebras","page":"Affine Algebras","title":"Affine Algebras","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"An affine algebra over a field K, or an affine K-algebra, or simply an affine ring, is the quotient A=RI of a multivariate polynomial ring R over K modulo an ideal I of A.","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Constructor","page":"Affine Algebras","title":"Constructor","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"quo(R::MPolyRing, I::MPolyIdeal)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#AbstractAlgebra.quo-Tuple{MPolyRing,MPolyIdeal}","page":"Affine Algebras","title":"AbstractAlgebra.quo","text":"quo(R::MPolyRing, I::MPolyIdeal) -> MPolyQuoRing, Map\n\nCreates the affine ring RI and returns the new ring as well as the projection map Rrightarrow RI.\n\nExample\n\njulia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rational Field, fmpq_mpoly[x, y])\n\njulia> A, _ = quo(R, ideal(R, [x^2-y^3, x-y]))\n(Quotient of Multivariate Polynomial Ring in x, y over Rational Field by ideal generated by: x^2 - y^3, x - y, Map from\nMultivariate Polynomial Ring in x, y over Rational Field to Quotient of Multivariate Polynomial Ring in x, y over Rational Field by ideal generated by: x^2 - y^3, x - y defined by a julia-function with inverse\n)\n\njulia> A, f = quo(R, ideal(R, [x^2-y^3, x-y]))\n(Quotient of Multivariate Polynomial Ring in x, y over Rational Field by ideal generated by: x^2 - y^3, x - y, Map from\nMultivariate Polynomial Ring in x, y over Rational Field to Quotient of Multivariate Polynomial Ring in x, y over Rational Field by ideal generated by: x^2 - y^3, x - y defined by a julia-function with inverse\n)\n\njulia> f\nMap from\nMultivariate Polynomial Ring in x, y over Rational Field to Quotient of Multivariate Polynomial Ring in x, y over Rational Field by ideal generated by: x^2 - y^3, x - y defined by a julia-function with inverse\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Data-Associated-to-Affine-Algebras","page":"Affine Algebras","title":"Data Associated to Affine Algebras","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Basic-Data","page":"Affine Algebras","title":"Basic Data","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"If A = R/I is an affine algebra, then","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"base_ring(A) refers to R,\nmodulus(A) to I,\ngens(A) to the generators of A, and\nngens(A) to the number of these generators.","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"R, (x, y, z) = PolynomialRing(QQ, [\"x\", \"y\", \"z\"])\nA, _ = quo(R, ideal(R, [y-x^2, x-z^3]))\nbase_ring(A)\nmodulus(A)\ngens(A)\nngens(A)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Dimension","page":"Affine Algebras","title":"Dimension","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"dim(A::MPolyQuo)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#AbstractAlgebra.Generic.dim-Tuple{Oscar.MPolyQuo}","page":"Affine Algebras","title":"AbstractAlgebra.Generic.dim","text":"dim(A::MPolyQuo)\n\nReturn the dimension of A.\n\nExample\n\njulia> R, (x, y, z) = PolynomialRing(QQ, [\"x\", \"y\", \"z\"])\n(Multivariate Polynomial Ring in x, y, z over Rational Field, fmpq_mpoly[x, y, z])\n\njulia> A, _ = quo(R, ideal(R, [y-x^2, x-z^3]))\n(Quotient of Multivariate Polynomial Ring in x, y, z over Rational Field by ideal generated by: -x^2 + y, x - z^3, Map from\nMultivariate Polynomial Ring in x, y, z over Rational Field to Quotient of Multivariate Polynomial Ring in x, y, z over Rational Field by ideal generated by: -x^2 + y, x - z^3 defined by a julia-function with inverse\n)\n\njulia> dim(A)\n1\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Hilbert-Series-and-Hilbert-Polynomial","page":"Affine Algebras","title":"Hilbert Series and Hilbert Polynomial","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"Let R=Kx_1 dots x_n be a polynomial ring in n variables over a field K. Assign positive integer weights w_i to the variables x_i, and grade R=bigoplus_dgeq 0 R_d according to the corresponding weighted degree. Let I be an ideal of R which is homogeneous with respect to this grading. Then the affine K-algebra A=RI inherits the grading: A = bigoplus_dgeq 0 A_d, where each graded piece A_d is a finite dimensional K-vector space. In this situation, the Hilbert function of A is the function","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"H(A underlinephantomd) N rightarrow N d mapsto dim_K(d)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"The Hilbert series of A is the generating function","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"H_A(t)=sum_dgeq 0 H(A d) t^d","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"It can be written as a rational function in t, say, with denominator","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"(1-t^w_1)cdots (1-t^w_n)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"Now suppose that the weights on the variables are all 1. Then we also have the Hilbert polynomial P_A(t)inmathbbQt which satisfies H(Md)=P_M(d) for all d gg 0. Furthermore, the degree of A is defined as the dimension of A over K if this dimension is finite, and as the integer d such that the leading term of the Hilbert polynomial has the form d t^ee, otherwise.","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"CAVEAT: Currently only implemented in the case where the weights on the variables are all 1.","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"hilbert_series(A::Union{MPolyRing, MPolyQuo})","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Oscar.hilbert_series-Tuple{Union{MPolyRing, Oscar.MPolyQuo}}","page":"Affine Algebras","title":"Oscar.hilbert_series","text":"hilbert_series(A::Union{MPolyRing, MPolyQuo})\n\nGiven a graded affine algebra A over a field K, return a pair (pq), say,  of univariate polynomials in t with integer coefficients such that: If A = RI, where R is a multivariate polynomial ring in n variables over K, with positive integer weights w_1 dots w_n assigned to the variables, and I is a homogeneous ideal of R when we grade R according to the corresponding  weighted degree, then pq represents the Hilbert series of A as a rational function with denominator q = (1-t^w_1)cdots (1-t^w_n). \n\nSee also hilbert_series_reduced.\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"hilbert_series_reduced(A::Union{MPolyRing, MPolyQuo})","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Oscar.hilbert_series_reduced-Tuple{Union{MPolyRing, Oscar.MPolyQuo}}","page":"Affine Algebras","title":"Oscar.hilbert_series_reduced","text":"hilbert_series_reduced(A::Union{MPolyRing, MPolyQuo})\n\nGiven a graded affine algebra A over a field K, return a pair (pq), say,  of univariate polynomials in t with integer coefficients such that:  If A = RI, where R is a multivariate polynomial ring in n variables over K, with positive integer weights w_1 dots w_n assigned to the variables, and I is a homogeneous ideal of R when we grade R according to the corresponding  weighted degree, then pq represents the Hilbert series of A as a rational function written in lowest terms. \n\nSee also hilbert_series.\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"hilbert_series_expanded(A::Union{MPolyRing, MPolyQuo}, d::Int)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Oscar.hilbert_series_expanded-Tuple{Union{MPolyRing, Oscar.MPolyQuo},Int64}","page":"Affine Algebras","title":"Oscar.hilbert_series_expanded","text":"hilbert_series_expanded(A::Union{MPolyRing, MPolyQuo}, d::Int)\n\nGiven a graded affine algebra A = RI over a field K and an integer dgeq 0, return the Hilbert series of A to precision d. \n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"hilbert_function(A::Union{MPolyRing, MPolyQuo}, d::Int)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Oscar.hilbert_function-Tuple{Union{MPolyRing, Oscar.MPolyQuo},Int64}","page":"Affine Algebras","title":"Oscar.hilbert_function","text":"hilbert_function(A::Union{MPolyRing, MPolyQuo}, d::Int)\n\nGiven a graded affine algebra A = RI over a field K and an integer dgeq 0, return the value H(A d), where H(A underlinephantomd) N rightarrow N d mapsto dim_K A_d is  the Hilbert function of A.\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"hilbert_polynomial(A::Union{MPolyRing, MPolyQuo})","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Oscar.hilbert_polynomial-Tuple{Union{MPolyRing, Oscar.MPolyQuo}}","page":"Affine Algebras","title":"Oscar.hilbert_polynomial","text":" hilbert_polynomial(A::Union{MPolyRing, MPolyQuo})\n\nGiven a graded affine algebra A = RI over a field K such that the weights on the variables are all 1, return the Hilbert polynomial of A.\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"degree(A::Union{MPolyRing, MPolyQuo})","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#AbstractAlgebra.Generic.degree-Tuple{Union{MPolyRing, Oscar.MPolyQuo}}","page":"Affine Algebras","title":"AbstractAlgebra.Generic.degree","text":"degree(A::Union{MPolyRing, MPolyQuo})\n\nGiven a graded affine algebra A = RI over a field K such that the weights on the variables are all 1, return the degree of A.\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Example","page":"Affine Algebras","title":"Example","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"R, (w, x, y, z) = PolynomialRing(QQ, [\"w\", \"x\", \"y\", \"z\"])\nA, _ = quo(R, ideal(R, [w*y-x^2, w*z-x*y, x*z-y^2]))\nhilbert_series(A)\nhilbert_series_reduced(A)\nhilbert_series_expanded(A, 7)\nhilbert_function(A,7)\nhilbert_polynomial(A)\ndegree(A)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Ideals-in-Affine-Algebras","page":"Affine Algebras","title":"Ideals in Affine Algebras","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Tests-on-Affine-Algebras","page":"Affine Algebras","title":"Tests on Affine Algebras","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Subalgebra-Membership","page":"Affine Algebras","title":"Subalgebra Membership","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"subalgebra_membership(f::S, v::Vector{S}) where S <: Union{MPolyElem{U}, MPolyQuoElem{U}} where U","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Oscar.subalgebra_membership-Union{Tuple{S}, Tuple{U}, Tuple{S,Array{S,1}}} where S<:Union{MPolyElem{U}, Oscar.MPolyQuoElem{U}} where U","page":"Affine Algebras","title":"Oscar.subalgebra_membership","text":"subalgebra_membership(f::S, v::Vector{S}) where S <: Union{MPolyElem{U}, MPolyQuoElem{U}} where U\n\nIf  f  is contained in the subalgebra of A generated by the elements contained in v, return (true, h), where h is giving the polynomial relation. Otherwise, return (false, 0).\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"R, x = PolynomialRing(QQ, :x => 1:3)\nf = x[1]^6*x[2]^6-x[1]^6*x[3]^6;\nv = [x[1]^3*x[2]^3-x[1]^3*x[3]^3, x[1]^3*x[2]^3+x[1]^3*x[3]^3]\nsubalgebra_membership(f,v)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Reducedness-Test","page":"Affine Algebras","title":"Reducedness Test","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"isreduced(A::MPolyQuo)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Hecke.isreduced-Tuple{Oscar.MPolyQuo}","page":"Affine Algebras","title":"Hecke.isreduced","text":"isreduced(A::MPolyQuo)\n\nReturn true if A is reduced, false otherwise.\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Example-2","page":"Affine Algebras","title":"Example","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"R, (x,) = PolynomialRing(QQ, [\"x\"])\nA, _ = quo(R, ideal(R, [x^4]))\nisreduced(A)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Normality-Test","page":"Affine Algebras","title":"Normality Test","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"isnormal(A::MPolyQuo)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Hecke.isnormal-Tuple{Oscar.MPolyQuo}","page":"Affine Algebras","title":"Hecke.isnormal","text":"isnormal(A::MPolyQuo)\n\nReturn true if A is normal, false otherwise.\n\nCAVEAT: The implementation proceeds by computing the normalization of A first. This may take some time.\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Example-3","page":"Affine Algebras","title":"Example","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"R, (x, y, z) = PolynomialRing(QQ, [\"x\", \"y\", \"z\"])\nA, _ = quo(R, ideal(R, [z^2-x*y]))\nisnormal(A)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Cohen-Macaulayness-Test","page":"Affine Algebras","title":"Cohen-Macaulayness Test","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"iscohenmacaulay(R)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Example-4","page":"Affine Algebras","title":"Example","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Homomorphisms-of-Affine-Algebras","page":"Affine Algebras","title":"Homomorphisms of Affine Algebras","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Constructors","page":"Affine Algebras","title":"Constructors","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"AlgebraHomomorphism(D::U, C::W, V::Vector{X}) where \n{T, S <: MPolyElem{T},\nU <: Union{MPolyRing{T}, MPolyQuo{S}},\nW <: Union{MPolyRing{T}, MPolyQuo{S}},\nX <: Union{S, MPolyQuoElem{S}}}","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Oscar.AlgebraHomomorphism-Union{Tuple{X}, Tuple{W}, Tuple{U}, Tuple{S}, Tuple{T}, Tuple{U,W,Array{X,1}}} where X<:Union{Oscar.MPolyQuoElem{S}, S} where W<:Union{MPolyRing{T}, Oscar.MPolyQuo{S}} where U<:Union{MPolyRing{T}, Oscar.MPolyQuo{S}} where S<:MPolyElem{T} where T","page":"Affine Algebras","title":"Oscar.AlgebraHomomorphism","text":"AlgebraHomomorphism(D::U, C::W, V::Vector{X}) where \n{T, S <: MPolyElem{T},\nU <: Union{MPolyRing{T}, MPolyQuo{S}},\nW <: Union{MPolyRing{T}, MPolyQuo{S}},\nX <: Union{S, MPolyQuoElem{S}}}\n\nCreates the algebra homomorphism D rightarrow C defined by sending the ith generator of D to the ith element of V.  Allows types MPolyRing and MPolyQuo for C and D as well as entries of type MPolyElem and MPolyQuoElem for X. Alternatively, use hom(D::U, C::W, V::Vector{X}).\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Data-Associated-to-Homomorphisms-of-Affine-Algebras","page":"Affine Algebras","title":"Data Associated to Homomorphisms of Affine Algebras","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"domain(F::AlgHom)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#AbstractAlgebra.Generic.domain-Tuple{Oscar.AlgHom}","page":"Affine Algebras","title":"AbstractAlgebra.Generic.domain","text":"function domain(F::AlgHom)\n\nReturns the domain of F.\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"codomain(F::AlgHom)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#AbstractAlgebra.Generic.codomain-Tuple{Oscar.AlgHom}","page":"Affine Algebras","title":"AbstractAlgebra.Generic.codomain","text":"function codomain(F::AlgHom)\n\nReturns the codomain of F.\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"preimage(F::AlgHom, I::U) where U <: Union{MPolyIdeal, MPolyQuoIdeal}","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#AbstractAlgebra.Generic.preimage-Union{Tuple{U}, Tuple{Oscar.AlgHom,U}} where U<:Union{MPolyIdeal, Oscar.MPolyQuoIdeal}","page":"Affine Algebras","title":"AbstractAlgebra.Generic.preimage","text":"preimage(F::AlgHom, I::U) where U <: Union{MPolyIdeal, MPolyQuoIdeal}\n\nReturns the preimage of the ideal I under the algebra homomorphism F.\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"kernel(F::AlgHom)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#AbstractAlgebra.Generic.kernel-Tuple{Oscar.AlgHom}","page":"Affine Algebras","title":"AbstractAlgebra.Generic.kernel","text":"kernel(F::AlgHom)\n\nReturns the kernel of the algebra homomorphism F.\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Examples","page":"Affine Algebras","title":"Examples","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"D1, (w, x, y, z) = PolynomialRing(QQ, [\"w\", \"x\", \"y\", \"z\"])\nC1, (s,t) = PolynomialRing(QQ, [\"s\", \"t\"])\nV1 = [s^3, s^2*t, s*t^2, t^3]\npara = hom(D1, C1, V1)\ntwistedCubic = kernel(para)\nC2, _ = quo(D1, twistedCubic)\nD2, (a, b, b) = PolynomialRing(QQ, [\"a\", \"b\", \"c\"])\nV2 = [w-y, x, z]\nproj = hom(D2, C2, V2)\nnodalCubic = kernel(proj)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"D3,y = PolynomialRing(QQ, :y => 1:3)\nC3, x = PolynomialRing(QQ, :x => 1:3)\nV3 = [x[1]*x[2], x[1]*x[3], x[2]*x[3]]\nF3 = hom(D3, C3, V3)\nsphere = ideal(C3, [x[1]^3 + x[2]^3  + x[3]^3 - 1])\nsteinerRomanSurface = preimage(F3, sphere)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Tests-on-Homomorphisms-of-Affine-Algebras","page":"Affine Algebras","title":"Tests on Homomorphisms of Affine Algebras","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"isinjective(F::AlgHom)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Hecke.isinjective-Tuple{Oscar.AlgHom}","page":"Affine Algebras","title":"Hecke.isinjective","text":"isinjective(F::AlgHom)\n\nReturn true if F is injective, false otherwise.\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"issurjective(F::AlgHom)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Hecke.issurjective-Tuple{Oscar.AlgHom}","page":"Affine Algebras","title":"Hecke.issurjective","text":"issurjective(F::AlgHom)\n\nReturn true if F is surjective, false otherwise.\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"isbijective(F::AlgHom)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Hecke.isbijective-Tuple{Oscar.AlgHom}","page":"Affine Algebras","title":"Hecke.isbijective","text":"isbijective(F::AlgHom)\n\nReturn true if F is bijective, false otherwise.\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"isfinite(F::AlgHom)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Base.isfinite-Tuple{Oscar.AlgHom}","page":"Affine Algebras","title":"Base.isfinite","text":"isfinite(F::AlgHom)\n\nReturn true if F is finite, false otherwise.\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Examples-2","page":"Affine Algebras","title":"Examples","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"D, (x, y, z) = PolynomialRing(QQ, [\"x\", \"y\", \"z\"])\nS, (a, b, c) = PolynomialRing(QQ, [\"a\", \"b\", \"c\"])\nC, p = quo(S, ideal(S, [c-b^3]))\nV = [p(2*a + b^6), p(7*b - a^2), p(c^2)]\nF = hom(D, C, V)\nissurjective(F)\nD1, _ = quo(D, kernel(F))\nF1 = hom(D1, C, V)\nisbijective(F1)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"R, (x, y, z) = PolynomialRing(QQ, [ \"x\", \"y\", \"z\"])\nC, (s, t) = PolynomialRing(QQ, [\"s\", \"t\"])\nV = [s*t, t, s^2]\nparaWhitneyUmbrella = hom(R, C, V)\nD, _ = quo(R, kernel(paraWhitneyUmbrella))\nisfinite(hom(D, C, V))","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Composition-of-Homomorphisms-of-Affine-Algebras","page":"Affine Algebras","title":"Composition of Homomorphisms of Affine Algebras","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"compose(F::AlgHom{T}, G::AlgHom{T}) where T","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#AbstractAlgebra.Generic.compose-Union{Tuple{T}, Tuple{Oscar.AlgHom{T},Oscar.AlgHom{T}}} where T","page":"Affine Algebras","title":"AbstractAlgebra.Generic.compose","text":"compose(F::AlgHom{T}, G::AlgHom{T}) where T\n\nReturns the algebra homomorphism H = Gcirc F domain(F) rightarrow codomain(G).\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Noether-Normalization","page":"Affine Algebras","title":"Noether Normalization","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"noether_normalization(A::MPolyQuo)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Oscar.noether_normalization-Tuple{Oscar.MPolyQuo}","page":"Affine Algebras","title":"Oscar.noether_normalization","text":"noether_normalization(A::MPolyQuo)\n\nGiven an affine algebra A=RI over a field K, the return value is a triple (Lfg), such that: L is an array of d=dim A elements of A, all represented by linear forms in R, and such that KLrightarrow A is a Noether normalization for A; f A rightarrow A is an automorphism of A, induced by a linear change of coordinates of R, and mapping the f_i to the last d variables of A; and g = f^-1.\n\nCAVEAT: The algorithm may not terminate over a small finite field. If it terminates, the result is correct.\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Example-5","page":"Affine Algebras","title":"Example","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"R, (x, y, z) = PolynomialRing(QQ, [\"x\", \"y\", \"z\"])\nA, _ = quo(R, ideal(R, [x*y, x*z]))\nL = noether_normalization(A);\nL[1]\nL[2]\nL[3]","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Normalization-of-Rings","page":"Affine Algebras","title":"Normalization of Rings","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"normalization(A::MPolyQuo)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Oscar.normalization-Tuple{Oscar.MPolyQuo}","page":"Affine Algebras","title":"Oscar.normalization","text":"normalization(A::MPolyQuo; alg=:equidimDec)\n\nFind the normalization of a reduced affine algebra over a perfect field K. That is, given the quotient A=RI of a multivariate polynomial ring R over K modulo a radical ideal I, compute the integral closure overlineA  of A in its total ring of fractions Q(A), together with the embedding  f A rightarrow overlineA. \n\nImplemented Algorithms and how to Read the Output\n\nThe function relies on the algorithm  of Greuel, Laplagne, and Seelisch which proceeds by finding a suitable decomposition  I=I_1capdotscap I_r into radical ideals I_k, together with the normalization maps f_k RI_k rightarrow A_k=overlineRI_k, such that\n\nf=f_1times dotstimes f_r A rightarrow A_1times dotstimes A_r=overlineA\n\nis the normalization map of A. For each k, the function specifies two representations of A_k: It returns an array of triples (A_k f_k mathfrak a_k), where A_k is represented as an affine K-algebra, and f_k as a map of affine K-algebras. The third entry mathfrak a_k is a tuple (d_k J_k), consisting of an element d_kin A and an ideal J_ksubset A, such that frac1d_kJ_k = A_k  as A-submodules of the total ring of fractions of A.\n\nBy default, as a first step on its way to find the decomposition I=I_1capdotscap I_r,  the algorithm computes an equidimensional decomposition of the radical ideal I. Alternatively, if specified by alg=:primeDec, the algorithm computes I=I_1capdotscap I_r as the prime decomposition of the radical ideal I.\n\nCAVEAT: The function does not check whether A is reduced. Use isreduced(A) in case  you are unsure (this may take some time).\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"normalization_with_delta(A::MPolyQuo)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Oscar.normalization_with_delta-Tuple{Oscar.MPolyQuo}","page":"Affine Algebras","title":"Oscar.normalization_with_delta","text":"normalization_with_delta(A::MPolyQuo; alg=:equidimDec)\n\nCompute the normalization\n\nf=f_1times dotstimes f_r A rightarrow A_1times dotstimes A_r=overlineA\n\nof A as does normalize(A), but return additionally the delta invariant of A, that is, the dimension \n\ndim_K(overlineAA)\n\n. \n\nHow to Read the Output\n\nThe return value is a tuple whose first element is normalize(A), whose second element is an array containing the delta invariants of the A_k, and whose third element is the (total) delta invariant of A. The return value -1 in the third element indicates that the delta invariant is infinite.\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Examples-3","page":"Affine Algebras","title":"Examples","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\nA, _ = quo(R, ideal(R, [(x^2-y^3)*(x^2+y^2)*x]))\nL = normalization(A)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"R, (x, y, z) = PolynomialRing(QQ, [\"x\", \"y\", \"z\"])\nA, _ = quo(R, ideal(R, [z^3-x*y^4]))\nL = normalization(A)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\nA, _ = quo(R, ideal(R, [(x^2-y^3)*(x^2+y^2)*x]))\nL = normalization_with_delta(A)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Integral-Bases","page":"Affine Algebras","title":"Integral Bases","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"CAVEAT: Function still to be written.","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/","page":"Affine Algebras","title":"Affine Algebras","text":"integral_basis(f::MPolyElem, i::Int)","category":"page"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Oscar.integral_basis-Tuple{MPolyElem,Int64}","page":"Affine Algebras","title":"Oscar.integral_basis","text":"integral_basis(f::MPolyElem, i::Int)\n\nGiven a polynomial f in two variables with rational coefficients and an integer iin12 specifying one of the variables, f must be irreducible and monic in the specified variable: Say, finmathbb Qxy is monic in y. Then the normalization of A = Qxylangle f rangle, that is, the integral closure overlineA of A in its quotient field, is a free module over Kx of finite rank, and any set of free generators for overlineA over Kx is called an integral basis for overlineA over Kx. Relying on the algorithm by B\"ohm, Decker, Laplagne, and Pfister, the function returns a pair (d V), where d is an element of A, and V is a vector of elements in A, such that the fractions vd vin V, form an integral basis for overlineA over Kx.\n\nNOTE: The conditions on f are automatically checked.\n\n\n\n","category":"method"},{"location":"CommutativeAlgebra/ca_affine_algebras/#Examples-4","page":"Affine Algebras","title":"Examples","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/finfield/","page":"Finite fields","title":"Finite fields","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/finfield/#Finite-fields","page":"Finite fields","title":"Finite fields","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/finfield/","page":"Finite fields","title":"Finite fields","text":"AbstractAlgebra.jl provides a module, implemented in src/julia/GF.jl for finite fields. The module is a naive implementation that supports only fields of degree 1 (prime fields). They are modelled as mathbbZpmathbbZ for p a prime.","category":"page"},{"location":"AbstractAlgebra/docs/src/finfield/#Types-and-parent-objects","page":"Finite fields","title":"Types and parent objects","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/finfield/","page":"Finite fields","title":"Finite fields","text":"Finite fields have type GFField{T} where T is either Int or BigInt.","category":"page"},{"location":"AbstractAlgebra/docs/src/finfield/","page":"Finite fields","title":"Finite fields","text":"Elements of such a finite field have type GFElem{T}.","category":"page"},{"location":"AbstractAlgebra/docs/src/finfield/#Finite-field-constructors","page":"Finite fields","title":"Finite field constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/finfield/","page":"Finite fields","title":"Finite fields","text":"In order to construct finite fields in AbstractAlgebra.jl, one must first construct the field itself. This is accomplished with the following constructors.","category":"page"},{"location":"AbstractAlgebra/docs/src/finfield/","page":"Finite fields","title":"Finite fields","text":"GF(p::T) where T <: Integer","category":"page"},{"location":"AbstractAlgebra/docs/src/finfield/#AbstractAlgebra.GF-Tuple{T} where T<:Integer","page":"Finite fields","title":"AbstractAlgebra.GF","text":"GF(p::T; check::Bool=true) where T <: Integer\n\nReturn the finite field mathbbF_p, where p is a prime. By default, the integer p is checked with a probabilistic algorithm for primality. When check == false, no check is made, but the behaviour of the resulting object is undefined if p is composite.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/finfield/","page":"Finite fields","title":"Finite fields","text":"Here are some examples of creating a finite field and making use of the resulting parent object to coerce various elements into the field.","category":"page"},{"location":"AbstractAlgebra/docs/src/finfield/","page":"Finite fields","title":"Finite fields","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/finfield/","page":"Finite fields","title":"Finite fields","text":"julia> F = GF(13)\nFinite field F_13\n\njulia> g = F(3)\n3\n\njulia> h = F(g)\n3\n\njulia> GF(4)\nERROR: DomainError with 4:\nCharacteristic is not prime in GF(p)\nStacktrace:\n[...]","category":"page"},{"location":"AbstractAlgebra/docs/src/finfield/#Basic-field-functionality","page":"Finite fields","title":"Basic field functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/finfield/","page":"Finite fields","title":"Finite fields","text":"The finite field module in AbstractAlgebra.jl implements the full Field interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/finfield/","page":"Finite fields","title":"Finite fields","text":"We give some examples of such functionality.","category":"page"},{"location":"AbstractAlgebra/docs/src/finfield/","page":"Finite fields","title":"Finite fields","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/finfield/","page":"Finite fields","title":"Finite fields","text":"julia> F = GF(13)\nFinite field F_13\n\njulia> f = F(7)\n7\n\njulia> h = zero(F)\n0\n\njulia> k = one(F)\n1\n\njulia> isone(k)\ntrue\n\njulia> iszero(h)\ntrue\n\njulia> T = parent(h)\nFinite field F_13\n\njulia> h == deepcopy(h)\ntrue\n\njulia> h = h + 2\n2\n\njulia> m = inv(k)\n1\n","category":"page"},{"location":"AbstractAlgebra/docs/src/finfield/#Basic-manipulation-of-fields-and-elements","page":"Finite fields","title":"Basic manipulation of fields and elements","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/finfield/","page":"Finite fields","title":"Finite fields","text":"gen{T <: Integer}(F::GFField{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/finfield/#AbstractAlgebra.gen-Union{Tuple{AbstractAlgebra.GFField{T}}, Tuple{T}} where T<:Integer","page":"Finite fields","title":"AbstractAlgebra.gen","text":"gen(R::GFField{T}) where T <: Integer\n\nReturn a generator of the field. Currently this returns 1.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/finfield/","page":"Finite fields","title":"Finite fields","text":"order(F::GFField)","category":"page"},{"location":"AbstractAlgebra/docs/src/finfield/#AbstractAlgebra.Generic.order-Tuple{AbstractAlgebra.GFField}","page":"Finite fields","title":"AbstractAlgebra.Generic.order","text":"order(R::GFField)\n\nReturn the order, i.e. the number of element in the given finite field.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/finfield/","page":"Finite fields","title":"Finite fields","text":"degree(F::GFField)","category":"page"},{"location":"AbstractAlgebra/docs/src/finfield/#AbstractAlgebra.Generic.degree-Tuple{AbstractAlgebra.GFField}","page":"Finite fields","title":"AbstractAlgebra.Generic.degree","text":"degree(R::GFField)\n\nReturn the degree of the given finite field.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/finfield/","page":"Finite fields","title":"Finite fields","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/finfield/","page":"Finite fields","title":"Finite fields","text":"julia> F = GF(13)\nFinite field F_13\n\njulia> d = degree(F)\n1\n\njulia> n = order(F)\n13\n\njulia> g = gen(F)\n1\n","category":"page"},{"location":"Hecke/docs/src/quad_forms/basics/#Basics","page":"Basics","title":"Basics","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/basics/","page":"Basics","title":"Basics","text":"CurrentModule = Hecke","category":"page"},{"location":"Hecke/docs/src/quad_forms/basics/#Creation-of-spaces","page":"Basics","title":"Creation of spaces","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/basics/","page":"Basics","title":"Basics","text":"quadratic_space(::NumField, ::Int)\nquadratic_space(::NumField, ::MatElem)","category":"page"},{"location":"Hecke/docs/src/quad_forms/basics/#Hecke.quadratic_space-Tuple{NumField,Int64}","page":"Basics","title":"Hecke.quadratic_space","text":"quadratic_space(K::NumField, n::Int) -> QuadSpace\n\nCreate the quadratic space over K with dimension n and Gram matrix equal to the identity matrix.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/basics/#Hecke.quadratic_space-Tuple{NumField,MatElem}","page":"Basics","title":"Hecke.quadratic_space","text":"quadratic_space(K::NumField, G::Int) -> QuadSpace\n\nCreate the quadratic space over K with Gram matrix G. The matrix G must be square and symmetric.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/basics/#Attributes","page":"Basics","title":"Attributes","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/basics/","page":"Basics","title":"Basics","text":"rank(::AbsSpace)\ndim(::AbsSpace)\ngram_matrix(::AbsSpace)\nbase_field(::AbsSpace)\ninvolution(::AbsSpace)\nisregular(::AbsSpace)\ndet(::AbsSpace)\ndiscriminant(::AbsSpace)","category":"page"},{"location":"Hecke/docs/src/quad_forms/basics/#LinearAlgebra.rank-Tuple{Hecke.AbsSpace}","page":"Basics","title":"LinearAlgebra.rank","text":"rank(V::AbsSpace) -> Int\n\nReturn the rank of the quadratic space V.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/basics/#AbstractAlgebra.Generic.dim-Tuple{Hecke.AbsSpace}","page":"Basics","title":"AbstractAlgebra.Generic.dim","text":"dim(V::AbsSpace) -> Int\n\nReturn the dimension of the space V.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/basics/#Hecke.gram_matrix-Tuple{Hecke.AbsSpace}","page":"Basics","title":"Hecke.gram_matrix","text":"gram_matrix(V::AbsSpace) -> MatElem\n\nReturn the Gram matrix of V.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/basics/#Hecke.involution-Tuple{Hecke.AbsSpace}","page":"Basics","title":"Hecke.involution","text":"involution(V::AbsSpace) -> NumField\n\nReturn the involution of V.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/basics/#Hecke.isregular-Tuple{Hecke.AbsSpace}","page":"Basics","title":"Hecke.isregular","text":"isregular(V::AbsSpace) -> Bool\n\nReturn whether V is regular, that is, if the Gram matrix has full rank.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/basics/#LinearAlgebra.det-Tuple{Hecke.AbsSpace}","page":"Basics","title":"LinearAlgebra.det","text":"det(V::AbsSpace) -> FieldElem\n\nReturns the determinant of the space V as an element of the fixed field.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/basics/#AbstractAlgebra.Generic.discriminant-Tuple{Hecke.AbsSpace}","page":"Basics","title":"AbstractAlgebra.Generic.discriminant","text":"discriminant(V::AbsSpace) -> FieldElem\n\nReturns the discriminant of the space V as an element of the fixed field.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/basics/#Inner-products-and-diagonalization","page":"Basics","title":"Inner products and diagonalization","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/basics/","page":"Basics","title":"Basics","text":"gram_matrix(::AbsSpace{T}, ::MatElem{S}) where {S, T}\ngram_matrix(::AbsSpace{T}, ::Vector{Vector{U}}) where {T, U}\ninner_product(::AbsSpace, ::Vector, ::Vector)\northogonal_basis(::AbsSpace)\ndiagonal(::AbsSpace)","category":"page"},{"location":"Hecke/docs/src/quad_forms/basics/#Hecke.gram_matrix-Union{Tuple{T}, Tuple{S}, Tuple{Hecke.AbsSpace{T},MatElem{S}}} where T where S","page":"Basics","title":"Hecke.gram_matrix","text":"gram_matrix(V::AbsSpace, M::MatElem) -> MatElem\n\nReturns the gram matrix of the rows of M.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/basics/#Hecke.gram_matrix-Union{Tuple{U}, Tuple{T}, Tuple{Hecke.AbsSpace{T},Array{Array{U,1},1}}} where U where T","page":"Basics","title":"Hecke.gram_matrix","text":"gram_matrix(V::AbsSpace, S::Vector{Vector}) -> MatElem\n\nReturns the gram matrix of the sequence S.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/basics/#Hecke.inner_product-Tuple{Hecke.AbsSpace,Array{T,1} where T,Array{T,1} where T}","page":"Basics","title":"Hecke.inner_product","text":"inner_product(V::AbsSpace, v::Vector, w::Vector) -> FieldElem\n\nReturns the inner product of v and w with respect to V.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/basics/#Hecke.orthogonal_basis-Tuple{Hecke.AbsSpace}","page":"Basics","title":"Hecke.orthogonal_basis","text":"orthogonal_basis(V::AbsSpace) -> MatElem\n\nReturns a matrix M, such that the rows of M form an orthgonal basis of V.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/basics/#Hecke.diagonal-Tuple{Hecke.AbsSpace}","page":"Basics","title":"Hecke.diagonal","text":"diagonal(V::AbsSpace) -> Vector{FieldElem}\n\nReturns a vector of elements a_1dotsca_n such that V is isometric to the diagonal space langle a_1dotsca_n rangle.\n\nThe elements will be contained in the fixed field of V.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/basics/#Equivalence","page":"Basics","title":"Equivalence","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/basics/","page":"Basics","title":"Basics","text":"hasse_invariant(::QuadSpace, p)\nwitt_invariant(::QuadSpace, p)\nisequivalent(::AbsSpace, ::AbsSpace, p)\ninvariants(::QuadSpace)\nisequivalent(::QuadSpace, ::QuadSpace)","category":"page"},{"location":"Hecke/docs/src/quad_forms/basics/#Hecke.hasse_invariant-Tuple{Hecke.QuadSpace,Any}","page":"Basics","title":"Hecke.hasse_invariant","text":"hasse_invariant(V::QuadSpace, p::Union{InfPlc, NfOrdIdl}) -> Int\n\nReturns the Hasse invariant of the quadratic space V at p. This is equal to the product of local Hilbert symbols (a_i a_j)_p, i  j, where V is isometric to langle a_1dotsca_nrangle.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/basics/#Hecke.witt_invariant-Tuple{Hecke.QuadSpace,Any}","page":"Basics","title":"Hecke.witt_invariant","text":"witt_invariant(V::QuadSpace, p::Union{InfPlc, NfOrdIdl}) -> Int\n\nReturns the Witt invariant of the quadratic space V at p.\n\nSee [Definition 3.2.1, Kir16].\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/basics/#Hecke.isequivalent-Tuple{Hecke.AbsSpace,Hecke.AbsSpace,Any}","page":"Basics","title":"Hecke.isequivalent","text":"isequivalent(L::AbsSpace, M::AbsSpace, p::Union{InfPlc, NfOrdIdl}) -> Bool\n\nReturns whether L and M are equivalent over the completion at p.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/basics/#Hecke.invariants-Tuple{Hecke.QuadSpace}","page":"Basics","title":"Hecke.invariants","text":"invariants(M::QuadSpace)\n      -> FieldElem, Dict{NfOrdIdl, Int}, Vector{Tuple{InfPlc, Int}}\n\nReturns a tuple (n, k, d, H, I) of invariants of M, which determine the equivalence class completely. Here n is the dimension. The dimension of the kernel is k. The element d is the determinant of a Gram matrix of the non-degenerate part, H contains the non-trivial Hasse invariants and I contains for each real place the negative index of inertia.\n\nNote that d is determined only modulo squares.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/basics/#Hecke.isequivalent-Tuple{Hecke.QuadSpace,Hecke.QuadSpace}","page":"Basics","title":"Hecke.isequivalent","text":"isequivalent(M::QuadSpace, L::QuadSpace) -> Bool\n\nTests if M and L are equivalent.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/fields/#Field-Interface","page":"Field Interface","title":"Field Interface","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"AbstractAlgebra.jl generic code makes use of a standardised set of functions which it expects to be implemented for all fields. Here we document this interface. All libraries which want to make use of the generic capabilities of AbstractAlgebra.jl must supply all of the required functionality for their fields.","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/#Types","page":"Field Interface","title":"Types","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"Most fields must supply two types:","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"a type for the parent object (representing the field itself)\na type for elements of that field","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"For example, the generic fraction field type in AbstractAlgebra.jl provides two  types in generic/GenericTypes.jl: ","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"Generic.FracField{T} for the parent objects\nGeneric.Frac{T} for the actual fractions","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"The parent type must belong to AbstractAlgebra.Field and the element type must belong to AbstractAlgebra.FieldElem. Of course, the types may belong to these abstract types transitively.","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"For parameterised fields, we advise that the types of both the parent objects and element objects to be parameterised by the types of the elements of the base ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"There can be variations on this theme: e.g. in some areas of mathematics there is a notion of a coefficient domain, in which case it may make sense to parameterise all types by the type of elements of this coefficient domain. But note that this may have implications for the ad hoc operators one might like to explicitly implement.","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/#FieldElement-type-union","page":"Field Interface","title":"FieldElement type union","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"Because of its lack of multiple inheritance, Julia does not allow Julia Base types to belong to AbstractAlgebra.FieldElem. To allow us to work equally with AbstractAlgebra and Julia types that represent elements of fields we define a union type AbstractAlgebra.FieldElement in src/julia/JuliaTypes.","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"So far, in addition to AbstractAlgebra.FieldElem the  union type AbstractAlgebra.FieldElement includes the Julia types Rational and AbstractFloat.","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"Most of the generic code in AbstractAlgebra makes use of the union type AbstractAlgebra.FieldElement instead of AbstractAlgebra.FieldElem so that the generic functions also accept the Julia Base field types.","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"One must be careful when defining ad hoc binary operations for field element types. It is often necessary to define separate versions of the functions for AbstractAlgebra.FieldElem then for each of the Julia types separately in order to avoid ambiguity warnings.","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"Note that even though AbstractAlgebra.FieldElement is a union type we still have the following inclusion","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"AbstractAlgebra.FieldElement <: AbstractAlgebra.RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/#Parent-object-caches","page":"Field Interface","title":"Parent object caches","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"In many cases, it is desirable to have only one object in the system to represent each field. This means that if the same field is constructed twice, elements of the two fields will be compatible as far as arithmetic is concerned.","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"In order to facilitate this, global caches of fields are stored in AbstractAlgebra.jl, usually implemented using dictionaries. For example, the Generic.FracField parent objects are looked up in a dictionary FracDict to see if they have been previously defined.","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"Whether these global caches are provided or not, depends on both mathematical and algorithmic considerations. E.g. in the case of number fields, it isn't desirable to identify all number fields with the same defining polynomial, as they may be considered with distinct embeddings into one another. In other cases, identifying whether two fields are the same may be prohibitively expensive. Generally, it may only make sense algorithmically to identify two fields if they were constructed from identical data.","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"If a global cache is provided, it must be optionally possible to construct the parent objects without caching. This is done by passing a boolean value cached to the inner constructor of the parent object. See generic/GenericTypes.jl` for examples of how to construct and handle such caches.","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/#Required-functions-for-all-fields","page":"Field Interface","title":"Required functions for all fields","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"In the following, we list all the functions that are required to be provided for fields in AbstractAlgebra.jl or by external libraries wanting to use AbstractAlgebra.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"We give this interface for fictitious types MyParent for the type of the field parent object R and MyElem for the type of the elements of the field.","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"Note that generic functions in AbstractAlgebra.jl may not rely on the existence of functions that are not documented here. If they do, those functions will only be available for fields that implement that additional functionality, and should be documented as such.","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"In the first place, all fields are rings and therefore any field type must implement all of the Ring interface. The functionality below is in addition to this basic functionality.","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/#Data-type-and-parent-object-methods","page":"Field Interface","title":"Data type and parent object methods","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"characteristic(R::MyParent)","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"Return the characteristic of the field.","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/#Basic-manipulation-of-rings-and-elements","page":"Field Interface","title":"Basic manipulation of rings and elements","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"isunit(f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/fields/","page":"Field Interface","title":"Field Interface","text":"Return true if the given element is invertible, i.e. nonzero in the field.","category":"page"},{"location":"Hecke/docs/src/orders/elements/#Elements","page":"Elements","title":"Elements","text":"","category":"section"},{"location":"Hecke/docs/src/orders/elements/","page":"Elements","title":"Elements","text":"CurrentModule = Hecke","category":"page"},{"location":"Hecke/docs/src/orders/elements/","page":"Elements","title":"Elements","text":"Elements in orders have two representations: they can be viewed as  elements in the Z^n giving the coefficients wrt to the order basis where they are elements in. On the other hand, as every order is in a field, they also have a representation as number field elements. Since, asymptotically, operations are more efficient in the  field (due to fast polynomial arithmetic) than in the order, the primary representation is that as a field element.","category":"page"},{"location":"Hecke/docs/src/orders/elements/#Creation","page":"Elements","title":"Creation","text":"","category":"section"},{"location":"Hecke/docs/src/orders/elements/","page":"Elements","title":"Elements","text":"Elements are constructed either as linear combinations of basis elements or via explicit coercion. Elements will be of type NfOrdElem,  the type if actually parametrized by the type of the surrounding field and the type of the field elements. E.g. the type of any element in any order of an absolute simple field will be NfAbsOrdElem{AnticNumberField,nf_elem}","category":"page"},{"location":"Hecke/docs/src/orders/elements/","page":"Elements","title":"Elements","text":"NfAbsOrd","category":"page"},{"location":"Hecke/docs/src/orders/elements/#Hecke.NfAbsOrd","page":"Elements","title":"Hecke.NfAbsOrd","text":"  (O::NfOrd)(a::Union{fmpz, Integer}) -> NfAbsOrdElem\n\nGiven an element a of type fmpz or Integer, this function coerces the element into mathcal O. It will be checked that a is contained in mathcal O if and only if check is true.\n\n\n\n  (O::NfOrd)(arr::Array{fmpz, 1})\n\nReturns the element of mathcal O with coefficient vector arr.\n\n\n\n  (O::NfOrd)() -> NfAbsOrdElem\n\nThis function constructs a new element of mathcal O which is set to 0.\n\n\n\n","category":"type"},{"location":"Hecke/docs/src/orders/elements/#Basic-properties","page":"Elements","title":"Basic properties","text":"","category":"section"},{"location":"Hecke/docs/src/orders/elements/","page":"Elements","title":"Elements","text":"parent(::NfOrdElem)\nelem_in_nf(::NfOrdElem)\ncoordinates(::NfOrdElem)\ndiscriminant(::Array{NfOrdElem, 1})\n==(::NfOrdElem, ::NfOrdElem)\nzero(::NfOrd)\none(::NfOrd)\niszero(::NfOrdElem)\nisone(::NfOrdElem)","category":"page"},{"location":"Hecke/docs/src/orders/elements/#Base.parent-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem}}","page":"Elements","title":"Base.parent","text":"parent(a::NfAbsOrdElem) -> NfOrd\n\nReturns the order of which a is an element.\n\n\n\nparent(g::Perm)\n\nReturn the parent of the permutation g.\n\njulia> G = SymmetricGroup(5); g = Perm([3,4,5,2,1])\n(1,3,5)(2,4)\n\njulia> parent(g) == G\ntrue\n\n\n\nparent(a::AbstractAlgebra.MatElem{T}, cached::Bool = true) where T <: RingElement\n\nReturn the parent object of the given matrix.\n\n\n\nparent(a::AbstractAlgebra.MatAlgElem{T}, cached::Bool = true) where T <: RingElement\n\nReturn the parent object of the given matrix.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#Hecke.elem_in_nf-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem}}","page":"Elements","title":"Hecke.elem_in_nf","text":"elem_in_nf(a::NfAbsOrdElem) -> nf_elem\n\nReturns the element a considered as an element of the ambient number field.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#Hecke.coordinates-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem}}","page":"Elements","title":"Hecke.coordinates","text":"coordinates(a::NfAbsOrdElem) -> Array{fmpz, 1}\n\nReturns the coefficient vector of a.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#AbstractAlgebra.Generic.discriminant-Tuple{Array{NfAbsOrdElem{AnticNumberField,nf_elem},1}}","page":"Elements","title":"AbstractAlgebra.Generic.discriminant","text":"discriminant(g::Vector)\n\nCompute the product of all differences of distinct elements in the array.    \n\n\n\ndiscriminant(B::Array{NfAbsOrdElem, 1}) -> fmpz\n\nReturns the discriminant of the family B.\n\n\n\ndiscriminant(E::EllCrv{T}) -> T\n\nComputes the discriminant of E.\n\n\n\ndiscriminant(O::AlgssRelOrd)\n\nReturns the discriminant of O.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#Base.:==-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem},NfAbsOrdElem{AnticNumberField,nf_elem}}","page":"Elements","title":"Base.:==","text":"==(x::NfAbsOrdElem, y::NfAbsOrdElem) -> Bool\n\nReturns whether x and y are equal.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#Base.zero-Tuple{NfAbsOrd{AnticNumberField,nf_elem}}","page":"Elements","title":"Base.zero","text":"zero(O::NfOrd) -> NfAbsOrdElem\n\nReturns the zero element of mathcal O.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#Base.one-Tuple{NfAbsOrd{AnticNumberField,nf_elem}}","page":"Elements","title":"Base.one","text":"one(O::NfOrd) -> NfAbsOrdElem\n\nReturns the one element of mathcal O.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#Base.iszero-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem}}","page":"Elements","title":"Base.iszero","text":"iszero(a::NfOrd) -> Bool\n\nTests if a is zero.\n\n\n\niszero(v::AbstractAlgebra.FPModuleElem{T}) where T <: RingElement\n\nReturn true if v is the zero element of the module M.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#Base.isone-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem}}","page":"Elements","title":"Base.isone","text":"isone(a::NfOrd) -> Bool\n\nTests if a is one.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#Arithmetic","page":"Elements","title":"Arithmetic","text":"","category":"section"},{"location":"Hecke/docs/src/orders/elements/","page":"Elements","title":"Elements","text":"-(::NfOrdElem)\n+(::NfOrdElem, ::NfOrdElem)\n-(::NfOrdElem, ::NfOrdElem)\n*(::NfOrdElem, ::NfOrdElem)\n^(::NfOrdElem, ::Int)\nmod(::NfOrdElem, ::Int)\npowermod(::NfOrdElem, ::fmpz, ::Int)","category":"page"},{"location":"Hecke/docs/src/orders/elements/#Base.:--Tuple{NfAbsOrdElem{AnticNumberField,nf_elem}}","page":"Elements","title":"Base.:-","text":"-(x::NfAbsOrdElem) -> NfAbsOrdElem\n\nReturns the additive inverse of x.\n\n\n\n-(A::SMat, B::SMat) -> SMat\n\nReturn the difference A - B.\n\n\n\n-(A::SRow, B::SRow) -> SRow\n\nReturns the difference of A and B.\n\n\n\n-(A::SRow) -> SRow\n\nReturns the negative of A.\n\n\n\n-(a::AbsAlgAssElem) -> AbsAlgAssElem\n\nReturns -a.\n\n\n\n-(a::AbsAlgAssElem, b::AbsAlgAssElem) -> AbsAlgAssElem\n\nReturn a - b.\n\n\n\n-(a::AlgMatElem, b::AlgMatElem) -> AlgMatElem\n\nReturn a - b.\n\n\n\n-(x::T, y::Generic.MatrixElem{T}) where {T <: RingElem}\n\nReturn S(x) - y where S is the parent of y.\n\n\n\n-(x::Generic.MatrixElem{T}, y::T) where {T <: RingElem}\n\nReturn x - S(y), where S is the parent of a.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#Base.:+-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem},NfAbsOrdElem{AnticNumberField,nf_elem}}","page":"Elements","title":"Base.:+","text":"+(x::NfAbsOrdElem, y::NfAbsOrdElem) -> NfAbsOrdElem\n\nReturns x + y.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#Base.:--Tuple{NfAbsOrdElem{AnticNumberField,nf_elem},NfAbsOrdElem{AnticNumberField,nf_elem}}","page":"Elements","title":"Base.:-","text":"-(x::NfAbsOrdElem, y::NfAbsOrdElem) -> NfAbsOrdElem\n\nReturns x - y.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#Base.:*-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem},NfAbsOrdElem{AnticNumberField,nf_elem}}","page":"Elements","title":"Base.:*","text":"*(x::NfAbsOrdElem, y::NfAbsOrdElem) -> NfAbsOrdElem\n\nReturns x cdot y.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#Base.:^-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem},Int64}","page":"Elements","title":"Base.:^","text":"^(x::NfAbsOrdElem, y::Int)\n\nReturns x^y.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#Base.mod-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem},Int64}","page":"Elements","title":"Base.mod","text":"mod(a::NfAbsOrdElem, m::Union{fmpz, Int}) -> NfAbsOrdElem\n\nReduces the coefficient vector of a modulo m and returns the corresponding element. The coefficient vector of the result will have entries x with 0 leq x leq m.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#Base.powermod-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem},fmpz,Int64}","page":"Elements","title":"Base.powermod","text":"powermod(a::NfAbsOrdElem, i::fmpz, m::Integer) -> NfAbsOrdElem\n\nReturns the element a^i modulo m.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#Miscellaneous","page":"Elements","title":"Miscellaneous","text":"","category":"section"},{"location":"Hecke/docs/src/orders/elements/","page":"Elements","title":"Elements","text":"representation_matrix(::NfOrdElem)\nrepresentation_matrix(::NfOrdElem, ::AnticNumberField)\ntr(::NfOrdElem)\nnorm(::NfOrdElem)\nrand(::NfOrd, ::Int)\nminkowski_map(::NfOrdElem, ::Int)\nconjugates_arb(::NfOrdElem, ::Int)\nconjugates_arb_log(::NfOrdElem, ::Int)\nt2(::NfOrdElem, ::Int)\nminpoly(::NfOrdElem)\ncharpoly(::NfOrdElem)\nfactor(::NfOrdElem)","category":"page"},{"location":"Hecke/docs/src/orders/elements/#Nemo.representation_matrix-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem}}","page":"Elements","title":"Nemo.representation_matrix","text":"representation_matrix(a::NfAbsOrdElem) -> fmpz_mat\n\nReturns the representation matrix of the element a.\n\n\n\nrepresentation_matrix(a::NfAbsOrdElem, K::AnticNumberField) -> FakeFmpqMat\n\nReturns the representation matrix of the element a considered as an element of the ambient number field K. It is assumed that K is the ambient number field of the order of a.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#Nemo.representation_matrix-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem},AnticNumberField}","page":"Elements","title":"Nemo.representation_matrix","text":"representation_matrix(a::NfAbsOrdElem, K::AnticNumberField) -> FakeFmpqMat\n\nReturns the representation matrix of the element a considered as an element of the ambient number field K. It is assumed that K is the ambient number field of the order of a.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#LinearAlgebra.tr-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem}}","page":"Elements","title":"LinearAlgebra.tr","text":"tr(a::NfAbsOrdElem) -> fmpz\n\nReturns the trace of a.\n\n\n\ntr(x::AbsAlgAssElem{T}) where T -> T\n\nReturns the trace of x.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#LinearAlgebra.norm-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem}}","page":"Elements","title":"LinearAlgebra.norm","text":"norm(a::NfRelOrdIdl) -> NfOrdIdl\n\nReturns the norm of a.\n\n\n\nnorm(a::NfRelOrdFracIdl{T, S}) -> S\n\nReturns the norm of a.\n\n\n\nnorm(a::NfAbsOrdElem) -> fmpz\n\nReturns the norm of a.\n\n\n\nnorm(a::AlgAssAbsOrdIdl, O::AlgAssAbsOrd; copy::Bool = true) -> fmpq\n\nReturns the norm of a considered as an (possibly fractional) ideal of O.\n\n\n\nnorm(a::AlgAssRelOrdIdl{S, T, U}, O::AlgAssRelOrd{S, T, U}; copy::Bool = true)\n  where { S, T, U } -> T\n\nReturns the norm of a considered as an (possibly fractional) ideal of O.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#Base.rand-Tuple{NfAbsOrd{AnticNumberField,nf_elem},Int64}","page":"Elements","title":"Base.rand","text":"rand(O::NfOrd, n::Union{Integer, fmpz}) -> NfAbsOrdElem\n\nComputes a coefficient vector with entries uniformly distributed in -ndotsc-101dotscn and returns the corresponding element of the order mathcal O.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#Hecke.minkowski_map-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem},Int64}","page":"Elements","title":"Hecke.minkowski_map","text":"minkowski_map(a::NfAbsOrdElem, abs_tol::Int) -> Array{arb, 1}\n\nReturns the image of a under the Minkowski embedding. Every entry of the array returned is of type arb with radius less then 2^-abs_tol.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#Hecke.conjugates_arb-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem},Int64}","page":"Elements","title":"Hecke.conjugates_arb","text":"conjugates_arb(x::NfAbsOrdElem, abs_tol::Int) -> Array{acb, 1}\n\nCompute the conjugates of x as elements of type acb. Recall that we order the complex conjugates sigma_r+1(x)sigma_r+2s(x) such that sigma_i(x) = overlinesigma_i + s(x) for r + 2 leq i leq r + s.\n\nEvery entry y of the array returned satisfies radius(real(y)) < 2^-abs_tol, radius(imag(y)) < 2^-abs_tol respectively.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#Hecke.conjugates_arb_log-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem},Int64}","page":"Elements","title":"Hecke.conjugates_arb_log","text":"conjugates_arb_log(x::NfAbsOrdElem, abs_tol::Int) -> Array{arb, 1}\n\nReturns the elements (log(lvert sigma_1(x) rvert)dotsclog(lvertsigma_r(x) rvert) dotsc2log(lvert sigma_r+1(x) rvert)dotsc 2log(lvert sigma_r+s(x)rvert)) as elements of type arb radius less then 2^-abs_tol.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#Hecke.t2-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem},Int64}","page":"Elements","title":"Hecke.t2","text":"t2(x::NfAbsOrdElem, abs_tol::Int = 32) -> arb\n\nReturn the T_2-norm of x. The radius of the result will be less than 2^-abs_tol.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#AbstractAlgebra.Generic.minpoly-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem}}","page":"Elements","title":"AbstractAlgebra.Generic.minpoly","text":"minpoly(a::NfRelElem) -> PolyElem\n\nGiven an element a in an extension LK, this function returns the minimal polynomial of a over K.\n\n\n\nminpoly(a::NfAbsOrdElem) -> fmpz_poly\n\nThe minimal polynomial of a.\n\n\n\nminpoly(S::Ring, M::MatElem{T}, charpoly_only::Bool = false) where {T <: RingElement}\n\nReturn the minimal polynomial p of the matrix M. The polynomial ring S of the resulting polynomial must be supplied and the matrix must be square.\n\n\n\nminpoly(S::Ring, M::MatAlgElem{T}, charpoly_only::Bool = false) where {T <: RingElement}\n\nReturn the minimal polynomial p of the matrix M. The polynomial ring S of the resulting polynomial must be supplied and the matrix must be square.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#AbstractAlgebra.Generic.charpoly-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem}}","page":"Elements","title":"AbstractAlgebra.Generic.charpoly","text":"charpoly(a::NfAbsOrdElem) -> fmpz_poly\ncharpoly(a::NfAbsOrdElem, FlintZZ) -> fmpz_poly\n\nThe characteristic polynomial of a.\n\n\n\ncharpoly(V::Ring, Y::Generic.MatrixElem{T}) where {T <: RingElement}\n\nReturn the characteristic polynomial p of the matrix M. The polynomial ring R of the resulting polynomial must be supplied and the matrix is assumed to be square.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/elements/#Hecke.factor-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem}}","page":"Elements","title":"Hecke.factor","text":"factor(a::NfOrdElem) -> Fac{NfOrdElem}\n\nComputes a factorization of a into irreducible elements. The return value is a factorization fac, which satisfies a = unit(fac) * prod(p^e for (p, e) in fac).\n\nThe function requires that a is non-zero and that all prime ideals containing a are principal, which is for example satisfied if class group of the order of a is trivial.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/constructors/#Constructing-mathematical-objects-in-AbstractAlgebra.jl","page":"Constructing mathematical objects in AbstractAlgebra.jl","title":"Constructing mathematical objects in AbstractAlgebra.jl","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/constructors/#Constructing-objects-in-Julia","page":"Constructing mathematical objects in AbstractAlgebra.jl","title":"Constructing objects in Julia","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/constructors/","page":"Constructing mathematical objects in AbstractAlgebra.jl","title":"Constructing mathematical objects in AbstractAlgebra.jl","text":"In Julia, one constructs objects of a given type by calling a type constructor. This is simply a function with the same name as the type itself. For example, to construct a BigInt object from an Int in Julia, we simply call the BigInt constructor:","category":"page"},{"location":"AbstractAlgebra/docs/src/constructors/","page":"Constructing mathematical objects in AbstractAlgebra.jl","title":"Constructing mathematical objects in AbstractAlgebra.jl","text":"n = BigInt(123)","category":"page"},{"location":"AbstractAlgebra/docs/src/constructors/","page":"Constructing mathematical objects in AbstractAlgebra.jl","title":"Constructing mathematical objects in AbstractAlgebra.jl","text":"Note that a number literal too big to fit in an Int or Int128 automatically creates a BigInt:","category":"page"},{"location":"AbstractAlgebra/docs/src/constructors/","page":"Constructing mathematical objects in AbstractAlgebra.jl","title":"Constructing mathematical objects in AbstractAlgebra.jl","text":"julia> typeof(12345678765456787654567890987654567898765678909876567890)\nBigInt","category":"page"},{"location":"AbstractAlgebra/docs/src/constructors/#How-we-construct-objects-in-AbstractAlgebra.jl","page":"Constructing mathematical objects in AbstractAlgebra.jl","title":"How we construct objects in AbstractAlgebra.jl","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/constructors/","page":"Constructing mathematical objects in AbstractAlgebra.jl","title":"Constructing mathematical objects in AbstractAlgebra.jl","text":"As we explain in Appendix A, Julia types don't contain enough information to properly model groups, rings, fields, etc. Instead of using types to construct objects, we use special objects that we refer to as parent objects. They behave a lot like Julia types.","category":"page"},{"location":"AbstractAlgebra/docs/src/constructors/","page":"Constructing mathematical objects in AbstractAlgebra.jl","title":"Constructing mathematical objects in AbstractAlgebra.jl","text":"Consider the following simple example, to create a multiprecision integer:","category":"page"},{"location":"AbstractAlgebra/docs/src/constructors/","page":"Constructing mathematical objects in AbstractAlgebra.jl","title":"Constructing mathematical objects in AbstractAlgebra.jl","text":"n = ZZ(12345678765456787654567890987654567898765678909876567890)","category":"page"},{"location":"AbstractAlgebra/docs/src/constructors/","page":"Constructing mathematical objects in AbstractAlgebra.jl","title":"Constructing mathematical objects in AbstractAlgebra.jl","text":"Here ZZ is not a Julia type, but a callable object. However, for most purposes one can think of such a parent object as though it were a type.","category":"page"},{"location":"AbstractAlgebra/docs/src/constructors/#Constructing-parent-objects","page":"Constructing mathematical objects in AbstractAlgebra.jl","title":"Constructing parent objects","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/constructors/","page":"Constructing mathematical objects in AbstractAlgebra.jl","title":"Constructing mathematical objects in AbstractAlgebra.jl","text":"For more complicated groups, rings, fields, etc., one first needs to construct the parent object before one can use it to construct element objects.","category":"page"},{"location":"AbstractAlgebra/docs/src/constructors/","page":"Constructing mathematical objects in AbstractAlgebra.jl","title":"Constructing mathematical objects in AbstractAlgebra.jl","text":"AbstractAlgebra.jl provides a set of functions for constructing such parent objects. For example, to create a parent object for univariate polynomials over the integers, we use the PolynomialRing parent object constructor.","category":"page"},{"location":"AbstractAlgebra/docs/src/constructors/","page":"Constructing mathematical objects in AbstractAlgebra.jl","title":"Constructing mathematical objects in AbstractAlgebra.jl","text":"R, x = PolynomialRing(ZZ, \"x\")\nf = x^3 + 3x + 1\ng = R(12)","category":"page"},{"location":"AbstractAlgebra/docs/src/constructors/","page":"Constructing mathematical objects in AbstractAlgebra.jl","title":"Constructing mathematical objects in AbstractAlgebra.jl","text":"In this example, R is the parent object and we use it to convert the Int value 12 to an element of the polynomial ring mathbbZx.","category":"page"},{"location":"AbstractAlgebra/docs/src/constructors/#List-of-parent-object-constructors","page":"Constructing mathematical objects in AbstractAlgebra.jl","title":"List of parent object constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/constructors/","page":"Constructing mathematical objects in AbstractAlgebra.jl","title":"Constructing mathematical objects in AbstractAlgebra.jl","text":"For convenience, we provide a list of all the parent object constructors in AbstractAlgebra.jl and explain what mathematical domains they represent.","category":"page"},{"location":"AbstractAlgebra/docs/src/constructors/","page":"Constructing mathematical objects in AbstractAlgebra.jl","title":"Constructing mathematical objects in AbstractAlgebra.jl","text":"Mathematics AbstractAlgebra.jl constructor\nR = mathbbZ R = ZZ\nR = mathbbQ R = QQ\nR = mathbbF_p R = GF(p)\nR = mathbbZnmathbbZ R = ResidueRing(ZZ, n)\nS = Rx S, x = PolynomialRing(R, \"x\")\nS = Rx y S, (x, y) = PolynomialRing(R, [\"x\", \"y\"])\nS = Rx (to precision n) S, x = PowerSeriesRing(R, n, \"x\")\nS = R((x)) (to precision n) S, x = LaurentSeriesRing(R, n, \"x\")\nS = K((x)) (to precision n) S, x = LaurentSeriesField(K, n, \"x\")\nS = mathrmFrac_R S = FractionField(R)\nS = R(f) S = ResidueRing(R, f)\nS = R(f) (with (f) maximal) S = ResidueField(R, f)\nS = mathrmMat_mtimes n(R) S = MatrixSpace(R, m, n)\nS = mathbbQx(f) S, a = NumberField(f, \"a\")","category":"page"},{"location":"Nemo/docs/src/factor/","page":"Factorisation","title":"Factorisation","text":"CurrentModule = Nemo\nDocTestSetup = quote\n  using Nemo\nend","category":"page"},{"location":"Nemo/docs/src/factor/#Factorisation","page":"Factorisation","title":"Factorisation","text":"","category":"section"},{"location":"Nemo/docs/src/factor/","page":"Factorisation","title":"Factorisation","text":"Nemo provides a unified interface to handle factorisations using the Fact objects. These can only be constructed using the factor function for the respective ring elements. This is best illustrated by an example.","category":"page"},{"location":"Nemo/docs/src/factor/","page":"Factorisation","title":"Factorisation","text":"julia> fac = factor(ZZ(-6000361807272228723606))\n-1 * 2 * 229^3 * 43669^3 * 3\n\njulia> unit(fac)\n-1\n\njulia> -6000361807272228723606 == unit(fac) * prod([ p^e for (p, e) in fac])\ntrue\n\njulia> for (p, e) in fac; println(\"$p $e\"); end\n2 1\n229 3\n43669 3\n3 1\n\njulia> 229 in fac\ntrue\n\njulia> fac[229]\n3","category":"page"},{"location":"Nemo/docs/src/factor/#Basic-functionality","page":"Factorisation","title":"Basic functionality","text":"","category":"section"},{"location":"Nemo/docs/src/factor/","page":"Factorisation","title":"Factorisation","text":"Objects of type Fac are iterable, that is, if a is an object of type Fac, then for (p, e) in a will iterate through all pairs (p, e), where p is a factor and e the corresponding exponent.","category":"page"},{"location":"Nemo/docs/src/factor/","page":"Factorisation","title":"Factorisation","text":"in(::fmpz, ::Fac{fmpz})\ngetindex(::Fac{fmpz}, ::fmpz)\nlength(::Fac{fmpz})\nunit(::Fac{fmpz})","category":"page"},{"location":"Nemo/docs/src/factor/#Base.in-Tuple{fmpz,Fac{fmpz}}","page":"Factorisation","title":"Base.in","text":"in(a, b::Fac)\n\nTest whether a is a factor of b.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/factor/#Base.getindex-Tuple{Fac{fmpz},fmpz}","page":"Factorisation","title":"Base.getindex","text":"getindex(a::Fac, b) -> Int\n\nIf b is a factor of a, the corresponding exponent is returned. Otherwise an error is thrown.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/factor/#Base.length-Tuple{Fac{fmpz}}","page":"Factorisation","title":"Base.length","text":"length(a::Fac) -> Int\n\nReturn the number of factors of a, not including the unit.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/factor/#AbstractAlgebra.unit-Tuple{Fac{fmpz}}","page":"Factorisation","title":"AbstractAlgebra.unit","text":"unit(a::Fac{T}) -> T\n\nReturn the unit of the factorization.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/developer/introduction/#Introduction-to-Nemo-development","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"","category":"section"},{"location":"Nemo/docs/src/developer/introduction/#Relationship-to-AbstractAlgebra.jl","page":"Introduction to Nemo development","title":"Relationship to AbstractAlgebra.jl","text":"","category":"section"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Some time in the past, Nemo was split into two packages called Nemo.jl and AbstractAlgebra.jl. The purpose was to provide a Julia only package which did some subset of what Nemo could do, albeit slower. This was requested by people in the Julia community.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Unfortunately this hasn't been terribly successful. Most Julia developers expect that AbstractAlgebra and Nemo functionality will work for Julia matrices over AbstractAlgebra/Nemo rings. This would be possible for functions that do not conflict with Base or LinearAlgebra at least when working with non-empty matrices. However, for reasons that we explain in both the Appendix to the AbstractAlgebra package and in the parent object section of the developer documentation, this is not possible even in theory for functions that would conflict with Julia's standard library or for empty matrices (except in a limited number of special cases).","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Unfortunately the Julia standard library functions do not work with matrices of Nemo objects and there is little we can do about this. Moreover, some Julia functionality isn't supported by the underlying C libraries in Nemo and would be difficult or impossible to provide on the C side.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Nowadays we see AbstractAlgebra to provide three things to Nemo:","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"An abstract type hierarchy\nGeneric ring constructions, e.g. generic polynomials and matrices\nGeneric implementations that should work for any ring implementing the required interfaces. These interfaces are documented in the AbstractAlgebra documentation.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Nemo itself is now more or less just a wrapper of three C libraries:","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Flint : polynomials and matrices over Z, Q, Z/nZ, Qp, Fq\nArb : polynomials, matrices and special functions over balls over R and C\nAntic : algebraic number field element arithmetic","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Each ring implemented in those C libraries is wrapped in such a way as to implement the interfaces described by AbstractAlgebra.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Most of the time an AbstractAlgebra implementation will work just as well using Nemo, but the latter will usually be faster, due to the extremely performant C code (around half a million lines of it).","category":"page"},{"location":"Nemo/docs/src/developer/introduction/#Layout-of-files","page":"Introduction to Nemo development","title":"Layout of files","text":"","category":"section"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"In the src directory of Nemo are three directories flint, arb and antic, each containing the wrappers for the relevant C libraries. The test directory is similarly organised.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Within each of these directories is a set of files, one per module within the C libraries, e.g. the fmpz.jl file wraps the Flint fmpz module for multiple precision integers. The fmpz_poly.jl file wraps the Flint univariate polynomials over fmpz integers, and so on.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"The fmpq prefix is for Flint rationals, fq for Flint finite fields with multiprecision characteristic, fq_nmod is the same but for single word characteristic. The padic prefix is for the field of p-adic numbers for a given p. The nmod prefix is for Z/nZ for a given n. The gfp prefix is the same as Z/nZ but where n is prime, so that we are dealing with a field.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"The FlintTypes.jl file contains the implementation of all the Flint types.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"In the antic directory, nf_elem is for elements of a number field.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"The AnticTypes.jl file contains the Antic types.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"In the arb directory the arb prefix is for arbitrary precision ball arithmetic over the reals. The acb prefix is similar but for complex numbers.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"The ArbTypes.jl file contains the Arb types.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"In the AbstractAlgebra.jl package the src directory contains a directory called generic. This is where a majority of the implementations currently reside. Each file such as Matrix.jl corresponds to a generic group/ring/field or other algebraic construction (typically over a base ring).","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"The file GenericTypes.jl is where all the generic types are implemented.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"At the top level of the src directory is a file Generic.jl which is where the Generic submodule of AbstractAlgebra resides containing all of the above implementations.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Also at that top level is AbstractTypes.jl where all the AbstractAlgebra abstract types are defined.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Also in the src directory is a subdirectory called Julia. This is where we give our own implementations of functionality for Julia Integers and Rationals and various other basic rings implemented in terms of Julia types. These are provided so that the package will work as a pure Julia package, replacing many of the rings and fields that would be available in Flint and the other C libraries with Julia equivalents.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Note that some of the implementations we give there would conflict with Base and so are only available inside AbstractAlgebra and are not exported!","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"We try to keep the test directory at the top level of the source tree organised in the same manner as the other directories just discussed.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/#Git,-GitHub-and-project-workflows","page":"Introduction to Nemo development","title":"Git, GitHub and project workflows","text":"","category":"section"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"The official repositories for AbstractAlgebra and Nemo are:","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"https://github.com/Nemocas/AbstractAlgebra.jl","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"https://github.com/Nemocas/Nemo.jl","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"If you wish to contribute to these projects, the first step is to fork them on GitHub. The button for this is in the upper right of the main project page. You will need to sign up for a free GitHub account to do this.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Once you have your own GitHub copy of our repository you can push changes to it from your local machine and this will make them visible to the world.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Before sinking a huge amount of time into a contribution, please open a ticket on the official project page on GitHub explaining what you intend to do and discussing it with the other developers.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"The easiest way to get going with development on your local machine is to dev AbstractAlgebra and/or Nemo. To do this, press the ] key in Julia to enter the special package mode and type:","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"dev Nemo","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Now you will find a local copy on your machine of the Nemo repository in","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":".julia/dev/Nemo","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"However, this will be set up to push to the official repository instead of your own, so you will need to change this. For example, if your GitHub account name is myname, edit the .git/config file in your local Nemo directory to say:","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"        url = https://github.com/Nemocas/Nemo.jl.git\n        pushurl = https://github.com/myname/Nemo.jl","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"instead of just the first line which will already be there.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"It is highly recommended that you do not work in the master branch, but create a new branch for each thing you want to contribute to Nemo.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"git checkout -b mynewbranch","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"If your contribution is small and does not take a long time to implement, everything will likely be fine if you simply commit the changes locally, then push them to your GitHub account online:","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"git commit -a\ngit push --all","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"However, if you are working on a much larger project it is highly recommended that you frequently pull from the official master branch and rebase your new branch on top of any changes that have been made there:","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"git checkout master\ngit pull\ngit checkout mynewbranch\ngit rebase master","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Note that rebasing will try to rewrite each of your commits over the top of the branch you are rebasing on (master in this case). This process will have many steps if there are many commits and lots of conflicts. Simply follow the instructions until the process is finished.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"The longer you leave it before rebasing on master the longer the rebase process will take. It can eventually become overwhelming as it is not replaying the latest state of your repository over master, but each commit that you made in order. You may have completely forgotten what those older commits were about, so this can become very difficult if not done regularly.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Once you have pushed your changes to your GitHub account, go to the official project GitHub page and you should see your branch mentioned near the top of the page. Open a pull request.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Someone will review your code and suggest changes they'd like made. Simply add more commits to your branch and push again. They will automatically get added to your pull request.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Note that we don't accept code without tests and documentation. We use Documenter.jl for our documentation, in Markdown format. See our existing code for examples of docstrings above functions in the source code and look in the docs/src directory to see how these docstrings are merged into our online documentation.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/#Development-list","page":"Introduction to Nemo development","title":"Development list","text":"","category":"section"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"All developers of AbstractAlgebra and Nemo are welcome to write to our development list to ask questions and discuss development:","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"https://groups.google.com/g/nemo-devel","category":"page"},{"location":"Nemo/docs/src/developer/introduction/#Reporting-bugs","page":"Introduction to Nemo development","title":"Reporting bugs","text":"","category":"section"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Bugs should be reported by opening an issue (ticket) on the official GitHub page for the relevant project. Please state the Julia version being used, the machine you are using and the version of AbstractAlgebra/Nemo you are using. The version can be found in the Project.toml file at the top level of the source tree.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/#Development-roadmap","page":"Introduction to Nemo development","title":"Development roadmap","text":"","category":"section"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"AbstractAlgebra has a special roadmap ticket which lists the most important tickets that have been opened. If you want to contribute something high value this is the place to start:","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"https://github.com/Nemocas/AbstractAlgebra.jl/issues/492","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"This ticket is updated every so often.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/#Binaries","page":"Introduction to Nemo development","title":"Binaries","text":"","category":"section"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Binaries of C libraries for Nemo are currently made in a separate repository:","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"https://github.com/JuliaPackaging/Yggdrasil","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"If code is added to any of the C libraries used by Nemo, this jll package must be updated first and the version updated in Nemo.jl before the new functionality can be used. Ask the core developers for help with this as various other tasks must be completed at the same time.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/#Relationship-to-Oscar","page":"Introduction to Nemo development","title":"Relationship to Oscar","text":"","category":"section"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Nemo and AbstractAlgebra are heavily used by the Oscar computer algebra system being developed in Germany by a number of universities involved in a large project known as TRR 195, funded by the DFG.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"Oscar is the number one customer for Nemo. Many bugs in Nemo are found and fixed by Oscar developers and most of the key Nemo developers are part of the Oscar project.","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"See the Oscar website for further details:","category":"page"},{"location":"Nemo/docs/src/developer/introduction/","page":"Introduction to Nemo development","title":"Introduction to Nemo development","text":"https://oscar.computeralgebra.de/","category":"page"},{"location":"Nemo/docs/src/mpolynomial/","page":"Multivariate polynomials","title":"Multivariate polynomials","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/mpolynomial/#Multivariate-polynomials","page":"Multivariate polynomials","title":"Multivariate polynomials","text":"","category":"section"},{"location":"Nemo/docs/src/mpolynomial/#Introduction","page":"Multivariate polynomials","title":"Introduction","text":"","category":"section"},{"location":"Nemo/docs/src/mpolynomial/","page":"Multivariate polynomials","title":"Multivariate polynomials","text":"Nemo allow the creation of sparse, distributed multivariate polynomials over any computable ring R. There are two different kinds of implementation: a generic one for the case where no specific implementation exists (provided by AbstractAlgebra.jl), and efficient implementations of polynomials over numerous specific rings, usually provided by C/C++ libraries.","category":"page"},{"location":"Nemo/docs/src/mpolynomial/","page":"Multivariate polynomials","title":"Multivariate polynomials","text":"The following table shows each of the polynomial types available in Nemo, the base ring R, and the Julia/Nemo types for that kind of polynomial (the type information is mainly of concern to developers).","category":"page"},{"location":"Nemo/docs/src/mpolynomial/","page":"Multivariate polynomials","title":"Multivariate polynomials","text":"Base ring Library Element type Parent type\nGeneric ring R AbstractAlgebra.jl Generic.MPoly{T} Generic.MPolyRing{T}\nmathbbZ Flint fmpz_mpoly FmpzMPolyRing\nmathbbZnmathbbZ (small n) Flint nmod_mpoly NmodMPolyRing\nmathbbQ Flint fmpq_mpoly FmpqMPolyRing","category":"page"},{"location":"Nemo/docs/src/mpolynomial/","page":"Multivariate polynomials","title":"Multivariate polynomials","text":"The following are not implemented yet, but will be available soon:","category":"page"},{"location":"Nemo/docs/src/mpolynomial/","page":"Multivariate polynomials","title":"Multivariate polynomials","text":"Base ring Library Element type Parent type\nmathbbZpmathbbZ (small prime p) Flint gfp_mpoly GFPMPolyRing\nmathbbF_p^n (small p) Flint fq_nmod_mpoly FqNmodMPolyRing","category":"page"},{"location":"Nemo/docs/src/mpolynomial/","page":"Multivariate polynomials","title":"Multivariate polynomials","text":"The string representation of the variables and the base ring R of a generic polynomial is stored in its parent object. ","category":"page"},{"location":"Nemo/docs/src/mpolynomial/","page":"Multivariate polynomials","title":"Multivariate polynomials","text":"All polynomial element types belong to the abstract type MPolyElem and all of the polynomial ring types belong to the abstract type MPolyRing. This enables one to write generic functions that can accept any Nemo multivariate polynomial type.","category":"page"},{"location":"Nemo/docs/src/mpolynomial/#Polynomial-functionality","page":"Multivariate polynomials","title":"Polynomial functionality","text":"","category":"section"},{"location":"Nemo/docs/src/mpolynomial/","page":"Multivariate polynomials","title":"Multivariate polynomials","text":"All multivariate polynomial types in Nemo follow the AbstractAlgebra.jl multivariate polynomial interface:","category":"page"},{"location":"Nemo/docs/src/mpolynomial/","page":"Multivariate polynomials","title":"Multivariate polynomials","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/mpolynomial_rings","category":"page"},{"location":"Nemo/docs/src/mpolynomial/","page":"Multivariate polynomials","title":"Multivariate polynomials","text":"Generic multivariate polynomials are also available, and Nemo multivariate polynomial types also implement all of the same functionality.","category":"page"},{"location":"Nemo/docs/src/mpolynomial/","page":"Multivariate polynomials","title":"Multivariate polynomials","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/mpolynomial.","category":"page"},{"location":"Nemo/docs/src/mpolynomial/","page":"Multivariate polynomials","title":"Multivariate polynomials","text":"We describe here only functions that are in addition to that guaranteed by AbstractAlgebra.jl, for specific coefficient rings.","category":"page"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/padic/#Padics","page":"Padics","title":"Padics","text":"","category":"section"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"P-adic fields are provided in Nemo by Flint. This allows construction of p-adic fields for any prime p.","category":"page"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"P-adic fields are constructed using the FlintPadicField function. However, for convenience we define","category":"page"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"PadicField = FlintPadicField","category":"page"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"so that p-adic fields can be constructed using PadicField rather than FlintPadicField. Note that this is the name of the constructor, but not of padic field type.","category":"page"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"The types of p-adic fields in Nemo are given in the following table, along with the libraries that provide them and the associated types of the parent objects.","category":"page"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"Library Field Element type Parent type\nFlint mathbbQ_p padic PadicField","category":"page"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"All the p-adic field types belong to the Field abstract type and the p-adic field element types belong to the FieldElem abstract type.","category":"page"},{"location":"Nemo/docs/src/padic/#P-adic-functionality","page":"Padics","title":"P-adic functionality","text":"","category":"section"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"P-adic fields in Nemo implement the AbstractAlgebra.jl field interface.","category":"page"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/fields","category":"page"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"Below, we document all the additional function that is provide by Nemo for p-adic fields.","category":"page"},{"location":"Nemo/docs/src/padic/#Constructors","page":"Padics","title":"Constructors","text":"","category":"section"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"In order to construct p-adic field elements in Nemo, one must first construct the p-adic field itself. This is accomplished with one of the following constructors.","category":"page"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"FlintPadicField(::Integer, ::Int)","category":"page"},{"location":"Nemo/docs/src/padic/#Nemo.FlintPadicField-Tuple{Integer,Int64}","page":"Padics","title":"Nemo.FlintPadicField","text":"FlintPadicField(p::Integer, prec::Int; kw...)\n\nReturns the parent object for the p-adic field for given prime p, where the default absolute precision of elements of the field is given by prec.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"It is also possible to call the inner constructor directly. It has the following form.","category":"page"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"FlintPadicField(p::fmpz, prec::Int)","category":"page"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"Returns the parent object for the p-adic field for given prime p, where the default absolute precision of elements of the field is given by prec.","category":"page"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"Here are some examples of creating p-adic fields and making use of the resulting parent objects to coerce various elements into those fields.","category":"page"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"Examples","category":"page"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"R = PadicField(7, 30)\nS = PadicField(ZZ(65537), 30)\n\na = R()\nb = S(1)\nc = S(ZZ(123))\nd = R(ZZ(1)//7^2)","category":"page"},{"location":"Nemo/docs/src/padic/#Big-oh-notation","page":"Padics","title":"Big-oh notation","text":"","category":"section"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"Elements of p-adic fields can  be constructed using the big-oh notation. For this purpose we define the following functions.","category":"page"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"O(::FlintPadicField, ::Integer)\nO(::FlintPadicField, ::fmpz)\nO(::FlintPadicField, ::fmpq)","category":"page"},{"location":"Nemo/docs/src/padic/#AbstractAlgebra.Generic.O-Tuple{FlintPadicField,Integer}","page":"Padics","title":"AbstractAlgebra.Generic.O","text":"O(R::FlintPadicField, m::Integer)\n\nConstruct the value 0 + O(p^n) given m = p^n. An exception results if m is not found to be a power of p = prime(R).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/padic/#AbstractAlgebra.Generic.O-Tuple{FlintPadicField,fmpz}","page":"Padics","title":"AbstractAlgebra.Generic.O","text":"O(R::FlintPadicField, m::fmpz)\n\nConstruct the value 0 + O(p^n) given m = p^n. An exception results if m is not found to be a power of p = prime(R).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/padic/#AbstractAlgebra.Generic.O-Tuple{FlintPadicField,fmpq}","page":"Padics","title":"AbstractAlgebra.Generic.O","text":"O(R::FlintPadicField, m::fmpq)\n\nConstruct the value 0 + O(p^n) given m = p^n. An exception results if m is not found to be a power of p = prime(R).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"The O(p^n) construction can be used to construct p-adic values of precision n by adding it to integer values representing the p-adic value modulo p^n as in the examples.","category":"page"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"Examples","category":"page"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"R = PadicField(7, 30)\nS = PadicField(ZZ(65537), 30)\n\nc = 1 + 2*7 + 4*7^2 + O(R, 7^3)\nd = 13 + 357*ZZ(65537) + O(S, ZZ(65537)^12)\nf = ZZ(1)//7^2 + ZZ(2)//7 + 3 + 4*7 + O(R, 7^2)","category":"page"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"Beware that the expression 1 + 2*p + 3*p^2 + O(R, p^n) is actually computed as a normal Julia expression. Therefore if {Int} values are used instead of Flint integers or Julia bignums, overflow may result in evaluating the value.","category":"page"},{"location":"Nemo/docs/src/padic/#Basic-manipulation","page":"Padics","title":"Basic manipulation","text":"","category":"section"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"prime(::FlintPadicField)","category":"page"},{"location":"Nemo/docs/src/padic/#AbstractAlgebra.Generic.prime-Tuple{FlintPadicField}","page":"Padics","title":"AbstractAlgebra.Generic.prime","text":"prime(R::FlintPadicField)\n\nReturn the prime p for the given p-adic field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"precision(::padic)","category":"page"},{"location":"Nemo/docs/src/padic/#Base.precision-Tuple{padic}","page":"Padics","title":"Base.precision","text":"precision(a::padic)\n\nReturn the precision of the given p-adic field element, i.e. if the element is known to O(p^n) this function will return n.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"valuation(::padic)","category":"page"},{"location":"Nemo/docs/src/padic/#AbstractAlgebra.Generic.valuation-Tuple{padic}","page":"Padics","title":"AbstractAlgebra.Generic.valuation","text":"valuation(a::padic)\n\nReturn the valuation of the given p-adic field element, i.e. if the given element is divisible by p^n but not a higher power of p then the function will return n.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"lift(::FlintIntegerRing, ::padic)\nlift(::FlintRationalField, ::padic)","category":"page"},{"location":"Nemo/docs/src/padic/#Nemo.lift-Tuple{FlintIntegerRing,padic}","page":"Padics","title":"Nemo.lift","text":"lift(R::FlintIntegerRing, a::padic)\n\nReturn a lift of the given p-adic field element to mathbbZ.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/padic/#Nemo.lift-Tuple{FlintRationalField,padic}","page":"Padics","title":"Nemo.lift","text":"lift(R::FlintRationalField, a::padic)\n\nReturn a lift of the given p-adic field element to mathbbQ.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"Examples","category":"page"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"R = PadicField(7, 30)\n\na = 1 + 2*7 + 4*7^2 + O(R, 7^3)\nb = 7^2 + 3*7^3 + O(R, 7^5)\nc = R(2)\n\nk = precision(a)\nm = prime(R)\nn = valuation(b)\np = lift(FlintZZ, a)\nq = lift(FlintQQ, divexact(a, b))","category":"page"},{"location":"Nemo/docs/src/padic/#Square-root","page":"Padics","title":"Square root","text":"","category":"section"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"Base.sqrt(::padic)","category":"page"},{"location":"Nemo/docs/src/padic/#Base.sqrt-Tuple{padic}","page":"Padics","title":"Base.sqrt","text":"sqrt(a::padic)\n\nReturn the p-adic square root of a. We define this only when the valuation of a is even. The precision of the output will be precision(a) - valuation(a)2. If the square root does not exist, an exception is thrown.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"Examples","category":"page"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"R = PadicField(7, 30)\n\na = 1 + 7 + 2*7^2 + O(R, 7^3)\nb = 2 + 3*7 + O(R, 7^5)\nc = 7^2 + 2*7^3 + O(R, 7^4)\n\nd = sqrt(a)\nf = sqrt(b)\nf = sqrt(c)\ng = sqrt(R(121))","category":"page"},{"location":"Nemo/docs/src/padic/#Special-functions","page":"Padics","title":"Special functions","text":"","category":"section"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"Base.exp(::padic)","category":"page"},{"location":"Nemo/docs/src/padic/#Base.exp-Tuple{padic}","page":"Padics","title":"Base.exp","text":"exp(a::padic)\n\nReturn the p-adic exponential of a. We define this only when the valuation of a is positive (unless a = 0). The precision of the output will be the same as the precision of the input. If the input is not valid an exception is thrown.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"log(::padic)","category":"page"},{"location":"Nemo/docs/src/padic/#Base.log-Tuple{padic}","page":"Padics","title":"Base.log","text":"log(a::padic)\n\nReturn the p-adic logarithm of a. We define this only when the valuation of a is zero (but not for a == 0). The precision of the output will be the same as the precision of the input. If the input is not valid an exception is thrown.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"teichmuller(::padic)","category":"page"},{"location":"Nemo/docs/src/padic/#Nemo.teichmuller-Tuple{padic}","page":"Padics","title":"Nemo.teichmuller","text":"teichmuller(a::padic)\n\nReturn the Teichmuller lift of the p-adic value a. We require the valuation of a to be nonnegative. The precision of the output will be the same as the precision of the input. For convenience, if a is congruent to zero modulo p we return zero. If the input is not valid an exception is thrown.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"Examples","category":"page"},{"location":"Nemo/docs/src/padic/","page":"Padics","title":"Padics","text":"R = PadicField(7, 30)\n\na = 1 + 7 + 2*7^2 + O(R, 7^3)\nb = 2 + 5*7 + 3*7^2 + O(R, 7^3)\nc = 3*7 + 2*7^2 + O(R, 7^5)\n\nc = exp(c)\nd = log(a)\nc = exp(R(0))\nd = log(R(1))\nf = teichmuller(b)","category":"page"},{"location":"Nemo/docs/src/constructors/#Constructing-mathematical-objects-in-Nemo","page":"Constructing mathematical objects in Nemo","title":"Constructing mathematical objects in Nemo","text":"","category":"section"},{"location":"Nemo/docs/src/constructors/#Constructing-objects-in-Julia","page":"Constructing mathematical objects in Nemo","title":"Constructing objects in Julia","text":"","category":"section"},{"location":"Nemo/docs/src/constructors/","page":"Constructing mathematical objects in Nemo","title":"Constructing mathematical objects in Nemo","text":"In Julia, one constructs objects of a given type by calling a type constructor. This is simply a function with the same name as the type itself. For example, to construct a BigInt object in Julia, we simply call the BigInt constructor:","category":"page"},{"location":"Nemo/docs/src/constructors/","page":"Constructing mathematical objects in Nemo","title":"Constructing mathematical objects in Nemo","text":"n = BigInt(\"1234567898765434567898765434567876543456787654567890\")","category":"page"},{"location":"Nemo/docs/src/constructors/","page":"Constructing mathematical objects in Nemo","title":"Constructing mathematical objects in Nemo","text":"Julia also uses constructors to convert between types. For example, to convert an Int to a BigInt:","category":"page"},{"location":"Nemo/docs/src/constructors/","page":"Constructing mathematical objects in Nemo","title":"Constructing mathematical objects in Nemo","text":"m = BigInt(123)","category":"page"},{"location":"Nemo/docs/src/constructors/#How-we-construct-objects-in-Nemo","page":"Constructing mathematical objects in Nemo","title":"How we construct objects in Nemo","text":"","category":"section"},{"location":"Nemo/docs/src/constructors/","page":"Constructing mathematical objects in Nemo","title":"Constructing mathematical objects in Nemo","text":"Julia types don't contain enough information to properly model groups, rings and fields, especially if they are parameterised by values. For example, the ring of integers modulo n for a multiprecision modulus n cannot be modeled using types alone.","category":"page"},{"location":"Nemo/docs/src/constructors/","page":"Constructing mathematical objects in Nemo","title":"Constructing mathematical objects in Nemo","text":"Instead of using types to construct objects in Nemo, we use special objects that we refer to as parent objects. They behave a lot like Julia types.","category":"page"},{"location":"Nemo/docs/src/constructors/","page":"Constructing mathematical objects in Nemo","title":"Constructing mathematical objects in Nemo","text":"Consider the following simple example, to create a Flint multiprecision integer:","category":"page"},{"location":"Nemo/docs/src/constructors/","page":"Constructing mathematical objects in Nemo","title":"Constructing mathematical objects in Nemo","text":"n = ZZ(\"12345678765456787654567890987654567898765678909876567890\")","category":"page"},{"location":"Nemo/docs/src/constructors/","page":"Constructing mathematical objects in Nemo","title":"Constructing mathematical objects in Nemo","text":"Here ZZ is not a Julia type, but a callable object. However, for most purposes one can think of such a parent object ZZ as though it were a type.","category":"page"},{"location":"Nemo/docs/src/constructors/#Constructing-parent-objects","page":"Constructing mathematical objects in Nemo","title":"Constructing parent objects","text":"","category":"section"},{"location":"Nemo/docs/src/constructors/","page":"Constructing mathematical objects in Nemo","title":"Constructing mathematical objects in Nemo","text":"For more complicated groups, rings, fields, etc., one first needs to construct the parent object before one can use it to construct element objects.","category":"page"},{"location":"Nemo/docs/src/constructors/","page":"Constructing mathematical objects in Nemo","title":"Constructing mathematical objects in Nemo","text":"Nemo provides a set of functions for constructing such parent objects. For example, to create a parent object for polynomials over the integers, we use the PolynomialRing parent object constructor.","category":"page"},{"location":"Nemo/docs/src/constructors/","page":"Constructing mathematical objects in Nemo","title":"Constructing mathematical objects in Nemo","text":"R, x = PolynomialRing(ZZ, \"x\")\nf = x^3 + 3x + 1\ng = R(12)","category":"page"},{"location":"Nemo/docs/src/constructors/","page":"Constructing mathematical objects in Nemo","title":"Constructing mathematical objects in Nemo","text":"In this example, R is the parent object and we use it to convert the Int value 12 to an element of the polynomial ring mathbbZx.","category":"page"},{"location":"Nemo/docs/src/constructors/#List-of-parent-object-constructors","page":"Constructing mathematical objects in Nemo","title":"List of parent object constructors","text":"","category":"section"},{"location":"Nemo/docs/src/constructors/","page":"Constructing mathematical objects in Nemo","title":"Constructing mathematical objects in Nemo","text":"For convenience, we provide a list of all the parent object constructors in Nemo and explain what domains they represent.","category":"page"},{"location":"Nemo/docs/src/constructors/","page":"Constructing mathematical objects in Nemo","title":"Constructing mathematical objects in Nemo","text":"Mathematics Nemo constructor\nR = mathbbZ R = ZZ\nR = mathbbQ R = QQ\nR = mathbbF_p^n R, a = FiniteField(p, n, \"a\")\nR = mathbbZnmathbbZ R = ResidueRing(ZZ, n)\nS = Rx S, x = PolynomialRing(R, \"x\")\nS = Rx y S, (x, y) = PolynomialRing(R, [\"x\", \"y\"])\nS = Rx (to precision n) S, x = PowerSeriesRing(R, n, \"x\")\nS = R((x)) (to precision n) S, x = LaurentSeriesRing(R, n, \"x\")\nS = mathrmFrac_R S = FractionField(R)\nS = R(f) S = ResidueRing(R, f)\nS = mathrmMat_mtimes n(R) S = MatrixSpace(R, m, n)\nS = mathbbQx(f) S, a = NumberField(f, \"a\")\nS = mathbbQ_p (to precision N) S = PadicField(p, n)\nS = mathbbR (to precision n) S = RealField(n)\nS = mathbbC (to precision n) S = ComplexField(n)","category":"page"},{"location":"AbstractAlgebra/docs/src/map_cache/","page":"Cached maps","title":"Cached maps","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/map_cache/#Cached-maps","page":"Cached maps","title":"Cached maps","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/map_cache/","page":"Cached maps","title":"Cached maps","text":"All basic map (i.e. those not built up from other maps) in AbstractAlgebra can be cached.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_cache/","page":"Cached maps","title":"Cached maps","text":"A cache is a dictionary that can be switched on and off at run time that keeps a cache of previous evaluations of the map. This can be useful if the map is extremely difficult to evaluate, e.g. a discrete logarithm map. Rather than evaluate the map afresh each time, the map first looks up the dictionary of previous known values of the map.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_cache/","page":"Cached maps","title":"Cached maps","text":"To facilitate caching of maps, the Generic module provides a type Generic.MapCache, which can be used to wrap any existing map object with a dictionary.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_cache/","page":"Cached maps","title":"Cached maps","text":"Importantly, the supertype of the resulting MapCache object is identical to that of the map being cached. This means that any functions that would accept the original map will also accept the cached version.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_cache/","page":"Cached maps","title":"Cached maps","text":"Note that caching of maps only works for maps that correctly abstract access to their fields using accessor functions, as described in the map interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_cache/#Cached-map-constructors","page":"Cached maps","title":"Cached map constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/map_cache/","page":"Cached maps","title":"Cached maps","text":"To construct a cached map from an existing map object, we have the following function:","category":"page"},{"location":"AbstractAlgebra/docs/src/map_cache/","page":"Cached maps","title":"Cached maps","text":"cached(M::Map; enabled=true, limit=100)","category":"page"},{"location":"AbstractAlgebra/docs/src/map_cache/","page":"Cached maps","title":"Cached maps","text":"Return a cached map with the same supertype as M, caching up to limit values of the map M in a dictionary, assuming that the cache is enabled.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_cache/","page":"Cached maps","title":"Cached maps","text":"Caches can be disabled by setting the value of the parameter enabled to false. This allows for the user to quickly go through code and completely disable caches of maps that were previously enabled, for testing purposes, etc.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_cache/","page":"Cached maps","title":"Cached maps","text":"Caches can also be turned on and off at run time (see below).","category":"page"},{"location":"AbstractAlgebra/docs/src/map_cache/","page":"Cached maps","title":"Cached maps","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/map_cache/","page":"Cached maps","title":"Cached maps","text":"julia> f = map_from_func(x -> x + 1, ZZ, ZZ)\nMap with the following data\n\nDomain:\n=======\nIntegers\n\nCodomain:\n========\nIntegers\n\njulia> g = cached(f);\n\njulia> f(ZZ(1)) == g(ZZ(1))\ntrue","category":"page"},{"location":"AbstractAlgebra/docs/src/map_cache/#Functionality-for-cached-maps","page":"Cached maps","title":"Functionality for cached maps","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/map_cache/","page":"Cached maps","title":"Cached maps","text":"The following functions are provided for cached maps.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_cache/","page":"Cached maps","title":"Cached maps","text":"enable_cache!(M::MapCache)\ndisable_cache!(M::MapCache)","category":"page"},{"location":"AbstractAlgebra/docs/src/map_cache/","page":"Cached maps","title":"Cached maps","text":"Temporarily enable or disable the cache for the given map. The values stored in the cache are not lost when it is disabled.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_cache/","page":"Cached maps","title":"Cached maps","text":"set_limit!(M::MapCache, limit::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/map_cache/","page":"Cached maps","title":"Cached maps","text":"Set the limit on the number of values that can be cached in the dictionary, to the given value. Setting the value to 0 will effectively disable further caching for this map.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_cache/","page":"Cached maps","title":"Cached maps","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/map_cache/","page":"Cached maps","title":"Cached maps","text":"julia> f = cached(map_from_func(x -> x + 1, ZZ, ZZ));\n\njulia> a = f(ZZ(1))\n2\n\njulia> disable_cache!(f)\n\njulia> b = f(ZZ(1))\n2\n\njulia> enable_cache!(f)\n\njulia> c = f(ZZ(1))\n2\n\njulia> set_limit!(f, 200)\n200\n\njulia> d = f(ZZ(1))\n2","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/#Map-with-inverse","page":"Map with inverse","title":"Map with inverse","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"It is not possible to provide generic functionality to invert a map. However, sometimes one knows an inverse map explicitly and would like to keep track of this.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"Recall that as map composition is not commutative, there is a notion of a left inverse and a right inverse for maps.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"To keep track of such inverse maps, AbstractAlgebra provides data types Generic.MapWithRetraction and Generic.MapWithSection.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"Given a map f  X to Y, a retraction of f is a map g  Y to X such that g(f(x)) = x for all x in X.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"Given a map f  X to Y, a section of f is a map g  Y to X such that f(g(x)) = x for all y in Y.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"In AbstractAlgebra, a map with retraction/section is an object containing a pair of maps, the second of which is a retraction/section of the first.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"Maps with retraction/section can be composed, and we also define the inverse of such a pair to be the map with the pair swapped. Thus the inverse of a map with retraction is a map with section.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/#Map-with-inverse-constructors","page":"Map with inverse","title":"Map with inverse constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"To construct a map with retraction/section from a pair of maps, we have the following functions:","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"map_with_retraction(m::Map{D, C}, r::Map{C, D}) where {D, C}\nmap_with_section(m::Map{D, C}, s::Map{C, D}) where {D, C}","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"Construct the map with retraction/section given a known retraction/section r or s respectively, of m.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"For convenience we allow construction of maps with retraction/section from a pair of Julia functions/closures.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"map_with_retraction_from_func(f::Function, r::Function, R, S)\nmap_with_section_from_func(f::Function, s::Function, R, S)","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"Construct the map with retraction/section such that the map is given by the function f and the retraction/section is given by the function r or s respectively. Here R is the parent object representing the domain and S is the parent object representing the codomain of f.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"julia> f = map_with_retraction_from_func(x -> x + 1, x -> x - 1, ZZ, ZZ)\nMap with retraction with the following data\n\nDomain:\n=======\nIntegers\n\nCodomain:\n========\nIntegers\n\njulia> a = f(ZZ(1))\n2","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/#Functionality-for-maps-with-inverses","page":"Map with inverse","title":"Functionality for maps with inverses","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"The following functionality is provided for maps with inverses.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"inv(M::MapWithRetraction)\ninv(M::MapWithSection)","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"Return the map with the two maps contained in M swapped. In the first case, a MapWithSection is returned. In the second case a MapWithRetraction is returned.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"To access the two maps stored in a map with retraction/section, we have the following:","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"image_map(M::MapWithRetraction)\nimage_map(M::MapWithSection)\nretraction_map(M::MapWithRetraction)\nsection_map(M::MapWithSection)","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"The first two of these functions return the first map in a map with retraction/section, the second two functions return the corresponding second maps.","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/map_with_inverse/","page":"Map with inverse","title":"Map with inverse","text":"julia> f = map_with_retraction_from_func(x -> x + 1, x -> x - 1, ZZ, ZZ)\nMap with retraction with the following data\n\nDomain:\n=======\nIntegers\n\nCodomain:\n========\nIntegers\n\njulia> g = inv(f)\nMap with section with the following data\n\nDomain:\n=======\nIntegers\n\nCodomain:\n========\nIntegers\n\njulia> h = f*g\nComposite map consisting of the following\n\nIntegers -> Integers\nthen\nIntegers -> Integers\n\njulia> a = h(ZZ(1))\n1\n","category":"page"},{"location":"CommutativeAlgebra/ca_modules/","page":"Modules","title":"Modules","text":"CurrentModule = Oscar","category":"page"},{"location":"CommutativeAlgebra/ca_modules/","page":"Modules","title":"Modules","text":"using Oscar","category":"page"},{"location":"CommutativeAlgebra/ca_modules/","page":"Modules","title":"Modules","text":"Pages = [\"ca_modules.md\"]","category":"page"},{"location":"CommutativeAlgebra/ca_modules/#Modules","page":"Modules","title":"Modules","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_modules/","page":"Modules","title":"Modules","text":"Modules over a multivariate polynomial ring are implemented as subquotients. That is, they are  submodules of quotients of free modules. Explicitly, the subquotient M with generators A and relations B over the ring R is defined to be the module M = (im A + im B)im B, where A R^mrightarrow R^p and B R^mrightarrow R^p are two matrices representing maps of free R-modules with the same codomain.","category":"page"},{"location":"CommutativeAlgebra/ca_modules/","page":"Modules","title":"Modules","text":"In all commands, be sure that ideals and rings are considered as modules. Are free modules modules?","category":"page"},{"location":"CommutativeAlgebra/ca_modules/","page":"Modules","title":"Modules","text":"Other rings? E.g. Euclidean rings","category":"page"},{"location":"AbstractAlgebra/docs/src/numberfield/","page":"Number fields","title":"Number fields","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/numberfield/#Number-fields","page":"Number fields","title":"Number fields","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/numberfield/","page":"Number fields","title":"Number fields","text":"AbstractAlgebra.jl provides a very naive implementation of number fields. This allows arithmetic in algebraic number fields, which are currently modeled as mathbbQx modulo an irreducible polynomial, i.e. as a residue field.","category":"page"},{"location":"AbstractAlgebra/docs/src/numberfield/","page":"Number fields","title":"Number fields","text":"In fact, the definition of the number field constructor is currently given in src/generic/ResidueField.jl and no type is defined for a number field. The definition mainly exists for testing purposes. It may later be replaced by a more standard implementation. For a more fully fleshed out number field implementation (based on a very high performance C library), see Nemo.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/numberfield/#Number-field-constructors","page":"Number fields","title":"Number field constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/numberfield/","page":"Number fields","title":"Number fields","text":"In order to construct number fields in AbstractAlgebra.jl, one must first construct the field itself. This is accomplished with the following constructor.","category":"page"},{"location":"AbstractAlgebra/docs/src/numberfield/","page":"Number fields","title":"Number fields","text":"NumberField(f::AbstractAlgebra.Generic.Poly{Rational{BigInt}}, s::AbstractString, t = \"\\$\"; cached = true)","category":"page"},{"location":"AbstractAlgebra/docs/src/numberfield/","page":"Number fields","title":"Number fields","text":"Given an irreducible defining polynomial f in mathbbQx, return a tuple (K x) consisting of the number field defined by that polynomial and a generator. The string fields are currently ignored, but are reserved for future use.","category":"page"},{"location":"AbstractAlgebra/docs/src/numberfield/","page":"Number fields","title":"Number fields","text":"Currently the generator of the number field prints the same way as the variable in mathbbQx.","category":"page"},{"location":"AbstractAlgebra/docs/src/numberfield/","page":"Number fields","title":"Number fields","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/numberfield/","page":"Number fields","title":"Number fields","text":"julia> R, x = PolynomialRing(QQ, \"x\")\n(Univariate Polynomial Ring in x over Rationals, x)\n\njulia> K, a = NumberField(x^3 + 3x + 1, \"a\")\n(Residue field of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1, x)\n\njulia> f = a^2 + 2a + 7\nx^2 + 2*x + 7\n","category":"page"},{"location":"AbstractAlgebra/docs/src/numberfield/#Basic-field-functionality","page":"Number fields","title":"Basic field functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/numberfield/","page":"Number fields","title":"Number fields","text":"The number field module in AbstractAlgebra.jl implements the full Field and ResidueRing interfaces.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/#Generic-matrix-algebras","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"AbstractAlgebra.jl allows the creation of an algebra (ring) of mtimes m matrices over a computable, commutative ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"Functions specific to generic matrix algebras of mtimes m matrices are implemented in src/generic/MatrixAlgebra.jl. The remaining functionality is in the file src/generic/Matrix.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"As well as implementing the entire Matrix interface, including the optional functionality, there are many additional generic algorithms implemented for matrix algebras.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"Almost all of the functionality specified for generic matrices is available for matrix algebras. The exceptions are functions such as solve and nullspace which may return non-square matrices, or which don't accept square matrices.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"All of the generic functionality is part of the Generic submodule of AbstractAlgebra.jl. This is exported by default, so it is not necessary to qualify names of functions.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/#Types-and-parent-objects","page":"Generic matrix algebras","title":"Types and parent objects","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"Generic matrices in AbstractAlgebra.jl have type Generic.MatAlgElem{T} for matrices in a matrix algebra, where T is the type of elements of the matrix. Internally, generic matrices are implemented using an object wrapping a Julia two dimensional array, though they are not themselves Julia arrays. See the file src/generic/GenericTypes.jl for details.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"Parents of generic matrices in a matrix algebra have type Generic.MatAlgebra{T}.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"Note that matrix algebras are noncommutative rings. Thus their types belong to NCRing and NCRingElem. They cannot be used in constructions which require a commutative ring (Ring and RingElem respectively).","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"The generic matrix algebra matrix types belong to the abstract type AbstractAlgebra.MatAlgElem{T} and the parent types belong to  AbstractAlgebra.MatAlgebra{T} Note that both of these require disambiguation from the concrete types in Generic of the same name.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"The degree and base ring R of a generic matrix are stored in its parent object, however to allow creation of matrices without first creating the matrix space parent, generic matrices in Julia do not contain a reference to their parent. They contain the row and column numbers (or degree, in the case of matrix algebras) and the base ring on a per matrix basis. The parent object can then be reconstructed from this data on demand.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/#Matrix-algebra-constructors","page":"Generic matrix algebras","title":"Matrix algebra constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"A matrix algebra in AbstractAlgebra.jl represents a collection of all matrices with given degree and base ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"In order to construct matrices in AbstractAlgebra.jl, one must construct the matrix algebra itself. This is accomplished with the following constructor.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"MatrixAlgebra(R::Ring, degree::Int; cache::Bool=true)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"Construct the algebra of matrices with the given degree over the given base ring. By default such matrix spaces are cached based on the base ring and degree. If the optional named parameter cached is set to false, no caching occurs.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"Here are some examples of creating matrix algebras and making use of the resulting parent objects to coerce various elements into the matrix algebra.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"julia> R, t = PolynomialRing(QQ, \"t\")\n(Univariate Polynomial Ring in t over Rationals, t)\n\njulia> S = MatrixAlgebra(R, 3)\nMatrix Algebra of degree 3 over Univariate Polynomial Ring in t over Rationals\n\njulia> A = S()\n[0   0   0]\n[0   0   0]\n[0   0   0]\n\njulia> B = S(12)\n[12    0    0]\n[ 0   12    0]\n[ 0    0   12]\n\njulia> C = S(R(11))\n[11    0    0]\n[ 0   11    0]\n[ 0    0   11]\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/#Matrix-algebra-element-constructors","page":"Generic matrix algebras","title":"Matrix algebra element constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"The following additional constructors are provided for constructing various kinds of matrices in a matrix algebra.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"zero(::MatAlgebra)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/#Base.zero-Tuple{MatAlgebra}","page":"Generic matrix algebras","title":"Base.zero","text":"zero(a::AbstractAlgebra.MatAlgebra)\n\nConstruct the zero matrix in the given matrix algebra.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"identity_matrix(::Generic.MatAlgElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/#AbstractAlgebra.Generic.identity_matrix-Union{Tuple{AbstractAlgebra.Generic.MatAlgElem{T}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic matrix algebras","title":"AbstractAlgebra.Generic.identity_matrix","text":"identity_matrix(M::MatAlgElem{T}) where T <: RingElement\n\nReturn the identity matrix over the same base ring as M and with the same dimensions.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"S = MatrixAlgebra(ZZ, 2)\nM = zero(S)\n\nP = identity_matrix(M)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/#Matrix-algebra-functionality-provided-by-AbstractAlgebra.jl","page":"Generic matrix algebras","title":"Matrix algebra functionality provided by AbstractAlgebra.jl","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"Most of the generic matrix functionality described in the generic matrix section of the documentation is available for both matrix spaces and matrix algebras. Exceptions include functions that do not return or accept square matrices or which cannot specify a parent. Such functions include solve and nullspace which can't be provided for matrix algebras.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"In addition to the functionality described for matrix spaces, matrix algebras support all noncommutative ring operations, and matrix algebras can be used as a base ring for other generic constructs that accept a noncommutative base ring (NCRing).","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"In this section we describe functionality provided for matrix algebras only.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/#Basic-matrix-functionality","page":"Generic matrix algebras","title":"Basic matrix functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"As well as the Ring and Matrix interfaces, the following functions are provided to manipulate matrices.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"degree(::Generic.MatAlgElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/#AbstractAlgebra.Generic.degree-Tuple{AbstractAlgebra.Generic.MatAlgElem}","page":"Generic matrix algebras","title":"AbstractAlgebra.Generic.degree","text":"degree(a::Generic.MatAlgElem)\n\nReturn the degree n of the ntimes n matrix a..\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_algebras/","page":"Generic matrix algebras","title":"Generic matrix algebras","text":"julia> R, t = PolynomialRing(QQ, \"t\")\n(Univariate Polynomial Ring in t over Rationals, t)\n\njulia> S = MatrixAlgebra(R, 3)\nMatrix Algebra of degree 3 over Univariate Polynomial Ring in t over Rationals\n\njulia> A = S([t + 1 t R(1); t^2 t t; R(-2) t + 2 t^2 + t + 1])\n[t + 1       t             1]\n[  t^2       t             t]\n[   -2   t + 2   t^2 + t + 1]\n\njulia> n = degree(A)\n3\n","category":"page"},{"location":"CommutativeAlgebra/ca/","page":"Introduction","title":"Introduction","text":"CurrentModule = Oscar","category":"page"},{"location":"CommutativeAlgebra/ca/","page":"Introduction","title":"Introduction","text":"using Oscar","category":"page"},{"location":"CommutativeAlgebra/ca/","page":"Introduction","title":"Introduction","text":"Pages = [\"ca.md\"]","category":"page"},{"location":"CommutativeAlgebra/ca/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"CommutativeAlgebra/ca/","page":"Introduction","title":"Introduction","text":"The commutative algebra part of OSCAR is under development with regard to providing both the functionality and the documentation. At current state, the documentation serves as a guide on what to do and will be constantly updated.","category":"page"},{"location":"CommutativeAlgebra/ca/","page":"Introduction","title":"Introduction","text":"General textbooks offering details on theory and algorithms include: ","category":"page"},{"location":"CommutativeAlgebra/ca/","page":"Introduction","title":"Introduction","text":"G. Greuel , G. Pfister  (2007)\nW. Decker , C. Lossen  (2006)\nW. Decker , G. Pfister  (2013)","category":"page"},{"location":"Hecke/docs/src/MaximalOrders/Ideals/#Ideals","page":"Ideals","title":"Ideals","text":"","category":"section"},{"location":"Hecke/docs/src/MaximalOrders/Ideals/","page":"Ideals","title":"Ideals","text":"@module{Hecke}","category":"page"},{"location":"Hecke/docs/src/MaximalOrders/Ideals/","page":"Ideals","title":"Ideals","text":"@{nf(::NfMaximalOrderIdeal)}","category":"page"},{"location":"Hecke/docs/src/MaximalOrders/Introduction/#Maximal-Order","page":"Maximal Order","title":"Maximal Order","text":"","category":"section"},{"location":"Hecke/docs/src/MaximalOrders/Introduction/#Introduction","page":"Maximal Order","title":"Introduction","text":"","category":"section"},{"location":"Hecke/docs/src/MaximalOrders/Introduction/","page":"Maximal Order","title":"Maximal Order","text":"In Hecke, maximal orders (aka ring of integers), due to their special properties normal orders don't share, come with their own type NfMaximalOrder.  While the elements have type NfOrderElem, the ideals and fractional ideals have types NfMaximalOrderIdeal and NfMaximalOrderFracIdeal respectively.","category":"page"},{"location":"Hecke/docs/src/MaximalOrders/Introduction/","page":"Maximal Order","title":"Maximal Order","text":"While theoretically a number field contains a unique maximal order (the set of all integral elements), for technical reasons in Hecke a number field admits multiple maximal orders, which are uniquely determined by the number field and a chosen integral basis.","category":"page"},{"location":"Hecke/docs/src/MaximalOrders/Introduction/","page":"Maximal Order","title":"Maximal Order","text":"Let K be a number field of degree d with primitive element alpha and mathcal O a maximal order K with mathbfZ-basis (omega_1dotscomega_d). The basis matrix of mathcal O is the unique matrix M_mathcal O in operatornameMat_d times d(mathbfQ) such that \\begin{align} \\begin{pmatrix} \\omega1 \\\\ \\omega2 \\\\ \\vdots \\\\ \\omegad \\end{pmatrix} = M{\\mathcal O} \\begin{pmatrix} 1 \\\\ \\alpha \\\\ \\vdots \\\\ \\alpha^{d - 1} \\end{pmatrix}. \\end{align} If beta is an element of mathcal O, we call the unique integers (x_1dotscx_d) in mathbf Z^d with \\begin{align} \\beta = \\sum{i=1}^d xi \\omega_i \\end{align} the coefficients of beta with respect to mathcal O or just the coefficient vector.","category":"page"},{"location":"Hecke/docs/src/MaximalOrders/Introduction/","page":"Maximal Order","title":"Maximal Order","text":"For an ideal I of mathcal O, a basis matrix of I is a matrix M in operatornameMat_d times d(mathbfZ), such that the elements (alpha_1dotscalpha_d) definied by \\begin{align} \\begin{pmatrix} \\alpha1 \\\\ \\alpha2 \\\\ \\vdots \\\\ \\alphad \\end{pmatrix} = M{\\mathcal O} \\begin{pmatrix} \\omega1 \\\\ \\omega2 \\\\ \\vdots \\\\ \\omega_d \\end{pmatrix} \\end{align} form a mathbfZ-basis of I.","category":"page"},{"location":"Nemo/docs/src/developer/interfaces/","page":"Interfaces","title":"Interfaces","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/developer/interfaces/#Interfaces","page":"Interfaces","title":"Interfaces","text":"","category":"section"},{"location":"Nemo/docs/src/developer/interfaces/#Functionality-for-Generic-and-Abstract-Types","page":"Interfaces","title":"Functionality for Generic and Abstract Types","text":"","category":"section"},{"location":"Nemo/docs/src/developer/interfaces/","page":"Interfaces","title":"Interfaces","text":"As previously mentioned, Nemo provides various generic types, e.g. Poly{T} for generic univariate polynomials and Mat{T} for generic matrices over a base ring. These and other polynomial and matrix types belong in turn to abstract types or unions thereof, e.g. PolyElem{T} is an abstract type representing all univariate polynomial types and MatrixElem{T} is a union of all Nemo matrix types.","category":"page"},{"location":"Nemo/docs/src/developer/interfaces/","page":"Interfaces","title":"Interfaces","text":"When implementing generic functionality, one should usually implement it for the abstract types and unions thereof, since the new functionality will then work for all types of the specified kind, instead of just the generic types.","category":"page"},{"location":"Nemo/docs/src/developer/interfaces/","page":"Interfaces","title":"Interfaces","text":"In order for this to work in practice, such implementations can only use functions in the relevant official interface. These are the functions required to be implemented by all types of that kind. For example, matrix implementations make heavy use of addeq! and mul! to accumulate entries, but they cannot make use of functions such as subeq! as it is not part of the official interface.","category":"page"},{"location":"Nemo/docs/src/developer/interfaces/","page":"Interfaces","title":"Interfaces","text":"In addition to implementations for abstract types and their unions, one may also like to provide specialised implementations for the generic types e.g. Poly{T} and Mat{T} as one would for other specialised types. The generic types are based on Julia arrays internally, and so it makes perfect sense to implement lower level functionality for these types specifically, as this may lead to performance gains. Such specialised implementations can make use of any functions provided for the generic types, whether in the interface or not.","category":"page"},{"location":"Nemo/docs/src/developer/interfaces/","page":"Interfaces","title":"Interfaces","text":"For convenience we list the most important abstract types and their unions for which one should usually prefer to write generic implementations.","category":"page"},{"location":"Nemo/docs/src/developer/interfaces/","page":"Interfaces","title":"Interfaces","text":"PolyElem{T} : all univariate polynomial types\nMPolyElem{T} : all multivariate polynomial types (see note below)\nMatrixElem{T} : union of all matrix types including matrix algebras\nMatElem{T} : all matrix types not including matrix algebras\nAbsSeriesElem{T} : all abstract series types\nRelSeriesElem{T} : all relative series types\nLaurentSeriesElem{T} : union of all Laurent series over rings and fields\nPuiseuxSeriesElem{T} : union of all Puiseux series over rings and fields\nFPModule{T} : all finitely presented modules over a Euclidean domain\nFPModuleElem{T} : all elems of fin. presented modules over a Euc. domain\nFracElem{T} : all fractions\nResElem{T} : all elements of a residue ring\nResFieldElem{T} : all elements of a residue field\nMap{D, C} : all maps (see Maps developer docs for a description)","category":"page"},{"location":"Nemo/docs/src/developer/interfaces/","page":"Interfaces","title":"Interfaces","text":"N.B: inside the Generic submodule of AbstractAlgebra some abstract types Blah are only accessible by writing AbstractAlgebra.Blah. The unions are directly accessible. There may be generic types and abstract types with the same name, so this is more than just a convention.","category":"page"},{"location":"Nemo/docs/src/developer/interfaces/","page":"Interfaces","title":"Interfaces","text":"Note that multivariate polynomials tend to require very specialised implementations depending heavily on implementation details of the specific multivariate type. Therefore it is rare to write implementations for the abstract type MPolyElem{T}. Instead, implementations tend to be done for each concrete multivariate type separately.","category":"page"},{"location":"Nemo/docs/src/developer/interfaces/#Generic-interfaces","page":"Interfaces","title":"Generic interfaces","text":"","category":"section"},{"location":"Nemo/docs/src/developer/interfaces/","page":"Interfaces","title":"Interfaces","text":"As mentioned above, the generic implementations in Nemo depend on carefully written interfaces for each of the abstract types provided by the system.","category":"page"},{"location":"Nemo/docs/src/developer/interfaces/","page":"Interfaces","title":"Interfaces","text":"These interfaces are spelled out in the AbstractAlgebra documentation. Note that a generic implementation may depend on functions in both the required and optional interfaces as the optional functions are all implemented with generic fallbacks in terms of the required functions.","category":"page"},{"location":"Nemo/docs/src/developer/interfaces/","page":"Interfaces","title":"Interfaces","text":"For convenience we provide here a list of interfaces that can be relied on in generic implementations, along with a description.","category":"page"},{"location":"Nemo/docs/src/developer/interfaces/","page":"Interfaces","title":"Interfaces","text":"Ring : all commutative rings in the system\nField : all fields in the system\nNCRing : all rings in the system (not necessarily commutative)\nEuclidean Ring : Euclidean rings (see notes below)\nUnivariate Polynomial Ring : all dense univariate polynomials\nMultivariate Polynomial Ring : all sparse distributed multivariate polys.\nSeries Ring : all series, relative and absolute\nResidue Ring : all quotients of gcd domains with gcdx by a principal ideal\nFraction Field : all fractions over a gcd domain with gcdx\nModule : all finitely presented modules over a Euclidean domain\nMatrix : all matrices over a commutative ring\nMap : all (set) maps in the system","category":"page"},{"location":"Nemo/docs/src/developer/interfaces/","page":"Interfaces","title":"Interfaces","text":"Although we allow Z/nZ in our definition of Euclidean ring, much of the functionality in Nemo can be expected to misbehave (impossible inverses, etc.) when working with Euclidean rings that are not domains. In some cases the algorithms just don't exist, and in other cases we simply haven't implemented the required functionality to support all Euclidean rings for which computations can be done.","category":"page"},{"location":"Nemo/docs/src/developer/interfaces/","page":"Interfaces","title":"Interfaces","text":"Whether a ring is a Euclidean domain or not cannot be encoded in the type. Thus there is no abstract type for Euclidean domains or their elements. Instead, generic functions rely on the existence of certain functions such as gcdx to implement functionality for Euclidean domains.","category":"page"},{"location":"Nemo/docs/src/developer/interfaces/","page":"Interfaces","title":"Interfaces","text":"There is also currently no way to define a Euclidean function for a given ring (which is known to be Euclidean) and have the system recognise the ring as such. This kind of Euclidean interface may be provided in a future version of Nemo.","category":"page"},{"location":"Nemo/docs/src/developer/interfaces/#Julia-interfaces-we-support","page":"Interfaces","title":"Julia interfaces we support","text":"","category":"section"},{"location":"Nemo/docs/src/developer/interfaces/","page":"Interfaces","title":"Interfaces","text":"Many Julia interfaces rely on being able to create zero and one elements given the type only. As we use the parent/element model (see developer notes on this topic) we cannot support all Julia interfaces fully.","category":"page"},{"location":"Nemo/docs/src/developer/interfaces/","page":"Interfaces","title":"Interfaces","text":"We do however partially implement some Julia interfaces.","category":"page"},{"location":"Nemo/docs/src/developer/interfaces/","page":"Interfaces","title":"Interfaces","text":"Iteration : iterators are currently provided for multivariate polynomials to iterate over the coefficients, terms and monomials. Nemo matrices can also be iterated over. Iteration proceeds down each column in turn. One can also iterate over all permutations and partitions. Finally, all finite field types can be iterated over.\nViews : because C libraries cannot be expected to implement the full range of Julia view types, views of matrices in Nemo can only be constructed for submatrices consisting of contiguous blocks in the original matrix.\nmap and similar : we implement the map and similar interfaces with the caveat that we generally use parent objects where Julia would use types. See the specific documentation for the module of interest to see details.\nzero and one : these are implemented for parent types, which is not what Julia typically expects. Exceptions include the Flint fmpz and fmpq types, as their parents are not parameterised, which makes it possible to implement these functions for the types as well as the parents.\nrand : we have a Nemo specific rand interface, which passes the tail of a given rand invocation to the rand function for the base ring, e.g. to create random matrix elements or polynomial coefficients and so on. In addition to this custom rand interface, we also support much of the Julia rand interface, with the usual caveat that we use parent objects instead of types where necessary.\nserialisation : unfortunately this is currently NOT implemented by Nemo, but we would certainly like to see that done in the future. It's not automatic because of the C objects that underly many of our constructions.\nNumber : Nemo number types do NOT belong to Julia's Number hierarchy, as we must make all our ring element types belong to our RingElem abstract type. To make some Julia Number types cooperate with Nemo, we define the unions RingElement and FieldElement which include some Julia types, such as BigInt and Rational{BigInt}, etc. Note that fixed precision integer types cannot be expected to be well-behaved when they overflow. We recommend using Nemo integer types if one wants good performance for small machine word sized integers, but no overflow when the integer becomes large (Nemo integers are based on Flint's multiprecision fmpz type).\nhash : we implement hash functions for all major element types in Nemo.\ngetindex/setindex!/typed_hvcat : we implement these to access elements of Nemo matrices, however see the note below on row major representation. In  addition, we allow creation of matrices using the notation R[a b; c d] etc. This is done by overloading typed_hvcat for the parent object R instead of a type as Julia would normally expect. This produces a Nemo matrix rather than a Julia one. Note that when passed a type, Julia's typed_hvcat can only construct Julia matrices for Nemo types such as fmpz and fmpq where elements can be constructed from types alone.","category":"page"},{"location":"Nemo/docs/src/developer/interfaces/","page":"Interfaces","title":"Interfaces","text":"Many other Julia interfaces are either not yet implemented or only very partially implemented.","category":"page"},{"location":"Nemo/docs/src/developer/interfaces/#Column-major-vs-row-major-matrices","page":"Interfaces","title":"Column major vs row major matrices","text":"","category":"section"},{"location":"Nemo/docs/src/developer/interfaces/","page":"Interfaces","title":"Interfaces","text":"Whereas Julia uses column major representation for its matrices, Nemo follows the convention of the C libraries it wraps and uses row major representation. Although Julia 2-D arrays are used internally in Nemo's generic matrix type, the interface from the perspective of the user is still the Nemo row major convention, not the Julia column major convention.","category":"page"},{"location":"Nemo/docs/src/developer/interfaces/","page":"Interfaces","title":"Interfaces","text":"In row major representation, some row operations may be able to be performed more cheaply than similar column operations. In column major representation the converse is true. This may mean that some Julia matrix implementations may perform more slowly if naively ported to Nemo matrices, unless suitably modified.","category":"page"},{"location":"Hecke/docs/src/#Hecke","page":"Hecke","title":"Hecke","text":"","category":"section"},{"location":"Hecke/docs/src/#About","page":"Hecke","title":"About","text":"","category":"section"},{"location":"Hecke/docs/src/","page":"Hecke","title":"Hecke","text":"Hecke is a software package for algebraic number theory maintained by Claus Fieker, Carlo Sircana and Tommy Hofmann. It is written in julia and is based on the computer algebra package Nemo.","category":"page"},{"location":"Hecke/docs/src/","page":"Hecke","title":"Hecke","text":"https://github.com/thofma/Hecke.jl (Source code)\nhttps://thofma.github.io/Hecke.jl/dev/ (Online documentation)","category":"page"},{"location":"Hecke/docs/src/","page":"Hecke","title":"Hecke","text":"So far, Hecke provides the following features:","category":"page"},{"location":"Hecke/docs/src/","page":"Hecke","title":"Hecke","text":"Orders (including element and ideal arithmetic) in number fields\nComputation of maximal orders\nVerified residue computations of Dedekind zeta functions\nClass and Unit group computation, S-units, PID testing\nLattice enumeration\nSparse linear algebra\nNormal forms for modules over maximal orders\nExtensions of number fields, non-simple extensions of number fields\nOrders and ideals in extensions of fields\nAbelian groups\nRay class groups, quotients of ray class groups\nInvariant subgroups\nClass Field Theory\nAssociative Algebras","category":"page"},{"location":"Hecke/docs/src/#Installation","page":"Hecke","title":"Installation","text":"","category":"section"},{"location":"Hecke/docs/src/","page":"Hecke","title":"Hecke","text":"To use Hecke, a julia version of 1.0 is necessary (the latest stable julia version will do). Please see https://julialang.org/downloads/ for instructions on how to obtain julia for your system. Once a suitable julia version is installed, use the following steps at the julia prompt to install Hecke:","category":"page"},{"location":"Hecke/docs/src/","page":"Hecke","title":"Hecke","text":"julia> using Pkg\njulia> Pkg.add(\"Hecke\")","category":"page"},{"location":"Hecke/docs/src/#Quick-start","page":"Hecke","title":"Quick start","text":"","category":"section"},{"location":"Hecke/docs/src/","page":"Hecke","title":"Hecke","text":"Here is a quick example of using Hecke:","category":"page"},{"location":"Hecke/docs/src/","page":"Hecke","title":"Hecke","text":"julia> using Hecke\n...\n\nWelcome to \n\n  _    _           _        \n | |  | |         | |       \n | |__| | ___  ___| | _____ \n |  __  |/ _ \\/ __| |/ / _ \\\n | |  | |  __/ (__|   <  __/\n |_|  |_|\\___|\\___|_|\\_\\___|\n  \nVersion 0.9.0 ... \n ... which comes with absolutely no warranty whatsoever\n(c) 2015-2018 by Claus Fieker, Tommy Hofmann and Carlo Sircana\n\njulia> Qx, x = PolynomialRing(FlintQQ, \"x\");\njulia> f = x^3 + 2;\njulia> K, a = NumberField(f, \"a\");\njulia> O = maximal_order(K);\njulia> O\nMaximal order of Number field over Rational Field with defining polynomial x^3 + 2 \nwith basis [1,a,a^2]","category":"page"},{"location":"Hecke/docs/src/","page":"Hecke","title":"Hecke","text":"The documentation of the single functions can also be accessed at the julia prompt. Here is an example:","category":"page"},{"location":"Hecke/docs/src/","page":"Hecke","title":"Hecke","text":"help?> signature\nsearch: signature\n\n  ----------------------------------------------------------------------------\n\n  signature(O::NfMaximalOrder) -> Tuple{Int, Int}\n\n  |  Returns the signature of the ambient number field of \\mathcal O.","category":"page"},{"location":"Nemo/docs/src/gfp/","page":"Galois fields","title":"Galois fields","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/gfp/#Galois-fields","page":"Galois fields","title":"Galois fields","text":"","category":"section"},{"location":"Nemo/docs/src/gfp/","page":"Galois fields","title":"Galois fields","text":"Nemo allows the creation of Galois fields of the form mathbbZpmathbbZ for a prime p. Note that these are not the same as finite fields of degree 1, as Conway polynomials are not used and no generator is given.","category":"page"},{"location":"Nemo/docs/src/gfp/","page":"Galois fields","title":"Galois fields","text":"For convenience, the following constructors are provided.","category":"page"},{"location":"Nemo/docs/src/gfp/","page":"Galois fields","title":"Galois fields","text":"GF(n::UInt)\nGF(n::Int)\nGF(n::fmpz)","category":"page"},{"location":"Nemo/docs/src/gfp/","page":"Galois fields","title":"Galois fields","text":"For example, one can create the Galois field of characteristic 7 as follows.","category":"page"},{"location":"Nemo/docs/src/gfp/","page":"Galois fields","title":"Galois fields","text":"R = GF(7)","category":"page"},{"location":"Nemo/docs/src/gfp/","page":"Galois fields","title":"Galois fields","text":"Elements of the field are then created in the usual way.","category":"page"},{"location":"Nemo/docs/src/gfp/","page":"Galois fields","title":"Galois fields","text":"a = R(3)","category":"page"},{"location":"Nemo/docs/src/gfp/","page":"Galois fields","title":"Galois fields","text":"Elements of Galois fields have type gfp_elem when p is given to the constructor as an Int or UInt, and of type gfp_fmpz_elem if p is given as an fmpz, and the type of the parent objects is GaloisField or GaloisFmpzField respectively.","category":"page"},{"location":"Nemo/docs/src/gfp/","page":"Galois fields","title":"Galois fields","text":"The modulus p of an element of a Galois field is stored in its parent object.","category":"page"},{"location":"Nemo/docs/src/gfp/","page":"Galois fields","title":"Galois fields","text":"The gfp_elem and gfp_fmpz_elem types belong to the abstract type FinFieldElem and the GaloisField and GaloisFmpzField parent object types belong to the abstract type FinField.","category":"page"},{"location":"Nemo/docs/src/gfp/#Galois-field-functionality","page":"Galois fields","title":"Galois field functionality","text":"","category":"section"},{"location":"Nemo/docs/src/gfp/","page":"Galois fields","title":"Galois fields","text":"Galois fields in Nemo implement the residue ring interface of AbstractAlgebra.jl:","category":"page"},{"location":"Nemo/docs/src/gfp/","page":"Galois fields","title":"Galois fields","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/residue_rings","category":"page"},{"location":"Nemo/docs/src/gfp/","page":"Galois fields","title":"Galois fields","text":"In addition, all the functionality for generic residue rings is available:","category":"page"},{"location":"Nemo/docs/src/gfp/","page":"Galois fields","title":"Galois fields","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/residue","category":"page"},{"location":"Nemo/docs/src/gfp/","page":"Galois fields","title":"Galois fields","text":"Below we describe the functionality that is provided in addition to this interface.","category":"page"},{"location":"Nemo/docs/src/gfp/#Basic-manipulation","page":"Galois fields","title":"Basic manipulation","text":"","category":"section"},{"location":"Nemo/docs/src/gfp/","page":"Galois fields","title":"Galois fields","text":"characteristic(::GaloisField)\ncharacteristic(::GaloisFmpzField)","category":"page"},{"location":"Nemo/docs/src/gfp/#AbstractAlgebra.Generic.characteristic-Tuple{Nemo.GaloisField}","page":"Galois fields","title":"AbstractAlgebra.Generic.characteristic","text":"characteristic(R::GaloisField) -> fmpz\n\nReturn the characteristic of the given Galois field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/gfp/#AbstractAlgebra.Generic.characteristic-Tuple{Nemo.GaloisFmpzField}","page":"Galois fields","title":"AbstractAlgebra.Generic.characteristic","text":"characteristic(F::GaloisFmpzField)\n\nReturn the characteristic of the given Galois field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/gfp/","page":"Galois fields","title":"Galois fields","text":"order(::GaloisField)\norder(::GaloisFmpzField)","category":"page"},{"location":"Nemo/docs/src/gfp/#AbstractAlgebra.Generic.order-Tuple{Nemo.GaloisField}","page":"Galois fields","title":"AbstractAlgebra.Generic.order","text":"order(R::GaloisField) -> fmpz\n\nReturn the order, i.e. the number of elements in, the given Galois field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/gfp/#AbstractAlgebra.Generic.order-Tuple{Nemo.GaloisFmpzField}","page":"Galois fields","title":"AbstractAlgebra.Generic.order","text":"order(F::GaloisFmpzField)\n\nReturn the order, i.e. the number of elements in, the given Galois field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/gfp/","page":"Galois fields","title":"Galois fields","text":"Examples","category":"page"},{"location":"Nemo/docs/src/gfp/","page":"Galois fields","title":"Galois fields","text":"F = GF(3)\n\na = characteristic(F)\nb = order(F)","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/#Series-Ring-Interface","page":"Series Ring Interface","title":"Series Ring Interface","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Univariate power series rings are supported in AbstractAlgebra in a variety of different forms, including absolute and relative precision models and Laurent series.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"In addition to the standard Ring interface, numerous additional functions are required to be present for power series rings.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/#Types-and-parents","page":"Series Ring Interface","title":"Types and parents","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"AbstractAlgebra provides two abstract types for power series rings and their elements:","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"SeriesRing{T} is the abstract type for all power series ring parent types\nSeriesElem{T} is the abstract type for all power series types","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"We have that SeriesRing{T} <: AbstractAlgebra.Ring and SeriesElem{T} <: AbstractAlgebra.RingElem.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Note that both abstract types are parameterised. The type T should usually be the type of elements of the coefficient ring of the power series ring. For example, in the case of mathbbZx the type T would be the type of an integer, e.g. BigInt.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Within the SeriesElem{T} abstract type is the abstract type RelSeriesElem{T} for relative power series, and AbsSeriesElem{T} for absolute power series.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Relative series are typically stored with a valuation and a series that is either zero or that has nonzero constant term. Absolute series are stored starting from the constant term, even if it is zero.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"If the parent object for a relative series ring over the bignum integers has type MySeriesRing and series in that ring have type MySeries then one would have:","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"MySeriesRing <: SeriesRing{BigInt}\nMySeries <: RelSeriesElem{BigInt}","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Series rings should be made unique on the system by caching parent objects (unless an optional cache parameter is set to false). Series rings should at least be distinguished based on their base (coefficient) ring. But if they have the same base ring and symbol (for their variable/generator) and same default precision, they should certainly have the same parent object.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"See src/generic/GenericTypes.jl for an example of how to implement such a cache (which usually makes use of a dictionary).","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/#Required-functionality-for-series","page":"Series Ring Interface","title":"Required functionality for series","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"In addition to the required functionality for the Ring interface the Series Ring interface has the following required functions.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"We suppose that R is a fictitious base ring (coefficient ring) and that S is a series ring over R (e.g. S = Rx) with parent object S of type MySeriesRing{T}. We also assume the series in the ring have type MySeries{T}, where T is the type of elements of the base (coefficient) ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Of course, in practice these types may not be parameterised, but we use parameterised types here to make the interface clearer.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Note that the type T must (transitively) belong to the abstract type RingElem.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/#Constructors","page":"Series Ring Interface","title":"Constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"In addition to the standard constructors, the following constructors, taking an array of coefficients, must be available.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"For relative power series and Laurent series we have:","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"(S::MySeriesRing{T})(A::Array{T, 1}, len::Int, prec::Int, val::Int) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Create the series in the given ring whose valuation is val, whose absolute precision is given by prec and the coefficients of which are given by A, starting from the first nonzero term. Only len terms of the array are used, the remaining terms being ignored. The value len cannot exceed the length of the supplied array.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"It is permitted to have trailing zeros in the array, but it is not needed, even if the precision minus the valuation is bigger than the length of the array.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"julia> S, x = PowerSeriesRing(QQ, 10, \"x\"; model=:capped_relative)\n(Univariate power series ring in x over Rationals, x + O(x^11))\n\njulia> T, y = LaurentSeriesRing(ZZ, 10, \"y\")\n(Laurent series ring in y over Integers, y + O(y^11))\n\njulia> U, z = LaurentSeriesField(QQ, 10, \"z\")\n(Laurent series field in z over Rationals, z + O(z^11))","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"For absolute power series we have:","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"(S::MySeriesRing{T})(A::Array{T, 1}, len::Int, prec::Int) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Create the series in the given ring whose absolute precision is given by prec and the coefficients of which are given by A, starting from the constant term. Only len terms of the array are used, the remaining terms being ignored.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Note that len is usually maintained separately of any polynomial that is underlying the power series. This allows for easy trucation of a power series without actually modifying the polynomial underlying it.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"It is permitted to have trailing zeros in the array, but it is not needed, even if the precision is bigger than the length of the array.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"julia> S, x = PowerSeriesRing(QQ, 10, \"x\"; model=:capped_absolute)\n(Univariate power series ring in x over Rationals, x + O(x^10))\n\njulia> f = S(Rational{BigInt}[0, 2, 3, 1], 4, 6)\n2*x + 3*x^2 + x^3 + O(x^6)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/#Data-type-and-parent-object-methods","page":"Series Ring Interface","title":"Data type and parent object methods","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"var(S::MySeriesRing{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Return a Symbol representing the variable (generator) of the series ring. Note that this is a Symbol not a String, though its string value will usually be used when printing series.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"max_precision(S::MySeriesRing{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Return the (default) maximum precision of the power series ring. This is the precision that the output of an operation will be if it cannot be represented to full precision (e.g. because it mathematically has infinite precision).","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"This value is usually supplied upon creation of the series ring and stored in the ring. It is independent of the precision which each series in the ring actually has. Those are stored on a per element basis in the actual series elements.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"julia> S, x = PowerSeriesRing(QQ, 10, \"x\")\n(Univariate power series ring in x over Rationals, x + O(x^11))\n\njulia> vsym = var(S)\n:x\n\njulia> max_precision(S) == 10\ntrue\n","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/#Basic-manipulation-of-rings-and-elements","page":"Series Ring Interface","title":"Basic manipulation of rings and elements","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"pol_length(f::MySeries{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Return the length of the polynomial underlying the given power series. This is not generally useful to the user, but is used internally.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"set_length!(f::MySeries{T}, n::Int) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"This function sets the effective length of the polynomial underlying the given series. The function doesn't modify the actual polynomial, but simply changes the number of terms of the polynomial which are considered to belong to the power series. The remaining terms are ignored.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"This function cannot set the length to a value greater than the length of any underlying polynomial.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"The function mutates the series in-place but does not return the mutated series.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"precision(f::MySeries{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Return the absolute precision of f.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"set_precision!(f::MySeries{T}, prec::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Set the absolute precision of the given series to the given value.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"This return the updated series.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"valuation(f::MySeries{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Return the valuation of the given series.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"set_valuation!(f::MySeries{T}, val::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"For relative series and Laurent series only, this function alters the valuation of the given series to the given value.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"This function returns the updated series.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"polcoeff(f::MySeries{T}, n::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Return the coefficient of degree n of the polynomial underlying the series. If n is larger than the degree of this polynomial, zero is returned. This function is not generally of use to the user but is used internally.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"setcoeff!(f::MySeries{T}, n::Int, a::T) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Set the degree n coefficient of the polynomial underlying f to a. This mutates the polynomial in-place if possible and returns the mutated series (so that immutable types can also be supported). The function must not assume that the polynomial already has space for n + 1 coefficients. The polynomial must be resized if this is not the case.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Note that this function is not required to normalise the polynomial and is not necessarily useful to the user, but is used extensively by the generic functionality in AbstractAlgebra.jl. It is for setting raw coefficients in the representation.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"normalise(f::MySeries{T}, n::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Given a series f represented by a polynomial of at least the given length, return the normalised length of the underlying polynomial assuming it has length at most n. This function does not actually normalise the polynomial and is not particularly useful to the user. It is used internally.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"renormalize!(f::MySeries{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Given a relative series or Laurent series whose underlying polynomial has zero constant term, say as the result of some internal computation, renormalise the series so that the polynomial has nonzero constant term. The precision and valuation of the series are adjusted to compensate. This function is not intended to be useful to the user, but is used internally.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"fit!(f::MySeries{T}, n::Int) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Ensure that the polynomial underlying f internally has space for n coefficients. This function must mutate the series in-place if it is mutable. It does not return the mutated series. Immutable types can still be supported by defining this function to do nothing.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Some interfaces for C polynomial types automatically manage the internal allocation of polynomials in every function that can be called on them. Explicit adjustment by the generic code in AbstractAlgebra.jl is not required. In such cases, this function can also be defined to do nothing.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"gen(R::MySeriesRing{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Return the generator x of the series ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/series_rings/","page":"Series Ring Interface","title":"Series Ring Interface","text":"julia> S, x = PowerSeriesRing(ZZ, 10, \"x\")\n(Univariate power series ring in x over Integers, x + O(x^11))\n\njulia> f = 1 + 3x + x^3 + O(x^5)\n1 + 3*x + x^3 + O(x^5)\n\njulia> g = S(BigInt[1, 2, 0, 1, 0, 0, 0], 4, 10, 3);\n\njulia> n = pol_length(f)\n4\n\njulia> c = polcoeff(f, 1)\n3\n\njulia> set_length!(g, 3)\nx^3 + 2*x^4 + O(x^10)\n\njulia> g = setcoeff!(g, 2, BigInt(11))\nx^3 + 2*x^4 + 11*x^5 + O(x^10)\n\njulia> fit!(g, 8)\n\njulia> g = setcoeff!(g, 7, BigInt(4))\nx^3 + 2*x^4 + 11*x^5 + O(x^10)\n\njulia> w = gen(S)\nx + O(x^11)\n\njulia> isgen(w)\ntrue\n","category":"page"},{"location":"Nemo/docs/src/developer/future/","page":"Future plans","title":"Future plans","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/developer/future/#Future-plans","page":"Future plans","title":"Future plans","text":"","category":"section"},{"location":"Nemo/docs/src/developer/future/#Ring-and-CommRing","page":"Future plans","title":"Ring and CommRing","text":"","category":"section"},{"location":"Nemo/docs/src/developer/future/","page":"Future plans","title":"Future plans","text":"Currently all commutative ring types belong to Ring and their elements to RingElem (and RingElement) and we have separate types for noncommutative rings and elements thereof, i.e. NCRing and NCRingElem etc.","category":"page"},{"location":"Nemo/docs/src/developer/future/","page":"Future plans","title":"Future plans","text":"However, it would be more logical to use Ring for not necessarily commutative rings and CommRing, CRing or CommutativeRing (the name has not been decided on yet) for commutative rings.","category":"page"},{"location":"Nemo/docs/src/developer/future/","page":"Future plans","title":"Future plans","text":"This is a big change and should happen with plenty of warning for the community. It would be convenient if a script could be made available to automate this.","category":"page"},{"location":"Nemo/docs/src/developer/future/#Mono-repository","page":"Future plans","title":"Mono repository","text":"","category":"section"},{"location":"Nemo/docs/src/developer/future/","page":"Future plans","title":"Future plans","text":"There is currently a proposal to place all Oscar related repositories, or some subset of them in a single repository called OscarMono.jl. The details are not finalised and it is not known what impact this will have on Nemo. However, Nemo developers should be aware that this may happen at some point in the fairly near future.","category":"page"},{"location":"Nemo/docs/src/developer/future/","page":"Future plans","title":"Future plans","text":"Users of Nemo should be unaffected, as Nemo will continue to exist as a separate package in the OscarMono.jl repository, even if it does become part of this repository. Julia supports multiple packages in the same repository nowadays.","category":"page"},{"location":"Nemo/docs/src/developer/future/","page":"Future plans","title":"Future plans","text":"The possibility will always exist to separate the repositories again if the experiment is unsuccessful or serves its purpose and is no longer needed.","category":"page"},{"location":"Nemo/docs/src/developer/future/#Splitting-abstract-and-generic-functionality","page":"Future plans","title":"Splitting abstract and generic functionality","text":"","category":"section"},{"location":"Nemo/docs/src/developer/future/","page":"Future plans","title":"Future plans","text":"Currently we have many generic types in Nemo, e.g. Poly{T} and Mat{T}. We also have a lot of generic algorithms implemented. The latter are implemented for abstract types.","category":"page"},{"location":"Nemo/docs/src/developer/future/","page":"Future plans","title":"Future plans","text":"At the present moment, both the specialised code for our generic types and the generic algorithms for abstract types are all implemented inside the src/generic directory of the AbstractAlgebra package.","category":"page"},{"location":"Nemo/docs/src/developer/future/","page":"Future plans","title":"Future plans","text":"We eventually plan to separate the two kinds of implementations to make it clearer to developers which code is for generic types only and which are the more general implementations for all types belonging to the AbstractAlgebra abstract types.","category":"page"},{"location":"Nemo/docs/src/developer/future/","page":"Future plans","title":"Future plans","text":"It's not clear at this moment what the new directories will be called when the separation happens.","category":"page"},{"location":"Nemo/docs/src/developer/future/#Moving-implementations-from-Hecke","page":"Future plans","title":"Moving implementations from Hecke","text":"","category":"section"},{"location":"Nemo/docs/src/developer/future/","page":"Future plans","title":"Future plans","text":"In the Hecke.jl project there are a vast number of implementations that were intended for AbstractAlgebra.jl and Nemo.jl. They exist in the src/Misc directory of that project.","category":"page"},{"location":"Nemo/docs/src/developer/future/","page":"Future plans","title":"Future plans","text":"These implementations will eventually all be moved over to the correct repositories. Code, documentation and performance improvements will be added.","category":"page"},{"location":"Nemo/docs/src/developer/future/","page":"Future plans","title":"Future plans","text":"A number of things must be taken into account when making such moves:","category":"page"},{"location":"Nemo/docs/src/developer/future/","page":"Future plans","title":"Future plans","text":"Substantial chunks of code should be moved at a time. The code can be initially placed in a src/Misc directory in AbstractAlgebra or Nemo until it can finally be integrated fully into the correct place in those projects.\nSome of the code calls parent object constructors in generic code. Such calls should be removed where possible. If they are essential, they should have AbstractAlgebra prepended to their calls, as per the developer documentation on parent object constructors.\nSome functions such as exp and the like require Base to be prepended, as we do not import these functions from Base into Generic.\nSome of the code calls back into convenience functions found only in Hecke. These have to be rewritten in terms of AbstractAlgebra/Nemo functions.\nSome of the code relies on fmpz being available, but would otherwise be suitable for AbstractAlgebra. This code can hopefully be rewritten to be agnostic about the integer type.\nTodos, questions and so on should be moved to tickets.\nSometimes exception types differ between Hecke and Nemo, meaning that tests will fail due to the wrong type of exception being raised. Either the tests will have to be adjusted, or the Nemo exception types changed.\nRingElem is often used where RingElement is intended, etc. Also types are often unconstrained where Nemo would constrain them to RingElement.\nSome Hecke functions try to support generic types and specific concrete Nemo types in the same implementation. These will unfortunately have to either be split between AbstractAlgebra and Nemo or a completely generic implementation for abstract types will have to be made.\nSome Hecke implementations assume sub! and friends are available in generic code. These will have to be rewritten, usually by adding a single unary minus outside of a loop and switching to add! and friends inside the loops.\nTest code, docstrings and documentation will have to be added where they do not already exist.\nImports and exports of the new functionality will have to be added.\nSome functions should be accompanied by similar functions that don't yet exist. For example if there is a blah_rows there probably should be a blah_cols function as well, etc.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/#Permutations-and-Symmetric-groups","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"AbstractAlgebra.jl provides rudimentary native support for permutation groups (implemented in src/generic/PermGroups.jl). All functionality of permutations is accesible in the Generic submodule.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Permutations are represented internally via vector of integers, wrapped in type Perm{T}, where T<:Integer carries the information on the type of elements of a permutation. Symmetric groups are singleton parent objects of type SymmetricGroup{T} and are used mostly to store the length of a permutation, since it is not included in the permutation type.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Symmetric groups are created using the SymmetricGroup (inner) constructor.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Both SymmetricGroup and Perm and can be parametrized by any type T<:Integer . By default the parameter is the Int-type native to the systems architecture. However, if you are sure that your permutations are small enough to fit into smaller integer type (such as Int32, UInt16, or even Int8), you may choose to change the parametrizing type accordingly. In practice this may result in decreased memory footprint (when storing multiple permutations) and noticable faster performance, if your workload is heavy in operations on permutations, which e.g. does not fit into cache of your cpu.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"All the permutation group types belong to the Group abstract type and the corresponding permutation element types belong to the GroupElem abstract type.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Generic.setpermstyle","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/#AbstractAlgebra.Generic.setpermstyle","page":"Permutations and Symmetric groups","title":"AbstractAlgebra.Generic.setpermstyle","text":"setpermstyle(format::Symbol)\n\nSelect the style in which permutations are displayed (in the REPL or in general as strings). This can be either\n\n:array - as vector of integers whose n-th position represents the value at n), or\n:cycles - as, more familiar for mathematicians, decomposition into disjoint cycles, where the value at n is represented by the entry immediately following n in a cycle (the default).\n\nThe difference is purely esthetical.\n\nExamples:\n\njulia> setpermstyle(:array)\n:array\n\njulia> Perm([2,3,1,5,4])\n[2, 3, 1, 5, 4]\n\njulia> setpermstyle(:cycles)\n:cycles\n\njulia> Perm([2,3,1,5,4])\n(1,2,3)(4,5)\n\n\n\n","category":"function"},{"location":"AbstractAlgebra/docs/src/perm/#Permutations-constructors","page":"Permutations and Symmetric groups","title":"Permutations constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"There are several methods to construct permutations in AbstractAlgebra.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"The easiest way is to directly call to the Perm (inner) constructor:","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Generic.Perm","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/#AbstractAlgebra.Generic.Perm","page":"Permutations and Symmetric groups","title":"AbstractAlgebra.Generic.Perm","text":"Perm{T<:Integer}\n\nThe type of permutations. Fieldnames:\n\nd::Vector{T} - vector representing the permutation\nmodified::Bool - bit to check the validity of cycle decomposition\ncycles::CycleDec{T} - (cached) cycle decomposition\n\nA permutation p consists of a vector (p.d) of n integers from 1 to n. If the i-th entry of the vector is j, this corresponds to p sending i to j. The cycle decomposition (p.cycles) is computed on demand and should never be accessed directly. Use cycles(p) instead.\n\nThere are two inner constructors of Perm:\n\nPerm(n::T) constructs the trivial Perm{T}-permutation of length n.\nPerm(v::AbstractVector{<:Integer} [,check=true]) constructs a permutation represented by v. By default Perm constructor checks if the vector constitutes a valid permutation. To skip the check call Perm(v, false).\n\nExamples:\n\njulia> Perm([1,2,3])\n()\n\njulia> g = Perm(Int32[2,3,1])\n(1,2,3)\n\njulia> typeof(g)\nPerm{Int32}\n\n\n\n","category":"type"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Since the parent object can be reconstructed from the permutation itself, you can work with permutations without explicitly constructing the parent object.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"The other way is to first construct the permutation group they belong to. This is accomplished with the inner constructor SymmetricGroup(n::Integer) which constructs the permutation group on n symbols and returns the parent object representing the group.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Generic.SymmetricGroup","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/#AbstractAlgebra.Generic.SymmetricGroup","page":"Permutations and Symmetric groups","title":"AbstractAlgebra.Generic.SymmetricGroup","text":"SymmetricGroup{T<:Integer}\n\nThe full symmetric group singleton type. SymmetricGroup(n) constructs the full symmetric group S_n on n-symbols. The type of elements of the group is inferred from the type of n.\n\nExamples:\n\njulia> G = SymmetricGroup(5)\nFull symmetric group over 5 elements\n\njulia> elem_type(G)\nPerm{Int64}\n\njulia> H = SymmetricGroup(UInt16(5))\nFull symmetric group over 5 elements\n\njulia> elem_type(H)\nPerm{UInt16}\n\n\n\n","category":"type"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"A vector of integers can be then coerced to a permutation by calling a parent permutation group on it.   The advantage is that the vector is automatically converted to the integer type fixed at the creation of the parent object.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Examples:","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"julia> G = SymmetricGroup(BigInt(5)); p = G([2,3,1,5,4])\n(1,2,3)(4,5)\n\njulia> typeof(p)\nPerm{BigInt}\n\njulia> H = SymmetricGroup(UInt16(5)); r = H([2,3,1,5,4])\n(1,2,3)(4,5)\n\njulia> typeof(r)\nPerm{UInt16}\n\njulia> one(H)\n()","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"By default the coercion checks for non-unique values in the vector, but this can be switched off with G([2,3,1,5,4], false).","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Finally there is a perm\"...\" string macro to construct a permutation from a string input.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"@perm_str","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/#AbstractAlgebra.Generic.@perm_str","page":"Permutations and Symmetric groups","title":"AbstractAlgebra.Generic.@perm_str","text":"perm\"...\"\n\nString macro to parse disjoint cycles into Perm{Int}.\n\nStrings for the output of GAP could be copied directly into perm\"...\". Cycles of length 1 are not necessary, but can be included. A permutation of the minimal support is constructed, i.e. the maximal n in the decomposition determines the parent group S_n.\n\nExamples:\n\njulia> p = perm\"(1,3)(2,4)\"\n(1,3)(2,4)\n\njulia> typeof(p)\nPerm{Int64}\n\njulia> parent(p) == SymmetricGroup(4)\ntrue\n\njulia> p = perm\"(1,3)(2,4)(10)\"\n(1,3)(2,4)\n\njulia> parent(p) == SymmetricGroup(10)\ntrue\n\n\n\n","category":"macro"},{"location":"AbstractAlgebra/docs/src/perm/#Permutation-interface","page":"Permutations and Symmetric groups","title":"Permutation interface","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"The following basic functionality is provided by the default permutation group implementation in AbstractAlgebra.jl, to support construction of other generic constructions over permutation groups. Any custom permutation group implementation in AbstractAlgebra.jl should provide these functions along with the usual group element arithmetic and comparison.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"parent(::Perm)\nelem_type(::SymmetricGroup)\nparent_type(::Perm)","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/#Base.parent-Tuple{Perm}","page":"Permutations and Symmetric groups","title":"Base.parent","text":"parent(g::Perm)\n\nReturn the parent of the permutation g.\n\njulia> G = SymmetricGroup(5); g = Perm([3,4,5,2,1])\n(1,3,5)(2,4)\n\njulia> parent(g) == G\ntrue\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/perm/#AbstractAlgebra.Generic.elem_type-Tuple{AbstractAlgebra.SymmetricGroup}","page":"Permutations and Symmetric groups","title":"AbstractAlgebra.Generic.elem_type","text":"elem_type(parent)\nelem_type(parent_type)\n\nGiven a parent object (or its type), return the type of its elements.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/perm/#AbstractAlgebra.Generic.parent_type-Tuple{Perm}","page":"Permutations and Symmetric groups","title":"AbstractAlgebra.Generic.parent_type","text":"parent_type(element)\nparent_type(element_type)\n\nGiven an element (or its type), return the type of its parent object.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"A custom implementation also needs to implement hash(::Perm, ::UInt) and (possibly) deepcopy_internal(::Perm, ::ObjectIdDict).","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"note: Note\nPermutation group elements are mutable and so returning shallow copies is not sufficient.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"getindex(a::Perm, n::Integer)","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Allow access to entry n of the given permutation via the syntax a[n]. Note that entries are 1-indexed.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"setindex!(a::Perm, d::Integer, n::Integer)","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Set the n-th entry of the given permutation to d. This allows Julia to provide the syntax a[n] = d for setting entries of a permutation. Entries are 1-indexed.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"note: Note\nUsing setindex! invalidates the cycle decomposition cached in a permutation, which will be computed the next time it is needed.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Given the parent object G for a permutation group, the following coercion functions are provided to coerce various arguments into the permutation group. Developers provide these by overloading the permutation group parent objects.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"one(G)","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Return the identity permutation.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"G(A::Vector{<:Integer})","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Return the permutation whose entries are given by the elements of the supplied vector.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"G(p::Perm)","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Take a permutation that is already in the permutation group and simply return it. A copy of the original is not made if not necessary.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/#Basic-manipulation","page":"Permutations and Symmetric groups","title":"Basic manipulation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Numerous functions are provided to manipulate permutation group elements.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"cycles(::Perm)","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/#AbstractAlgebra.Generic.cycles-Tuple{Perm}","page":"Permutations and Symmetric groups","title":"AbstractAlgebra.Generic.cycles","text":"cycles(g::Perm)\n\nDecompose permutation g into disjoint cycles.\n\nReturn a CycleDec object which iterates over disjoint cycles of g. The ordering of cycles is not guaranteed, and the order within each cycle is computed up to a cyclic permutation. The cycle decomposition is cached in g and used in future computation of permtype, parity, sign, order and ^ (powering).\n\nExamples:\n\njulia> g = Perm([3,4,5,2,1,6])\n(1,3,5)(2,4)\n\njulia> collect(cycles(g))\n3-element Array{Array{Int64,1},1}:\n [1, 3, 5]\n [2, 4]\n [6]\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Cycle structure is cached in a permutation, since once available, it provides a convenient shortcut in many other algorithms.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"parity(::Perm)\nsign(::Perm)\npermtype(::Perm)\norder(::Perm)\norder(::Generic.SymmetricGroup)","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/#AbstractAlgebra.Generic.parity-Tuple{Perm}","page":"Permutations and Symmetric groups","title":"AbstractAlgebra.Generic.parity","text":"parity(g::Perm)\n\nReturn the parity of the given permutation, i.e. the parity of the number of transpositions in any decomposition of g into transpositions.\n\nparity returns 1 if the number is odd and 0 otherwise. parity uses cycle decomposition of g if already available, but will not compute it on demand. Since cycle structure is cached in g you may call cycles(g) before calling parity.\n\nExamples:\n\njulia> g = Perm([3,4,1,2,5])\n(1,3)(2,4)\n\njulia> parity(g)\n0\n\njulia> g = Perm([3,4,5,2,1,6])\n(1,3,5)(2,4)\n\njulia> parity(g)\n1\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/perm/#Base.sign-Tuple{Perm}","page":"Permutations and Symmetric groups","title":"Base.sign","text":"sign(g::Perm)\n\nReturn the sign of a permutation.\n\nsign returns 1 if g is even and -1 if g is odd. sign represents the homomorphism from the permutation group to the unit group of mathbbZ whose kernel is the alternating group.\n\nExamples:\n\njulia> g = Perm([3,4,1,2,5])\n(1,3)(2,4)\n\njulia> sign(g)\n1\n\njulia> g = Perm([3,4,5,2,1,6])\n(1,3,5)(2,4)\n\njulia> sign(g)\n-1\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/perm/#AbstractAlgebra.Generic.permtype-Tuple{Perm}","page":"Permutations and Symmetric groups","title":"AbstractAlgebra.Generic.permtype","text":"permtype(g::Perm)\n\nReturn the type of permutation g, i.e. lengths of disjoint cycles in cycle decomposition of g.\n\nThe lengths are sorted in decreasing order by default. permtype(g) fully determines the conjugacy class of g.\n\nExamples:\n\njulia> g = Perm([3,4,5,2,1,6])\n(1,3,5)(2,4)\n\njulia> permtype(g)\n3-element Array{Int64,1}:\n 3\n 2\n 1\n\njulia> e = one(g)\n()\n\njulia> permtype(e)\n6-element Array{Int64,1}:\n 1\n 1\n 1\n 1\n 1\n 1\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/perm/#AbstractAlgebra.Generic.order-Tuple{Perm}","page":"Permutations and Symmetric groups","title":"AbstractAlgebra.Generic.order","text":"order(a::Perm) -> BigInt\n\nReturn the order of permutation a as BigInt.\n\nIf you are sure that computation over T (or its Int promotion) will not overflow you may use the method order(T::Type, a::Perm) which bypasses computation with BigInts and returns promote(T, Int).\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/perm/#AbstractAlgebra.Generic.order-Tuple{AbstractAlgebra.Generic.SymmetricGroup}","page":"Permutations and Symmetric groups","title":"AbstractAlgebra.Generic.order","text":"order(G::SymmetricGroup) -> BigInt\n\nReturn the order of the full permutation group as BigInt.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Note that even an Int64 can be easily overflowed when computing with permutation groups. Thus, by default, order returns (always correct) BigInts. If you are sure that the computation will not overflow, you may use order(::Type{T}, ...) to perform computations with machine integers. Julia's standard promotion rules apply for the returned value.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Since SymmetricGroup implements the iterator protocol, you may iterate over all permutations via a simple loop:","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"for p in SymmetricGroup(n)\n   ...\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Iteration over all permutations in reasonable time, (i.e. in terms of minutes) is possible when n  13.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"You may also use the non-allocating Generic.elements! function for n  14 (or even 15 if you are patient enough), which is an order of magnitude faster.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Generic.elements!(::Generic.SymmetricGroup)","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/#AbstractAlgebra.Generic.elements!-Tuple{AbstractAlgebra.Generic.SymmetricGroup}","page":"Permutations and Symmetric groups","title":"AbstractAlgebra.Generic.elements!","text":"Generic.elements!(G::SymmetricGroup)\n\nReturn an unsafe iterator over all permutations in G. Only one permutation is allocated and then modified in-place using the non-recursive Heaps algorithm.\n\nNote: you need to explicitely copy permutations intended to be stored or modified.\n\nExamples:\n\njulia> elts = Generic.elements!(SymmetricGroup(5));\n\n\njulia> length(elts)\n120\n\njulia> for p in Generic.elements!(SymmetricGroup(3))\n         println(p)\n       end\n()\n(1,2)\n(1,3,2)\n(2,3)\n(1,2,3)\n(1,3)\n\njulia> A = collect(Generic.elements!(SymmetricGroup(3))); A\n6-element Array{Perm{Int64},1}:\n (1,3)\n (1,3)\n (1,3)\n (1,3)\n (1,3)\n (1,3)\n\njulia> unique(A)\n1-element Array{Perm{Int64},1}:\n (1,3)\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"However, since all permutations yielded by elements! are aliased (modified \"in-place\"), collect(Generic.elements!(SymmetricGroup(n))) returns a vector of identical permutations.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"note: Note\nIf you intend to use or store elements yielded by elements! you need to deepcopy them explicitly.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/#Arithmetic-operators","page":"Permutations and Symmetric groups","title":"Arithmetic operators","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"*(::Perm{T}, ::Perm{T}) where T\n^(::Perm, n::Integer)\nBase.inv(::Perm)","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/#Base.:*-Union{Tuple{T}, Tuple{Perm{T},Perm{T}}} where T","page":"Permutations and Symmetric groups","title":"Base.:*","text":"*(g::Perm, h::Perm)\n\nReturn the composition h  g of two permutations.\n\nThis corresponds to the action of permutation group on the set [1..n] on the right and follows the convention of GAP.\n\nIf g and h are parametrized by different types, the result is promoted accordingly.\n\nExamples:\n\njulia> Perm([2,3,1,4])*Perm([1,3,4,2]) # (1,2,3)*(2,3,4)\n(1,3)(2,4)\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/perm/#Base.:^-Tuple{Perm,Integer}","page":"Permutations and Symmetric groups","title":"Base.:^","text":"^(g::Perm, n::Integer)\n\nReturn the n-th power of a permutation g.\n\nBy default g^n is computed by cycle decomposition of g if n > 3. Generic.power_by_squaring provides a different method for powering which may or may not be faster, depending on the particular case. Due to caching of the cycle structure, repeated powering of g will be faster with the default method.\n\nExamples:\n\njulia> g = Perm([2,3,4,5,1])\n(1,2,3,4,5)\n\njulia> g^3\n(1,4,2,5,3)\n\njulia> g^5\n()\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/perm/#Base.inv-Tuple{Perm}","page":"Permutations and Symmetric groups","title":"Base.inv","text":"Base.inv(g::Perm)\n\nReturn the inverse of the given permutation, i.e. the permuation g^-1 such that g  g^-1 = g^-1  g is the identity permutation.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Permutations parametrized by different types can be multiplied, and follow the standard julia integer promotion rules:","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"g = rand(SymmetricGroup(Int8(5)));\nh = rand(SymmetricGroup(UInt32(5)));\ntypeof(g*h)\n\n# output\nPerm{UInt32}","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/#Coercion","page":"Permutations and Symmetric groups","title":"Coercion","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"The following coercions are available for G::SymmetricGroup parent objects. Each of the methods perform basic sanity checks on the input which can be switched off by the second argument.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"(G::SymmetricGroup)(::AbstractVector{<:Integer}[, check=true])","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Turn a vector of integers into a permutation (performing conversion, if necessary).","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"(G::SymmetricGroup)(::Perm[, check=true])","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Coerce a permutation p into group G (performing the conversion, if necessary). If p is already an element of G no copy is performed.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"(G::SymmetricGroup)(::String[, check=true])","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Parse the string input e.g. copied from the output of GAP. The method uses the same logic as the perm\"...\" macro. The string is sanitized and checked for disjoint cycles. Both string(p::Perm) (if setpermstyle(:cycles)) and string(cycles(p::Perm)) are valid input for this method.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"(G::SymmetricGroup{T})(::CycleDec{T}[, check=true]) where T","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"Turn a cycle decomposition object into a permutation.","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/#Comparison","page":"Permutations and Symmetric groups","title":"Comparison","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"==(::Perm, ::Perm)\n==(::Generic.SymmetricGroup, ::Generic.SymmetricGroup)","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/#Base.:==-Tuple{Perm,Perm}","page":"Permutations and Symmetric groups","title":"Base.:==","text":"==(g::Perm, h::Perm)\n\nReturn true if permutations are equal, otherwise return false.\n\nPermutations parametrized by different integer types are considered equal if they define the same permutation in the abstract permutation group.\n\nExamples:\n\njulia> g = Perm(Int8[2,3,1])\n(1,2,3)\n\njulia> h = perm\"(3,1,2)\"\n(1,2,3)\n\njulia> g == h\ntrue\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/perm/#Base.:==-Tuple{AbstractAlgebra.Generic.SymmetricGroup,AbstractAlgebra.Generic.SymmetricGroup}","page":"Permutations and Symmetric groups","title":"Base.:==","text":"==(G::SymmetricGroup, H::SymmetricGroup)\n\nReturn true if permutation groups are equal, otherwise return false.\n\nPermutation groups on the same number of letters, but parametrized by different integer types are considered different.\n\nExamples:\n\njulia> G = SymmetricGroup(UInt(5))\nPermutation group over 5 elements\n\njulia> H = SymmetricGroup(5)\nPermutation group over 5 elements\n\njulia> G == H\nfalse\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/perm/#Misc","page":"Permutations and Symmetric groups","title":"Misc","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/perm/","page":"Permutations and Symmetric groups","title":"Permutations and Symmetric groups","text":"rand(::Generic.SymmetricGroup)\nGeneric.matrix_repr(::Perm)\nGeneric.emb(::Generic.SymmetricGroup, ::Vector{Int}, ::Bool)\nGeneric.emb!(::Perm, ::Perm, V)","category":"page"},{"location":"AbstractAlgebra/docs/src/perm/#Base.rand-Tuple{AbstractAlgebra.Generic.SymmetricGroup}","page":"Permutations and Symmetric groups","title":"Base.rand","text":"rand([rng=GLOBAL_RNG,] G::SymmetricGroup)\n\nReturn a random permutation from G.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/perm/#AbstractAlgebra.Generic.matrix_repr-Tuple{Perm}","page":"Permutations and Symmetric groups","title":"AbstractAlgebra.Generic.matrix_repr","text":"matrix_repr(a::Perm)\n\nReturn the permutation matrix as a sparse matrix representing a via natural embedding of the permutation group into the general linear group over mathbbZ.\n\nExamples:\n\njulia> p = Perm([2,3,1])\n(1,2,3)\n\njulia> matrix_repr(p)\n3×3 SparseArrays.SparseMatrixCSC{Int64,Int64} with 3 stored entries:\n  [3, 1]  =  1\n  [1, 2]  =  1\n  [2, 3]  =  1\n\njulia> Array(ans)\n3×3 Array{Int64,2}:\n 0  1  0\n 0  0  1\n 1  0  0\n\n\n\nmatrix_repr(Y::YoungTableau)\n\nConstruct sparse integer matrix representing the tableau.\n\nExamples:\n\njulia> y = YoungTableau([4,3,1]);\n\n\njulia> matrix_repr(y)\n3×4 SparseArrays.SparseMatrixCSC{Int64,Int64} with 8 stored entries:\n  [1, 1]  =  1\n  [2, 1]  =  5\n  [3, 1]  =  8\n  [1, 2]  =  2\n  [2, 2]  =  6\n  [1, 3]  =  3\n  [2, 3]  =  7\n  [1, 4]  =  4\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/perm/#AbstractAlgebra.Generic.emb-Tuple{AbstractAlgebra.Generic.SymmetricGroup,Array{Int64,1},Bool}","page":"Permutations and Symmetric groups","title":"AbstractAlgebra.Generic.emb","text":"emb(G::SymmetricGroup, V::Vector{Int}, check::Bool=true)\n\nReturn the natural embedding of a permutation group into G as the subgroup permuting points indexed by V.\n\nExamples:\n\njulia> p = Perm([2,3,1])\n(1,2,3)\n\njulia> f = Generic.emb(SymmetricGroup(5), [3,2,5]);\n\n\njulia> f(p)\n(2,5,3)\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/perm/#AbstractAlgebra.Generic.emb!-Tuple{Perm,Perm,Any}","page":"Permutations and Symmetric groups","title":"AbstractAlgebra.Generic.emb!","text":"emb!(result::Perm, p::Perm, V)\n\nEmbed permutation p into permutation result on the indices given by V.\n\nThis corresponds to the natural embedding of S_k into S_n as the subgroup permuting points indexed by V.\n\nExamples:\n\njulia> p = Perm([2,1,4,3])\n(1,2)(3,4)\n\njulia> Generic.emb!(Perm(collect(1:5)), p, [3,1,4,5])\n(1,3)(4,5)\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Generic-matrices","page":"Generic matrices","title":"Generic matrices","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"AbstractAlgebra.jl allows the creation of dense matrices over any computable commutative ring R. Generic matrices over a commutative ring are implemented in src/generic/Matrix.jl. Much of the functionality there covers both matrix spaces and matrix algebras.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Functions specific to generic matrix algebras of mtimes m matrices are implemented in src/generic/MatrixAlgebra.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"As well as implementing the entire Matrix interface, including the optional functionality, there are many additional generic algorithms implemented for matrix spaces. We describe this functionality below.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"All of this generic functionality is part of the Generic submodule of AbstractAlgebra.jl. This is exported by default, so it is not necessary to qualify names of functions.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Types-and-parent-objects","page":"Generic matrices","title":"Types and parent objects","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Generic matrices in AbstractAlgebra.jl have type Generic.MatSpaceElem{T} for matrices in a matrix space, or Generic.MatAlgElem{T} for matrices in a matrix algebra, where T is the type of elements of the matrix. Internally, generic matrices are implemented using an object wrapping a Julia two dimensional array, though they are not themselves Julia arrays. See the file src/generic/GenericTypes.jl for details.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"For the most part, one doesn't want to work directly with the MatSpaceElem type though, but with an abstract type called Generic.Mat which includes MatSpaceElem and views thereof.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Parents of generic matrices (matrix spaces) have type Generic.MatSpace{T}. Parents of matrices in a matrix algebra have type Generic.MatAlgebra{T}.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"The generic matrix types (matrix spaces) belong to the abstract type AbstractAlgebra.MatElem{T} and the matrix space parent types belong to AbstractAlgebra.MatSpace{T}. Similarly the generic matrix algebra matrix types belong to the abstract type AbstractAlgebra.MatAlgElem{T} and the parent types belong to  AbstractAlgebra.MatAlgebra{T} Note that both the concrete type of a matrix space parent object and the abstract class it belongs to have the name MatElem, therefore disambiguation is required to specify which is intended. The same is true for the abstract types for matrix spaces and their elements.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"The dimensions and base ring R of a generic matrix are stored in its parent object, however to allow creation of matrices without first creating the matrix space parent, generic matrices in Julia do not contain a reference to their parent. They contain the row and column numbers (or degree, in the case of matrix algebras) and the base ring on a per matrix basis. The parent object can then be reconstructed from this data on demand.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Matrix-space-constructors","page":"Generic matrices","title":"Matrix space constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"A matrix space in AbstractAlgebra.jl represents a collection of all matrices with given dimensions and base ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"In order to construct matrices in AbstractAlgebra.jl, one can first construct the matrix space itself. This is accomplished with the following constructor. We discuss creation of matrix algebras separately in a dedicated section elsewhere in the documentation.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"MatrixSpace(R::Ring, rows::Int, cols::Int; cache::Bool=true)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Construct the space of matrices with the given number of rows and columns over the given base ring. By default such matrix spaces are cached based on the base ring and numbers of rows and columns. If the optional named parameter cached is set to false, no caching occurs.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Here are some examples of creating matrix spaces and making use of the resulting parent objects to coerce various elements into the matrix space.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> R, t = PolynomialRing(QQ, \"t\")\n(Univariate Polynomial Ring in t over Rationals, t)\n\njulia> S = MatrixSpace(R, 3, 3)\nMatrix Space of 3 rows and 3 columns over Univariate Polynomial Ring in t over Rationals\n\njulia> A = S()\n[0   0   0]\n[0   0   0]\n[0   0   0]\n\njulia> B = S(12)\n[12    0    0]\n[ 0   12    0]\n[ 0    0   12]\n\njulia> C = S(R(11))\n[11    0    0]\n[ 0   11    0]\n[ 0    0   11]\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"We also allow matrices over a given base ring to be constructed directly (see the Matrix interface).","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Matrix-element-constructors","page":"Generic matrices","title":"Matrix element constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"In addition to coercing elements into a matrix space as above, we provide the following syntax for constructing literal matrices (similar to how Julia arrays can be be constructed).","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"R[a b c...;...]","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Create the matrix over the base ring R consisting of the given rows (separated by semicolons). Each entry is coerced into R  automatically. Note that parentheses may be placed around individual entries if the lists would otherwise be ambiguous, e.g. R[1 2; 2 (- 3)].","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Also see the Matrix interface for a list of other ways to create matrices.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> R, t = PolynomialRing(QQ, \"t\")\n(Univariate Polynomial Ring in t over Rationals, t)\n\njulia> S = MatrixSpace(R, 3, 3)\nMatrix Space of 3 rows and 3 columns over Univariate Polynomial Ring in t over Rationals\n\njulia> M = R[t + 1 1; t^2 0]\n[t + 1   1]\n[  t^2   0]\n\njulia> N = R[t + 1 2 t] # create a row vector\n[t + 1   2   t]\n\njulia> P = R[1; 2; t] # create a column vector\n[1]\n[2]\n[t]","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Conversion-to-Julia-matrices-and-iteration","page":"Generic matrices","title":"Conversion to Julia matrices and iteration","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"While AbstractAlgebra matrices are not instances of AbstractArray, they are closely related to Julia matrices. For convenience, a Matrix and an Array constructors taking an AbstractAlgebra matrix as input are provided:","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Matrix(::MatrixElem)\nArray(::MatrixElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Base.Matrix-Tuple{Union{MatAlgElem{T}, MatElem{T}} where T}","page":"Generic matrices","title":"Base.Matrix","text":"Matrix(A::MatrixElem)\n\nConvert A to a Julia Matrix of the same dimensions with the same elements.\n\nExamples\n\njulia> A = ZZ[1 2 3; 4 5 6]\n[1   2   3]\n[4   5   6]\n\njulia> Matrix(A)\n2×3 Array{BigInt,2}:\n 1  2  3\n 4  5  6\n\n\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/#Core.Array-Tuple{Union{MatAlgElem{T}, MatElem{T}} where T}","page":"Generic matrices","title":"Core.Array","text":"Array(A::MatrixElem)\n\nConvert A to a Julia Matrix of the same dimensions with the same elements.\n\nExamples\n\njulia> R, x = ZZ[\"x\"]; A = R[x^0 x^1; x^2 x^3]\n[  1     x]\n[x^2   x^3]\n\njulia> Array(A)\n2×2 Array{AbstractAlgebra.Generic.Poly{BigInt},2}:\n 1    x\n x^2  x^3\n\n\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Matrices also support iteration, and therefore functions accepting an iterator can be called on them, e.g.:","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> M = MatrixSpace(ZZ, 2, 3); x = M(1:6)\n[1   2   3]\n[4   5   6]\n\njulia> collect(x)\n2×3 Array{BigInt,2}:\n 1  2  3\n 4  5  6\n\njulia> Set(x)\nSet{BigInt} with 6 elements:\n  4\n  2\n  3\n  5\n  6\n  1","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Matrix-functionality-provided-by-AbstractAlgebra.jl","page":"Generic matrices","title":"Matrix functionality provided by AbstractAlgebra.jl","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Most of the following generic functionality is available for both matrix spaces and matrix algebras. Exceptions include functions that do not return or accept square matrices or which cannot specify a parent. Such functions include solve, kernel, and nullspace which can't be provided for matrix algebras.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"For details on functionality that is provided for matrix algebras only, see the dedicated section of the documentation.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Basic-matrix-functionality","page":"Generic matrices","title":"Basic matrix functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"As well as the Ring and Matrix interfaces, the following functions are provided to manipulate matrices and to set and retrieve entries and other basic data associated with the matrices.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"dense_matrix_type(::Ring)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.dense_matrix_type-Tuple{AbstractAlgebra.Ring}","page":"Generic matrices","title":"AbstractAlgebra.Generic.dense_matrix_type","text":"dense_matrix_type(R::Ring)\n\nReturn the type of matrices over the given ring.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"nrows(::Generic.MatrixElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.nrows-Tuple{Union{MatAlgElem{T}, MatElem{T}} where T}","page":"Generic matrices","title":"AbstractAlgebra.Generic.nrows","text":"nrows(a::Generic.MatrixElem)\n\nReturn the number of rows of the given matrix.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"ncols(::Generic.MatrixElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.ncols-Tuple{Union{MatAlgElem{T}, MatElem{T}} where T}","page":"Generic matrices","title":"AbstractAlgebra.Generic.ncols","text":"ncols(a::Generic.MatrixElem)\n\nReturn the number of columns of the given matrix.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"length(::MatElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Base.length-Tuple{MatElem}","page":"Generic matrices","title":"Base.length","text":"length(a::Generic.MatrixElem)\n\nReturn the number of entries in the given matrix.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"isempty(::MatElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Base.isempty-Tuple{MatElem}","page":"Generic matrices","title":"Base.isempty","text":"isempty(a::Generic.MatrixElem)\n\nReturn true if a does not contain any entry (i.e. length(a) == 0), and false otherwise.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"identity_matrix(::Ring, ::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.identity_matrix-Tuple{AbstractAlgebra.Ring,Int64}","page":"Generic matrices","title":"AbstractAlgebra.Generic.identity_matrix","text":"identity_matrix(R::Ring, n::Int) -> MatElem\n\nReturn the n times n identity matrix over R.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"identity_matrix(::MatElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.identity_matrix-Union{Tuple{MatElem{T}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic matrices","title":"AbstractAlgebra.Generic.identity_matrix","text":"identity_matrix(M::MatElem{T}) where T <: RingElement\n\nConstruct the identity matrix in the same matrix space as M, i.e. with ones down the diagonal and zeroes elsewhere. M must be square. This is an alias for one(M).\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"diagonal_matrix(::RingElement, ::Int, ::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.diagonal_matrix-Tuple{Union{RingElem, AbstractFloat, Integer, Rational},Int64,Int64}","page":"Generic matrices","title":"AbstractAlgebra.Generic.diagonal_matrix","text":"diagonal_matrix(x::RingElement, m::Int, [n::Int])\n\nReturn the m times n matrix over R with x along the main diagonal and zeroes elsewhere. If n is not specified, it defaults to m.\n\nExamples\n\njulia> diagonal_matrix(ZZ(2), 2, 3)\n[2   0   0]\n[0   2   0]\n\njulia> diagonal_matrix(QQ(-1), 3)\n[-1//1    0//1    0//1]\n[ 0//1   -1//1    0//1]\n[ 0//1    0//1   -1//1]\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"zero(::AbstractAlgebra.MatSpace)\nzero(::Generic.MatrixElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Base.zero-Tuple{MatSpace}","page":"Generic matrices","title":"Base.zero","text":"zero(a::AbstractAlgebra.MatSpace)\n\nConstruct the zero matrix in the given matrix space.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"one(::AbstractAlgebra.MatSpace)\none(::MatElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Base.one-Tuple{MatSpace}","page":"Generic matrices","title":"Base.one","text":"one(a::AbstractAlgebra.MatSpace)\n\nConstruct the matrix in the given matrix space with ones down the diagonal and zeroes elsewhere. The matrix space must contain square matrices.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/#Base.one-Tuple{MatElem}","page":"Generic matrices","title":"Base.one","text":"one(a::MatElem)\n\nConstruct the identity matrix in the same matrix space as a, i.e. with ones down the diagonal and zeroes elsewhere. a must be square.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"istriu(::MatrixElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#LinearAlgebra.istriu-Union{Tuple{Union{MatAlgElem{T}, MatElem{T}}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic matrices","title":"LinearAlgebra.istriu","text":"function istriu(A::MatrixElem{T}) where T <: RingElement\n\nReturn true if A is an upper triangular matrix.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"change_base_ring(::AbstractAlgebra.Ring, ::AbstractAlgebra.MatElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.change_base_ring-Tuple{AbstractAlgebra.Ring,MatElem}","page":"Generic matrices","title":"AbstractAlgebra.change_base_ring","text":"change_base_ring(R::Ring, M::MatrixElem)\n\nReturn the matrix obtained by coercing each entry into R.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Base.map(f, ::Generic.MatrixElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Base.map-Tuple{Any,Union{MatAlgElem{T}, MatElem{T}} where T}","page":"Generic matrices","title":"Base.map","text":"map(f, a::MatrixElem)\n\nTransform matrix a by applying f on each element. This is equivalent to map_entries(f, a).\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Base.map!(f, ::Generic.MatrixElem, ::Generic.MatrixElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Base.map!-Tuple{Any,Union{MatAlgElem{T}, MatElem{T}} where T,Union{MatAlgElem{T}, MatElem{T}} where T}","page":"Generic matrices","title":"Base.map!","text":"map!(f, dst::MatrixElem, src::MatrixElem)\n\nLike map, but stores the result in dst rather than a new matrix. This is equivalent to map_entries!(f, dst, src).\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> R, t = PolynomialRing(QQ, \"t\")\n(Univariate Polynomial Ring in t over Rationals, t)\n\njulia> S = MatrixSpace(R, 3, 3)\nMatrix Space of 3 rows and 3 columns over Univariate Polynomial Ring in t over Rationals\n\njulia> A = S([t + 1 t R(1); t^2 t t; R(-2) t + 2 t^2 + t + 1])\n[t + 1       t             1]\n[  t^2       t             t]\n[   -2   t + 2   t^2 + t + 1]\n\njulia> B = S([R(2) R(3) R(1); t t + 1 t + 2; R(-1) t^2 t^3])\n[ 2       3       1]\n[ t   t + 1   t + 2]\n[-1     t^2     t^3]\n\njulia> T = dense_matrix_type(R)\nAbstractAlgebra.Generic.MatSpaceElem{AbstractAlgebra.Generic.Poly{Rational{BigInt}}}\n\njulia> r = nrows(B)\n3\n\njulia> c = ncols(B)\n3\n\njulia> length(B)\n9\n\njulia> isempty(B)\nfalse\n\njulia> M = A + B\n[  t + 3         t + 3                   2]\n[t^2 + t       2*t + 1             2*t + 2]\n[     -3   t^2 + t + 2   t^3 + t^2 + t + 1]\n\njulia> N = 2 + A\n[t + 3       t             1]\n[  t^2   t + 2             t]\n[   -2   t + 2   t^2 + t + 3]\n\njulia> M1 = deepcopy(A)\n[t + 1       t             1]\n[  t^2       t             t]\n[   -2   t + 2   t^2 + t + 1]\n\njulia> A != B\ntrue\n\njulia> isone(one(S))\ntrue\n\njulia> V = A[1:2, :]\n[t + 1   t   1]\n[  t^2   t   t]\n\njulia> W = A^3\n[    3*t^4 + 4*t^3 + t^2 - 3*t - 5            t^4 + 5*t^3 + 10*t^2 + 7*t + 4                 2*t^4 + 7*t^3 + 9*t^2 + 8*t + 1]\n[t^5 + 4*t^4 + 3*t^3 - 7*t^2 - 4*t               4*t^4 + 8*t^3 + 7*t^2 + 2*t                 t^5 + 5*t^4 + 9*t^3 + 7*t^2 - t]\n[  t^5 + 3*t^4 - 10*t^2 - 16*t - 2   t^5 + 6*t^4 + 12*t^3 + 11*t^2 + 5*t - 2   t^6 + 3*t^5 + 8*t^4 + 15*t^3 + 10*t^2 + t - 5]\n\njulia> Z = divexact(2*A, 2)\n[t + 1       t             1]\n[  t^2       t             t]\n[   -2   t + 2   t^2 + t + 1]\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Elementary-row-and-column-operations","page":"Generic matrices","title":"Elementary row and column operations","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"add_column(::MatElem, ::Int, ::Int, ::Int)\nadd_column!(::MatElem, ::Int, ::Int, ::Int)\nadd_row(::MatElem, ::Int, ::Int, ::Int)\nadd_row!(::MatElem, ::Int, ::Int, ::Int)\nmultiply_column(::MatElem, ::Int, ::Int)\nmultiply_column!(::MatElem, ::Int, ::Int)\nmultiply_row(::MatElem, ::Int, ::Int)\nmultiply_row!(::MatElem, ::Int, ::Int)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.add_column-Tuple{MatElem,Int64,Int64,Int64}","page":"Generic matrices","title":"AbstractAlgebra.Generic.add_column","text":"add_column(a::MatrixElem, s::RingElement, i::Int, j::Int, rows = 1:nrows(a))\n\nCreate a copy of a and add s times the i-th row to the j-th row of a.\n\nBy default, the transformation is applied to all rows of a. This can be changed using the optional rows argument.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.add_column!-Tuple{MatElem,Int64,Int64,Int64}","page":"Generic matrices","title":"AbstractAlgebra.Generic.add_column!","text":"add_column!(a::MatrixElem, s::RingElement, i::Int, j::Int, rows = 1:nrows(a))\n\nAdd s times the i-th row to the j-th row of a.\n\nBy default, the transformation is applied to all rows of a. This can be changed using the optional rows argument.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.add_row-Tuple{MatElem,Int64,Int64,Int64}","page":"Generic matrices","title":"AbstractAlgebra.Generic.add_row","text":"add_row(a::MatrixElem, s::RingElement, i::Int, j::Int, cols = 1:ncols(a))\n\nCreate a copy of a and add s times the i-th row to the j-th row of a.\n\nBy default, the transformation is applied to all columns of a. This can be changed using the optional cols argument.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.add_row!-Tuple{MatElem,Int64,Int64,Int64}","page":"Generic matrices","title":"AbstractAlgebra.Generic.add_row!","text":"add_row!(a::MatrixElem, s::RingElement, i::Int, j::Int, cols = 1:ncols(a))\n\nAdd s times the i-th row to the j-th row of a.\n\nBy default, the transformation is applied to all columns of a. This can be changed using the optional cols argument.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.multiply_column-Tuple{MatElem,Int64,Int64}","page":"Generic matrices","title":"AbstractAlgebra.Generic.multiply_column","text":"multiply_column(a::MatrixElem, s::RingElement, i::Int, rows = 1:nrows(a))\n\nCreate a copy of a and multiply the ith column of a with s.\n\nBy default, the transformation is applied to all rows of a. This can be changed using the optional rows argument.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.multiply_column!-Tuple{MatElem,Int64,Int64}","page":"Generic matrices","title":"AbstractAlgebra.Generic.multiply_column!","text":"multiply_column!(a::MatrixElem, s::RingElement, i::Int, rows = 1:nrows(a))\n\nMultiply the ith column of a with s.\n\nBy default, the transformation is applied to all rows of a. This can be changed using the optional rows argument.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.multiply_row-Tuple{MatElem,Int64,Int64}","page":"Generic matrices","title":"AbstractAlgebra.Generic.multiply_row","text":"multiply_row(a::MatrixElem, s::RingElement, i::Int, cols = 1:ncols(a))\n\nCreate a copy of a and multiply  the ith row of a with s.\n\nBy default, the transformation is applied to all columns of a. This can be changed using the optional cols argument.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.multiply_row!-Tuple{MatElem,Int64,Int64}","page":"Generic matrices","title":"AbstractAlgebra.Generic.multiply_row!","text":"multiply_row!(a::MatrixElem, s::RingElement, i::Int, cols = 1:ncols(a))\n\nMultiply the ith row of a with s.\n\nBy default, the transformation is applied to all columns of a. This can be changed using the optional cols argument.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> M = ZZ[1 2 3; 2 3 4; 4 5 5]\n[1   2   3]\n[2   3   4]\n[4   5   5]\n\njulia> add_column(M, 2, 3, 1)\n[ 7   2   3]\n[10   3   4]\n[14   5   5]\n\njulia> add_row(M, 1, 2, 3)\n[1   2   3]\n[2   3   4]\n[6   8   9]\n\njulia> multiply_column(M, 2, 3)\n[1   2    6]\n[2   3    8]\n[4   5   10]\n\njulia> multiply_row(M, 2, 3)\n[1    2    3]\n[2    3    4]\n[8   10   10]","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Powering","page":"Generic matrices","title":"Powering","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"powers(::MatElem, ::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.powers-Tuple{MatElem,Int64}","page":"Generic matrices","title":"AbstractAlgebra.powers","text":"powers(a::Union{NCRingElement, MatElem}, d::Int)\n\nReturn an array M of \"powers\" of a where Mi + 1 = a^i for i = 0d\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> M = ZZ[1 2 3; 2 3 4; 4 5 5]\n[1   2   3]\n[2   3   4]\n[4   5   5]\n\njulia> A = powers(M, 4)\n5-element Array{AbstractAlgebra.Generic.MatSpaceElem{BigInt},1}:\n [1 0 0; 0 1 0; 0 0 1]\n [1 2 3; 2 3 4; 4 5 5]\n [17 23 26; 24 33 38; 34 48 57]\n [167 233 273; 242 337 394; 358 497 579]\n [1725 2398 2798; 2492 3465 4044; 3668 5102 5957]\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Gram-matrix","page":"Generic matrices","title":"Gram matrix","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"gram(::MatElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.gram-Tuple{MatElem}","page":"Generic matrices","title":"AbstractAlgebra.Generic.gram","text":"gram(x::AbstractAlgebra.MatElem)\n\nReturn the Gram matrix of x, i.e. if x is an rtimes c matrix return the rtimes r matrix whose entries i j are the dot products of the i-th and j-th rows, respectively.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> R, t = PolynomialRing(QQ, \"t\")\n(Univariate Polynomial Ring in t over Rationals, t)\n\njulia> S = MatrixSpace(R, 3, 3)\nMatrix Space of 3 rows and 3 columns over Univariate Polynomial Ring in t over Rationals\n\njulia> A = S([t + 1 t R(1); t^2 t t; R(-2) t + 2 t^2 + t + 1])\n[t + 1       t             1]\n[  t^2       t             t]\n[   -2   t + 2   t^2 + t + 1]\n\njulia> B = gram(A)\n[2*t^2 + 2*t + 2   t^3 + 2*t^2 + t                   2*t^2 + t - 1]\n[t^3 + 2*t^2 + t       t^4 + 2*t^2                       t^3 + 3*t]\n[  2*t^2 + t - 1         t^3 + 3*t   t^4 + 2*t^3 + 4*t^2 + 6*t + 9]\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Trace","page":"Generic matrices","title":"Trace","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"tr(::MatElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#LinearAlgebra.tr-Tuple{MatElem}","page":"Generic matrices","title":"LinearAlgebra.tr","text":"tr(x::AbsAlgAssElem{T}) where T -> T\n\nReturns the trace of x.\n\n\n\ntr(x::Generic.MatrixElem)\n\nReturn the trace of the matrix a, i.e. the sum of the diagonal elements. We require the matrix to be square.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> R, t = PolynomialRing(QQ, \"t\")\n(Univariate Polynomial Ring in t over Rationals, t)\n\njulia> S = MatrixSpace(R, 3, 3)\nMatrix Space of 3 rows and 3 columns over Univariate Polynomial Ring in t over Rationals\n\njulia> A = S([t + 1 t R(1); t^2 t t; R(-2) t + 2 t^2 + t + 1])\n[t + 1       t             1]\n[  t^2       t             t]\n[   -2   t + 2   t^2 + t + 1]\n\njulia> b = tr(A)\nt^2 + 3*t + 2\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Content","page":"Generic matrices","title":"Content","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"content(::MatElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.content-Tuple{MatElem}","page":"Generic matrices","title":"AbstractAlgebra.Generic.content","text":"content(x::Generic.MatrixElem)\n\nReturn the content of the matrix a, i.e. the greatest common divisor of all its entries, assuming it exists.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> R, t = PolynomialRing(QQ, \"t\")\n(Univariate Polynomial Ring in t over Rationals, t)\n\njulia> S = MatrixSpace(R, 3, 3)\nMatrix Space of 3 rows and 3 columns over Univariate Polynomial Ring in t over Rationals\n\njulia> A = S([t + 1 t R(1); t^2 t t; R(-2) t + 2 t^2 + t + 1])\n[t + 1       t             1]\n[  t^2       t             t]\n[   -2   t + 2   t^2 + t + 1]\n\njulia> b = content(A)\n1\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Permutation","page":"Generic matrices","title":"Permutation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"*(::Perm, ::MatElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Base.:*-Tuple{Perm,MatElem}","page":"Generic matrices","title":"Base.:*","text":"*(P::Generic.perm, x::Generic.MatrixElem)\n\nApply the pemutation P to the rows of the matrix x and return the result.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> R, t = PolynomialRing(QQ, \"t\")\n(Univariate Polynomial Ring in t over Rationals, t)\n\njulia> S = MatrixSpace(R, 3, 3)\nMatrix Space of 3 rows and 3 columns over Univariate Polynomial Ring in t over Rationals\n\njulia> G = SymmetricGroup(3)\nFull symmetric group over 3 elements\n\njulia> A = S([t + 1 t R(1); t^2 t t; R(-2) t + 2 t^2 + t + 1])\n[t + 1       t             1]\n[  t^2       t             t]\n[   -2   t + 2   t^2 + t + 1]\n\njulia> P = G([1, 3, 2])\n(2,3)\n\njulia> B = P*A\n[t + 1       t             1]\n[   -2   t + 2   t^2 + t + 1]\n[  t^2       t             t]\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#LU-factorisation","page":"Generic matrices","title":"LU factorisation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"lu{T <: FieldElem}(::MatElem{T}, ::SymmetricGroup)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#LinearAlgebra.lu-Union{Tuple{T}, Tuple{MatElem{T},AbstractAlgebra.SymmetricGroup}} where T<:FieldElem","page":"Generic matrices","title":"LinearAlgebra.lu","text":"lu(A::Generic.MatrixElem{T}, P = SymmetricGroup(nrows(A))) where {T <: FieldElement}\n\nReturn a tuple r p L U consisting of the rank of A, a permutation p of A belonging to P, a lower triangular matrix L and an upper triangular matrix U such that p(A) = LU, where p(A) stands for the matrix whose rows are the given permutation p of the rows of A.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"fflu{T <: RingElem}(::MatElem{T}, ::SymmetricGroup)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.fflu-Union{Tuple{T}, Tuple{MatElem{T},AbstractAlgebra.SymmetricGroup}} where T<:RingElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.fflu","text":"fflu(A::Generic.MatrixElem{T}, P = SymmetricGroup(nrows(A))) where {T <: RingElement}\n\nReturn a tuple r d p L U consisting of the rank of A, a denominator d, a permutation p of A belonging to P, a lower triangular matrix L and an upper triangular matrix U such that p(A) = LDU, where p(A) stands for the matrix whose rows are the given permutation p of the rows of A and such that D is the diagonal matrix diag(p_1 p_1p_2 ldots p_n-2p_n-1 p_n-1p_n) where the p_i are the inverses of the diagonal entries of L. The denominator d is set to pm mathrmdet(S) where S is an appropriate submatrix of A (S = A if A is square and nonsingular) and the sign is decided by the parity of the permutation.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> R, x = PolynomialRing(QQ, \"x\")\n(Univariate Polynomial Ring in x over Rationals, x)\n\njulia> K, a = NumberField(x^3 + 3x + 1, \"a\")\n(Residue field of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1, x)\n\njulia> S = MatrixSpace(K, 3, 3)\nMatrix Space of 3 rows and 3 columns over Residue field of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1\n\njulia> A = S([K(0) 2a + 3 a^2 + 1; a^2 - 2 a - 1 2a; a^2 - 2 a - 1 2a])\n[      0   2*x + 3   x^2 + 1]\n[x^2 - 2     x - 1       2*x]\n[x^2 - 2     x - 1       2*x]\n\njulia> r, P, L, U = lu(A)\n(2, (1,2), [1 0 0; 0 1 0; 1 0 1], [x^2-2 x-1 2*x; 0 2*x+3 x^2+1; 0 0 0])\n\njulia> r, d, P, L, U = fflu(A)\n(2, 3*x^2 - 10*x - 8, (1,2), [x^2-2 0 0; 0 3*x^2-10*x-8 0; x^2-2 0 1], [x^2-2 x-1 2*x; 0 3*x^2-10*x-8 -4*x^2-x-2; 0 0 0])\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Reduced-row-echelon-form","page":"Generic matrices","title":"Reduced row-echelon form","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"rref_rational{T <: RingElem}(::MatElem{T})\nrref{T <: FieldElem}(::MatElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.rref_rational-Union{Tuple{MatElem{T}}, Tuple{T}} where T<:RingElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.rref_rational","text":"rref_rational(M::Generic.MatrixElem{T}) where {T <: RingElement}\n\nReturn a tuple (r A d) consisting of the rank r of M and a denominator d in the base ring of M and a matrix A such that Ad is the reduced row echelon form of M. Note that the denominator is not usually minimal.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.rref-Union{Tuple{MatElem{T}}, Tuple{T}} where T<:FieldElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.rref","text":"rref(M::Generic.MatrixElem{T}) where {T <: FieldElement}\n\nReturn a tuple (r A) consisting of the rank r of M and a reduced row echelon form A of M.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"isrref{T <: RingElem}(::MatElem{T})\nisrref{T <: FieldElem}(::MatElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.isrref-Union{Tuple{MatElem{T}}, Tuple{T}} where T<:RingElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.isrref","text":"isrref(M::Generic.MatrixElem{T}) where {T <: RingElement}\n\nReturn true if M is in reduced row echelon form, otherwise return false.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.isrref-Union{Tuple{MatElem{T}}, Tuple{T}} where T<:FieldElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.isrref","text":"isrref(M::Generic.MatrixElem{T}) where {T <: RingElement}\n\nReturn true if M is in reduced row echelon form, otherwise return false.\n\n\n\nisrref(M::Generic.MatrixElem{T}) where {T <: FieldElement}\n\nReturn true if M is in reduced row echelon form, otherwise return false.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> R, x = PolynomialRing(QQ, \"x\")\n(Univariate Polynomial Ring in x over Rationals, x)\n\njulia> K, a = NumberField(x^3 + 3x + 1, \"a\")\n(Residue field of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1, x)\n\njulia> S = MatrixSpace(K, 3, 3)\nMatrix Space of 3 rows and 3 columns over Residue field of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1\n\njulia> M = S([K(0) 2a + 3 a^2 + 1; a^2 - 2 a - 1 2a; a^2 + 3a + 1 2a K(1)])\n[            0   2*x + 3   x^2 + 1]\n[      x^2 - 2     x - 1       2*x]\n[x^2 + 3*x + 1       2*x         1]\n\njulia> r, A = rref(M)\n(3, [1 0 0; 0 1 0; 0 0 1])\n\njulia> isrref(A)\ntrue\n\njulia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integers, x)\n\njulia> S = MatrixSpace(R, 3, 3)\nMatrix Space of 3 rows and 3 columns over Univariate Polynomial Ring in x over Integers\n\njulia> M = S([R(0) 2x + 3 x^2 + 1; x^2 - 2 x - 1 2x; x^2 + 3x + 1 2x R(1)])\n[            0   2*x + 3   x^2 + 1]\n[      x^2 - 2     x - 1       2*x]\n[x^2 + 3*x + 1       2*x         1]\n\njulia> r, A, d = rref_rational(M)\n(3, [-x^5-2*x^4-15*x^3-18*x^2-8*x-7 0 0; 0 -x^5-2*x^4-15*x^3-18*x^2-8*x-7 0; 0 0 -x^5-2*x^4-15*x^3-18*x^2-8*x-7], -x^5 - 2*x^4 - 15*x^3 - 18*x^2 - 8*x - 7)\n\njulia> isrref(A)\ntrue","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Determinant","page":"Generic matrices","title":"Determinant","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"det{T <: RingElem}(::MatElem{T})\ndet{T <: FieldElem}(::MatElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#LinearAlgebra.det-Union{Tuple{MatElem{T}}, Tuple{T}} where T<:RingElem","page":"Generic matrices","title":"LinearAlgebra.det","text":"det(M::Generic.MatrixElem{T}) where {T <: RingElement}\n\nReturn the determinant of the matrix M. We assume M is square.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/#LinearAlgebra.det-Union{Tuple{MatElem{T}}, Tuple{T}} where T<:FieldElem","page":"Generic matrices","title":"LinearAlgebra.det","text":"det(M::Generic.MatrixElem{T}) where {T <: FieldElement}\n\nReturn the determinant of the matrix M. We assume M is square.\n\n\n\ndet(M::Generic.MatrixElem{T}) where {T <: RingElement}\n\nReturn the determinant of the matrix M. We assume M is square.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> R, x = PolynomialRing(QQ, \"x\")\n(Univariate Polynomial Ring in x over Rationals, x)\n\njulia> K, a = NumberField(x^3 + 3x + 1, \"a\")\n(Residue field of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1, x)\n\njulia> S = MatrixSpace(K, 3, 3)\nMatrix Space of 3 rows and 3 columns over Residue field of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1\n\njulia> A = S([K(0) 2a + 3 a^2 + 1; a^2 - 2 a - 1 2a; a^2 + 3a + 1 2a K(1)])\n[            0   2*x + 3   x^2 + 1]\n[      x^2 - 2     x - 1       2*x]\n[x^2 + 3*x + 1       2*x         1]\n\njulia> d = det(A)\n11*x^2 - 30*x - 5\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Rank","page":"Generic matrices","title":"Rank","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"rank{T <: RingElem}(::MatElem{T})\nrank{T <: FieldElem}(::MatElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#LinearAlgebra.rank-Union{Tuple{MatElem{T}}, Tuple{T}} where T<:RingElem","page":"Generic matrices","title":"LinearAlgebra.rank","text":"rank(M::Generic.MatrixElem{T}) where {T <: RingElement}\n\nReturn the rank of the matrix M.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/#LinearAlgebra.rank-Union{Tuple{MatElem{T}}, Tuple{T}} where T<:FieldElem","page":"Generic matrices","title":"LinearAlgebra.rank","text":"rank(M::Generic.MatrixElem{T}) where {T <: RingElement}\n\nReturn the rank of the matrix M.\n\n\n\nrank(M::Generic.MatrixElem{T}) where {T <: FieldElement}\n\nReturn the rank of the matrix M.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> R, x = PolynomialRing(QQ, \"x\")\n(Univariate Polynomial Ring in x over Rationals, x)\n\njulia> K, a = NumberField(x^3 + 3x + 1, \"a\")\n(Residue field of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1, x)\n\njulia> S = MatrixSpace(K, 3, 3)\nMatrix Space of 3 rows and 3 columns over Residue field of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1\n\njulia> A = S([K(0) 2a + 3 a^2 + 1; a^2 - 2 a - 1 2a; a^2 + 3a + 1 2a K(1)])\n[            0   2*x + 3   x^2 + 1]\n[      x^2 - 2     x - 1       2*x]\n[x^2 + 3*x + 1       2*x         1]\n\njulia> d = rank(A)\n3\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Linear-solving","page":"Generic matrices","title":"Linear solving","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"solve{T <: FieldElem}(::MatElem{T}, ::MatElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.solve-Union{Tuple{T}, Tuple{MatElem{T},MatElem{T}}} where T<:FieldElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.solve","text":"solve(a::AbstractAlgebra.MatElem{S}, b::AbstractAlgebra.MatElem{S}) where {S <: RingElement}\n\nGiven an mtimes r matrix a over a ring and an mtimes n matrix b over the same ring, return an rtimes n matrix x such that ax = b. If no such matrix exists, an exception is raised. See also solve_left.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"solve_rational{T <: RingElem}(::MatElem{T}, ::MatElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.solve_rational-Union{Tuple{T}, Tuple{MatElem{T},MatElem{T}}} where T<:RingElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.solve_rational","text":"solve_rational(M::AbstractAlgebra.MatElem{T}, b::AbstractAlgebra.MatElem{T}) where T <: RingElement\n\nGiven a non-singular ntimes n matrix over a ring and an ntimes m matrix over the same ring, return a tuple x d consisting of an ntimes m matrix x and a denominator d such that Ax = db. The denominator will be the determinant of A up to sign. If A is singular an exception is raised.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"can_solve_with_solution{T <: RingElement}(::MatElem{T}, ::MatElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.can_solve_with_solution-Union{Tuple{T}, Tuple{MatElem{T},MatElem{T}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic matrices","title":"AbstractAlgebra.Generic.can_solve_with_solution","text":"can_solve_with_solution(a::AbstractAlgebra.MatElem{S}, b::AbstractAlgebra.MatElem{S}; side::Symbol = :right) where S <: RingElement\n\nGiven two matrices a and b over the same ring, try to solve ax = b if side is :right or xa = b if side is :left. In either case, return a tuple (flag, x). If a solution exists, flag is set to true and x is a solution. If no solution exists, flag is set to false and x is arbitrary. If the dimensions of a and b are incompatible, an exception is raised.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"can_solve{T <: RingElement}(::MatElem{T}, ::MatElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.can_solve-Union{Tuple{T}, Tuple{MatElem{T},MatElem{T}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic matrices","title":"AbstractAlgebra.Generic.can_solve","text":"can_solve(a::AbstractAlgebra.MatElem{S}, b::AbstractAlgebra.MatElem{S}; side::Symbol = :right) where S <: RingElement\n\nGiven two matrices a and b over the same ring, check the solubility of ax = b if side is :right or xa = b if side is :left. Return true if a solution exists, false otherwise. If the dimensions of a and b are incompatible, an exception is raised. If a solution should be computed as well, use can_solve_with_solution instead.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"solve_left{T <: RingElem}(::MatElem{T}, ::MatElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.solve_left-Union{Tuple{T}, Tuple{MatElem{T},MatElem{T}}} where T<:RingElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.solve_left","text":"solve_left(a::AbstractAlgebra.MatElem{S}, b::AbstractAlgebra.MatElem{S}) where S <: RingElement\n\nGiven an rtimes n matrix a over a ring and an mtimes n matrix b over the same ring, return an mtimes r matrix x such that xa = b. If no such matrix exists, an exception is raised. See also solve.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"solve_triu{T <: FieldElem}(::MatElem{T}, ::MatElem{T}, ::Bool)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.solve_triu-Union{Tuple{T}, Tuple{MatElem{T},MatElem{T},Bool}} where T<:FieldElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.solve_triu","text":"solve_triu(U::AbstractAlgebra.MatElem{T}, b::AbstractAlgebra.MatElem{T}, unit::Bool = false) where {T <: FieldElement}\n\nGiven a non-singular ntimes n matrix over a field which is upper triangular, and an ntimes m matrix over the same field, return an ntimes m matrix x such that Ax = b. If A is singular an exception is raised. If unit is true then U is assumed to have ones on its diagonal, and the diagonal will not be read.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"can_solve_left_reduced_triu{T <: RingElement}(::MatElem{T}, ::MatElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.can_solve_left_reduced_triu-Union{Tuple{T}, Tuple{MatElem{T},MatElem{T}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic matrices","title":"AbstractAlgebra.Generic.can_solve_left_reduced_triu","text":"can_solve_left_reduced_triu(r::AbstractAlgebra.MatElem{T},\n                      M::AbstractAlgebra.MatElem{T}) where T <: RingElement\n\nReturn a tuple flag, x where flag is set to true if xM = r has a solution, where M is an mtimes n matrix in (upper triangular) Hermite normal form or reduced row echelon form and r and x are row vectors with m columns. If there is no solution, flag is set to false and x is set to the zero row.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> R, x = PolynomialRing(QQ, \"x\")\n(Univariate Polynomial Ring in x over Rationals, x)\n\njulia> K, a = NumberField(x^3 + 3x + 1, \"a\")\n(Residue field of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1, x)\n\njulia> S = MatrixSpace(K, 3, 3)\nMatrix Space of 3 rows and 3 columns over Residue field of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1\n\njulia> U = MatrixSpace(K, 3, 1)\nMatrix Space of 3 rows and 1 columns over Residue field of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1\n\njulia> A = S([K(0) 2a + 3 a^2 + 1; a^2 - 2 a - 1 2a; a^2 + 3a + 1 2a K(1)])\n[            0   2*x + 3   x^2 + 1]\n[      x^2 - 2     x - 1       2*x]\n[x^2 + 3*x + 1       2*x         1]\n\njulia> b = U([2a a + 1 (-a - 1)]')\n[   2*x]\n[ x + 1]\n[-x - 1]\n\njulia> x = solve(A, b)\n[  1984//7817*x^2 + 1573//7817*x - 937//7817]\n[ -2085//7817*x^2 + 1692//7817*x + 965//7817]\n[-3198//7817*x^2 + 3540//7817*x - 3525//7817]\n\njulia> A = matrix(ZZ, 2, 2, [1, 2, 0, 2])\n[1   2]\n[0   2]\n\njulia> b = matrix(ZZ, 2, 1, [2, 1])\n[2]\n[1]\n\njulia> can_solve(A, b, side = :right)\nfalse\n\njulia> A = matrix(QQ, 2, 2, [3, 4, 5, 6])\n[3//1   4//1]\n[5//1   6//1]\n\njulia> b = matrix(QQ, 1, 2, [2, 1])\n[2//1   1//1]\n\njulia> can_solve_with_solution(A, b; side = :left)\n(true, [-7//2 5//2])\n\njulia> A = S([a + 1 2a + 3 a^2 + 1; K(0) a^2 - 1 2a; K(0) K(0) a])\n[x + 1   2*x + 3   x^2 + 1]\n[    0   x^2 - 1       2*x]\n[    0         0         x]\n\njulia> bb = U([2a a + 1 (-a - 1)]')\n[   2*x]\n[ x + 1]\n[-x - 1]\n\njulia> x = solve_triu(A, bb, false)\n[ 1//3*x^2 + 8//3*x + 13//3]\n[-3//5*x^2 - 3//5*x - 12//5]\n[                   x^2 + 2]\n\njulia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integers, x)\n\njulia> S = MatrixSpace(R, 3, 3)\nMatrix Space of 3 rows and 3 columns over Univariate Polynomial Ring in x over Integers\n\njulia> U = MatrixSpace(R, 3, 2)\nMatrix Space of 3 rows and 2 columns over Univariate Polynomial Ring in x over Integers\n\njulia> A = S([R(0) 2x + 3 x^2 + 1; x^2 - 2 x - 1 2x; x^2 + 3x + 1 2x R(1)])\n[            0   2*x + 3   x^2 + 1]\n[      x^2 - 2     x - 1       2*x]\n[x^2 + 3*x + 1       2*x         1]\n\njulia> bbb = U([2x x + 1 (-x - 1); x + 1 (-x) x^2]')\n[   2*x   x + 1]\n[ x + 1      -x]\n[-x - 1     x^2]\n\njulia> x, d = solve_rational(A, bbb)\n([3*x^4-10*x^3-8*x^2-11*x-4 -x^5+3*x^4+x^3-2*x^2+3*x-1; -2*x^5-x^4+6*x^3+2*x+1 x^6+x^5+4*x^4+9*x^3+8*x^2+5*x+2; 6*x^4+12*x^3+15*x^2+6*x-3 -2*x^5-4*x^4-6*x^3-9*x^2-4*x+1], x^5 + 2*x^4 + 15*x^3 + 18*x^2 + 8*x + 7)\n\njulia> S = MatrixSpace(ZZ, 3, 3)\nMatrix Space of 3 rows and 3 columns over Integers\n\njulia> T = MatrixSpace(ZZ, 3, 1)\nMatrix Space of 3 rows and 1 columns over Integers\n\njulia> A = S([BigInt(2) 3 5; 1 4 7; 9 2 2])\n[2   3   5]\n[1   4   7]\n[9   2   2]\n\njulia> B = T([BigInt(4), 5, 7])\n[4]\n[5]\n[7]","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Inverse","page":"Generic matrices","title":"Inverse","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Base.inv{T <: RingElement}(::MatrixElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Base.inv-Union{Tuple{Union{MatAlgElem{T}, MatElem{T}}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic matrices","title":"Base.inv","text":"inv(M::MatrixElem{T}) where {T <: RingElement}\n\nGiven a non-singular ntimes n matrix over a ring, return an ntimes n matrix X such that MX = I_n, where I_n is the ntimes n identity matrix. If M is not invertible over the base ring an exception is raised.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"isinvertible_with_inverse{T <: RingElement}(::MatrixElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.isinvertible_with_inverse-Union{Tuple{Union{MatAlgElem{T}, MatElem{T}}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic matrices","title":"AbstractAlgebra.Generic.isinvertible_with_inverse","text":"isinvertible_with_inverse(A::Generic.MatrixElem{T}; side::Symbol = :left) where {T <: RingElement}\n\nGiven an ntimes m matrix A over a ring, return a tuple (flag, B). If side is :right and flag is true, B is the right inverse of A i.e. AB is the ntimes n unit matrix. If side is :left and flag is true, B is the left inverse of A i.e. BA is the mtimes m unit matrix. If flag is false, no right or left inverse exists.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"isinvertible{T <: RingElement}(::MatrixElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.isinvertible-Union{Tuple{Union{MatAlgElem{T}, MatElem{T}}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic matrices","title":"AbstractAlgebra.Generic.isinvertible","text":"isinvertible(A::Generic.MatrixElem{T}) where {T <: RingElement}\n\nReturn true if a given square matrix is invertible, false otherwise. If the inverse should also be computed, use isinvertible_with_inverse.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> R, x = PolynomialRing(QQ, \"x\")\n(Univariate Polynomial Ring in x over Rationals, x)\n\njulia> K, a = NumberField(x^3 + 3x + 1, \"a\")\n(Residue field of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1, x)\n\njulia> S = MatrixSpace(K, 3, 3)\nMatrix Space of 3 rows and 3 columns over Residue field of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1\n\njulia> A = S([K(0) 2a + 3 a^2 + 1; a^2 - 2 a - 1 2a; a^2 + 3a + 1 2a K(1)])\n[            0   2*x + 3   x^2 + 1]\n[      x^2 - 2     x - 1       2*x]\n[x^2 + 3*x + 1       2*x         1]\n\njulia> X = inv(A)\n[-343//7817*x^2 + 717//7817*x - 2072//7817   -4964//23451*x^2 + 2195//23451*x - 11162//23451    -232//23451*x^2 - 4187//23451*x - 1561//23451]\n[ 128//7817*x^2 - 655//7817*x + 2209//7817      599//23451*x^2 - 2027//23451*x - 1327//23451   -1805//23451*x^2 + 2702//23451*x - 7394//23451]\n[ 545//7817*x^2 + 570//7817*x + 2016//7817     -1297//23451*x^2 - 5516//23451*x - 337//23451   8254//23451*x^2 - 2053//23451*x + 16519//23451]\n\njulia> isinvertible(A)\ntrue\n\njulia> isinvertible_with_inverse(A)\n(true, [-343//7817*x^2+717//7817*x-2072//7817 -4964//23451*x^2+2195//23451*x-11162//23451 -232//23451*x^2-4187//23451*x-1561//23451; 128//7817*x^2-655//7817*x+2209//7817 599//23451*x^2-2027//23451*x-1327//23451 -1805//23451*x^2+2702//23451*x-7394//23451; 545//7817*x^2+570//7817*x+2016//7817 -1297//23451*x^2-5516//23451*x-337//23451 8254//23451*x^2-2053//23451*x+16519//23451])\n\njulia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integers, x)\n\njulia> S = MatrixSpace(R, 3, 3)\nMatrix Space of 3 rows and 3 columns over Univariate Polynomial Ring in x over Integers\n\njulia> A = S([R(0) 2x + 3 x^2 + 1; x^2 - 2 x - 1 2x; x^2 + 3x + 1 2x R(1)])\n[            0   2*x + 3   x^2 + 1]\n[      x^2 - 2     x - 1       2*x]\n[x^2 + 3*x + 1       2*x         1]\n\njulia> X, d = pseudo_inv(A)\n([4*x^2-x+1 -2*x^3+3 x^3-5*x^2-5*x-1; -2*x^3-5*x^2-2*x-2 x^4+3*x^3+2*x^2+3*x+1 -x^4+x^2+2; -x^3+2*x^2+2*x-1 -2*x^3-9*x^2-11*x-3 2*x^3+3*x^2-4*x-6], -x^5 - 2*x^4 - 15*x^3 - 18*x^2 - 8*x - 7)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Nullspace","page":"Generic matrices","title":"Nullspace","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"nullspace{T <: FieldElem}(::MatElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#LinearAlgebra.nullspace-Union{Tuple{MatElem{T}}, Tuple{T}} where T<:FieldElem","page":"Generic matrices","title":"LinearAlgebra.nullspace","text":"nullspace(M::AbstractAlgebra.MatElem{T}) where {T <: RingElement}\n\nReturn a tuple (nu N) consisting of the nullity nu of M and a basis N (consisting of column vectors) for the right nullspace of M, i.e. such that MN is the zero matrix. If M is an mtimes n matrix N will be an ntimes nu matrix. Note that the nullspace is taken to be the vector space kernel over the fraction field of the base ring if the latter is not a field. In AbstractAlgebra we use the name \"kernel\" for a function to compute an integral kernel.\n\n\n\nnullspace(M::AbstractAlgebra.MatElem{T}) where {T <: FieldElement}\n\nReturn a tuple (nu N) consisting of the nullity nu of M and a basis N (consisting of column vectors) for the right nullspace of M, i.e. such that MN is the zero matrix. If M is an mtimes n matrix N will be an ntimes nu matrix.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integers, x)\n\njulia> S = MatrixSpace(R, 4, 4)\nMatrix Space of 4 rows and 4 columns over Univariate Polynomial Ring in x over Integers\n\njulia> M = S([-6*x^2+6*x+12 -12*x^2-21*x-15 -15*x^2+21*x+33 -21*x^2-9*x-9;\n              -8*x^2+8*x+16 -16*x^2+38*x-20 90*x^2-82*x-44 60*x^2+54*x-34;\n              -4*x^2+4*x+8 -8*x^2+13*x-10 35*x^2-31*x-14 22*x^2+21*x-15;\n              -10*x^2+10*x+20 -20*x^2+70*x-25 150*x^2-140*x-85 105*x^2+90*x-50])\n[  -6*x^2 + 6*x + 12   -12*x^2 - 21*x - 15    -15*x^2 + 21*x + 33     -21*x^2 - 9*x - 9]\n[  -8*x^2 + 8*x + 16   -16*x^2 + 38*x - 20     90*x^2 - 82*x - 44    60*x^2 + 54*x - 34]\n[   -4*x^2 + 4*x + 8    -8*x^2 + 13*x - 10     35*x^2 - 31*x - 14    22*x^2 + 21*x - 15]\n[-10*x^2 + 10*x + 20   -20*x^2 + 70*x - 25   150*x^2 - 140*x - 85   105*x^2 + 90*x - 50]\n\njulia> n, N = nullspace(M)\n(2, [1320*x^4-330*x^2-1320*x-1320 1056*x^4+1254*x^3+1848*x^2-66*x-330; -660*x^4+1320*x^3+1188*x^2-1848*x-1056 -528*x^4+132*x^3+1584*x^2+660*x-264; 396*x^3-396*x^2-792*x 0; 0 396*x^3-396*x^2-792*x])","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Kernel","page":"Generic matrices","title":"Kernel","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"kernel{T <: RingElem}(::MatElem{T})\nleft_kernel{T <: RingElem}(::MatElem{T})\nright_kernel{T <: RingElem}(::MatElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.kernel-Union{Tuple{MatElem{T}}, Tuple{T}} where T<:RingElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.kernel","text":"kernel(a::MatElem{T}; side::Symbol = :right) where T <: RingElement\n\nReturn a tuple (n M), where n is the rank of the kernel and M is a basis for it. If side is right or not specified, the right kernel is computed, i.e. the matrix of columns whose span gives the right kernel space. If side is left, the left kernel is computed, i.e. the matrix of rows whose span is the left kernel space.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.left_kernel-Union{Tuple{MatElem{T}}, Tuple{T}} where T<:RingElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.left_kernel","text":"left_kernel(a::AbstractAlgebra.MatElem{T}) where T <: RingElement\n\nReturn a tuple n, M where M is a matrix whose rows generate the kernel of M and n is the rank of the kernel. The transpose of the output of this function is guaranteed to be in flipped upper triangular format (i.e. upper triangular format if columns and rows are reversed).\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.right_kernel-Union{Tuple{MatElem{T}}, Tuple{T}} where T<:RingElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.right_kernel","text":"right_kernel(a::AbstractAlgebra.MatElem{T}) where T <: RingElement\n\nReturn a tuple n, M where M is a matrix whose columns generate the kernel of M and n is the rank of the kernel.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> S = MatrixSpace(ZZ, 4, 4)\nMatrix Space of 4 rows and 4 columns over Integers\n\njulia> M = S([1 2 0 4;\n              2 0 1 1;\n              0 1 1 -1;\n              2 -1 0 2])\n[1    2   0    4]\n[2    0   1    1]\n[0    1   1   -1]\n[2   -1   0    2]\n\njulia> nr, Nr = kernel(M)\n(1, [-8; -6; 11; 5])\n\njulia> nl, Nl = left_kernel(M)\n(1, [0 -1 1 1])\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Hessenberg-form","page":"Generic matrices","title":"Hessenberg form","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"hessenberg{T <: RingElem}(::MatElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#LinearAlgebra.hessenberg-Union{Tuple{MatElem{T}}, Tuple{T}} where T<:RingElem","page":"Generic matrices","title":"LinearAlgebra.hessenberg","text":"hessenberg(A::Generic.MatrixElem{T}) where {T <: RingElement}\n\nReturn the Hessenberg form of M, i.e. an upper Hessenberg matrix which is similar to M. The upper Hessenberg form has nonzero entries above and on the diagonal and in the diagonal line immediately below the diagonal.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"ishessenberg{T <: RingElem}(::MatElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.ishessenberg-Union{Tuple{MatElem{T}}, Tuple{T}} where T<:RingElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.ishessenberg","text":"ishessenberg(A::Generic.MatrixElem{T}) where {T <: RingElement}\n\nReturn true if M is in Hessenberg form, otherwise returns false.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> R = ResidueRing(ZZ, 7)\nResidue ring of Integers modulo 7\n\njulia> S = MatrixSpace(R, 4, 4)\nMatrix Space of 4 rows and 4 columns over Residue ring of Integers modulo 7\n\njulia> M = S([R(1) R(2) R(4) R(3); R(2) R(5) R(1) R(0);\n              R(6) R(1) R(3) R(2); R(1) R(1) R(3) R(5)])\n[1   2   4   3]\n[2   5   1   0]\n[6   1   3   2]\n[1   1   3   5]\n\njulia> A = hessenberg(M)\n[1   5   5   3]\n[2   1   1   0]\n[0   1   3   2]\n[0   0   2   2]\n\njulia> ishessenberg(A)\ntrue\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Characteristic-polynomial","page":"Generic matrices","title":"Characteristic polynomial","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"charpoly{T <: RingElem}(::Ring, ::MatElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.charpoly-Union{Tuple{T}, Tuple{AbstractAlgebra.Ring,MatElem{T}}} where T<:RingElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.charpoly","text":"charpoly(V::Ring, Y::Generic.MatrixElem{T}) where {T <: RingElement}\n\nReturn the characteristic polynomial p of the matrix M. The polynomial ring R of the resulting polynomial must be supplied and the matrix is assumed to be square.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> R = ResidueRing(ZZ, 7)\nResidue ring of Integers modulo 7\n\njulia> S = MatrixSpace(R, 4, 4)\nMatrix Space of 4 rows and 4 columns over Residue ring of Integers modulo 7\n\njulia> T, x = PolynomialRing(R, \"x\")\n(Univariate Polynomial Ring in x over Residue ring of Integers modulo 7, x)\n\njulia> M = S([R(1) R(2) R(4) R(3); R(2) R(5) R(1) R(0);\n              R(6) R(1) R(3) R(2); R(1) R(1) R(3) R(5)])\n[1   2   4   3]\n[2   5   1   0]\n[6   1   3   2]\n[1   1   3   5]\n\njulia> A = charpoly(T, M)\nx^4 + 2*x^2 + 6*x + 2\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Minimal-polynomial","page":"Generic matrices","title":"Minimal polynomial","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"minpoly{T <: RingElem}(::Ring, ::MatElem{T}, ::Bool)\nminpoly{T <: FieldElem}(::Ring, ::MatElem{T}, ::Bool)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.minpoly-Union{Tuple{T}, Tuple{AbstractAlgebra.Ring,MatElem{T},Bool}} where T<:RingElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.minpoly","text":"minpoly(S::Ring, M::MatElem{T}, charpoly_only::Bool = false) where {T <: RingElement}\n\nReturn the minimal polynomial p of the matrix M. The polynomial ring S of the resulting polynomial must be supplied and the matrix must be square.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.minpoly-Union{Tuple{T}, Tuple{AbstractAlgebra.Ring,MatElem{T},Bool}} where T<:FieldElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.minpoly","text":"minpoly(S::Ring, M::MatElem{T}, charpoly_only::Bool = false) where {T <: FieldElement}\n\nReturn the minimal polynomial p of the matrix M. The polynomial ring S of the resulting polynomial must be supplied and the matrix must be square.\n\n\n\nminpoly(S::Ring, M::MatElem{T}, charpoly_only::Bool = false) where {T <: RingElement}\n\nReturn the minimal polynomial p of the matrix M. The polynomial ring S of the resulting polynomial must be supplied and the matrix must be square.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> R = GF(13)\nFinite field F_13\n\njulia> T, y = PolynomialRing(R, \"y\")\n(Univariate Polynomial Ring in y over Finite field F_13, y)\n\njulia> M = R[7 6 1;\n             7 7 5;\n             8 12 5]\n[7    6   1]\n[7    7   5]\n[8   12   5]\n\njulia> A = minpoly(T, M)\ny^2 + 10*y\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Transforms","page":"Generic matrices","title":"Transforms","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"similarity!{T <: RingElem}(::MatElem{T}, ::Int, ::T)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.similarity!-Union{Tuple{T}, Tuple{MatElem{T},Int64,T}} where T<:RingElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.similarity!","text":"similarity!(A::Generic.MatrixElem{T}, r::Int, d::T) where {T <: RingElement}\n\nApplies a similarity transform to the ntimes n matrix M in-place. Let P be the ntimes n identity matrix that has had all zero entries of row r replaced with d, then the transform applied is equivalent to M = P^-1MP. We require M to be a square matrix. A similarity transform preserves the minimal and characteristic polynomials of a matrix.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> R = ResidueRing(ZZ, 7)\nResidue ring of Integers modulo 7\n\njulia> S = MatrixSpace(R, 4, 4)\nMatrix Space of 4 rows and 4 columns over Residue ring of Integers modulo 7\n\njulia> M = S([R(1) R(2) R(4) R(3); R(2) R(5) R(1) R(0);\n              R(6) R(1) R(3) R(2); R(1) R(1) R(3) R(5)])\n[1   2   4   3]\n[2   5   1   0]\n[6   1   3   2]\n[1   1   3   5]\n\njulia> similarity!(M, 1, R(3))\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Hermite-normal-form","page":"Generic matrices","title":"Hermite normal form","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"hnf{T <: RingElem}(::MatElem{T})\nhnf_with_transform{T <: RingElem}(::MatElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.hnf-Union{Tuple{MatElem{T}}, Tuple{T}} where T<:RingElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.hnf","text":"hnf(A::Generic.MatrixElem{T}) where {T <: RingElement}\n\nReturn the upper right row Hermite normal form of A.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.hnf_with_transform-Union{Tuple{MatElem{T}}, Tuple{T}} where T<:RingElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.hnf_with_transform","text":"hnf_with_transform(A)\n\nReturn the tuple H U consisting of the upper right row Hermite normal form H of A together with invertible matrix U such that UA = H.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"ishnf{T <: RingElem}(::MatElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.ishnf-Union{Tuple{MatElem{T}}, Tuple{T}} where T<:RingElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.ishnf","text":"ishnf(M::Generic.MatrixElem{T}) where T <: RingElement\n\nReturn true if the matrix is in Hermite normal form.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> A = matrix(ZZ, [2 3 -1; 3 5 7; 11 1 12])\n[ 2   3   -1]\n[ 3   5    7]\n[11   1   12]\n\njulia> H = hnf(A)\n[1   0   255]\n[0   1    17]\n[0   0   281]\n\njulia> ishnf(H)\ntrue\n\njulia> H, U = hnf_with_transform(A)\n([1 0 255; 0 1 17; 0 0 281], [-47 28 1; -3 2 0; -52 31 1])\n\njulia> U*A\n[1   0   255]\n[0   1    17]\n[0   0   281]","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#Smith-normal-form","page":"Generic matrices","title":"Smith normal form","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"issnf(::MatrixElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.issnf-Union{Tuple{Union{MatAlgElem{T}, MatElem{T}}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic matrices","title":"AbstractAlgebra.Generic.issnf","text":"issnf(A::MatrixElem{T}) where T <: RingElement\n\nReturn true if A is in Smith Normal Form.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"snf{T <: RingElem}(::MatElem{T})\nsnf_with_transform{T <: RingElem}(::MatElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.snf-Union{Tuple{MatElem{T}}, Tuple{T}} where T<:RingElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.snf","text":"snf(A::Generic.MatrixElem{T}) where {T <: RingElement}\n\nReturn the Smith normal form of A.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.snf_with_transform-Union{Tuple{MatElem{T}}, Tuple{T}} where T<:RingElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.snf_with_transform","text":"snf_with_transform(A)\n\nReturn the tuple S T U consisting of the Smith normal form S of A together with invertible matrices T and U such that TAU = S.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> A = matrix(ZZ, [2 3 -1; 3 5 7; 11 1 12])\n[ 2   3   -1]\n[ 3   5    7]\n[11   1   12]\n\njulia> S = snf(A)\n[1   0     0]\n[0   1     0]\n[0   0   281]\n\njulia> S, T, U = snf_with_transform(A)\n([1 0 0; 0 1 0; 0 0 281], [1 0 0; 7 1 0; 229 31 1], [0 -3 26; 0 2 -17; -1 0 1])\n\njulia> T*A*U\n[1   0     0]\n[0   1     0]\n[0   0   281]","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#(Weak)-Popov-form","page":"Generic matrices","title":"(Weak) Popov form","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"AbstractAlgebra.jl provides algorithms for computing the (weak) Popov of a matrix with entries in a univariate polynomial ring over a field.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"isweak_popov(P::MatrixElem{T}, rank::Int) where T <: Generic.Poly","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.isweak_popov-Union{Tuple{T}, Tuple{Union{MatAlgElem{T}, MatElem{T}},Int64}} where T<:AbstractAlgebra.Generic.Poly","page":"Generic matrices","title":"AbstractAlgebra.Generic.isweak_popov","text":"isweak_popov(P::MatrixElem{T}, rank::Int) where T <: Generic.Poly\n\nReturn true if P is a matrix in weak Popov form of the given rank.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"weak_popov{T <: PolyElem}(::Generic.Mat{T})\nweak_popov_with_transform{T <: PolyElem}(::Generic.Mat{T})\npopov{T <: PolyElem}(::Generic.Mat{T})\npopov_with_transform{T <: PolyElem}(::Generic.Mat{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.weak_popov-Union{Tuple{AbstractAlgebra.Generic.Mat{T}}, Tuple{T}} where T<:PolyElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.weak_popov","text":"weak_popov(A::Mat{T}) where {T <: PolyElem}\n\nReturn the weak Popov form of A.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.weak_popov_with_transform-Union{Tuple{AbstractAlgebra.Generic.Mat{T}}, Tuple{T}} where T<:PolyElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.weak_popov_with_transform","text":"weak_popov_with_transform(A::Mat{T}) where {T <: PolyElem}\n\nCompute a tuple (P U) where P is the weak Popov form of A and U is a transformation matrix so that P = UA.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.popov-Union{Tuple{AbstractAlgebra.Generic.Mat{T}}, Tuple{T}} where T<:PolyElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.popov","text":"popov(A::Mat{T}) where {T <: PolyElem}\n\nReturn the Popov form of A.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/#AbstractAlgebra.Generic.popov_with_transform-Union{Tuple{AbstractAlgebra.Generic.Mat{T}}, Tuple{T}} where T<:PolyElem","page":"Generic matrices","title":"AbstractAlgebra.Generic.popov_with_transform","text":"popov_with_transform(A::Mat{T}) where {T <: PolyElem}\n\nCompute a tuple (P U) where P is the Popov form of A and U is a transformation matrix so that P = UA.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix/","page":"Generic matrices","title":"Generic matrices","text":"julia> R, x = PolynomialRing(QQ, \"x\");\n\njulia> A = matrix(R, map(R, Any[1 2 3 x; x 2*x 3*x x^2; x x^2+1 x^3+x^2 x^4+x^2+1]))\n[1         2           3               x]\n[x       2*x         3*x             x^2]\n[x   x^2 + 1   x^3 + x^2   x^4 + x^2 + 1]\n\njulia> P = weak_popov(A)\n[   1                        2                    3   x]\n[   0                        0                    0   0]\n[-x^3   -2*x^3 + x^2 - 2*x + 1   -2*x^3 + x^2 - 3*x   1]\n\njulia> P, U = weak_popov_with_transform(A)\n([1 2 3 x; 0 0 0 0; -x^3 -2*x^3+x^2-2*x+1 -2*x^3+x^2-3*x 1], [1 0 0; -x 1 0; -x^3-x 0 1])\n\njulia> U*A\n[   1                        2                    3   x]\n[   0                        0                    0   0]\n[-x^3   -2*x^3 + x^2 - 2*x + 1   -2*x^3 + x^2 - 3*x   1]","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/numberfield/#Number-field-arithmetic","page":"Number field arithmetic","title":"Number field arithmetic","text":"","category":"section"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"Number fields are provided in Nemo by Antic. This allows construction of absolute number fields and basic arithmetic computations therein.","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"Number fields are constructed using the AnticNumberField function. However, for convenience we define","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"NumberField = AnticNumberField","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"so that number fields can be constructed using NumberField rather than AnticNumberField. ","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"The types of number field elements in Nemo are given in the following table, along with the libraries that provide them and the associated types of the parent objects.","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"Library Field Element type Parent type\nAntic mathbbQx(f) nf_elem AnticNumberField","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"All the number field types belong to the Field abstract type and the number field element types belong to the FieldElem abstract type.","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"The Hecke.jl library radically expands on number field functionality, providing ideals, orders, class groups, relative extensions, class field theory, etc.","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"The basic number field element type used in Hecke is the Nemo/antic number field element type, making the two libraries tightly integrated.","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"https://thofma.github.io/Hecke.jl/latest/","category":"page"},{"location":"Nemo/docs/src/numberfield/#Number-field-functionality","page":"Number field arithmetic","title":"Number field functionality","text":"","category":"section"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"The number fields in Nemo implement the full AbstractAlgebra.jl field interface.","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/fields","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"Below, we document the additional functionality provided for number field elements.","category":"page"},{"location":"Nemo/docs/src/numberfield/#Constructors","page":"Number field arithmetic","title":"Constructors","text":"","category":"section"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"In order to construct number field elements in Nemo, one must first construct the number field itself. This is accomplished with one of the following constructors.","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"AnticNumberField(::fmpq_poly, ::AbstractString; cached = true)","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"Return a tuple K, a consisting of the number field parent object K and generator a. The generator will be printed as per the supplied string. By default number field parents are cached based on generator string and generating polynomial. If this is not desired, the optional argument cached can be set to false.","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"AnticCyclotomicField(::Int, ::AbstractString, AbstractString; cached = true)","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"Return a tuple K, a consisting of a parent object K for the n-th cyclotomic field, and a generator a. By default number field parents are cached based on generator string and generating polynomial. If this is not desired, the optional argument cached can be set to false.","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"AnticMaximalRealSubfield(::Int, ::AbstractString, ::AbstractString; cached = true)","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"Return a tuple K, a consisting of a parent object K for the real subfield of the n-th cyclotomic field, and a generator a. By default number field parents are cached based on generator string and generating polynomial. If this is not desired, the optional argument cached can be set to false.","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"For convenience we define","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"NumberField = AnticNumberField\nCyclotomicField = AnticCyclotomicField\nMaximalRealSubfield = AnticMaximalRealSubfield","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"so that one can use the names on the left instead of those on the right.","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"Here are some examples of creating number fields and making use of the resulting parent objects to coerce various elements into those fields.","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"Examples","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"R, x = PolynomialRing(QQ, \"x\")\nK, a = NumberField(x^3 + 3x + 1, \"a\")\nL, b = CyclotomicField(5, \"b\")\nM, c = MaximalRealSubfield(5, \"c\", \"y\")\n\nd = K(3)\nf = L(b)\ng = L(ZZ(11))\nh = L(ZZ(11)//3)\nk = M(x)","category":"page"},{"location":"Nemo/docs/src/numberfield/#Number-field-element-constructors","page":"Number field arithmetic","title":"Number field element constructors","text":"","category":"section"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"gen(::AnticNumberField)","category":"page"},{"location":"Nemo/docs/src/numberfield/#AbstractAlgebra.gen-Tuple{AnticNumberField}","page":"Number field arithmetic","title":"AbstractAlgebra.gen","text":"gen(a::AnticNumberField)\n\nReturn the generator of the given number field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"The easiest way of constructing number field elements is to use element arithmetic with the generator, to construct the desired element by its representation as a polynomial. See the following examples for how to do this.","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"Examples","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"R, x = PolynomialRing(QQ, \"x\")\nK, a = NumberField(x^3 + 3x + 1, \"a\")\n\nd = gen(K)\nf = a^2 + 2a - 7","category":"page"},{"location":"Nemo/docs/src/numberfield/#Basic-functionality","page":"Number field arithmetic","title":"Basic functionality","text":"","category":"section"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"mul_red!(::nf_elem, ::nf_elem, ::nf_elem, ::Bool)","category":"page"},{"location":"Nemo/docs/src/numberfield/#AbstractAlgebra.mul_red!-Tuple{nf_elem,nf_elem,nf_elem,Bool}","page":"Number field arithmetic","title":"AbstractAlgebra.mul_red!","text":"mul_red!(z::nf_elem, x::nf_elem, y::nf_elem, red::Bool)\n\nMultiply x by y and set the existing number field element z to the result. Reduction modulo the defining polynomial is only performed if red is set to true. Note that x and y must be reduced. This function is provided for performance reasons as it saves allocating a new object for the result and eliminates associated garbage collection.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"reduce!(::nf_elem)","category":"page"},{"location":"Nemo/docs/src/numberfield/#AbstractAlgebra.reduce!-Tuple{nf_elem}","page":"Number field arithmetic","title":"AbstractAlgebra.reduce!","text":"reduce!(x::nf_elem)\n\nReduce the given number field element by the defining polynomial, in-place. This only needs to be done after accumulating values computed by mul_red! where reduction has not been performed. All standard Nemo number field functions automatically reduce their outputs.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"The following coercion function is provided for a number field R.","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"R(f::fmpq_poly)","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"Coerce the given rational polynomial into the number field R, i.e. consider the polynomial to be the representation of a number field element and return it.","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"Conversely, if R is the polynomial ring to which the generating polynomial of a number field belongs, then we can coerce number field elements into the ring R using the following function.","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"R(b::nf_elem)","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"Coerce the given number field element into the polynomial ring R of which the number field is a quotient.","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"Examples","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"R, x = PolynomialRing(QQ, \"x\")\nK, a = NumberField(x^3 + 3x + 1, \"a\")\n\nf = R(a^2 + 2a + 3)\ng = K(x^2 + 2x + 1)","category":"page"},{"location":"Nemo/docs/src/numberfield/#Basic-manipulation","page":"Number field arithmetic","title":"Basic manipulation","text":"","category":"section"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"var(::AnticNumberField)","category":"page"},{"location":"Nemo/docs/src/numberfield/#AbstractAlgebra.Generic.var-Tuple{AnticNumberField}","page":"Number field arithmetic","title":"AbstractAlgebra.Generic.var","text":"var(a::AnticNumberField)\n\nReturns the identifier (as a symbol, not a string), that is used for printing the generator of the given number field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"isgen(::nf_elem)","category":"page"},{"location":"Nemo/docs/src/numberfield/#AbstractAlgebra.isgen-Tuple{nf_elem}","page":"Number field arithmetic","title":"AbstractAlgebra.isgen","text":"isgen(a::nf_elem)\n\nReturn true if the given number field element is the generator of the number field, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"coeff(::nf_elem, ::Int)","category":"page"},{"location":"Nemo/docs/src/numberfield/#AbstractAlgebra.Generic.coeff-Tuple{nf_elem,Int64}","page":"Number field arithmetic","title":"AbstractAlgebra.Generic.coeff","text":"coeff(x::nf_elem, n::Int)\n\nReturn the n-th coefficient of the polynomial representation of the given number field element. Coefficients are numbered from 0, starting with the constant coefficient.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"denominator(::nf_elem)","category":"page"},{"location":"Nemo/docs/src/numberfield/#Base.denominator-Tuple{nf_elem}","page":"Number field arithmetic","title":"Base.denominator","text":"denominator(a::nf_elem)\n\nReturn the denominator of the polynomial representation of the given number field element.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"degree(::AnticNumberField)","category":"page"},{"location":"Nemo/docs/src/numberfield/#AbstractAlgebra.Generic.degree-Tuple{AnticNumberField}","page":"Number field arithmetic","title":"AbstractAlgebra.Generic.degree","text":"degree(a::AnticNumberField)\n\nReturn the degree of the given number field, i.e. the degree of its defining polynomial.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"Examples","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"R, x = PolynomialRing(QQ, \"x\")\nK, a = NumberField(x^3 + 3x + 1, \"a\")\n\nd = a^2 + 2a - 7\nm = gen(K)\n\nc = coeff(d, 1)\nisgen(m)\nq = degree(K)\nr, s = signature(K)\nv = var(R)","category":"page"},{"location":"Nemo/docs/src/numberfield/#Norm-and-trace","page":"Number field arithmetic","title":"Norm and trace","text":"","category":"section"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"norm(::nf_elem)","category":"page"},{"location":"Nemo/docs/src/numberfield/#LinearAlgebra.norm-Tuple{nf_elem}","page":"Number field arithmetic","title":"LinearAlgebra.norm","text":"norm(a::nf_elem)\n\nReturn the absolute norm of a. The result will be a rational number.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"tr(::nf_elem)","category":"page"},{"location":"Nemo/docs/src/numberfield/#LinearAlgebra.tr-Tuple{nf_elem}","page":"Number field arithmetic","title":"LinearAlgebra.tr","text":"tr(a::nf_elem)\n\nReturn the absolute trace of a. The result will be a rational number.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"Examples","category":"page"},{"location":"Nemo/docs/src/numberfield/","page":"Number field arithmetic","title":"Number field arithmetic","text":"R, x = PolynomialRing(QQ, \"x\")\nK, a = NumberField(x^3 + 3x + 1, \"a\")\n\nc = 3a^2 - a + 1\n\nd = norm(c)\nf = tr(c)","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/#Generic-Puiseux-series","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"AbstractAlgebra.jl allows the creation of Puiseux series over any computable commutative ring R.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"Puiseux series are power series of the form a_jx^jm + a_j+1x^(j+1)m + cdots + a_k-1x^(k-1)m + O(x^km) for some integer m  0 where i geq 0, a_i in R and the relative precision k - j is at most equal to some specified precision n.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"The generic Puiseux series module is implemented in src/generic/PuiseuxSeries.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"As well as implementing the Series Ring interface, the Puiseux series module in AbstractAlgebra.jl implements the generic algorithms described below.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"All of the generic functionality is part of the Generic submodule of AbstractAlgebra.jl. This is exported by default so that it is not necessary to qualify function names.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/#Types-and-parent-objects","page":"Generic Puiseux series","title":"Types and parent objects","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"The types of generic Puiseux series implemented by AbstractAlgebra.jl are Generic.PuiseuxSeriesRingElem{T} and Generic.PuiseuxSeriesFieldElem{T}.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"Both series element types belong to the union type Generic.PuiseuxSeriesElem.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"Puiseux series elements belong directly to either AbstractAlgebra.RingElem or AbstractAlgebra.FieldElem since it is more useful to be able to distinguish whether they belong to a ring or field than it is to distinguish that they are Puiseux series.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"The parent types for Puiseux series, Generic.PuiseuxSeriesRing{T} and Generic.PuiseuxSeriesField{T} respectively, belong to AbstractAlgebra.Ring and AbstractAlgebra.Field respectively.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"The default precision, string representation of the variable and base ring R of a generic Puiseux series are stored in its parent object.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/#Puiseux-series-ring-constructors","page":"Generic Puiseux series","title":"Puiseux series ring constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"In order to construct Puiseux series in AbstractAlgebra.jl, one must first construct the ring itself. This is accomplished with any of the following constructors.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"PuiseuxSeriesRing(R::AbstractAlgebra.Ring, prec_max::Int, s::AbstractString; cached::Bool = true)","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"PuiseuxSeriesRing(R::AbstractAlgebra.Field, prec_max::Int, s::AbstractString; cached::Bool = true)","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"PuiseuxSeriesField(R::AbstractAlgebra.Field, prec_max::Int, s::AbstractString; cached::Bool = true)","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"Given a base ring R, a maximum relative precision and a string s specifying how the generator (variable) should be printed, return a typle S, x representing the Puiseux series ring and its generator.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"By default, S will depend only on S, x and the maximum precision and will be cached. Setting the optional argument cached to false will prevent this.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"Here are some examples of constructing various kinds of Puiseux series rings and coercing various elements into those rings.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"julia> R, x = PuiseuxSeriesRing(ZZ, 10, \"x\")\n(Puiseux series ring in x over Integers, x + O(x^11))\n\njulia> S, y = PuiseuxSeriesField(QQ, 10, \"y\")\n(Puiseux series field in y over Rationals, y + O(y^11))\n\njulia> f = R()\nO(x^10)\n\njulia> g = S(123)\n123 + O(y^10)\n\njulia> h = R(BigInt(1234))\n1234 + O(x^10)\n\njulia> k = S(y + 1)\n1 + y + O(y^10)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/#Big-oh-notation","page":"Generic Puiseux series","title":"Big-oh notation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"Series elements can be given a precision using the big-oh notation. This is provided by a function of the following form, (or something equivalent for Laurent series):","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"O(x::SeriesElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"julia> R, x = PuiseuxSeriesRing(ZZ, 10, \"x\")\n(Puiseux series ring in x over Integers, x + O(x^11))\n\njulia> f = 1 + 2x + O(x^5)\n1 + 2*x + O(x^5)\n\njulia> g = 2x^(1//3) + 7x^(2//3) + O(x^(7//3))\n2*x^(1//3) + 7*x^(2//3) + O(x^(7//3))","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"What is happening here in practice is that O(x^n) is creating the series 0 + O(x^n) and the rules for addition of series dictate that if this is added to a series of greater precision, then the lower of the two precisions must be used.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"Of course it may be that the precision of the series that O(x^n) is added to is already lower than n, in which case adding O(x^n) has no effect. This is the case if the default precision is too low, since x on its own has the default precision.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/#Puiseux-series-implementation","page":"Generic Puiseux series","title":"Puiseux series implementation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"Puiseux series have their maximum relative precision capped at some value prec_max. This refers to the internal Laurent series used to store the Puiseux series, i.e. the series without denominators in the exponents.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"The Puiseux series type stores such a Laurent series and a scale or denominator for the exponents. For example, f(x) = 1 + x^13 + 2x^23 + O(x^73) would be stored as a Laurent series 1 + x + 2x^2 + O(x^7) and a scale of 3..","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"The maximum precision is also used as a default (Laurent) precision in the case of coercing coefficients into the ring and for any computation where the result could mathematically be given to infinite precision.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"In all models we say that two Puiseux series are equal if they agree up to the minimum absolute precision of the two power series.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"Thus, for example, x^5 + O(x^10) == 0 + O(x^5), since the minimum absolute precision is 5.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"Sometimes it is necessary to compare Puiseux series not just for arithmetic equality, as above, but to see if they have precisely the same precision and terms. For this purpose we introduce the isequal function.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"For example, if f = x^2 + O(x^7) and g = x^2 + O(x^8) and h = 0 + O(x^2) then f == g, f == h and g == h, but isequal(f, g), isequal(f, h) and isequal(g, h) would all return false. However, if k = x^2 + O(x^7) then isequal(f, k) would return true.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"There are a number of technicalities that must be observed when working with Puiseux series. As these are the same as for the other series rings in AbstractAlgebra.jl, we refer the reader to the documentation of series rings for information about these issues.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/#Basic-ring-functionality","page":"Generic Puiseux series","title":"Basic ring functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"All Puiseux series provide the functionality described in the Ring and Series Ring interfaces with the exception of the pol_length and polcoeff functions.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"julia> S, x = PuiseuxSeriesRing(ZZ, 10, \"x\")\n(Puiseux series ring in x over Integers, x + O(x^11))\n\njulia> f = 1 + 3x + x^3 + O(x^10)\n1 + 3*x + x^3 + O(x^10)\n\njulia> g = 1 + 2x^(1//3) + x^(2//3) + O(x^(7//3))\n1 + 2*x^(1//3) + x^(2//3) + O(x^(7//3))\n\njulia> h = zero(S)\nO(x^10)\n\njulia> k = one(S)\n1 + O(x^10)\n\njulia> isone(k)\ntrue\n\njulia> iszero(f)\nfalse\n\njulia> U = base_ring(S)\nIntegers\n\njulia> v = var(S)\n:x\n\njulia> T = parent(x + 1)\nPuiseux series ring in x over Integers\n\njulia> g == deepcopy(g)\ntrue\n\njulia> t = divexact(2g, 2)\n1 + 2*x^(1//3) + x^(2//3) + O(x^(7//3))\n\njulia> p = precision(f)\n10//1\n","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/#Puiseux-series-functionality-provided-by-AbstractAlgebra.jl","page":"Generic Puiseux series","title":"Puiseux series functionality provided by AbstractAlgebra.jl","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"The functionality below is automatically provided by AbstractAlgebra.jl for any Puiseux series.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"Of course, modules are encouraged to provide specific implementations of the functions described here, that override the generic implementation.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/#Basic-functionality","page":"Generic Puiseux series","title":"Basic functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"coeff(a::Generic.PuiseuxSeriesElem, n::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"coeff(a::Generic.PuiseuxSeriesElem, n::Rational{Int})","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"Return the coefficient of the term of exponent n of the given power series. If n exceeds the current precision of the power series or does not correspond to a nonzero term of the Puiseux series, the function returns a zero coefficient.","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"modulus{T <: ResElem}(::Generic.PuiseuxSeriesElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/#AbstractAlgebra.Generic.modulus-Union{Tuple{Union{AbstractAlgebra.Generic.PuiseuxSeriesFieldElem{T}, AbstractAlgebra.Generic.PuiseuxSeriesRingElem{T}}}, Tuple{T}} where T<:ResElem","page":"Generic Puiseux series","title":"AbstractAlgebra.Generic.modulus","text":"modulus(a::Generic.PuiseuxSeriesElem{T}) where {T <: ResElem}\n\nReturn the modulus of the coefficients of the given Puiseux series.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"isgen(::Generic.PuiseuxSeriesElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/#AbstractAlgebra.isgen-Tuple{Union{AbstractAlgebra.Generic.PuiseuxSeriesFieldElem{T}, AbstractAlgebra.Generic.PuiseuxSeriesRingElem{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}}","page":"Generic Puiseux series","title":"AbstractAlgebra.isgen","text":"isgen(a::Generic.PuiseuxSeriesElem)\n\nReturn true if the given Puiseux series is arithmetically equal to the generator of its Puiseux series ring to its current precision, otherwise return false.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"isunit(::Generic.PuiseuxSeriesElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/#AbstractAlgebra.isunit-Tuple{Union{AbstractAlgebra.Generic.PuiseuxSeriesFieldElem{T}, AbstractAlgebra.Generic.PuiseuxSeriesRingElem{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}}","page":"Generic Puiseux series","title":"AbstractAlgebra.isunit","text":"isunit(a::Generic.PuiseuxSeriesElem)\n\nReturn true if the given Puiseux series is arithmetically equal to a unit, i.e. is invertible, otherwise return false.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"julia> R, t = PuiseuxSeriesRing(QQ, 10, \"t\")\n(Puiseux series field in t over Rationals, t + O(t^11))\n\njulia> S, x = PuiseuxSeriesRing(R, 30, \"x\")\n(Puiseux series field in x over Puiseux series field in t over Rationals, x + O(x^31))\n\njulia> a = O(x^4)\nO(x^4)\n\njulia> b = (t + 3)*x + (t^2 + 1)*x^2 + O(x^4)\n(3 + t + O(t^10))*x + (1 + t^2 + O(t^10))*x^2 + O(x^4)\n\njulia> k = isgen(gen(R))\ntrue\n\njulia> m = isunit(-1 + x^(1//3) + 2x^2)\ntrue\n\njulia> n = valuation(a)\n4//1\n\njulia> p = valuation(b)\n1//1\n\njulia> c = coeff(b, 2)\n1 + t^2 + O(t^10)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/#Division","page":"Generic Puiseux series","title":"Division","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"Base.inv(::Generic.PuiseuxSeriesElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/#Base.inv-Tuple{Union{AbstractAlgebra.Generic.PuiseuxSeriesFieldElem{T}, AbstractAlgebra.Generic.PuiseuxSeriesRingElem{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}}","page":"Generic Puiseux series","title":"Base.inv","text":"  inv(a::NfRelOrdIdl) -> NfRelOrdFracIdl\n  inv(a::NfRelOrdFracIdl) -> NfRelOrdFracIdl\n\nComputes the inverse of a, that is, the fractional ideal b such that ab = O, where O is the ambient order of a. O must be maximal.\n\n\n\nBase.inv(a::PuiseuxSeriesElem{T}) where T <: RingElement\n\nReturn the inverse of the power series a, i.e. 1a, if it exists. Otherwise an exception is raised.\n\n\n\ninv(M::MatrixElem{T}) where {T <: RingElement}\n\nGiven a non-singular ntimes n matrix over a ring, return an ntimes n matrix X such that MX = I_n, where I_n is the ntimes n identity matrix. If M is not invertible over the base ring an exception is raised.\n\n\n\n inv(a::LocElem{T}, checked::Bool = true)  where {T <: RingElem}\n\nReturns the inverse element of a if a is a unit. If 'checked = false' the invertibility of a is not checked and the corresponding inverse element of the Fraction Field is returned.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"julia> R, x = PuiseuxSeriesRing(QQ, 30, \"x\")\n(Puiseux series field in x over Rationals, x + O(x^31))\n\njulia> a = 1 + x + 2x^2 + O(x^5)\n1 + x + 2*x^2 + O(x^5)\n\njulia> b = R(-1)\n-1 + O(x^30)\n\njulia> c = inv(a)\n1 - x - x^2 + 3*x^3 - x^4 + O(x^5)\n\njulia> d = inv(b)\n-1 + O(x^30)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/#Special-functions","page":"Generic Puiseux series","title":"Special functions","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"Base.exp(a::Generic.PuiseuxSeriesElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/#Base.exp-Tuple{Union{AbstractAlgebra.Generic.PuiseuxSeriesFieldElem{T}, AbstractAlgebra.Generic.PuiseuxSeriesRingElem{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}}","page":"Generic Puiseux series","title":"Base.exp","text":"exp(a::FlintPuiseuxSeriesElem{T}) where T <: RingElem\n\nReturn the exponential of the given Puiseux series.\n\n\n\nexp(a::AbstractAlgebra.RelSeriesElem)\n\nReturn the exponential of the power series a.\n\n\n\nexp(a::AbstractAlgebra.AbsSeriesElem)\n\nReturn the exponential of the power series a.\n\n\n\nexp(a::Generic.LaurentSeriesElem)\n\nReturn the exponential of the power series a.\n\n\n\nexp(a::Generic.PuiseuxSeriesElem{T}) where T <: RingElement\n\nReturn the exponential of the given Puiseux series a.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"Base.sqrt(a::Generic.PuiseuxSeriesElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/#Base.sqrt-Tuple{Union{AbstractAlgebra.Generic.PuiseuxSeriesFieldElem{T}, AbstractAlgebra.Generic.PuiseuxSeriesRingElem{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}}","page":"Generic Puiseux series","title":"Base.sqrt","text":"sqrt(a::FlintPuiseuxSeriesElem{T}) where T <: RingElem\n\nReturn the square root of the given Puiseux series.\n\n\n\nBase.sqrt(f::AbstractAlgebra.PolyElem{T}, check::Bool=true) where T <: RingElement\n\nReturn the square root of f if it is a perfect square, otherwise an exception is raised. If check is set to false the function assumes the input is square and may not fully check this.\n\n\n\nsqrt(a::Generic.PuiseuxSeriesElem{T}) where T <: RingElement\n\nReturn the square root of the given Puiseux series a.\n\n\n\nBase.sqrt(a::AbstractAlgebra.FracElem{T}) where T <: RingElem\n\nReturn the square root of a if it is a square, otherwise raise an exception.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/puiseux/","page":"Generic Puiseux series","title":"Generic Puiseux series","text":"julia> R, t = PolynomialRing(QQ, \"t\")\n(Univariate Polynomial Ring in t over Rationals, t)\n\njulia> S, x = PuiseuxSeriesRing(R, 30, \"x\")\n(Puiseux series ring in x over Univariate Polynomial Ring in t over Rationals, x + O(x^31))\n\njulia> T, z = PuiseuxSeriesRing(QQ, 30, \"z\")\n(Puiseux series field in z over Rationals, z + O(z^31))\n\njulia> a = 1 + z + 3z^2 + O(z^5)\n1 + z + 3*z^2 + O(z^5)\n\njulia> b = z + 2z^2 + 5z^3 + O(z^5)\nz + 2*z^2 + 5*z^3 + O(z^5)\n\njulia> c = exp(x + O(x^40))\n1 + x + 1//2*x^2 + 1//6*x^3 + 1//24*x^4 + 1//120*x^5 + 1//720*x^6 + 1//5040*x^7 + 1//40320*x^8 + 1//362880*x^9 + 1//3628800*x^10 + 1//39916800*x^11 + 1//479001600*x^12 + 1//6227020800*x^13 + 1//87178291200*x^14 + 1//1307674368000*x^15 + 1//20922789888000*x^16 + 1//355687428096000*x^17 + 1//6402373705728000*x^18 + 1//121645100408832000*x^19 + 1//2432902008176640000*x^20 + 1//51090942171709440000*x^21 + 1//1124000727777607680000*x^22 + 1//25852016738884976640000*x^23 + 1//620448401733239439360000*x^24 + 1//15511210043330985984000000*x^25 + 1//403291461126605635584000000*x^26 + 1//10888869450418352160768000000*x^27 + 1//304888344611713860501504000000*x^28 + 1//8841761993739701954543616000000*x^29 + 1//265252859812191058636308480000000*x^30 + O(x^31)\n\njulia> d = divexact(x, exp(x + O(x^40)) - 1)\n1 - 1//2*x + 1//12*x^2 - 1//720*x^4 + 1//30240*x^6 - 1//1209600*x^8 + 1//47900160*x^10 - 691//1307674368000*x^12 + 1//74724249600*x^14 - 3617//10670622842880000*x^16 + 43867//5109094217170944000*x^18 - 174611//802857662698291200000*x^20 + 77683//14101100039391805440000*x^22 - 236364091//1693824136731743669452800000*x^24 + 657931//186134520519971831808000000*x^26 - 3392780147//37893265687455865519472640000000*x^28 + O(x^29)\n\njulia> f = exp(b)\n1 + z + 5//2*z^2 + 43//6*z^3 + 193//24*z^4 + O(z^5)\n\njulia> h = sqrt(a)\n1 + 1//2*z + 11//8*z^2 - 11//16*z^3 - 77//128*z^4 + O(z^5)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/#Generic-residue-rings","page":"Generic residue rings","title":"Generic residue rings","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"AbstractAlgebra.jl provides a module, implemented in src/generic/Residue.jl for generic residue rings over any Euclidean domain (in practice most of the functionality is provided for GCD domains that provide a meaningful GCD function) belonging to the AbstractAlgebra.jl abstract type hierarchy.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"As well as implementing the Residue Ring interface a number of generic algorithms are implemented for residue rings. We describe this generic functionality below.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"All of the generic functionality is part of a submodule of AbstractAlgebra called Generic. This is exported by default so that it is not necessary to qualify the function names with the submodule name.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/#Types-and-parent-objects","page":"Generic residue rings","title":"Types and parent objects","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"Residues implemented using the AbstractAlgebra generics have type Generic.Res{T} or in the case of residue rings that are known to be fields, Generic.ResF{T}, where T is the type of elements of the base ring. See the file src/generic/GenericTypes.jl for details.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"Parent objects of residue ring elements have type Generic.ResRing{T} and those of residue fields have type GenericResField{T}.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"The defining modulus of the residue ring is stored in the parent object.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"The residue element types belong to the abstract type AbstractAlgebra.ResElem{T} or AbstractAlgebra.ResFieldElem{T} in the case of residue fields, and the residue ring types belong to the abstract type AbstractAlgebra.ResRing{T} or AbstractAlgebra.ResField{T} respectively. This enables one to write generic functions that can accept any AbstractAlgebra residue type.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"Note that both the generic residue ring type Generic.ResRing{T} and the abstract type it belongs to, AbstractAlgebra.ResRing{T} are both called ResRing, and similarly for the residue field types. In each case, the  former is a (parameterised) concrete type for a residue ring over a given base ring whose elements have type T. The latter is an abstract type representing all residue ring types in AbstractAlgebra.jl, whether generic or very specialised (e.g. supplied by a C library).","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/#Residue-ring-constructors","page":"Generic residue rings","title":"Residue ring constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"In order to construct residues in AbstractAlgebra.jl, one must first construct the residue ring itself. This is accomplished with one of the following constructors.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"ResidueRing(R::AbstractAlgebra.Ring, m::AbstractAlgebra.RingElem; cached::Bool = true)","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"ResidueField(R::AbstractAlgebra.Ring, m::AbstractAlgebra.RingElem; cached::Bool = true)","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"Given a base ring R and residue m contained in this ring, return the parent object of the residue ring R(m). By default the parent object S will depend only on R and m and will be cached. Setting the optional argument cached to false will prevent the parent object S from being cached.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"The ResidueField constructor does the same thing as the ResidueRing constructor, but the resulting object has type belonging to Field rather than Ring, so it can be used anywhere a field is expected in AbstractAlgebra.jl. No check is made for maximality of the ideal generated by m.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"Here are some examples of creating residue rings and making use of the resulting parent objects to coerce various elements into the residue ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"julia> R, x = PolynomialRing(QQ, \"x\")\n(Univariate Polynomial Ring in x over Rationals, x)\n\njulia> S = ResidueRing(R, x^3 + 3x + 1)\nResidue ring of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1\n\njulia> f = S()\n0\n\njulia> g = S(123)\n123\n\njulia> h = S(BigInt(1234))\n1234\n\njulia> k = S(x + 1)\nx + 1\n","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"All of the examples here are generic residue rings, but specialised implementations of residue rings provided by external modules will also usually provide a ResidueRing constructor to allow creation of their residue rings.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/#Basic-ring-functionality","page":"Generic residue rings","title":"Basic ring functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"Residue rings in AbstractAlgebra.jl implement the full Ring interface. Of course the entire Residue Ring interface is also implemented.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"We give some examples of such functionality.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"julia> R, x = PolynomialRing(QQ, \"x\")\n(Univariate Polynomial Ring in x over Rationals, x)\n\njulia> S = ResidueRing(R, x^3 + 3x + 1)\nResidue ring of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1\n\njulia> f = S(x + 1)\nx + 1\n\njulia> h = zero(S)\n0\n\njulia> k = one(S)\n1\n\njulia> isone(k)\ntrue\n\njulia> iszero(f)\nfalse\n\njulia> m = modulus(S)\nx^3 + 3*x + 1\n\njulia> U = base_ring(S)\nUnivariate Polynomial Ring in x over Rationals\n\njulia> V = base_ring(f)\nUnivariate Polynomial Ring in x over Rationals\n\njulia> T = parent(f)\nResidue ring of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1\n\njulia> f == deepcopy(f)\ntrue\n","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/#Residue-ring-functionality-provided-by-AbstractAlgebra.jl","page":"Generic residue rings","title":"Residue ring functionality provided by AbstractAlgebra.jl","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"The functionality listed below is automatically provided by AbstractAlgebra.jl for any residue ring module that implements the full Residue Ring interface. This includes AbstractAlgebra.jl's own generic residue rings.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"But if a C library provides all the functionality documented in the Residue Ring interface, then all the functions described here will also be automatically supplied by AbstractAlgebra.jl for that residue ring type.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"Of course, modules are free to provide specific implementations of the functions described here, that override the generic implementation.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/#Basic-functionality","page":"Generic residue rings","title":"Basic functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"modulus(::AbstractAlgebra.ResElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/#AbstractAlgebra.Generic.modulus-Tuple{ResElem}","page":"Generic residue rings","title":"AbstractAlgebra.Generic.modulus","text":"modulus(R::AbstractAlgebra.ResElem)\n\nReturn the modulus a of the residue ring S = R(a) that the supplied residue r belongs to.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"isunit(::AbstractAlgebra.ResElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/#AbstractAlgebra.isunit-Tuple{ResElem}","page":"Generic residue rings","title":"AbstractAlgebra.isunit","text":"isunit(a::AbstractAlgebra.ResElem)\n\nReturn true if the supplied element a is invertible in the residue ring it belongs to, otherwise return false.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"julia> R, x = PolynomialRing(QQ, \"x\")\n(Univariate Polynomial Ring in x over Rationals, x)\n\njulia> S = ResidueRing(R, x^3 + 3x + 1)\nResidue ring of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1\n\njulia> r = S(x + 1)\nx + 1\n\njulia> a = modulus(S)\nx^3 + 3*x + 1\n\njulia> isunit(r)\ntrue\n","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/#Inversion","page":"Generic residue rings","title":"Inversion","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"Base.inv(::AbstractAlgebra.ResElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/#Base.inv-Tuple{ResElem}","page":"Generic residue rings","title":"Base.inv","text":"Base.inv(a::AbstractAlgebra.ResElem)\n\nReturn the inverse of the element a in the residue ring. If an impossible inverse is encountered, an exception is raised.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"julia> R, x = PolynomialRing(QQ, \"x\")\n(Univariate Polynomial Ring in x over Rationals, x)\n\njulia> S = ResidueRing(R, x^3 + 3x + 1)\nResidue ring of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1\n\njulia> f = S(x + 1)\nx + 1\n\njulia> g = inv(f)\n1//3*x^2 - 1//3*x + 4//3\n","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/#Greatest-common-divisor","page":"Generic residue rings","title":"Greatest common divisor","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"gcd{T <: RingElem}(::ResElem{T}, ::ResElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/#Base.gcd-Union{Tuple{T}, Tuple{ResElem{T},ResElem{T}}} where T<:RingElem","page":"Generic residue rings","title":"Base.gcd","text":"gcd(a::AbstractAlgebra.ResElem{T}, b::AbstractAlgebra.ResElem{T}) where {T <: RingElement}\n\nReturn a greatest common divisor of a and b if one exists. This is done by taking the greatest common divisor of the data associated with the supplied residues and taking its greatest common divisor with the modulus.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"julia> R, x = PolynomialRing(QQ, \"x\")\n(Univariate Polynomial Ring in x over Rationals, x)\n\njulia> S = ResidueRing(R, x^3 + 3x + 1)\nResidue ring of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1\n\njulia> f = S(x + 1)\nx + 1\n\njulia> g = S(x^2 + 2x + 1)\nx^2 + 2*x + 1\n\njulia> h = gcd(f, g)\n1\n","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/#Square-Root","page":"Generic residue rings","title":"Square Root","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"issquare{T <: Integer}(::ResFieldElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/#AbstractAlgebra.Generic.issquare-Union{Tuple{AbstractAlgebra.ResFieldElem{T}}, Tuple{T}} where T<:Integer","page":"Generic residue rings","title":"AbstractAlgebra.Generic.issquare","text":"issquare(a::AbstractAlgebra.ResFieldElem{T}) where T <: Integer\n\nReturn true if a is a square.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"Base.sqrt{T <: Integer}(::ResFieldElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/#Base.sqrt-Union{Tuple{AbstractAlgebra.ResFieldElem{T}}, Tuple{T}} where T<:Integer","page":"Generic residue rings","title":"Base.sqrt","text":"sqrt(a::AbstractAlgebra.ResFieldElem{T}) where T <: Integer\n\nReturn the square root of a if it is a square, otherwise an exception is raised.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/residue/","page":"Generic residue rings","title":"Generic residue rings","text":"julia> R = ResidueField(ZZ, 733)\nResidue field of Integers modulo 733\n\njulia> a = R(86)\n86\n\njulia> issquare(a)\ntrue\n\njulia> sqrt(a)\n532","category":"page"},{"location":"Hecke/docs/src/orders/introduction/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"Hecke/docs/src/orders/introduction/","page":"Introduction","title":"Introduction","text":"CurrentModule = Hecke","category":"page"},{"location":"Hecke/docs/src/orders/introduction/","page":"Introduction","title":"Introduction","text":"This chapter deals with absolute number fields and orders there of. ","category":"page"},{"location":"Hecke/docs/src/orders/introduction/#Definitions-and-vocabulary","page":"Introduction","title":"Definitions and vocabulary","text":"","category":"section"},{"location":"Hecke/docs/src/orders/introduction/","page":"Introduction","title":"Introduction","text":"We begin by collecting the necessary definitions and vocabulary.  This is in particular important for everything related to embeddings of number fields into archimedean fields, since they are at least two (slighlty) different normalizations. ","category":"page"},{"location":"Hecke/docs/src/orders/introduction/#Number-fields","page":"Introduction","title":"Number fields","text":"","category":"section"},{"location":"Hecke/docs/src/orders/introduction/","page":"Introduction","title":"Introduction","text":"By an absolute number field we mean finite extensions of mathbf Q, which is of type AnticNumberField and whose elements are of type nf_elem. Such an absolute number field K is always given in the form K = mathbf Q(alpha) = mathbf QX(f), where f in mathbf QX is an irreducible polynomial. See here for more information on the different types of fields supported.","category":"page"},{"location":"Hecke/docs/src/orders/introduction/","page":"Introduction","title":"Introduction","text":"We call (1alphaalpha^2dotscalpha^d-1), where d is the degree K  mathbf Q the power basis of K. If beta is any element of K, then the representation matrix of beta is the matrix representing K to K gamma mapsto beta gamma with respect to the power basis, that is,","category":"page"},{"location":"Hecke/docs/src/orders/introduction/","page":"Introduction","title":"Introduction","text":"beta cdot (1alphadotscalpha^d-1) = M_alpha (1 alpha dotsc alpha^d-1)","category":"page"},{"location":"Hecke/docs/src/orders/introduction/","page":"Introduction","title":"Introduction","text":"Let (rs) be the signature of K, that is, K has r real embeddings sigma_i colon K to mathbfR, 1 leq i leq r, and 2s complex embeddings sigma_i colon K to mathbfC, 1 leq i leq 2s. In Hecke the complex embeddings are always ordered such that sigma_i = overlinesigma_i+s for r + 1 leq i leq r + s. The mathbfQ-linear function","category":"page"},{"location":"Hecke/docs/src/orders/introduction/","page":"Introduction","title":"Introduction","text":"begingather*\n  K longrightarrow mathbf R^d \n  alpha longmapsto Bigl( sigma_1(alpha) dotsc sigma_r(alpha) sqrt2operatornameRebigl(sigma_r+1(alpha)bigr) sqrt2operatornameImbigl(sigma_r+1(alpha)bigr) dotsc sqrt2operatornameRebigl(sigma_r+s(alpha)bigr) sqrt2operatornameImbigl(sigma_r+s(alpha)bigr) Bigr)\nendgather*","category":"page"},{"location":"Hecke/docs/src/orders/introduction/","page":"Introduction","title":"Introduction","text":"is called the Minkowski map (or Minkowski embedding).","category":"page"},{"location":"Hecke/docs/src/orders/introduction/#Orders","page":"Introduction","title":"Orders","text":"","category":"section"},{"location":"Hecke/docs/src/orders/introduction/","page":"Introduction","title":"Introduction","text":"If K = mathbf Q(alpha) is an absolute number field, then an order mathcal O of K is a subring of the ring of integers mathcal O_K, which is free of rank  K  mathbf Q as a mathbf Z-module. The natural order mathbf Zalpha is called the equation order of K. In Hecke orders of absolute number fields are constructed (implicitely) by specifying a mathbf Z-basis, which is refered to as the basis of mathcal O. If (omega_1dotscomega_d) is the basis of mathcal O, then the matrix B in operatornameMat_d times d(mathbf Q) with","category":"page"},{"location":"Hecke/docs/src/orders/introduction/","page":"Introduction","title":"Introduction","text":"beginpmatrix omega_1  vdots  omega_d endpmatrix = B beginpmatrix 1  vdots  alpha^d - 1 endpmatrix","category":"page"},{"location":"Hecke/docs/src/orders/introduction/","page":"Introduction","title":"Introduction","text":"is called the basis matrix of mathcal O. We call det(B) the generalized index of mathcal O.  In case mathbf Zalpha subseteq mathcal O, the determinant det(B)^-1 is in fact equal to  mathcal O  mathbf Zalpha and is called the index of mathcal O. The matrix","category":"page"},{"location":"Hecke/docs/src/orders/introduction/","page":"Introduction","title":"Introduction","text":"beginpmatrix \nsigma_1(omega_1)  dotsc  sigma_r(omega_1)  sqrt2operatornameRe(sigma_r+1(omega_1))  sqrt2operatornameIm(sigma_r+1(omega_1))  dotsc  sqrt2operatornameIm(sigma_r+s(omega_1)) \nsigma_1(omega_2)  dotsc  sigma_r(omega_2)  sqrt2operatornameRe(sigma_r+1(omega_2))  sqrt2operatornameIm(sigma_r+1(omega_2))  dotsc   sqrt2operatornameIm(sigma_r+s(omega_2)) \nvdots  ddots  vdots  vdots  vdots  ddots  vdots\nsigma_1(omega_d)  dotsc  sigma_r(omega_d)  sqrt2operatornameRe(sigma_r+1(omega_d))  sqrt2operatornameIm(sigma_r+2(omega_d))  dotsc  sqrt2operatornameIm(sigma_r+s(omega_d))\nendpmatrix\nin operatornameMat_dtimes d(mathbf R)","category":"page"},{"location":"Hecke/docs/src/orders/introduction/","page":"Introduction","title":"Introduction","text":"is called the Minkowski matrix of mathcal O.","category":"page"},{"location":"Hecke/docs/src/orders/introduction/#Examples","page":"Introduction","title":"Examples","text":"","category":"section"},{"location":"Hecke/docs/src/orders/introduction/","page":"Introduction","title":"Introduction","text":"Usually, to create an order, one starts with a field (or a polynomial):","category":"page"},{"location":"Hecke/docs/src/orders/introduction/","page":"Introduction","title":"Introduction","text":"using Hecke; # hide\nQx, x = PolynomialRing(FlintQQ, \"x\");\nK, a = NumberField(x^2 - 10, \"a\");\nE = EquationOrder(K)\nZ_K = MaximalOrder(K)\nconductor(E)\nE == Z_K","category":"page"},{"location":"Hecke/docs/src/orders/introduction/","page":"Introduction","title":"Introduction","text":"Once orders are created, we can play with elements and ideals:","category":"page"},{"location":"Hecke/docs/src/orders/introduction/","page":"Introduction","title":"Introduction","text":"lp = prime_decomposition(Z_K, 2)\np = lp[1][1]\nisprincipal(p)\nfl, alpha = isprincipal(p^2)\nnorm(alpha)","category":"page"},{"location":"Hecke/docs/src/orders/introduction/","page":"Introduction","title":"Introduction","text":"It is possible to work with residue fields as well:","category":"page"},{"location":"Hecke/docs/src/orders/introduction/","page":"Introduction","title":"Introduction","text":"Fp, mFp = ResidueField(Z_K, p)\n[ mFp(x) for x = basis(Z_K)]","category":"page"},{"location":"Hecke/docs/src/orders/orders/#Orders","page":"Orders","title":"Orders","text":"","category":"section"},{"location":"Hecke/docs/src/orders/orders/","page":"Orders","title":"Orders","text":"CurrentModule = Hecke","category":"page"},{"location":"Hecke/docs/src/orders/orders/","page":"Orders","title":"Orders","text":"Orders, ie. unitary subrings that are free Z-modules of rank equal to the degree of the number field, are at the core of the arithmetic of number fields. In Hecke, orders are always represented using the module structure, be it the Z-module structure for orders in absolute fields, of the structure as a module over the maximal order of the base field in the case of relative extensions. In this chapter we only deal with orders in absolute fields. There are more general definitions of orders in number fields available, but those are (currently) not implemented in Hecke.","category":"page"},{"location":"Hecke/docs/src/orders/orders/","page":"Orders","title":"Orders","text":"Among all orders in a fixed field, there is a unique maximal one, called the maximal order, or ring of integers of the field. It is well known that this is the only order that is a Dedekind domain, hence has a rich ideal structure as well. The maximal order is also the integral closure of Z in the number field and can also be interpreted as a normalisation of any other order.","category":"page"},{"location":"Hecke/docs/src/orders/orders/#Creation-and-basic-properties","page":"Orders","title":"Creation and basic properties","text":"","category":"section"},{"location":"Hecke/docs/src/orders/orders/","page":"Orders","title":"Orders","text":"Order(::AnticNumberField, ::Array{nf_elem, 1})\nOrder(::AnticNumberField, ::FakeFmpqMat)\nOrder(::NfOrdFracIdl)\nEquationOrder(::AnticNumberField)\nMaximalOrder(::AnticNumberField)\nMaximalOrder(::NfOrd)\nmaximal_order(::AnticNumberField)\nlll(::NfOrd)","category":"page"},{"location":"Hecke/docs/src/orders/orders/#Hecke.Order-Tuple{AnticNumberField,Array{nf_elem,1}}","page":"Orders","title":"Hecke.Order","text":"Order(B::Array{nf_elem, 1}; check::Bool = true, cached::Bool = true) -> NfOrd\n\nReturns the order generated by B. If check is set, it is checked whether B defines an order. If isbasis is set, then elements are assumed to form a mathbfZ-basis.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Hecke.Order-Tuple{AnticNumberField,FakeFmpqMat}","page":"Orders","title":"Hecke.Order","text":"Order(K::AnticNumberField, A::FakeFmpqMat; check::Bool = true) -> NfOrd\n\nReturns the order which has basis matrix A with respect to the power basis of K. If check is set, it is checked whether A defines an order.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Hecke.Order-Tuple{Hecke.NfAbsOrdFracIdl{AnticNumberField,nf_elem}}","page":"Orders","title":"Hecke.Order","text":"  Order(K::NumField, M::PMat) -> NfRelOrd\n\nReturns the order which has basis pseudo-matrix M with respect to the power basis of K.\n\n\n\nOrder(K::AnticNumberField, A::fmpz_mat, check::Bool = true) -> NfOrd\n\nReturns the order which has basis matrix A with respect to the power basis of K. If check is set, it is checked whether A defines an order.\n\n\n\nOrder(A::AbsAlgAss{<: NumFieldElem}, M::PMat{<: NumFieldElem, T})\n  -> AlgAssRelOrd\n\nReturns the order of A with basis pseudo-matrix M.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Hecke.EquationOrder-Tuple{AnticNumberField}","page":"Orders","title":"Hecke.EquationOrder","text":"  EquationOrder(L::NumField) -> NfRelOrd\n  equation_order(L::NumField) -> NfRelOrd\n\nReturns the equation order of the number field L.\n\n\n\nEquationOrder(K::NfAbs) -> NfAbsOrd\n\nReturns the equation order of the absolute number field K.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Hecke.MaximalOrder-Tuple{AnticNumberField}","page":"Orders","title":"Hecke.MaximalOrder","text":"MaximalOrder(K::NumField{fmpq}; discriminant::fmpz, ramified_primes::Vector{fmpz}) -> NfAbsOrd\n\nReturns the maximal order of K. Additional information can be supplied if they are already known, as the ramified primes or the discriminant of the maximal order.\n\nExample\n\njulia> Qx, x = FlintQQ[\"x\"];\njulia> K, a = NumberField(x^3 + 2, \"a\");\njulia> O = MaximalOrder(K);\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Hecke.MaximalOrder-Tuple{NfAbsOrd{AnticNumberField,nf_elem}}","page":"Orders","title":"Hecke.MaximalOrder","text":"MaximalOrder(O::NfAbsOrd; index_divisors::Vector{fmpz}, discriminant::fmpz, ramified_primes::Vector{fmpz}) -> NfAbsOrd\n\nReturns the maximal order of the number field that contains O. Additional information can be supplied if they are already known, as the ramified primes, the discriminant of the maximal order or a set of integers dividing the index of O in the maximal order.\n\n\n\nMaximalOrder(O::AlgAssAbsOrd)\n\nGiven an order O, this function returns a maximal order containing O.\n\n\n\nMaximalOrder(A::AbsAlgAss{fmpq}) -> AlgAssAbsOrd\n\nReturns a maximal order of A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Hecke.maximal_order-Tuple{AnticNumberField}","page":"Orders","title":"Hecke.maximal_order","text":"maximal_order(O::AlgAssRelOrd) -> AlgAssRelOrd\n\nReturns a maximal order of the algebra of O containing itself.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Nemo.lll-Tuple{NfAbsOrd{AnticNumberField,nf_elem}}","page":"Orders","title":"Nemo.lll","text":"lll(M::NfAbsOrd) -> NfAbsOrd\n\nThe same order, but with the basis now being LLL reduced wrt. the Minkowski metric.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/","page":"Orders","title":"Orders","text":"By Chistov's fundamental theorem, the computation of the maximal order is basically as hard as the factorisation of the discriminant. In order to help the computer, Hecke also provides the following signatures:","category":"page"},{"location":"Hecke/docs/src/orders/orders/","page":"Orders","title":"Orders","text":"maximal_order(::AnticNumberField, ::Array{fmpz, 1})","category":"page"},{"location":"Hecke/docs/src/orders/orders/","page":"Orders","title":"Orders","text":"It is also possible the execute the steps individually:","category":"page"},{"location":"Hecke/docs/src/orders/orders/","page":"Orders","title":"Orders","text":"pradical(::NfOrd, ::fmpz)\nring_of_multipliers(::NfOrdIdl)","category":"page"},{"location":"Hecke/docs/src/orders/orders/#Hecke.pradical-Tuple{NfAbsOrd{AnticNumberField,nf_elem},fmpz}","page":"Orders","title":"Hecke.pradical","text":"pradical(O::NfOrd, p::{fmpz|Integer}) -> NfAbsOrdIdl\n\nGiven a prime number p, this function returns the p-radical sqrtpmathcal O of mathcal O, which is just  x in mathcal O mid exists k in mathbf Z_geq 0 colon x^k in pmathcal O . It is not checked that p is prime.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Hecke.ring_of_multipliers-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Orders","title":"Hecke.ring_of_multipliers","text":"ring_of_multipliers(a::NfRelOrdIdl) -> NfRelOrd\n\nComputes the order (a  a), which is the set of all x in K with xa subseteq a, where K is the ambient number field of a.\n\n\n\nring_of_multipliers(I::NfAbsOrdIdl) -> NfAbsOrd\n\nComputes the order (I  I), which is the set of all x in K with xI subseteq I.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Example","page":"Orders","title":"Example","text":"","category":"section"},{"location":"Hecke/docs/src/orders/orders/","page":"Orders","title":"Orders","text":"using Hecke; # hide\nQx, x = PolynomialRing(FlintQQ, \"x\");\nK, a = NumberField(x^2 - 2, \"a\");\nO = EquationOrder(K)","category":"page"},{"location":"Hecke/docs/src/orders/orders/","page":"Orders","title":"Orders","text":"parent(::NfOrd)\nisequation_order(::NfOrd)\nsignature(::NfOrd)\nnf(::NfOrd)\ndegree(::NfOrd)\nbasis(::NfOrd)\nbasis(::NfOrd, ::AnticNumberField)\nbasis_matrix(::NfOrd)\nbasis_mat_inv(::NfOrd)\ndiscriminant(::NfOrd)\ngen_index(::NfOrd)\nindex(::NfOrd)\nisindex_divisor(::NfOrd, ::fmpz)\nminkowski_matrix(::NfOrd, ::Int)\nin(::nf_elem, ::NfOrd)\ndenominator(::nf_elem, ::NfOrd)\nnorm_change_const(::NfOrd)\ntrace_matrix(::NfOrd)\n+(::NfOrd, ::NfOrd)\npoverorder(::NfOrd, ::fmpz)\npmaximal_overorder(::NfOrd, ::fmpz)","category":"page"},{"location":"Hecke/docs/src/orders/orders/#Base.parent-Tuple{NfAbsOrd{AnticNumberField,nf_elem}}","page":"Orders","title":"Base.parent","text":"parent(O::NfAbsOrd) -> NfOrdSet\n\nReturns the parent of mathcal O, that is, the set of orders of the ambient number field.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Hecke.isequation_order-Tuple{NfAbsOrd{AnticNumberField,nf_elem}}","page":"Orders","title":"Hecke.isequation_order","text":"isequation_order(O::NfAbsOrd) -> Bool\n\nReturns whether mathcal O is the equation order of the ambient number field K.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Nemo.signature-Tuple{NfAbsOrd{AnticNumberField,nf_elem}}","page":"Orders","title":"Nemo.signature","text":"signature(O::NfOrd) -> Tuple{Int, Int}\n\nReturns the signature of the ambient number field of mathcal O.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Hecke.nf-Tuple{NfAbsOrd{AnticNumberField,nf_elem}}","page":"Orders","title":"Hecke.nf","text":"  nf(O::NfRelOrd) -> NumField\n\nReturns the ambient number field of mathcal O.\n\n\n\nnf(O::NfAbsOrd) -> AnticNumberField\n\nReturns the ambient number field of mathcal O.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#AbstractAlgebra.Generic.degree-Tuple{NfAbsOrd{AnticNumberField,nf_elem}}","page":"Orders","title":"AbstractAlgebra.Generic.degree","text":"degree(O::NfOrd) -> Int\n\nReturns the degree of mathcal O.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#AbstractAlgebra.Generic.basis-Tuple{NfAbsOrd{AnticNumberField,nf_elem}}","page":"Orders","title":"AbstractAlgebra.Generic.basis","text":"basis(O::NfOrd) -> Array{NfOrdElem, 1}\n\nReturns the mathbf Z-basis of mathcal O.\n\n\n\nbasis(I::NfAbsOrdFracIdl) -> Array{nf_elem, 1}\n\nReturns the mathbf Z-basis of I.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#AbstractAlgebra.Generic.basis-Tuple{NfAbsOrd{AnticNumberField,nf_elem},AnticNumberField}","page":"Orders","title":"AbstractAlgebra.Generic.basis","text":"basis(O::NfOrd, K::AnticNumberField) -> Array{nf_elem, 1}\n\nReturns the mathbf Z-basis elements of mathcal O as elements of the ambient number field.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Hecke.basis_matrix-Tuple{NfAbsOrd{AnticNumberField,nf_elem}}","page":"Orders","title":"Hecke.basis_matrix","text":"basis_matrix(O::NfOrd) -> FakeFmpqMat\n\nReturns the basis matrix of mathcal O with respect to the power basis of the ambient number field.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Hecke.basis_mat_inv-Tuple{NfAbsOrd{AnticNumberField,nf_elem}}","page":"Orders","title":"Hecke.basis_mat_inv","text":"basis_mat_inv(O::NfOrd) -> FakeFmpqMat\n\nReturns the inverse of the basis matrix of mathcal O.\n\n\n\nbasis_mat_inv(A::NfAbsOrdIdl) -> fmpz_mat\n\nReturns the inverse basis matrix of A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#AbstractAlgebra.Generic.discriminant-Tuple{NfAbsOrd{AnticNumberField,nf_elem}}","page":"Orders","title":"AbstractAlgebra.Generic.discriminant","text":"discriminant(O::NfOrd) -> fmpz\n\nReturns the discriminant of mathcal O.\n\n\n\ndiscriminant(B::Array{NfAbsOrdElem, 1}) -> fmpz\n\nReturns the discriminant of the family B.\n\n\n\ndiscriminant(E::EllCrv{T}) -> T\n\nComputes the discriminant of E.\n\n\n\ndiscriminant(O::AlgssRelOrd)\n\nReturns the discriminant of O.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Hecke.gen_index-Tuple{NfAbsOrd{AnticNumberField,nf_elem}}","page":"Orders","title":"Hecke.gen_index","text":"gen_index(O::NfOrd) -> fmpq\n\nReturns the generalized index of mathcal O with respect to the equation order of the ambient number field.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Hecke.index-Tuple{NfAbsOrd{AnticNumberField,nf_elem}}","page":"Orders","title":"Hecke.index","text":"index(O::NfOrd) -> fmpz\n\nAssuming that the order mathcal O contains the equation order mathbf Zalpha of the ambient number field, this function returns the index  mathcal O  mathbf Z.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Hecke.isindex_divisor-Tuple{NfAbsOrd{AnticNumberField,nf_elem},fmpz}","page":"Orders","title":"Hecke.isindex_divisor","text":"isindex_divisor(O::NfOrd, d::fmpz) -> Bool\nisindex_divisor(O::NfOrd, d::Int) -> Bool\n\nReturns whether d is a divisor of the index of mathcal O. It is assumed that mathcal O contains the equation order of the ambient number field.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Hecke.minkowski_matrix-Tuple{NfAbsOrd{AnticNumberField,nf_elem},Int64}","page":"Orders","title":"Hecke.minkowski_matrix","text":"minkowski_matrix(O::NfOrd, abs_tol::Int = 64) -> arb_mat\n\nReturns the Minkowski matrix of mathcal O.  Thus if mathcal O has degree d, then the result is a matrix in operatornameMat_dtimes d(mathbf R). The entries of the matrix are real balls of type arb with radius less then 2^-abs_tol.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Base.in-Tuple{nf_elem,NfAbsOrd{AnticNumberField,nf_elem}}","page":"Orders","title":"Base.in","text":"in(a::nf_elem, O::NfOrd) -> Bool\n\nChecks whether a lies in mathcal O.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Hecke.norm_change_const-Tuple{NfAbsOrd{AnticNumberField,nf_elem}}","page":"Orders","title":"Hecke.norm_change_const","text":"norm_change_const(O::NfOrd) -> (Float64, Float64)\n\nReturns (c_1 c_2) in mathbf R_0^2 such that for all x = sum_i=1^d x_i omega_i in mathcal O we have T_2(x) leq c_1 cdot sum_i^d x_i^2 and sum_i^d x_i^2 leq c_2 cdot T_2(x), where (omega_i)_i is the mathbf Z-basis of mathcal O.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Hecke.trace_matrix-Tuple{NfAbsOrd{AnticNumberField,nf_elem}}","page":"Orders","title":"Hecke.trace_matrix","text":"trace_matrix(O::NfOrd) -> fmpz_mat\n\nReturns the trace matrix of mathcal O, that is, the matrix (operatornametr_Kmathbf Q(b_i cdot b_j))_1 leq i j leq d.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Base.:+-Tuple{NfAbsOrd{AnticNumberField,nf_elem},NfAbsOrd{AnticNumberField,nf_elem}}","page":"Orders","title":"Base.:+","text":"+(R::NfOrd, S::NfOrd) -> NfOrd\n\nGiven two orders R, S of K, this function returns the smallest order containing both R and S. It is assumed that R, S contain the ambient equation order and have coprime index.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Hecke.poverorder-Tuple{NfAbsOrd{AnticNumberField,nf_elem},fmpz}","page":"Orders","title":"Hecke.poverorder","text":"poverorder(O::NfOrd, p::fmpz) -> NfOrd\npoverorder(O::NfOrd, p::Integer) -> NfOrd\n\nThis function tries to find an order that is locally larger than mathcal O at the prime p: If p divides the index  mathcal O_K  mathcal O, this function will return an order R such that v_p( mathcal O_K  R)  v_p( mathcal O_K  mathcal O). Otherwise mathcal O is returned.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/orders/#Hecke.pmaximal_overorder-Tuple{NfAbsOrd{AnticNumberField,nf_elem},fmpz}","page":"Orders","title":"Hecke.pmaximal_overorder","text":"pmaximal_overorder(O::NfOrd, p::fmpz) -> NfOrd\npmaximal_overorder(O::NfOrd, p::Integer) -> NfOrd\n\nThis function finds a p-maximal order R containing mathcal O. That is, the index  mathcal O_K  R is not divisible by p.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/frac_ideals/#Fractional-ideals","page":"Fractional ideals","title":"Fractional ideals","text":"","category":"section"},{"location":"Hecke/docs/src/orders/frac_ideals/","page":"Fractional ideals","title":"Fractional ideals","text":"CurrentModule = Hecke","category":"page"},{"location":"Hecke/docs/src/orders/frac_ideals/","page":"Fractional ideals","title":"Fractional ideals","text":"A fractional ideal in the number field K is a Z_K-module A such that there exists an integer d0 wich dA is an (integral) ideal in Z_K. Due to the Dedekind property of Z_K, the ideals for a multiplicative group.","category":"page"},{"location":"Hecke/docs/src/orders/frac_ideals/","page":"Fractional ideals","title":"Fractional ideals","text":"Fractional ideals are represented as an integral ideal and an additional denominator. They are of type NfOrdFracIdl.","category":"page"},{"location":"Hecke/docs/src/orders/frac_ideals/#Creation","page":"Fractional ideals","title":"Creation","text":"","category":"section"},{"location":"Hecke/docs/src/orders/frac_ideals/","page":"Fractional ideals","title":"Fractional ideals","text":"fractional_ideal(::NfOrd, ::fmpz_mat)\nfractional_ideal(::NfOrd, ::fmpz_mat, ::fmpz)\nfractional_ideal(::NfOrd, ::FakeFmpqMat)\nfractional_ideal(::NfOrd, ::NfOrdIdl)\nfractional_ideal(::NfOrd, ::NfOrdIdl, ::fmpz)\nfractional_ideal(::NfOrd, ::nf_elem)\nfractional_ideal(::NfOrd, ::NfOrdElem)\ninv(::NfOrdIdl)","category":"page"},{"location":"Hecke/docs/src/orders/frac_ideals/#Hecke.fractional_ideal-Tuple{NfAbsOrd{AnticNumberField,nf_elem},fmpz_mat}","page":"Fractional ideals","title":"Hecke.fractional_ideal","text":"fractional_ideal(O::NfAbsOrd, A::fmpz_mat, b::fmpz, A_in_hnf::Bool = false) -> NfAbsOrdFracIdl\n\nCreates the fractional ideal of mathcal O with basis matrix Ab. If A_in_hnf is set, then it is assumed that A is already in lower left HNF.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/frac_ideals/#Hecke.fractional_ideal-Tuple{NfAbsOrd{AnticNumberField,nf_elem},fmpz_mat,fmpz}","page":"Fractional ideals","title":"Hecke.fractional_ideal","text":"fractional_ideal(O::NfAbsOrd, A::fmpz_mat, b::fmpz, A_in_hnf::Bool = false) -> NfAbsOrdFracIdl\n\nCreates the fractional ideal of mathcal O with basis matrix Ab. If A_in_hnf is set, then it is assumed that A is already in lower left HNF.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/frac_ideals/#Hecke.fractional_ideal-Tuple{NfAbsOrd{AnticNumberField,nf_elem},FakeFmpqMat}","page":"Fractional ideals","title":"Hecke.fractional_ideal","text":"fractional_ideal(O::NfAbsOrd, A::FakeFmpqMat, A_in_hnf::Bool = false) -> NfAbsOrdFracIdl\n\nCreates the fractional ideal of mathcal O with basis matrix A. If A_in_hnf is set, then it is assumed that the numerator of A is already in lower left HNF.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/frac_ideals/#Hecke.fractional_ideal-Tuple{NfAbsOrd{AnticNumberField,nf_elem},NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Fractional ideals","title":"Hecke.fractional_ideal","text":"fractional_ideal(O::NfOrd, I::NfAbsOrdIdl) -> NfOrdFracIdl\n\nThe fractional ideal of O generated by a Z-basis of I.\n\n\n\nfractional_ideal(O::NfAbsOrd, I::NfAbsOrdIdl) -> NfAbsOrdFracIdl\n\nTurns the ideal I into a fractional ideal of mathcal O.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/frac_ideals/#Hecke.fractional_ideal-Tuple{NfAbsOrd{AnticNumberField,nf_elem},NfAbsOrdIdl{AnticNumberField,nf_elem},fmpz}","page":"Fractional ideals","title":"Hecke.fractional_ideal","text":"fractional_ideal(O::NfAbsOrd, I::NfAbsOrdIdl, b::fmpz) -> NfAbsOrdFracIdl\n\nCreates the fractional ideal Ib of mathcal O.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/frac_ideals/#Hecke.fractional_ideal-Tuple{NfAbsOrd{AnticNumberField,nf_elem},nf_elem}","page":"Fractional ideals","title":"Hecke.fractional_ideal","text":"fractional_ideal(O::NfAbsOrd, a::nf_elem) -> NfAbsOrdFracIdl\n\nCreates the principal fractional ideal (a) of mathcal O.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/frac_ideals/#Hecke.fractional_ideal-Tuple{NfAbsOrd{AnticNumberField,nf_elem},NfAbsOrdElem{AnticNumberField,nf_elem}}","page":"Fractional ideals","title":"Hecke.fractional_ideal","text":"fractional_ideal(O::NfAbsOrd, a::NfAbsOrdElem) -> NfAbsOrdFracIdl\n\nCreates the principal fractional ideal (a) of mathcal O.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/frac_ideals/#Base.inv-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Fractional ideals","title":"Base.inv","text":"  inv(a::NfRelOrdIdl) -> NfRelOrdFracIdl\n  inv(a::NfRelOrdFracIdl) -> NfRelOrdFracIdl\n\nComputes the inverse of a, that is, the fractional ideal b such that ab = O, where O is the ambient order of a. O must be maximal.\n\n\n\ninv(A::NfAbsOrdIdl) -> NfOrdFracIdl\n\nComputes the inverse of A, that is, the fractional ideal B such that AB = mathcal O_K.\n\n\n\n inv(a::LocElem{T}, checked::Bool = true)  where {T <: RingElem}\n\nReturns the inverse element of a if a is a unit. If 'checked = false' the invertibility of a is not checked and the corresponding inverse element of the Fraction Field is returned.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/frac_ideals/#Arithmetic","page":"Fractional ideals","title":"Arithmetic","text":"","category":"section"},{"location":"Hecke/docs/src/orders/frac_ideals/","page":"Fractional ideals","title":"Fractional ideals","text":"==(::NfOrdFracIdl, ::NfOrdFracIdl)\ninv(::NfOrdFracIdl)\nintegral_split(::NfOrdFracIdl)","category":"page"},{"location":"Hecke/docs/src/orders/frac_ideals/#Base.:==-Tuple{Hecke.NfAbsOrdFracIdl{AnticNumberField,nf_elem},Hecke.NfAbsOrdFracIdl{AnticNumberField,nf_elem}}","page":"Fractional ideals","title":"Base.:==","text":"==(x::NfAbsOrdFracIdl, y::NfAbsOrdFracIdl) -> Bool\n\nReturns whether x and y are equal.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/frac_ideals/#Base.inv-Tuple{Hecke.NfAbsOrdFracIdl{AnticNumberField,nf_elem}}","page":"Fractional ideals","title":"Base.inv","text":"  inv(a::NfRelOrdIdl) -> NfRelOrdFracIdl\n  inv(a::NfRelOrdFracIdl) -> NfRelOrdFracIdl\n\nComputes the inverse of a, that is, the fractional ideal b such that ab = O, where O is the ambient order of a. O must be maximal.\n\n\n\ninv(A::NfAbsOrdFracIdl) -> NfAbsOrdFracIdl\n\nReturns the fractional ideal B such that AB = mathcal O.\n\n\n\n inv(a::LocElem{T}, checked::Bool = true)  where {T <: RingElem}\n\nReturns the inverse element of a if a is a unit. If 'checked = false' the invertibility of a is not checked and the corresponding inverse element of the Fraction Field is returned.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/frac_ideals/#Hecke.integral_split-Tuple{Hecke.NfAbsOrdFracIdl{AnticNumberField,nf_elem}}","page":"Fractional ideals","title":"Hecke.integral_split","text":"integral_split(A::NfAbsOrdFracIdl) -> NfAbsOrdIdl, NfAbsOrdIdl\n\nComputes the unique coprime integral ideals N and D s.th. A = ND^-1\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/frac_ideals/#Miscaellenous","page":"Fractional ideals","title":"Miscaellenous","text":"","category":"section"},{"location":"Hecke/docs/src/orders/frac_ideals/","page":"Fractional ideals","title":"Fractional ideals","text":"order(::NfOrdFracIdl)\nbasis_matrix(::NfOrdFracIdl)\nbasis_mat_inv(::NfOrdFracIdl)\nbasis(::NfOrdFracIdl)\nnorm(::NfOrdFracIdl)","category":"page"},{"location":"Hecke/docs/src/orders/frac_ideals/#AbstractAlgebra.Generic.order-Tuple{Hecke.NfAbsOrdFracIdl{AnticNumberField,nf_elem}}","page":"Fractional ideals","title":"AbstractAlgebra.Generic.order","text":"order(a::NfAbsOrdFracIdl) -> NfAbsOrd\n\nThe order that was used to define the ideal a.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/frac_ideals/#Hecke.basis_matrix-Tuple{Hecke.NfAbsOrdFracIdl{AnticNumberField,nf_elem}}","page":"Fractional ideals","title":"Hecke.basis_matrix","text":"basis_matrix(I::NfAbsOrdFracIdl) -> FakeFmpqMat\n\nReturns the basis matrix of I with respect to the basis of the order.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/frac_ideals/#Hecke.basis_mat_inv-Tuple{Hecke.NfAbsOrdFracIdl{AnticNumberField,nf_elem}}","page":"Fractional ideals","title":"Hecke.basis_mat_inv","text":"basis_mat_inv(O::NfOrd) -> FakeFmpqMat\n\nReturns the inverse of the basis matrix of mathcal O.\n\n\n\nbasis_mat_inv(A::NfAbsOrdIdl) -> fmpz_mat\n\nReturns the inverse basis matrix of A.\n\n\n\nbasis_mat_inv(I::NfAbsOrdFracIdl) -> FakeFmpqMat\n\nReturns the inverse of the basis matrix of I.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/frac_ideals/#AbstractAlgebra.Generic.basis-Tuple{Hecke.NfAbsOrdFracIdl{AnticNumberField,nf_elem}}","page":"Fractional ideals","title":"AbstractAlgebra.Generic.basis","text":"basis(I::NfAbsOrdFracIdl) -> Array{nf_elem, 1}\n\nReturns the mathbf Z-basis of I.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/frac_ideals/#LinearAlgebra.norm-Tuple{Hecke.NfAbsOrdFracIdl{AnticNumberField,nf_elem}}","page":"Fractional ideals","title":"LinearAlgebra.norm","text":"norm(a::NfRelOrdIdl) -> NfOrdIdl\n\nReturns the norm of a.\n\n\n\nnorm(a::NfRelOrdFracIdl{T, S}) -> S\n\nReturns the norm of a.\n\n\n\nnorm(I::NfAbsOrdFracIdl) -> fmpq\n\nReturns the norm of I.\n\n\n\nnorm(a::AlgAssAbsOrdIdl, O::AlgAssAbsOrd; copy::Bool = true) -> fmpq\n\nReturns the norm of a considered as an (possibly fractional) ideal of O.\n\n\n\nnorm(a::AlgAssRelOrdIdl{S, T, U}, O::AlgAssRelOrd{S, T, U}; copy::Bool = true)\n  where { S, T, U } -> T\n\nReturns the norm of a considered as an (possibly fractional) ideal of O.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/types/#Types-in-Nemo","page":"Types in Nemo","title":"Types in Nemo","text":"","category":"section"},{"location":"Nemo/docs/src/types/","page":"Types in Nemo","title":"Types in Nemo","text":"Nemo is fully compatible with AbstractAlgebra.jl, but specialises implementations of various commonly used rings with a highly optimised C implementation, provided by the C libraries wrapped by Nemo.","category":"page"},{"location":"Nemo/docs/src/types/","page":"Types in Nemo","title":"Types in Nemo","text":"Below, we give a list of all of the specialised types available in Nemo that implement rings using a specialised C library. The types of elements of the respective rings and other mathematical structures are given, and in parentheses we list the types of the parent objects of the given rings and structures.","category":"page"},{"location":"Nemo/docs/src/types/","page":"Types in Nemo","title":"Types in Nemo","text":"Flint\nfmpz (FlintIntegerRing)\nfmpq (FlintRationalField)\nnmod (NmodRing)\nfq_nmod (FqNmodFiniteField)\nfq (FqFiniteField)\npadic (FlintPadicField)\nqadic (FlintQadicField)\nfmpz_poly (FmpzPolyRing)\nfmpq_poly (FmpqPolyRing)\nnmod_poly (NmodPolyRing)\nfmpz_mod_poly (FmpzModPolyRing)\nfq_poly (FqPolyRing)\nfq_nmod_poly (FqNmodPolyRing)\nfmpz_mpoly (FmpzMPolyRing)\nfmpz_rel_series (FmpzRelSeriesRing)\nfmpz_abs_series (FmpzAbsSeriesRing)\nfmpq_rel_series (FmpqRelSeriesRing)\nfmpq_abs_series (FmpqAbsSeriesRing)\nfmpz_mod_rel_series (FmpzModRelSeriesRing)\nfmpz_mod_abs_series (FmpzModAbsSeriesRing)\nnmod_rel_series (NmodRelSeriesRing)\nfq_nmod_rel_series (FqNmodRelSeriesRing)\nfq_nmod_abs_series (FqNmodAbsSeriesRing)\nfq_rel_series (FqRelSeriesRing)\nfq_abs_series (FqAbsSeriesRing)\nfmpz_mat (FmpzMatSpace)\nfmpq_mat (FmpqMatSpace)\nnmod_mat (NmodMatSpace)\nfq_nmod_mat (FqNmodMatSpace)\nfq_mat (FqMatSpace)\nperm (SymmetricGroup)\nAntic\nnf_elem (AnticNumberField)\nArb\narb (ArbField)\nacb (AcbField)\narb_poly (ArbPolyRing)\nacb_poly (AcbPolyRing)\narb_mat (ArbMatSpace)\nacb_mat (AcbMatSpace)","category":"page"},{"location":"Rings/affine/","page":"Affine Rings","title":"Affine Rings","text":"CurrentModule = Oscar","category":"page"},{"location":"Rings/affine/","page":"Affine Rings","title":"Affine Rings","text":"using Oscar","category":"page"},{"location":"Rings/affine/","page":"Affine Rings","title":"Affine Rings","text":"Pages = [\"affine.md\"]","category":"page"},{"location":"Rings/affine/#Affine-Rings","page":"Affine Rings","title":"Affine Rings","text":"","category":"section"},{"location":"Rings/affine/","page":"Affine Rings","title":"Affine Rings","text":"general bla explaining what this is...","category":"page"},{"location":"Rings/affine/#Quotient-Rings","page":"Affine Rings","title":"Quotient Rings","text":"","category":"section"},{"location":"Rings/affine/","page":"Affine Rings","title":"Affine Rings","text":"R, x = PolynomialRing(QQ, :x=>1:3)\nQ, mQ = quo(R, ideal([x[1]^2-2, x[2]^2-3, x[3]^2-5]))","category":"page"},{"location":"Rings/affine/","page":"Affine Rings","title":"Affine Rings","text":"quo(R::MPolyRing, I::MPolyIdeal)","category":"page"},{"location":"Rings/affine/#Elements","page":"Affine Rings","title":"Elements","text":"","category":"section"},{"location":"Rings/affine/","page":"Affine Rings","title":"Affine Rings","text":"Elements are created by moving polynomials into the ring:","category":"page"},{"location":"Rings/affine/","page":"Affine Rings","title":"Affine Rings","text":"R, x = PolynomialRing(QQ, :x=>1:3)\nQ, mQ = quo(R, ideal([x[1]^2-2, x[2]^2-3, x[3]^2-5]))\nQ(x[2]+x[3])\nQ(x[2])\nans^2\nans == 3","category":"page"},{"location":"Rings/affine/","page":"Affine Rings","title":"Affine Rings","text":"As shown: elements are not automatically simplified.","category":"page"},{"location":"Rings/affine/","page":"Affine Rings","title":"Affine Rings","text":"simplify(::MPolyQuoElem)\nOscar.simplify!(::MPolyQuoElem)","category":"page"},{"location":"Rings/affine/#Hecke.simplify-Tuple{Oscar.MPolyQuoElem}","page":"Affine Rings","title":"Hecke.simplify","text":"simplify(a::MPolyQuoElem)\n\nUse the relations of the parent ring to obtain a unique simplified representation.\n\n\n\n","category":"method"},{"location":"Rings/affine/#Oscar.simplify!-Tuple{Oscar.MPolyQuoElem}","page":"Affine Rings","title":"Oscar.simplify!","text":"simplify!(a::MPolyQuoElem)\n\nUse the relations of the parent ring to obtain a unique simplified representation inplace, ie. modify the representatio of a.\n\n\n\n","category":"method"},{"location":"Rings/affine/","page":"Affine Rings","title":"Affine Rings","text":"One can also construct the integer 0 with the empty constructor:","category":"page"},{"location":"Rings/affine/","page":"Affine Rings","title":"Affine Rings","text":"ZZ()","category":"page"},{"location":"Rings/affine/","page":"Affine Rings","title":"Affine Rings","text":"The following special constructors are also provided:","category":"page"},{"location":"Rings/affine/","page":"Affine Rings","title":"Affine Rings","text":"zero(ZZ)\none(ZZ)","category":"page"},{"location":"Rings/affine/","page":"Affine Rings","title":"Affine Rings","text":"zero(ZZ)\none(ZZ)","category":"page"},{"location":"Rings/affine/#Predicates","page":"Affine Rings","title":"Predicates","text":"","category":"section"},{"location":"Rings/affine/","page":"Affine Rings","title":"Affine Rings","text":"iszero(n::Oscar.Integer) -> Bool\nisone(n::Oscar.Integer) -> Bool\nisprobable_prime(n::Oscar.Integer) -> Bool","category":"page"},{"location":"Rings/affine/#Properties","page":"Affine Rings","title":"Properties","text":"","category":"section"},{"location":"Rings/affine/","page":"Affine Rings","title":"Affine Rings","text":"sign(n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/affine/","page":"Affine Rings","title":"Affine Rings","text":"Returns the sign of n, i.e. nn if n neq 0, or 0 otherwise.","category":"page"},{"location":"Rings/affine/","page":"Affine Rings","title":"Affine Rings","text":"sign(ZZ(23))\nsign(ZZ(0))\nsign(ZZ(-1))","category":"page"},{"location":"Rings/affine/#Basic-arithmetic","page":"Affine Rings","title":"Basic arithmetic","text":"","category":"section"},{"location":"Rings/affine/","page":"Affine Rings","title":"Affine Rings","text":"Oscar provides the basic arithmetic operations +, - and * and comparison operators ==, !=, including mixed operations between Julia and Oscar integers. It also provides division and powering as described below.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"CurrentModule = Oscar","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"using Oscar","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Pages = [\"integer.md\"]","category":"page"},{"location":"Rings/integer/#Integers","page":"Integers","title":"Integers","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"An important design decision in Oscar.jl is to use Julia as the user language by default. This means that integers typed at the REPL are Julia integers. However, for performance reasons, Oscar has its own integer format.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Julia has a number of different integer types, but the two that are most relevant here are Base.Int and Base.BigInt. All the Julia integer types belong to Base.Integer.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"The Base.Int type is for machine integers which are highly efficient, but can only represent integers up to a certain hardware defined size before wrapping around.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"The Base.BigInt type is backed by GMP multiprecision integers and can represent integers whose size is usually only limited by available memory.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Oscar currently only has one integer type, Oscar.fmpz which for performance reasons scales internally from machine integers to GMP multiprecision integers. The Oscar integer type belongs to Oscar.Integer.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"This situation is illustrated in the following diagram.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"(Image: alt text)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"In the documentation below, we always use Base.Integer for a Julia integer and Oscar.Integer for an Oscar integer. Some functions accept only machine integers for certain arguments; in such cases, we refer to Base.Int.","category":"page"},{"location":"Rings/integer/#The-ring-of-integers","page":"Integers","title":"The ring of integers","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Every object in Oscar representing a mathematical element has a parent. This is an object encoding information about where that element belongs.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"The parent of an Oscar integer is the ring of integers ZZ.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"ZZ","category":"page"},{"location":"Rings/integer/#Integer-constructors","page":"Integers","title":"Integer constructors","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Oscar integers are created using ZZ:","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"ZZ(2)^100\nZZ(618970019642690137449562111)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"One can also construct the integer 0 with the empty constructor:","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"ZZ()","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"The following special constructors are also provided:","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"zero(ZZ)\none(ZZ)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"zero(ZZ)\none(ZZ)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Note that ZZ is not a Julia type, but the above methods of constructing Oscar integers are similar to the way that Julia integer types can be used to construct Julia integers.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Int(123)\nBigInt(123456343567843598776327698374259876295438725)\nzero(BigInt)\none(Int)","category":"page"},{"location":"Rings/integer/#Limitations","page":"Integers","title":"Limitations","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Oscar integers have the same limitations as GMP multiprecision integers, namely that they are limited by the available memory on the machine and in any case to signed integers whose absolute value does not exceed 2^37 bits.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"note: Note\nThe Julia Int type is either a 32 or 64 bit integer, depending on the machine architecture (usually 64 bits on most modern machines). The range of values is machine dependent, but can be found by typing typemin(Int) and typemax(Int) in Julia.","category":"page"},{"location":"Rings/integer/#Julia-integers-in-Oscar-functions","page":"Integers","title":"Julia integers in Oscar functions","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"For convenience, all basic arithmetic and exact division functions in Oscar also accept Julia integers. For example:","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"divexact(ZZ(234), 2)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"In this example, 2 is a Julia integer but is still valid in the call to the Oscar function divexact.","category":"page"},{"location":"Rings/integer/#Predicates","page":"Integers","title":"Predicates","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"iszero(n::Oscar.Integer) -> Bool\nisone(n::Oscar.Integer) -> Bool\nisunit(n::Oscar.Integer) -> Bool\nisodd(n::Oscar.Integer) -> Bool\niseven(n::Oscar.Integer) -> Bool\nissquare(n::Oscar.Integer) -> Bool\nisprime(n::Oscar.Integer) -> Bool\nisprobable_prime(n::Oscar.Integer) -> Bool","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"The isprime predicate will prove primality, whereas isprobable_prime may declare a composite number to be prime with very low probability.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Negative numbers, 0 and 1 are not considered prime by isprime and isprobable_prime.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"isone(ZZ(1))\nisunit(ZZ(-1))\nissquare(ZZ(16))\nisprobable_prime(ZZ(23))","category":"page"},{"location":"Rings/integer/#Properties","page":"Integers","title":"Properties","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"sign(n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the sign of n, i.e. nn if n neq 0, or 0 otherwise.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"sign(ZZ(23))\nsign(ZZ(0))\nsign(ZZ(-1))","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"abs(n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Return the absolute value of n, i.e. n if n geq 0 and -n otherwise","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"abs(ZZ(-3))","category":"page"},{"location":"Rings/integer/#Basic-arithmetic","page":"Integers","title":"Basic arithmetic","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Oscar provides the basic arithmetic operations +, - and * and comparison operators ==, !=, <, <=, >, >=, including mixed operations between Julia and Oscar integers. It also provides division and powering as described below.","category":"page"},{"location":"Rings/integer/#Division-in-Oscar","page":"Integers","title":"Division in Oscar","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Oscar distinguishes a number of different kinds of division:","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Exact division (divexact)\nEuclidean division (div, rem, divrem and mod)\nConstruction of fractions (a//b)\nFloating point division (a/b)\nDivisibility testing (divides)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"These choices have been made for maximum parsimony with the Julia language.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"note: Note\nIt is a common error to enter 1/2 for the fraction 'one half' in Julia. This expression is reserved for floating point division. Instead, the double slash operator // should be used for fractions.","category":"page"},{"location":"Rings/integer/#integer_exact_division","page":"Integers","title":"Exact Division","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"divexact(a::Oscar.Integer, b::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"One or both arguments may be Julia integers, however if they both are, the result will be a Julia integer not an Oscar integer.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the quotient of a by b. The result of the exact division of two integers will always be another integer. Exact division raises an exception if the division is not exact, or if division by zero is attempted.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"divexact(ZZ(6), ZZ(3))\ndivexact(ZZ(6), ZZ(0))\ndivexact(ZZ(6), ZZ(5))\ndivexact(ZZ(6), 2)","category":"page"},{"location":"Rings/integer/#Powering","page":"Integers","title":"Powering","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"^(a::Oscar.Integer, b::Base.Int) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Powering can be accomplished naturally using the special caret infix operator:","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"ZZ(37)^37\nZZ(1)^(-2)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"note: Note\nAn exception will be raised if an integer other than -1 or 1 is raised to a negative exponent.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"note: Note\nIn Julia 2^-2 is called a literal power. The value returned is a floating point value. To get behaviour that agrees with Oscar, one can write 2^Int(-2).","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"The following is allowed for convenience.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"ZZ(0)^0","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"note: Note\nIn Julia, 2^64 will return zero, as the Julia integer 2 is a machine integer. In Oscar, the expression ZZ(2)^64 will return the expected result, just as the Julia equivalent BigInt(2)^64 does.","category":"page"},{"location":"Rings/integer/#integer_euclidean_division","page":"Integers","title":"Euclidean division","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"The ring of integers is a Euclidean domain and Oscar provides Euclidean division through the functions divrem, div and rem.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Integer Euclidean division of a by b computes a quotient and remainder such that","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"a = qb + r","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"with r  b.","category":"page"},{"location":"Rings/integer/#Division-with-remainder","page":"Integers","title":"Division with remainder","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"divrem(a::Oscar.Integer, b::Oscar.Integer) -> (Oscar.Integer, Oscar.Integer) : division with remainder\ndiv(a::Oscar.Integer, b::Oscar.Integer) -> Oscar.Integer : quotient only\nrem(a::Oscar.Integer, b::Oscar.Integer) -> Oscar.Integer : remainder only","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"One or both arguments may be Julia integers, however if they both are, the result will be a Julia integer not an Oscar integer.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Both rem and divrem compute the remainder r such that when r neq 0 the sign of r is the same as the sign of a.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"All three functions raise an exception if the modulus b is zero.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"divrem(ZZ(5), ZZ(3))\ndiv(ZZ(7), ZZ(2))\nrem(ZZ(4), ZZ(3))\ndiv(ZZ(2), ZZ(0))","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"note: Note\nThe rem function does not provide a minimal set of representatives, e.g. rem(-2, 3) = -2 but rem(1, 3) = 1.","category":"page"},{"location":"Rings/integer/#Modular-arithmetic","page":"Integers","title":"Modular arithmetic","text":"","category":"section"},{"location":"Rings/integer/#Modular-reduction","page":"Integers","title":"Modular reduction","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"mod(a::Oscar.Integer, b::Oscar.Integer) -> Oscar.Integer : remainder only","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"One or both arguments may be Julia integers, however if they both are, the result will be a Julia integer not an Oscar integer.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"The mod function computes a remainder r such that when r neq 0 the sign of r is the same as the sign of b. Thus, if b  0 then mod(a, b) will be in the range 0 b). An exception is raised if the modulus b is zero. This is summarised in the following table.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"remainder division sign rounding\nrem div/divrem same as dividend towards zero\nmod  same as divisor towards -infty","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"There is no function implemented to compute the quotient corresponding to the remainder given by mod.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"mod(ZZ(4), ZZ(3))\nmod(ZZ(2), ZZ(0)) ","category":"page"},{"location":"Rings/integer/#integer_divisibility_testing","page":"Integers","title":"Divisibility testing","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"divides(a::Oscar.Integer, b::Oscar.Integer) -> (Bool, Oscar.Integer)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"In Oscar, we say that b divides a if there exists c in the same ring such that a = bc.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"The call divides(a, b) returns a tuple (flag, q) where flag is either true if b divides a in which case q will be a quotient, or flag is false if b does not divide a in which case q will be an integer whose value is not defined.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"divides(ZZ(6), ZZ(3))\ndivides(ZZ(5), ZZ(2))","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Note that for convenience we define:","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"divides(ZZ(0), ZZ(0))","category":"page"},{"location":"Rings/integer/#Greatest-common-divisor","page":"Integers","title":"Greatest common divisor","text":"","category":"section"},{"location":"Rings/integer/#Greatest-common-divisor-2","page":"Integers","title":"Greatest common divisor","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"gcd(a::Oscar.Integer, b::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"One or both arguments may be Julia integers, however if they both are, the result will be a Julia integer not an Oscar integer.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the greatest common divisor of its inputs, which is by definition the largest integer dividing the two inputs, unless both inputs are zero in which case it returns zero. The result will always be non-negative and will only be zero if both inputs are zero.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"gcd(ZZ(34), ZZ(17))\ngcd(ZZ(3), ZZ(0))","category":"page"},{"location":"Rings/integer/#Extended-GCD","page":"Integers","title":"Extended GCD","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"gcdx(a::Oscar.Integer, b::Oscar.Integer) -> (Oscar.Integer, Oscar.Integer, Oscar.Integer)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"One or both arguments may be Julia integers, however if they both are, the result will be a tuple of Julia integers not Oscar integers.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns a tuple (g s t) such that g is the greatest common divisor of a and b and g = as + bt. Normally s and t are chosen so that s  b(2g) and t  a(2g), where this uniquely defines s and t. But the following cases are handled specially:","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"if a = b then t = bb\nif b = 0 or b = 2g then s = aa\nif a = 0 or a = 2g then t = bb","category":"page"},{"location":"Rings/integer/#Least-common-multiple","page":"Integers","title":"Least common multiple","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"lcm(a::Oscar.Integer, b::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"One or both arguments may be Julia integers, however if they both are, the result will be a Julia integer not an Oscar integer.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the least common multiple of a and b. This is the least positive multiple of a and b, unless a = 0 or b = 0 which case we define the least common multiple to be zero.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"lcm(ZZ(6), ZZ(21))\nlcm(ZZ(0), ZZ(0))","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"note: Note\nThe identity gcd(m n)mathrmlcm(m n) = mn does not hold for the definition that Oscar uses, unless both m and n are the same sign or one of them is zero.","category":"page"},{"location":"Rings/integer/#Roots","page":"Integers","title":"Roots","text":"","category":"section"},{"location":"Rings/integer/#Square-roots","page":"Integers","title":"Square roots","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Julia and Oscar distinguish two kinds of square root:","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Integer square root (isqrt)\nFloating point square root (sqrt)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"We describe only the first of these here.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"isqrt(n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the floor of the square root of its argument, i.e. the largest integer whose square does not exceed its input. An exception is raised if a negative input is passed.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"isqrt(ZZ(16))\nisqrt(ZZ(0))\nisqrt(ZZ(5))\nisqrt(ZZ(-3))","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"isqrtrem(n::Oscar.Integer) -> (Oscar.Integer, Oscar.Integer)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the tuple (s, r) such that s is equal to isqrt(n) and n = s^2 + r.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"isqrtrem(ZZ(16))\nisqrtrem(ZZ(5))","category":"page"},{"location":"Rings/integer/#General-roots","page":"Integers","title":"General roots","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"root(a::Oscar.Integer, n::Base.Int) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the value r of largest absolute value such that r^n leq a. When a is a perfect n-th power, the return value will be an n-th root of a.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"When n is even, the non-negative root is always returned. An exception is raised if n leq 0 or if n is even and a  0.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"root(ZZ(16), 4)\nroot(ZZ(5), 2)\nroot(ZZ(-5), 3)\nroot(ZZ(0), 4)\nroot(ZZ(-5), 2)\nroot(ZZ(12), -2)","category":"page"},{"location":"Rings/integer/#Conversions","page":"Integers","title":"Conversions","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Int(n::Oscar.Integer) -> Base.Int\nBigInt(n::Oscar.Integer) -> Base.BigInt","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Convert the Oscar integer to the respective Julia integer.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"n = ZZ(123)\nInt(n)\nBigInt(n)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"In the case of Int, if the Oscar integer is too large to fit, an exception is raised.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Int(ZZ(12348732648732648763274868732687324))","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"fits(::Type{Int}, n::Oscar.Integer) -> Bool","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns true if the Oscar integer will fit in a Base.Int.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"fits(Int, ZZ(123))\nfits(Int, ZZ(12348732648732648763274868732687324))","category":"page"},{"location":"Rings/integer/#Factorisation","page":"Integers","title":"Factorisation","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"factor(n::Oscar.Integer) -> Fac","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns a factorisation of the given integer. The return value is a special factorisation struct which can be manipulated using the functions below.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"factor(ZZ(-6000361807272228723606))\nfactor(ZZ(0))","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"unit(F::Fac) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"F = factor(ZZ(-12))\nunit(F)","category":"page"},{"location":"Rings/integer/#Factorisation-are-iterable","page":"Integers","title":"Factorisation are iterable","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Once created, a factorisation is iterable:","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"F = factor(ZZ(-60))\nfor (p, e) in F; println(\"$p^$e\"); end","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"The pairs (p, e) in a factorisation represent the prime power factors p^e of the non-unit part of the factorisation. They can be placed in an array using collect:","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"F = factor(ZZ(-60))\ncollect(F)","category":"page"},{"location":"Rings/integer/#Accessing-exponents-in-a-factorisation","page":"Integers","title":"Accessing exponents in a factorisation","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"One can also determine whether a given prime is in the non-unit part of a factorisation and if so return its exponent. If the exponent of a prime that is not in a factorisation is requested, an exception is raised.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"For convenience, a Base.Int can be used instead of an Oscar integer for this functionality.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"F = factor(ZZ(-60))\n5 in F\nZZ(3) in F\n7 in F\nF[3]\nF[ZZ(7)]","category":"page"},{"location":"Rings/integer/#Combinatorial-functions","page":"Integers","title":"Combinatorial functions","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"note: Note\nThe functions in this section that take Base.Int arguments will return a Base.Int, which may overflow. Use the Oscar.Integer versions if this is not the desired behaviour.","category":"page"},{"location":"Rings/integer/#Factorial","page":"Integers","title":"Factorial","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"factorial(n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the factorial of n, i.e. n. An exception is raised if n  0. We define 0 = 1.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"note: Note\nThe function factorial is already defined in Julia for Base.Int.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"rising_factorial(x::Base.Int, n::Base.Int) -> Base.Int\nrising_factorial(x::Oscar.Integer, n::Base.Int) -> Oscar.Integer\nrising_factorial(x::Oscar.Integer, n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns x(x + 1)(x + 2)ldots(x + n - 1). An exception is raised if n  0. We define rising_factorial(x, 0) to be 1.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"factorial(ZZ(30))\nrising_factorial(ZZ(-30), 3)","category":"page"},{"location":"Rings/integer/#Primorial","page":"Integers","title":"Primorial","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"primorial(n::Base.Int) -> Base.Int\nprimorial(n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the promorial P(n), i.e. the product of all primes less than or equal to n. An exception is raised if n  0. We define P(0) = P(1) = 1.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"primorial(ZZ(100))","category":"page"},{"location":"Rings/integer/#Bell-numbers","page":"Integers","title":"Bell numbers","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"bell(n::Base.Int) -> Base.Int\nbell(n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the n-th Bell number B(n), i.e. the number of ways of partitioning a set of n elements. An exception is raised if n  0.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"bell(ZZ(20))","category":"page"},{"location":"Rings/integer/#Binomial-coefficients","page":"Integers","title":"Binomial coefficients","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"binomial(n::Oscar.Integer, k::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the binomial coefficient fracnk(n - k). If n k  0 or k  n we return zero.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"note: Note\nJulia already defines the binomial function for Base.Int.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"binomial(ZZ(72), ZZ(15))","category":"page"},{"location":"Rings/integer/#Integer-partitions","page":"Integers","title":"Integer partitions","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"number_of_partitions(n::Base.Int) -> Base.Int\nnumber_of_partitions(n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the number of integer partitions p(n) of n, i.e. the number of distinct ways to write n as a sum of positive integers. Note that p(0) = 1, as the empty sum is counted. For n  0 we return zero.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"number_of_partitions(ZZ(10^6))","category":"page"},{"location":"Rings/integer/#Fibonacci-sequence","page":"Integers","title":"Fibonacci sequence","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"fibonacci(n::Base.Int) -> Base.Int\nfibonacci(n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the n-th Fibonacci number F(n), defined by the recurrence relation F(1) = 1, F(2) = 1 and F(n) = F(n - 1) + F(n - 2) for n geq 3. We define F(0) = 0 and for n  0 we have F(-n) = (-1)^n+1F(n).","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"fibonacci(ZZ(100))\nfibonacci(-2)","category":"page"},{"location":"Rings/integer/#Number-theoretic-functionality","page":"Integers","title":"Number theoretic functionality","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"note: Note\nThe functions in this section that take Base.Int arguments will return a Base.Int, which may overflow. Use the Oscar.Integer versions if this is not the desired behaviour.","category":"page"},{"location":"Rings/integer/#Moebius-mu-function","page":"Integers","title":"Moebius mu function","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"moebius_mu(n::Base.Int) -> Base.Int\nmoebius_mu(n::Oscar.Integer) -> Base.Int ","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Return the Moebius function mu(n), which is defined to be 0 if n is not squarefree and otherwise is defined to be +1 or -1 if n has an even or odd number of prime factors, respectively. Alternatively, mu(n) can be defined to be the sum of the primitive n-th roots of unity. An exception is raised if n leq 0.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"moebius_mu(30)","category":"page"},{"location":"Rings/integer/#Jacobi-symbols","page":"Integers","title":"Jacobi symbols","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"jacobi_symbol(m::Base.Int, n::Base.Int) -> Base.Int\njacobi_symbol(m::Oscar.Integer, n::Oscar.Integer) -> Base.Int","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Return the Jacobi symbol left(fracmnright), which is defined for integers m and odd, positive integers n. If the factorisation of n is n = p_1^i_1p_2^i_2ldots p_r^i_r then we define","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"left(fracmnright) = left(fracmp_1right)^i_1left(fracmp_2right)^i_2ldots left(fracmp_rright)^i_r","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"where left(fracmpright) on the right hand side is the Legendre symbol, which is defined for an odd prime number p to be 0 if p divides m and otherwise +1 or -1 depending on whether m is a square modulo p or not. An exception is raised if n is even or if n leq 0.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"jacobi_symbol(3, 37)","category":"page"},{"location":"Rings/integer/#Sigma-function","page":"Integers","title":"Sigma function","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"divisor_sigma(m::Base.Int, n::Base.Int) -> Base.Int\ndivisor_sigma(m::Oscar.Integer, n::Base.Int) -> Oscar.Integer\ndivisor_sigma(m::Oscar.Integer, n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Return the sum of the n-th powers of the divisors of m","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"sigma(m n) = sum_dm d^n","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"If m leq 0 or n  0 we raise an exception.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"divisor_sigma(60, 5)","category":"page"},{"location":"Rings/integer/#Euler-totient-function","page":"Integers","title":"Euler totient function","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"euler_phi(n::Base.Int) -> Base.Int\neuler_phi(n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Return the Euler totient function varphi(n), i.e. the number of positive integers 1 leq x leq n which are coprime to n. Note that varphi(1) = 1. We raise an exception if n leq 0.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"euler_phi(200)","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend\nDocTestFilters = r\"[0-9\\.]+ seconds \\(.*\\)\"","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/#Partitions-and-Young-tableaux","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"AbstractAlgebra.jl provides basic support for computations with Young tableaux, skew diagrams and the characters of permutation groups (implemented src/generic/YoungTabs.jl). All functionality of permutations is accesible in the Generic submodule.","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/#Partitions","page":"Partitions and Young tableaux","title":"Partitions","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"The basic underlying object for those concepts is Partition of a number n, i.e. a sequence of positive integers n_1 ldots n_k which sum to n. Partitions in AbstractAlgebra.jl are represented internally by non-increasing Vectors of Ints. Partitions are printed using the standard notation, i.e. 9 = 4 + 2 + 1 + 1 + 1 is shown as 4_1 2_1 1_3 with the subscript indicating the count of a summand in the partition.","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"Generic.Partition","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/#AbstractAlgebra.Generic.Partition","page":"Partitions and Young tableaux","title":"AbstractAlgebra.Generic.Partition","text":"Partition(part::Vector{<:Integer}[, check::Bool=true]) <: AbstractVector{Int}\n\nRepresent integer partition in the non-increasing order.\n\npart will be sorted, if necessary. Checks for validity of input can be skipped by calling the (inner) constructor with false as the second argument.\n\nFunctionally Partition is a thin wrapper over Vector{Int}.\n\nFieldnames:\n\nn::Int - the partitioned number\npart::Vector{Int} - a non-increasing sequence of summands of n.\n\nExamples:\n\njulia> p = Partition([4,2,1,1,1])\n4₁2₁1₃\n\njulia> p.n == sum(p.part)\ntrue\n\n\n\n","category":"type"},{"location":"AbstractAlgebra/docs/src/ytabs/#Array-interface","page":"Partitions and Young tableaux","title":"Array interface","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"Partition is a concrete (immutable) subtype of AbstractVector{Integer} and implements the standard Array interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"size(::Generic.Partition)\ngetindex(::Generic.Partition, i::Integer)","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/#Base.size-Tuple{AbstractAlgebra.Generic.Partition}","page":"Partitions and Young tableaux","title":"Base.size","text":"size(p::Partition)\n\nReturn the size of the vector which represents the partition.\n\nExamples:\n\njulia> p = Partition([4,3,1]); size(p)\n(3,)\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ytabs/#Base.getindex-Tuple{AbstractAlgebra.Generic.Partition,Integer}","page":"Partitions and Young tableaux","title":"Base.getindex","text":"getindex(p::Partition, i::Integer)\n\nReturn the i-th part (in non-increasing order) of the partition.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"These functions work on the level of p.part vector.","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"One can easily iterate over all partitions of n using the Generic.partitions function.","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"Generic.partitions","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/#AbstractAlgebra.Generic.partitions","page":"Partitions and Young tableaux","title":"AbstractAlgebra.Generic.partitions","text":"partitions(n::Integer)\n\nReturn the vector of all permutations of n. For an unsafe generator version see partitions!.\n\nExamples:\n\n```jldoctest; setup = :(using AbstractAlgebra) julia> Generic.partitions(5) 7-element Array{AbstractAlgebra.Generic.Partition{Int64},1}:  1₅  2₁1₃  3₁1₂  2₂1₁  4₁1₁  3₁2₁  5₁\n\n\n\n","category":"function"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"You may also have a look at JuLie.jl package for more utilities related to partitions.","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"The number of all partitions can be computed by the hidden function _numpart. Much faster implementation is available in Nemo.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"Generic._numpart","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/#AbstractAlgebra.Generic._numpart","page":"Partitions and Young tableaux","title":"AbstractAlgebra.Generic._numpart","text":"_numpart(n::Integer)\n\nReturn the number of all distinct integer partitions of n. The function uses Euler pentagonal number theorem for recursive formula. For more details see OEIS sequence A000041. Note that _numpart(0) = 1 by convention.\n\n\n\n","category":"function"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"Since Partition is a subtype of AbstractVector generic functions which operate on vectors should work in general. However the meaning of conj has been changed to agree with the traditional understanding of conjugation of Partitions:","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"conj(::Generic.Partition)\nconj(::Generic.Partition, v::Vector)","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/#Base.conj-Tuple{AbstractAlgebra.Generic.Partition}","page":"Partitions and Young tableaux","title":"Base.conj","text":"conj(part::Partition)\n\nReturn the conjugated partition of part, i.e. the partition corresponding to the Young diagram of part reflected through the main diagonal.\n\nExamples:\n\njulia> p = Partition([4,2,1,1,1])\n4₁2₁1₃\n\njulia> conj(p)\n5₁2₁1₂\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ytabs/#Base.conj-Tuple{AbstractAlgebra.Generic.Partition,Array{T,1} where T}","page":"Partitions and Young tableaux","title":"Base.conj","text":"conj(part::Partition, v::Vector)\n\nReturn the conjugated partition of part together with permuted vector v.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ytabs/#Young-Diagrams-and-Young-Tableaux","page":"Partitions and Young tableaux","title":"Young Diagrams and Young Tableaux","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"Mathematicaly speaking Young diagram is a diagram which consists of rows of square boxes such that the number of boxes in each row is no less than the number of boxes in the previous row. For example partition 4_1 3_2 1 represents the following diagram.","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"┌───┬───┬───┬───┐\n│   │   │   │   │\n├───┼───┼───┼───┘\n│   │   │   │\n├───┼───┼───┤\n│   │   │   │\n├───┼───┴───┘\n│   │\n└───┘","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"Young Tableau is formally a bijection between the set of boxes of a Young Diagram and the set 1 ldots n. If a bijection is increasing along rows and columns of the diagram it is referred to as standard. For example","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"┌───┬───┬───┬───┐\n│ 1 │ 2 │ 3 │ 4 │\n├───┼───┼───┼───┘\n│ 5 │ 6 │ 7 │\n├───┼───┼───┤\n│ 8 │ 9 │10 │\n├───┼───┴───┘\n│11 │\n└───┘","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"is a standard Young tableau of 4_1 3_2 1 where the bijection assigns consecutive natural numbers to consecutive (row-major) cells.","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/#Constructors","page":"Partitions and Young tableaux","title":"Constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"In AbstractAlgebra.jl Young tableau are implemented as essentially row-major sparse matrices, i.e. YoungTableau <: AbstractArray{Int,2} but only the defining Partition and the (row-major) fill-vector is stored.","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"Generic.YoungTableau","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/#AbstractAlgebra.Generic.YoungTableau","page":"Partitions and Young tableaux","title":"AbstractAlgebra.Generic.YoungTableau","text":"YoungTableau(part::Partition[, fill::Vector{Int}=collect(1:sum(part))])  <: AbstractArray{Int, 2}\n\nReturn the Young tableaux of partition part, filled linearly by fill vector. Note that fill vector is in row-major format.\n\nFields:\n\npart - the partition defining Young diagram\nfill - the row-major fill vector: the entries of the diagram.\n\nExamples:\n\njulia> p = Partition([4,3,1]); y = YoungTableau(p)\n┌───┬───┬───┬───┐\n│ 1 │ 2 │ 3 │ 4 │\n├───┼───┼───┼───┘\n│ 5 │ 6 │ 7 │\n├───┼───┴───┘\n│ 8 │\n└───┘\n\njulia> y.part\n4₁3₁1₁\n\njulia> y.fill\n8-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n\n\n\n","category":"type"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"For convenience there exists an alternative constructor of YoungTableau, which accepts a vector of integers and constructs Partition internally.","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"YoungTableau(p::Vector{Integer}[, fill=collect(1:sum(p))])","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/#Array-interface-2","page":"Partitions and Young tableaux","title":"Array interface","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"To make YoungTableaux array-like we implement the following functions:","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"size(::Generic.YoungTableau)\ngetindex(::Generic.YoungTableau, n::Integer)","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/#Base.size-Tuple{AbstractAlgebra.Generic.YoungTableau}","page":"Partitions and Young tableaux","title":"Base.size","text":"size(Y::YoungTableau)\n\nReturn size of the smallest array containing Y, i.e. the tuple of the number of rows and the number of columns of Y.\n\nExamples:\n\njulia> y = YoungTableau([4,3,1]); size(y)\n(3, 4)\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ytabs/#Base.getindex-Tuple{AbstractAlgebra.Generic.YoungTableau,Integer}","page":"Partitions and Young tableaux","title":"Base.getindex","text":"getindex(Y::YoungTableau, n::Integer)\n\nReturn the column-major linear index into the size(Y)-array. If a box is outside of the array return 0.\n\nExamples:\n\njulia> y = YoungTableau([4,3,1])\n┌───┬───┬───┬───┐\n│ 1 │ 2 │ 3 │ 4 │\n├───┼───┼───┼───┘\n│ 5 │ 6 │ 7 │\n├───┼───┴───┘\n│ 8 │\n└───┘\n\njulia> y[1]\n1\n\njulia> y[2]\n5\n\njulia> y[4]\n2\n\njulia> y[6]\n0\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"Also the double-indexing corresponds to (row, column) access to an abstract array.","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"julia> y = YoungTableau([4,3,1])\n┌───┬───┬───┬───┐\n│ 1 │ 2 │ 3 │ 4 │\n├───┼───┼───┼───┘\n│ 5 │ 6 │ 7 │\n├───┼───┴───┘\n│ 8 │\n└───┘\n\njulia> y[1,2]\n2\n\njulia> y[2,3]\n7\n\njulia> y[3,2]\n0","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"Functions defined for AbstractArray type based on those (e.g. length) should work. Again, as in the case of Partition the meaning of conj is altered to reflect the usual meaning for Young tableaux:","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"conj(::Generic.YoungTableau)","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/#Base.conj-Tuple{AbstractAlgebra.Generic.YoungTableau}","page":"Partitions and Young tableaux","title":"Base.conj","text":"conj(Y::YoungTableau)\n\nReturn the conjugated tableau, i.e. the tableau reflected through the main diagonal.\n\nExamples\n\njulia> y = YoungTableau([4,3,1])\n┌───┬───┬───┬───┐\n│ 1 │ 2 │ 3 │ 4 │\n├───┼───┼───┼───┘\n│ 5 │ 6 │ 7 │\n├───┼───┴───┘\n│ 8 │\n└───┘\n\njulia> conj(y)\n┌───┬───┬───┐\n│ 1 │ 5 │ 8 │\n├───┼───┼───┘\n│ 2 │ 6 │\n├───┼───┤\n│ 3 │ 7 │\n├───┼───┘\n│ 4 │\n└───┘\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ytabs/#Pretty-printing","page":"Partitions and Young tableaux","title":"Pretty-printing","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"Similarly to permutations we have two methods of displaying Young Diagrams:","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"Generic.setyoungtabstyle","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/#AbstractAlgebra.Generic.setyoungtabstyle","page":"Partitions and Young tableaux","title":"AbstractAlgebra.Generic.setyoungtabstyle","text":"setyoungtabstyle(format::Symbol)\n\nSelect the style in which Young tableaux are displayed (in REPL or in general as string). This can be either\n\n:array - as matrices of integers, or\n:diagram - as filled Young diagrams (the default).\n\nThe difference is purely esthetical.\n\nExamples:\n\njulia> Generic.setyoungtabstyle(:array)\n:array\n\njulia> p = Partition([4,3,1]); YoungTableau(p)\n 1  2  3  4\n 5  6  7\n 8\n\njulia> Generic.setyoungtabstyle(:diagram)\n:diagram\n\njulia> YoungTableau(p)\n┌───┬───┬───┬───┐\n│ 1 │ 2 │ 3 │ 4 │\n├───┼───┼───┼───┘\n│ 5 │ 6 │ 7 │\n├───┼───┴───┘\n│ 8 │\n└───┘\n\n\n\n","category":"function"},{"location":"AbstractAlgebra/docs/src/ytabs/#Ulitility-functions","page":"Partitions and Young tableaux","title":"Ulitility functions","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"matrix_repr(::Generic.YoungTableau)\nfill!(::Generic.YoungTableau, ::AbstractVector{<:Integer})","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/#AbstractAlgebra.Generic.matrix_repr-Tuple{AbstractAlgebra.Generic.YoungTableau}","page":"Partitions and Young tableaux","title":"AbstractAlgebra.Generic.matrix_repr","text":"matrix_repr(a::Perm)\n\nReturn the permutation matrix as a sparse matrix representing a via natural embedding of the permutation group into the general linear group over mathbbZ.\n\nExamples:\n\njulia> p = Perm([2,3,1])\n(1,2,3)\n\njulia> matrix_repr(p)\n3×3 SparseArrays.SparseMatrixCSC{Int64,Int64} with 3 stored entries:\n  [3, 1]  =  1\n  [1, 2]  =  1\n  [2, 3]  =  1\n\njulia> Array(ans)\n3×3 Array{Int64,2}:\n 0  1  0\n 0  0  1\n 1  0  0\n\n\n\nmatrix_repr(Y::YoungTableau)\n\nConstruct sparse integer matrix representing the tableau.\n\nExamples:\n\njulia> y = YoungTableau([4,3,1]);\n\n\njulia> matrix_repr(y)\n3×4 SparseArrays.SparseMatrixCSC{Int64,Int64} with 8 stored entries:\n  [1, 1]  =  1\n  [2, 1]  =  5\n  [3, 1]  =  8\n  [1, 2]  =  2\n  [2, 2]  =  6\n  [1, 3]  =  3\n  [2, 3]  =  7\n  [1, 4]  =  4\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ytabs/#Base.fill!-Tuple{AbstractAlgebra.Generic.YoungTableau,AbstractArray{var\"#s283\",1} where var\"#s283\"<:Integer}","page":"Partitions and Young tableaux","title":"Base.fill!","text":"fill!(Y::YoungTableaux, V::Vector{<:Integer})\n\nReplace the fill vector Y.fill by V. No check if the resulting tableau is standard (i.e. increasing along rows and columns) is performed.\n\nExamples:\n\njulia> y = YoungTableau([4,3,1])\n┌───┬───┬───┬───┐\n│ 1 │ 2 │ 3 │ 4 │\n├───┼───┼───┼───┘\n│ 5 │ 6 │ 7 │\n├───┼───┴───┘\n│ 8 │\n└───┘\n\njulia> fill!(y, [2:9...])\n┌───┬───┬───┬───┐\n│ 2 │ 3 │ 4 │ 5 │\n├───┼───┼───┼───┘\n│ 6 │ 7 │ 8 │\n├───┼───┴───┘\n│ 9 │\n└───┘\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ytabs/#Characters-of-permutation-groups","page":"Partitions and Young tableaux","title":"Characters of permutation groups","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"Irreducible characters (at least over field of characteristic 0) of the full group of permutations S_n correspond via Specht modules to partitions of n.","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"character(::Generic.Partition)\ncharacter(lambda::Generic.Partition, p::Generic.Perm)\ncharacter(lambda::Generic.Partition, mu::Generic.Partition)","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/#AbstractAlgebra.Generic.character-Tuple{AbstractAlgebra.Generic.Partition}","page":"Partitions and Young tableaux","title":"AbstractAlgebra.Generic.character","text":"character(lambda::Partition)\n\nReturn the lambda-th irreducible character of permutation group on sum(lambda) symbols. The returned character function is of the following signature:\n\nchi(p::Perm[, check::Bool=true]) -> BigInt\n\nThe function checks (if p belongs to the appropriate group) can be switched off by calling chi(p, false). The values computed by chi are cached in look-up table.\n\nThe computation follows the Murnaghan-Nakayama formula: chi_lambda(sigma) = sum_textrimhook xisubset lambda(-1)^ll(lambdabackslashxi) chi_lambda backslashxi(tildesigma) where lambdabackslashxi denotes the skew diagram of lambda with xi removed, ll denotes the leg-length (i.e. number of rows - 1) and tildesigma is permutation obtained from sigma by the removal of the longest cycle.\n\nFor more details see e.g. Chapter 2.8 of Group Theory and Physics by S.Sternberg.\n\nExamples\n\njulia> G = SymmetricGroup(4)\nFull symmetric group over 4 elements\n\njulia> chi = character(Partition([3,1])); # character of the regular representation\n\n\njulia> chi(one(G))\n3\n\njulia> chi(perm\"(1,3)(2,4)\")\n-1\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ytabs/#AbstractAlgebra.Generic.character-Tuple{AbstractAlgebra.Generic.Partition,Perm}","page":"Partitions and Young tableaux","title":"AbstractAlgebra.Generic.character","text":"character(lambda::Partition, p::Perm, check::Bool=true) -> BigInt\n\nReturn the value of lambda-th irreducible character of the permutation group on permutation p.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ytabs/#AbstractAlgebra.Generic.character-Tuple{AbstractAlgebra.Generic.Partition,AbstractAlgebra.Generic.Partition}","page":"Partitions and Young tableaux","title":"AbstractAlgebra.Generic.character","text":"character(lambda::Partition, mu::Partition, check::Bool=true) -> BigInt\n\nReturn the value of lambda-th irreducible character on the conjugacy class represented by partition mu.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"The values computed by characters are cached in an internal dictionary Dict{Tuple{BitVector,Vector{Int}}, BigInt}. Note that all of the above functions return BigInts. If you are sure that the computations do not overflow, variants of the last two functions using Int are available:","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"character(::Type{Int}, lambda::Partition, p::Perm[, check::Bool=true])\ncharacter(::Type{Int}, lambda::Partition, mu::Partition[, check::Bool=true])","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"The dimension dim lambda of the irreducible module corresponding to partition lambda can be computed using Hook length formula","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"Generic.rowlength\nGeneric.collength\nhooklength\ndim(::Generic.YoungTableau)","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/#AbstractAlgebra.Generic.rowlength","page":"Partitions and Young tableaux","title":"AbstractAlgebra.Generic.rowlength","text":"rowlength(Y::YoungTableau, i, j)\n\nReturn the row length of Y at box (i,j), i.e. the number of boxes in the i-th row of the diagram of Y located to the right of the (i,j)-th box.\n\nExamples\n\njulia> y = YoungTableau([4,3,1])\n┌───┬───┬───┬───┐\n│ 1 │ 2 │ 3 │ 4 │\n├───┼───┼───┼───┘\n│ 5 │ 6 │ 7 │\n├───┼───┴───┘\n│ 8 │\n└───┘\n\njulia> Generic.rowlength(y, 1,2)\n2\n\njulia> Generic.rowlength(y, 2,3)\n0\n\njulia> Generic.rowlength(y, 3,3)\n0\n\n\n\n","category":"function"},{"location":"AbstractAlgebra/docs/src/ytabs/#AbstractAlgebra.Generic.collength","page":"Partitions and Young tableaux","title":"AbstractAlgebra.Generic.collength","text":"collength(Y::YoungTableau, i, j)\n\nReturn the column length of Y at box (i,j), i.e. the number of boxes in the j-th column of the diagram of Y located below of the (i,j)-th box.\n\nExamples\n\njulia> y = YoungTableau([4,3,1])\n┌───┬───┬───┬───┐\n│ 1 │ 2 │ 3 │ 4 │\n├───┼───┼───┼───┘\n│ 5 │ 6 │ 7 │\n├───┼───┴───┘\n│ 8 │\n└───┘\n\njulia> Generic.collength(y, 1,1)\n2\n\njulia> Generic.collength(y, 1,3)\n1\n\njulia> Generic.collength(y, 2,4)\n0\n\n\n\n","category":"function"},{"location":"AbstractAlgebra/docs/src/ytabs/#AbstractAlgebra.Generic.hooklength","page":"Partitions and Young tableaux","title":"AbstractAlgebra.Generic.hooklength","text":"hooklength(Y::YoungTableau, i, j)\n\nReturn the hook-length of an element in Y at position (i,j), i.e the number of cells in the i-th row to the right of (i,j)-th box, plus the number of cells in the j-th column below the (i,j)-th box, plus 1.\n\nReturn 0 for (i,j) not in the tableau Y.\n\nExamples\n\njulia> y = YoungTableau([4,3,1])\n┌───┬───┬───┬───┐\n│ 1 │ 2 │ 3 │ 4 │\n├───┼───┼───┼───┘\n│ 5 │ 6 │ 7 │\n├───┼───┴───┘\n│ 8 │\n└───┘\n\njulia> hooklength(y, 1,1)\n6\n\njulia> hooklength(y, 1,3)\n3\n\njulia> hooklength(y, 2,4)\n0\n\n\n\n","category":"function"},{"location":"AbstractAlgebra/docs/src/ytabs/#AbstractAlgebra.Generic.dim-Tuple{AbstractAlgebra.Generic.YoungTableau}","page":"Partitions and Young tableaux","title":"AbstractAlgebra.Generic.dim","text":"dim(Y::YoungTableau) -> BigInt\n\nReturn the dimension (using hook-length formula) of the irreducible representation of permutation group S_n associated the partition Y.part.\n\nSince the computation overflows easily BigInt is returned. You may perform the computation of the dimension in different type by calling dim(Int, Y).\n\nExamples\n\njulia> dim(YoungTableau([4,3,1]))\n70\n\njulia> dim(YoungTableau([3,1])) # the regular representation of S_4\n3\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"The character associated with Y.part can also be used to compute the dimension, but as it is expected the Murnaghan-Nakayama is much slower even though (due to caching) consecutive calls are fast:","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"julia> λ = Partition(collect(12:-1:1))\n12₁11₁10₁9₁8₁7₁6₁5₁4₁3₁2₁1₁\n\njulia> @time dim(YoungTableau(λ))\n  0.224430 seconds (155.77 k allocations: 7.990 MiB)\n9079590132732747656880081324531330222983622187548672000\n\njulia> @time dim(YoungTableau(λ))\n  0.000038 seconds (335 allocations: 10.734 KiB)\n9079590132732747656880081324531330222983622187548672000\n\njulia> G = SymmetricGroup(sum(λ))\nFull symmetric group over 78 elements\n\njulia> @time character(λ, one(G))\n  0.000046 seconds (115 allocations: 16.391 KiB)\n9079590132732747656880081324531330222983622187548672000\n\njulia> @time character(λ, one(G))\n  0.001439 seconds (195 allocations: 24.453 KiB)\n9079590132732747656880081324531330222983622187548672000","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/#Low-level-functions-and-characters","page":"Partitions and Young tableaux","title":"Low-level functions and characters","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"As mentioned above character functions use the Murnaghan-Nakayama rule for evaluation. The implementation follows","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"Dan Bernstein, The computational complexity of rules for the character table of S_n Journal of Symbolic Computation, 37 (6), 2004, p. 727-748,","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"implementing the following functions. For precise definitions and meaning please consult the paper cited.","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"Generic.partitionseq\nisrimhook(::BitVector, ::Int, ::Int)\nGeneric.MN1inner","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/#AbstractAlgebra.Generic.partitionseq","page":"Partitions and Young tableaux","title":"AbstractAlgebra.Generic.partitionseq","text":"partitionseq(lambda::Partition)\n\nReturn a sequence (as BitVector) of falses and trues constructed from lambda: tracing the lower contour of the Young Diagram associated to lambda from left to right a true is inserted for every horizontal and false for every vertical step. The sequence always starts with true and ends with false.\n\n\n\npartitionseq(seq::BitVector)\n\nReturn the essential part of the sequence seq, i.e. a subsequence starting at first true and ending at last false.\n\n\n\n","category":"function"},{"location":"AbstractAlgebra/docs/src/ytabs/#AbstractAlgebra.Generic.isrimhook-Tuple{BitArray{1},Int64,Int64}","page":"Partitions and Young tableaux","title":"AbstractAlgebra.Generic.isrimhook","text":"isrimhook(R::BitVector, idx::Integer, len::Integer)\n\nR[idx:idx+len] forms a rim hook in the Young Diagram of partition corresponding to R iff R[idx] == true and R[idx+len] == false.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ytabs/#AbstractAlgebra.Generic.MN1inner","page":"Partitions and Young tableaux","title":"AbstractAlgebra.Generic.MN1inner","text":"MN1inner(R::BitVector, mu::Partition, t::Integer, charvals)\n\nReturn the value of lambda-th irreducible character on conjugacy class of permutations represented by partition mu, where R is the (binary) partition sequence representing lambda. Values already computed are stored in charvals::Dict{Tuple{BitVector,Vector{Int}}, Int}. This is an implementation (with slight modifications) of the Murnaghan-Nakayama formula as described in\n\nDan Bernstein,\n\"The computational complexity of rules for the character table of Sn\"\n_Journal of Symbolic Computation_, 37(6), 2004, p. 727-748.\n\n\n\n","category":"function"},{"location":"AbstractAlgebra/docs/src/ytabs/#Skew-Diagrams","page":"Partitions and Young tableaux","title":"Skew Diagrams","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"Skew diagrams are formally differences of two Young diagrams. Given lambda and mu, two partitions of n+m and m (respectively). Suppose that each of cells of mu is a cell of lambda (i.e. parts of mu are no greater than the corresponding parts of lambda). Then the skew diagram denoted by lambdamu is the set theoretic difference the of sets of boxes, i.e. is a diagram with exactly n boxes:","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"Generic.SkewDiagram","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/#AbstractAlgebra.Generic.SkewDiagram","page":"Partitions and Young tableaux","title":"AbstractAlgebra.Generic.SkewDiagram","text":"SkewDiagram(lambda::Partition, mu::Partition) <: AbstractArray{Int, 2}\n\nImplements a skew diagram, i.e. a difference of two Young diagrams represented by partitions lambda and mu. (below dots symbolise the removed entries)\n\nExamples\n\njulia> l = Partition([4,3,2])\n4₁3₁2₁\n\njulia> m = Partition([3,1,1])\n3₁1₂\n\njulia> xi = SkewDiagram(l,m)\n3×4 AbstractAlgebra.Generic.SkewDiagram{Int64}:\n ⋅  ⋅  ⋅  1\n ⋅  1  1\n ⋅  1\n\n\n\n\n","category":"type"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"SkewDiagram implements array interface with the following functions:","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"size(xi::Generic.SkewDiagram)\nin(t::Tuple{Integer,Integer}, xi::Generic.SkewDiagram)\ngetindex(xi::Generic.SkewDiagram, n::Integer)","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/#Base.size-Tuple{AbstractAlgebra.Generic.SkewDiagram}","page":"Partitions and Young tableaux","title":"Base.size","text":"size(xi::SkewDiagram)\n\nReturn the size of array where xi is minimally contained. See size(Y::YoungTableau) for more details.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ytabs/#Base.in-Tuple{Tuple{Integer,Integer},AbstractAlgebra.Generic.SkewDiagram}","page":"Partitions and Young tableaux","title":"Base.in","text":"in(t::Tuple{Integer,Integer}, xi::SkewDiagram)\n\nCheck if box at position (i,j) belongs to the skew diagram xi.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ytabs/#Base.getindex-Tuple{AbstractAlgebra.Generic.SkewDiagram,Integer}","page":"Partitions and Young tableaux","title":"Base.getindex","text":"getindex(xi::SkewDiagram, n::Integer)\n\nReturn 1 if linear index n corresponds to (column-major) entry in xi.lam which is not contained in xi.mu. Otherwise return 0.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"The support for skew diagrams is very rudimentary. The following functions are available:","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/","page":"Partitions and Young tableaux","title":"Partitions and Young tableaux","text":"isrimhook(::Generic.SkewDiagram)\nleglength\nmatrix_repr(::Generic.SkewDiagram)","category":"page"},{"location":"AbstractAlgebra/docs/src/ytabs/#AbstractAlgebra.Generic.isrimhook-Tuple{AbstractAlgebra.Generic.SkewDiagram}","page":"Partitions and Young tableaux","title":"AbstractAlgebra.Generic.isrimhook","text":"isrimhook(xi::SkewDiagram)\n\nCheck if xi represents a rim-hook diagram, i.e. its diagram is edge-connected and contains no 2times 2 squares.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ytabs/#AbstractAlgebra.Generic.leglength","page":"Partitions and Young tableaux","title":"AbstractAlgebra.Generic.leglength","text":"leglength(xi::SkewDiagram[, check::Bool=true])\n\nCompute the leglength of a rim-hook xi, i.e. the number of rows with non-zero entries minus one. If check is false function will not check whether xi is actually a rim-hook.\n\n\n\n","category":"function"},{"location":"AbstractAlgebra/docs/src/ytabs/#AbstractAlgebra.Generic.matrix_repr-Tuple{AbstractAlgebra.Generic.SkewDiagram}","page":"Partitions and Young tableaux","title":"AbstractAlgebra.Generic.matrix_repr","text":"matrix_repr(xi::SkewDiagram)\n\nReturn a sparse representation of the diagram xi, i.e. a sparse array A where A[i,j] == 1 if and only if (i,j) is in xi.lam but not in xi.mu.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/polynomial/#Univariate-polynomials","page":"Univariate polynomials","title":"Univariate polynomials","text":"","category":"section"},{"location":"Nemo/docs/src/polynomial/#Introduction","page":"Univariate polynomials","title":"Introduction","text":"","category":"section"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"Nemo allow the creation of dense, univariate polynomials over any computable ring R. There are two different kinds of implementation: a generic one for the case where no specific implementation exists (provided by AbstractAlgebra.jl), and efficient implementations of polynomials over numerous specific rings, usually provided by C/C++ libraries.","category":"page"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"The following table shows each of the polynomial types available in Nemo, the base ring R, and the Julia/Nemo types for that kind of polynomial (the type information is mainly of concern to developers).","category":"page"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"Base ring Library Element type Parent type\nGeneric ring R AbstractAlgebra.jl Generic.Poly{T} Generic.PolyRing{T}\nmathbbZ Flint fmpz_poly FmpzPolyRing\nmathbbZnmathbbZ (small n) Flint nmod_poly NmodPolyRing\nmathbbZnmathbbZ (large n) Flint fmpz_mod_poly FmpzModPolyRing\nmathbbQ Flint fmpq_poly FmpqPolyRing\nmathbbZpmathbbZ (small prime p) Flint gfp_poly GFPPolyRing\nmathbbZpmathbbZ (large prime p) Flint gfp_fmpz_poly GFPFmpzPolyRing\nmathbbF_p^n (small p) Flint fq_nmod_poly FqNmodPolyRing\nmathbbF_p^n (large p) Flint fq_poly FqPolyRing\nmathbbR Arb arb_poly ArbPolyRing\nmathbbC Arb acb_poly AcbPolyRing","category":"page"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"The string representation of the variable and the base ring R of a generic polynomial is stored in its parent object. ","category":"page"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"All polynomial element types belong to the abstract type PolyElem and all of the polynomial ring types belong to the abstract type PolyRing. This enables one to write generic functions that can accept any Nemo univariate polynomial type.","category":"page"},{"location":"Nemo/docs/src/polynomial/#Polynomial-functionality","page":"Univariate polynomials","title":"Polynomial functionality","text":"","category":"section"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"All univariate polynomial types in Nemo follow the AbstractAlgebra.jl univariate polynomial interface:","category":"page"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/polynomial_rings","category":"page"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"Generic polynomials are also available, and Nemo univariate polynomial types also implement all of the same functionality.","category":"page"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"We describe here only functions that are in addition to that guaranteed by AbstractAlgebra.jl, for specific coefficient rings.","category":"page"},{"location":"Nemo/docs/src/polynomial/#Remove-and-valuation","page":"Univariate polynomials","title":"Remove and valuation","text":"","category":"section"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"evaluate2(::arb_poly, ::Integer)\nevaluate2(::arb_poly, ::Float64)\nevaluate2(::arb_poly, ::fmpz)\nevaluate2(::arb_poly, ::fmpq)\nevaluate2(::arb_poly, ::arb)\nevaluate2(::arb_poly, ::acb)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Nemo.evaluate2-Tuple{arb_poly,Integer}","page":"Univariate polynomials","title":"Nemo.evaluate2","text":"evaluate2(x::arb_poly, y::Integer)\n\nReturn a tuple p q consisting of the polynomial x evaluated at y and its derivative evaluated at y.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.evaluate2-Tuple{arb_poly,Float64}","page":"Univariate polynomials","title":"Nemo.evaluate2","text":"evaluate2(x::arb_poly, y::Float64)\n\nReturn a tuple p q consisting of the polynomial x evaluated at y and its derivative evaluated at y.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.evaluate2-Tuple{arb_poly,fmpz}","page":"Univariate polynomials","title":"Nemo.evaluate2","text":"evaluate2(x::arb_poly, y::fmpz)\n\nReturn a tuple p q consisting of the polynomial x evaluated at y and its derivative evaluated at y.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.evaluate2-Tuple{arb_poly,fmpq}","page":"Univariate polynomials","title":"Nemo.evaluate2","text":"evaluate2(x::arb_poly, y::fmpq)\n\nReturn a tuple p q consisting of the polynomial x evaluated at y and its derivative evaluated at y.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.evaluate2-Tuple{arb_poly,arb}","page":"Univariate polynomials","title":"Nemo.evaluate2","text":"evaluate2(x::arb_poly, y::arb)\n\nReturn a tuple p q consisting of the polynomial x evaluated at y and its derivative evaluated at y.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.evaluate2-Tuple{arb_poly,acb}","page":"Univariate polynomials","title":"Nemo.evaluate2","text":"evaluate2(x::arb_poly, y::acb)\n\nReturn a tuple p q consisting of the polynomial x evaluated at y and its derivative evaluated at y.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"evaluate2(::acb_poly, ::Integer)\nevaluate2(::acb_poly, ::Float64)\nevaluate2(::acb_poly, ::fmpz)\nevaluate2(::acb_poly, ::fmpq)\nevaluate2(::acb_poly, ::arb)\nevaluate2(::acb_poly, ::acb)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Nemo.evaluate2-Tuple{acb_poly,Integer}","page":"Univariate polynomials","title":"Nemo.evaluate2","text":"evaluate2(x::acb_poly, y::Integer)\n\nReturn a tuple p q consisting of the polynomial x evaluated at y and its derivative evaluated at y.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.evaluate2-Tuple{acb_poly,Float64}","page":"Univariate polynomials","title":"Nemo.evaluate2","text":"evaluate2(x::acb_poly, y::Float64)\n\nReturn a tuple p q consisting of the polynomial x evaluated at y and its derivative evaluated at y.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.evaluate2-Tuple{acb_poly,fmpz}","page":"Univariate polynomials","title":"Nemo.evaluate2","text":"evaluate2(x::acb_poly, y::fmpz)\n\nReturn a tuple p q consisting of the polynomial x evaluated at y and its derivative evaluated at y.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.evaluate2-Tuple{acb_poly,fmpq}","page":"Univariate polynomials","title":"Nemo.evaluate2","text":"evaluate2(x::acb_poly, y::fmpq)\n\nReturn a tuple p q consisting of the polynomial x evaluated at y and its derivative evaluated at y.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.evaluate2-Tuple{acb_poly,arb}","page":"Univariate polynomials","title":"Nemo.evaluate2","text":"evaluate2(x::acb_poly, y::arb)\n\nReturn a tuple p q consisting of the polynomial x evaluated at y and its derivative evaluated at y.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.evaluate2-Tuple{acb_poly,acb}","page":"Univariate polynomials","title":"Nemo.evaluate2","text":"evaluate2(x::acb_poly, y::acb)\n\nReturn a tuple p q consisting of the polynomial x evaluated at y and its derivative evaluated at y.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"Examples","category":"page"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"RR = RealField(64)\nT, z = PolynomialRing(RR, \"z\")\n   \nh = z^2 + 2z + 1\n\ns, t = evaluate2(h, RR(\"2.0 +/- 0.1\"))","category":"page"},{"location":"Nemo/docs/src/polynomial/#Signature","page":"Univariate polynomials","title":"Signature","text":"","category":"section"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"signature(::fmpz_poly)\nsignature(::fmpq_poly)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Nemo.signature-Tuple{fmpz_poly}","page":"Univariate polynomials","title":"Nemo.signature","text":"signature(f::fmpz_poly)\n\nReturn the signature of the polynomial f, i.e. a tuple (r s) such that r is the number of real roots of f and s is half the number of complex roots.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.signature-Tuple{fmpq_poly}","page":"Univariate polynomials","title":"Nemo.signature","text":"signature(f::fmpq_poly)\n\nReturn the signature of f, i.e. a tuple (r s) where r is the number of real roots of f and s is half the number of complex roots.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"Examples","category":"page"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"R, x = PolynomialRing(ZZ, \"x\")\n\nf = x^3 + 3x + 1\n\n(r, s) = signature(f)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Root-finding","page":"Univariate polynomials","title":"Root finding","text":"","category":"section"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"roots(::acb_poly)","category":"page"},{"location":"Nemo/docs/src/polynomial/#AbstractAlgebra.Generic.roots-Tuple{acb_poly}","page":"Univariate polynomials","title":"AbstractAlgebra.Generic.roots","text":"roots(x::acb_poly; target=0, isolate_real=false, initial_prec=0, max_prec=0, max_iter=0)\n\nAttempts to isolate the complex roots of the complex polynomial x by iteratively refining balls in which they lie.\n\nThis is done by increasing the working precision, starting at initial_prec. The maximal number of iterations can be set using max_iter and the maximal precision can be set using max_prec.\n\nIf isolate_real is set and x is strictly real, then the real roots will be isolated from the non-real roots. Every root will have either zero, positive or negative real part.\n\nIt is assumed that x is squarefree.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"Examples","category":"page"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"CC = ComplexField(64)\nC, y = PolynomialRing(CC, \"y\")\n\nm = y^2 + 2y + 3\nn = m + CC(\"0 +/- 0.0001\", \"0 +/- 0.0001\")\n\nr = roots(n)\n\np = y^7 - 1\n\nr = roots(n, isolate_real = true)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Construction-from-roots","page":"Univariate polynomials","title":"Construction from roots","text":"","category":"section"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"from_roots(::ArbPolyRing, ::Array{arb, 1})\nfrom_roots(::AcbPolyRing, ::Array{acb, 1})","category":"page"},{"location":"Nemo/docs/src/polynomial/#Nemo.from_roots-Tuple{ArbPolyRing,Array{arb,1}}","page":"Univariate polynomials","title":"Nemo.from_roots","text":"from_roots(R::ArbPolyRing, b::Array{arb, 1})\n\nConstruct a polynomial in the given polynomial ring from a list of its roots.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.from_roots-Tuple{AcbPolyRing,Array{acb,1}}","page":"Univariate polynomials","title":"Nemo.from_roots","text":"from_roots(R::AcbPolyRing, b::Array{acb, 1})\n\nConstruct a polynomial in the given polynomial ring from a list of its roots.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"Examples","category":"page"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"RR = RealField(64)\nR, x = PolynomialRing(RR, \"x\")\n\nxs = arb[inv(RR(i)) for i=1:5]\nf = from_roots(R, xs)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Bounding-absolute-values-of-roots","page":"Univariate polynomials","title":"Bounding absolute values of roots","text":"","category":"section"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"roots_upper_bound(::arb_poly)\nroots_upper_bound(::acb_poly)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Nemo.roots_upper_bound-Tuple{arb_poly}","page":"Univariate polynomials","title":"Nemo.roots_upper_bound","text":"roots_upper_bound(x::arb_poly) -> arb\n\nReturns an upper bound for the absolute value of all complex roots of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.roots_upper_bound-Tuple{acb_poly}","page":"Univariate polynomials","title":"Nemo.roots_upper_bound","text":"roots_upper_bound(x::acb_poly) -> arb\n\nReturns an upper bound for the absolute value of all complex roots of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Lifting","page":"Univariate polynomials","title":"Lifting","text":"","category":"section"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"When working over a residue ring it is useful to be able to lift to the base ring of the residue ring, e.g. from mathbbZnmathbbZ to mathbbZ.","category":"page"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"lift(::FmpzPolyRing, ::nmod_poly)\nlift(::FmpzPolyRing, ::gfp_poly)\nlift(::FmpzPolyRing, ::fmpz_mod_poly)\nlift(::FmpzPolyRing, ::gfp_fmpz_poly)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Nemo.lift-Tuple{FmpzPolyRing,nmod_poly}","page":"Univariate polynomials","title":"Nemo.lift","text":"function lift(R::FmpzPolyRing, y::nmod_poly)\n\nLift from a polynomial over mathbbZnmathbbZ to a polynomial over mathbbZ with minimal reduced nonnegative coefficients. The ring R specifies the ring to lift into.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.lift-Tuple{FmpzPolyRing,gfp_poly}","page":"Univariate polynomials","title":"Nemo.lift","text":"lift(R::FmpzPolyRing, y::gfp_poly)\n\nLift from a polynomial over mathbbZnmathbbZ to a polynomial over mathbbZ with minimal reduced nonnegative coefficients. The ring R specifies the ring to lift into.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.lift-Tuple{FmpzPolyRing,fmpz_mod_poly}","page":"Univariate polynomials","title":"Nemo.lift","text":"function lift(R::FmpzPolyRing, y::fmpz_mod_poly)\n\nLift from a polynomial over mathbbZnmathbbZ to a polynomial over mathbbZ with minimal reduced nonnegative coefficients. The ring R specifies the ring to lift into.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.lift-Tuple{FmpzPolyRing,gfp_fmpz_poly}","page":"Univariate polynomials","title":"Nemo.lift","text":"function lift(R::FmpzPolyRing, y::gfp_fmpz_poly)\n\nLift from a polynomial over mathbbZnmathbbZ to a polynomial over mathbbZ with minimal reduced nonnegative coefficients. The ring R specifies the ring to lift into.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"Examples","category":"page"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"R = ResidueRing(ZZ, 123456789012345678949)\nS, x = PolynomialRing(R, \"x\")\nT, y = PolynomialRing(ZZ, \"y\")\n\nf = x^2 + 2x + 1\n\na = lift(T, f)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Overlapping-and-containment","page":"Univariate polynomials","title":"Overlapping and containment","text":"","category":"section"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"Occasionally it is useful to be able to tell when inexact polynomials overlap or contain other exact or inexact polynomials. The following functions are provided for this purpose.","category":"page"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"overlaps(::arb_poly, ::arb_poly)\noverlaps(::acb_poly, ::acb_poly)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Nemo.overlaps-Tuple{arb_poly,arb_poly}","page":"Univariate polynomials","title":"Nemo.overlaps","text":"overlaps(x::arb_poly, y::arb_poly)\n\nReturn true if the coefficient balls of x overlap the coefficient balls of y, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.overlaps-Tuple{acb_poly,acb_poly}","page":"Univariate polynomials","title":"Nemo.overlaps","text":"overlaps(x::acb_poly, y::acb_poly)\n\nReturn true if the coefficient boxes of x overlap the coefficient boxes of y, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"contains(::arb_poly, ::arb_poly)\ncontains(::acb_poly, ::acb_poly)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Base.contains-Tuple{arb_poly,arb_poly}","page":"Univariate polynomials","title":"Base.contains","text":"contains(x::arb_poly, y::arb_poly)\n\nReturn true if the coefficient balls of x contain the corresponding coefficient balls of y, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Base.contains-Tuple{acb_poly,acb_poly}","page":"Univariate polynomials","title":"Base.contains","text":"contains(x::acb_poly, y::acb_poly)\n\nReturn true if the coefficient boxes of x contain the corresponding coefficient boxes of y, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"contains(::arb_poly, ::fmpz_poly)\ncontains(::arb_poly, ::fmpq_poly)\ncontains(::acb_poly, ::fmpz_poly)\ncontains(::acb_poly, ::fmpq_poly)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Base.contains-Tuple{arb_poly,fmpz_poly}","page":"Univariate polynomials","title":"Base.contains","text":"contains(x::arb_poly, y::fmpz_poly)\n\nReturn true if the coefficient balls of x contain the corresponding exact coefficients of y, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Base.contains-Tuple{arb_poly,fmpq_poly}","page":"Univariate polynomials","title":"Base.contains","text":"contains(x::arb_poly, y::fmpq_poly)\n\nReturn true if the coefficient balls of x contain the corresponding exact coefficients of y, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Base.contains-Tuple{acb_poly,fmpz_poly}","page":"Univariate polynomials","title":"Base.contains","text":"contains(x::acb_poly, y::fmpz_poly)\n\nReturn true if the coefficient boxes of x contain the corresponding exact coefficients of y, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Base.contains-Tuple{acb_poly,fmpq_poly}","page":"Univariate polynomials","title":"Base.contains","text":"contains(x::acb_poly, y::fmpq_poly)\n\nReturn true if the coefficient boxes of x contain the corresponding exact coefficients of y, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"It is sometimes also useful to be able to determine if there is a unique integer contained in the coefficient of an inexact constant polynomial.","category":"page"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"unique_integer(::arb_poly)\nunique_integer(::acb_poly)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Nemo.unique_integer-Tuple{arb_poly}","page":"Univariate polynomials","title":"Nemo.unique_integer","text":"unique_integer(x::arb_poly)\n\nReturn a tuple (t, z) where t is true if there is a unique integer contained in each of the coefficients of x, otherwise sets t to false. In the former case, z is set to the integer polynomial.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.unique_integer-Tuple{acb_poly}","page":"Univariate polynomials","title":"Nemo.unique_integer","text":"unique_integer(x::acb_poly)\n\nReturn a tuple (t, z) where t is true if there is a unique integer contained in the (constant) polynomial x, along with that integer z in case it is, otherwise sets t to false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"We also have the following functions.","category":"page"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"isreal(::acb_poly)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Base.isreal-Tuple{acb_poly}","page":"Univariate polynomials","title":"Base.isreal","text":"isreal(x::acb_poly)\n\nReturn true if all the coefficients of x are real, i.e. have exact zero imaginary parts.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"Examples","category":"page"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"RR = RealField(64)\nCC = ComplexField(64)\nR, x = PolynomialRing(RR, \"x\")\nC, y = PolynomialRing(CC, \"y\")\nZx, zx = PolynomialRing(ZZ, \"x\")\nQx, qx = PolynomialRing(QQ, \"x\")\n\nf = x^2 + 2x + 1\nh = f + RR(\"0 +/- 0.0001\")\nk = f + RR(\"0 +/- 0.0001\") * x^4\nm = y^2 + 2y + 1\nn = m + CC(\"0 +/- 0.0001\", \"0 +/- 0.0001\")\n\ncontains(h, f)\noverlaps(f, k)\ncontains(n, m)\nt, z = unique_integer(k)\nisreal(n)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Factorisation","page":"Univariate polynomials","title":"Factorisation","text":"","category":"section"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"Polynomials can be factorised over certain rings. In general we use the same format for the output as the Julia factorisation function, namely an associative array with polynomial factors as keys and exponents as values.","category":"page"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"isirreducible(::nmod_poly)\nisirreducible(::gfp_poly)\nisirreducible(::fmpz_mod_poly)\nisirreducible(::gfp_fmpz_poly)\nisirreducible(::fq_poly)\nisirreducible(::fq_nmod_poly)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Nemo.isirreducible-Tuple{nmod_poly}","page":"Univariate polynomials","title":"Nemo.isirreducible","text":"isirreducible(x::nmod_poly)\n\nReturn true if x is irreducible, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.isirreducible-Tuple{gfp_poly}","page":"Univariate polynomials","title":"Nemo.isirreducible","text":"isirreducible(x::gfp_poly)\n\nReturn true if x is irreducible, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.isirreducible-Tuple{fmpz_mod_poly}","page":"Univariate polynomials","title":"Nemo.isirreducible","text":"isirreducible(x::fmpz_mod_poly)\n\nReturn true if x is irreducible, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.isirreducible-Tuple{gfp_fmpz_poly}","page":"Univariate polynomials","title":"Nemo.isirreducible","text":"isirreducible(x::gfp_fmpz_poly)\n\nReturn true if x is irreducible, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.isirreducible-Tuple{fq_poly}","page":"Univariate polynomials","title":"Nemo.isirreducible","text":"isirreducible(x::fq_poly)\n\nReturn true if x is irreducible, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.isirreducible-Tuple{fq_nmod_poly}","page":"Univariate polynomials","title":"Nemo.isirreducible","text":"isirreducible(x::fq_nmod_poly)\n\nReturn true if x is irreducible, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"issquarefree(::nmod_poly)\nissquarefree(::gfp_poly)\nissquarefree(::fmpz_mod_poly)\nissquarefree(::gfp_fmpz_poly)\nissquarefree(::fq_poly)\nissquarefree(::fq_nmod_poly)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Nemo.issquarefree-Tuple{nmod_poly}","page":"Univariate polynomials","title":"Nemo.issquarefree","text":"issquarefree(x::nmod_poly)\n\nReturn true if x is squarefree, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.issquarefree-Tuple{gfp_poly}","page":"Univariate polynomials","title":"Nemo.issquarefree","text":"issquarefree(x::gfp_poly)\n\nReturn true if x is squarefree, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.issquarefree-Tuple{fmpz_mod_poly}","page":"Univariate polynomials","title":"Nemo.issquarefree","text":"issquarefree(x::fmpz_mod_poly)\n\nReturn true if x is squarefree, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.issquarefree-Tuple{gfp_fmpz_poly}","page":"Univariate polynomials","title":"Nemo.issquarefree","text":"issquarefree(x::gfp_fmpz_poly)\n\nReturn true if x is squarefree, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.issquarefree-Tuple{fq_poly}","page":"Univariate polynomials","title":"Nemo.issquarefree","text":"issquarefree(x::fq_poly)\n\nReturn true if x is squarefree, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.issquarefree-Tuple{fq_nmod_poly}","page":"Univariate polynomials","title":"Nemo.issquarefree","text":"issquarefree(x::fq_nmod_poly)\n\nReturn true if x is squarefree, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"factor(::fmpz_poly)\nfactor(::nmod_poly)\nfactor(::gfp_poly)\nfactor(::fmpz_mod_poly)\nfactor(::gfp_fmpz_poly)\nfactor(::fq_poly)\nfactor(::fq_nmod_poly)","category":"page"},{"location":"Nemo/docs/src/polynomial/#AbstractAlgebra.factor-Tuple{fmpz_poly}","page":"Univariate polynomials","title":"AbstractAlgebra.factor","text":"factor(x::fmpz_poly)\n\nReturns the factorization of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#AbstractAlgebra.factor-Tuple{nmod_poly}","page":"Univariate polynomials","title":"AbstractAlgebra.factor","text":"factor(x::nmod_poly)\n\nReturn the factorisation of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#AbstractAlgebra.factor-Tuple{gfp_poly}","page":"Univariate polynomials","title":"AbstractAlgebra.factor","text":"factor(x::gfp_poly)\n\nReturn the factorisation of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#AbstractAlgebra.factor-Tuple{fmpz_mod_poly}","page":"Univariate polynomials","title":"AbstractAlgebra.factor","text":"factor(x::fmpz_mod_poly)\n\nReturn the factorisation of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#AbstractAlgebra.factor-Tuple{gfp_fmpz_poly}","page":"Univariate polynomials","title":"AbstractAlgebra.factor","text":"factor(x::gfp_fmpz_poly)\n\nReturn the factorisation of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#AbstractAlgebra.factor-Tuple{fq_poly}","page":"Univariate polynomials","title":"AbstractAlgebra.factor","text":"factor(x::fq_poly)\n\nReturn the factorisation of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#AbstractAlgebra.factor-Tuple{fq_nmod_poly}","page":"Univariate polynomials","title":"AbstractAlgebra.factor","text":"factor(x::fq_nmod_poly)\n\nReturn the factorisation of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"factor_squarefree(::nmod_poly)\nfactor_squarefree(::gfp_poly)\nfactor_squarefree(::fmpz_mod_poly)\nfactor_squarefree(::gfp_fmpz_poly)\nfactor_squarefree(::fq_poly)\nfactor_squarefree(::fq_nmod_poly)","category":"page"},{"location":"Nemo/docs/src/polynomial/#AbstractAlgebra.factor_squarefree-Tuple{nmod_poly}","page":"Univariate polynomials","title":"AbstractAlgebra.factor_squarefree","text":"factor_squarefree(x::nmod_poly)\n\nReturn the squarefree factorisation of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#AbstractAlgebra.factor_squarefree-Tuple{gfp_poly}","page":"Univariate polynomials","title":"AbstractAlgebra.factor_squarefree","text":"factor_squarefree(x::gfp_poly)\n\nReturn the squarefree factorisation of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#AbstractAlgebra.factor_squarefree-Tuple{fmpz_mod_poly}","page":"Univariate polynomials","title":"AbstractAlgebra.factor_squarefree","text":"factor_squarefree(x::fmpz_mod_poly)\n\nReturn the squarefree factorisation of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#AbstractAlgebra.factor_squarefree-Tuple{gfp_fmpz_poly}","page":"Univariate polynomials","title":"AbstractAlgebra.factor_squarefree","text":"factor_squarefree(x::gfp_fmpz_poly)\n\nReturn the squarefree factorisation of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#AbstractAlgebra.factor_squarefree-Tuple{fq_poly}","page":"Univariate polynomials","title":"AbstractAlgebra.factor_squarefree","text":"factor_squarefree(x::fq_poly)\n\nReturn the squarefree factorisation of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#AbstractAlgebra.factor_squarefree-Tuple{fq_nmod_poly}","page":"Univariate polynomials","title":"AbstractAlgebra.factor_squarefree","text":"factor_squarefree(x::fq_nmod_poly)\n\nReturn the squarefree factorisation of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"factor_distinct_deg(::nmod_poly)\nfactor_distinct_deg(::gfp_poly)\nfactor_distinct_deg(::fmpz_mod_poly)\nfactor_distinct_deg(::gfp_fmpz_poly)\nfactor_distinct_deg(::fq_poly)\nfactor_distinct_deg(::fq_nmod_poly)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Nemo.factor_distinct_deg-Tuple{nmod_poly}","page":"Univariate polynomials","title":"Nemo.factor_distinct_deg","text":"factor_distinct_deg(x::nmod_poly)\n\nReturn the distinct degree factorisation of a squarefree polynomial x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.factor_distinct_deg-Tuple{gfp_poly}","page":"Univariate polynomials","title":"Nemo.factor_distinct_deg","text":"factor_distinct_deg(x::gfp_poly)\n\nReturn the distinct degree factorisation of a squarefree polynomial x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.factor_distinct_deg-Tuple{fmpz_mod_poly}","page":"Univariate polynomials","title":"Nemo.factor_distinct_deg","text":"factor_distinct_deg(x::fmpz_mod_poly)\n\nReturn the distinct degree factorisation of a squarefree polynomial x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.factor_distinct_deg-Tuple{gfp_fmpz_poly}","page":"Univariate polynomials","title":"Nemo.factor_distinct_deg","text":"factor_distinct_deg(x::fmpz_mod_poly)\n\nReturn the distinct degree factorisation of a squarefree polynomial x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.factor_distinct_deg-Tuple{fq_poly}","page":"Univariate polynomials","title":"Nemo.factor_distinct_deg","text":"factor_distinct_deg(x::fq_poly)\n\nReturn the distinct degree factorisation of a squarefree polynomial x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/#Nemo.factor_distinct_deg-Tuple{fq_nmod_poly}","page":"Univariate polynomials","title":"Nemo.factor_distinct_deg","text":"factor_distinct_deg(x::fq_nmod_poly)\n\nReturn the distinct degree factorisation of a squarefree polynomial x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"Examples","category":"page"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"R = ResidueRing(ZZ, 23)\nS, x = PolynomialRing(R, \"x\")\n\nf = x^2 + 2x + 1\ng = x^3 + 3x + 1\n\nR = factor(f*g)\nS = factor_squarefree(f*g)\nT = factor_distinct_deg((x + 1)*g*(x^5+x^3+x+1))","category":"page"},{"location":"Nemo/docs/src/polynomial/#Special-functions","page":"Univariate polynomials","title":"Special functions","text":"","category":"section"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"cyclotomic(::Int, ::fmpz_poly)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Nemo.cyclotomic-Tuple{Int64,fmpz_poly}","page":"Univariate polynomials","title":"Nemo.cyclotomic","text":"cyclotomic(n::Int, x::fmpz_poly)\n\nReturn the nth cyclotomic polynomial, defined as Phi_n(x) = prod_omega (x-omega) where omega runs over all the nth primitive roots of unity.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"swinnerton_dyer(::Int, ::fmpz_poly)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Nemo.swinnerton_dyer-Tuple{Int64,fmpz_poly}","page":"Univariate polynomials","title":"Nemo.swinnerton_dyer","text":"swinnerton_dyer(n::Int, x::fmpz_poly)\n\nReturn the Swinnerton-Dyer polynomial S_n, defined as the integer polynomial S_n = prod (x pm sqrt2 pm sqrt3 pm sqrt5 pm ldots pm sqrtp_n) where p_n denotes the n-th prime number and all combinations of signs are taken. This polynomial has degree 2^n and is irreducible over the integers (it is the minimal polynomial of sqrt2 + ldots + sqrtp_n).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"cos_minpoly(::Int, ::fmpz_poly)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Nemo.cos_minpoly-Tuple{Int64,fmpz_poly}","page":"Univariate polynomials","title":"Nemo.cos_minpoly","text":"cos_minpoly(n::Int, x::fmpz_poly)\n\nReturn the minimal polynomial of 2 cos(2 pi  n). For suitable choice of n, this gives the minimal polynomial of 2 cos(a pi) or 2 sin(a pi) for any rational a.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"theta_qexp(::Int, ::Int, ::fmpz_poly)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Nemo.theta_qexp-Tuple{Int64,Int64,fmpz_poly}","page":"Univariate polynomials","title":"Nemo.theta_qexp","text":"theta_qexp(e::Int, n::Int, x::fmpz_poly)\n\nReturn the q-expansion to length n of the Jacobi theta function raised to the power r, i.e. vartheta(q)^r where vartheta(q) = 1 + sum_k=1^infty q^k^2.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"eta_qexp(::Int, ::Int, ::fmpz_poly)","category":"page"},{"location":"Nemo/docs/src/polynomial/#Nemo.eta_qexp-Tuple{Int64,Int64,fmpz_poly}","page":"Univariate polynomials","title":"Nemo.eta_qexp","text":"eta_qexp(e::Int, n::Int, x::fmpz_poly)\n\nReturn the q-expansion to length n of the Dedekind eta function (without the leading factor q^124) raised to the power r, i.e. (q^-124 eta(q))^r = prod_k=1^infty (1 - q^k)^r. In particular, r = -1 gives the generating function of the partition function p(k), and r = 24 gives, after multiplication by q, the modular discriminant Delta(q) which generates the Ramanujan tau function tau(k).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"Examples","category":"page"},{"location":"Nemo/docs/src/polynomial/","page":"Univariate polynomials","title":"Univariate polynomials","text":"R, x = PolynomialRing(ZZ, \"x\")\nS, y = PolynomialRing(R, \"y\")\n\nh = cyclotomic(120, x)\nj = swinnerton_dyer(5, x)\nk = cos_minpoly(30, x)\nl = theta_qexp(3, 30, x)\nm = eta_qexp(24, 30, x)\no = cyclotomic(10, 1 + x + x^2)","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/#Euclidean-Ring-Interface","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"If a ring provides a meaningful Euclidean structure such that a useful Euclidean remainder can be computed practically, various additional functionality is provided by AbstractAlgebra.jl for those rings. This functionality depends on the following functions existing.","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"mod(f::MyElem, g::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"Return the Euclidean remainder of f by g. A DivideError() should be thrown if g is zero. An error should be thrown if an impossible inverse is encountered.","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"divrem(f::MyElem, g::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"Return a pair q, r consisting of the Euclidean quotient and remainder of f by g. A DivideError should be thrown if g is zero. An error should be thrown if an impossible inverse is encountered.","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"div(f::MyElem, g::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"Return the Euclidean quotient of f by g. A DivideError should be thrown if g is zero. An error should be thrown if an impossible inverse is encountered.","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"mulmod(f::MyElem, g::MyElem, m::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"Return fg pmodm.","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"powermod(f::MyElem, e::Int, m::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"Return f^e pmodm.","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"invmod(f::MyElem, m::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"Return the inverse of f modulo m. If such an inverse doesn't exist, an impossible inverse error should be thrown.","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"divides(f::MyElem, g::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"Return a pair, flag, q, where flag is set to true if g divides f, in which case the quotient is set to the quotient or flag is set to false and the quotient is set to zero in the same ring as f and g.","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"remove(f::MyElem, p::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"Return a pair v, q where p^v is the highest power of p dividing f and q is the cofactor after f is divided by this power.","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"valuation(f::MyElem, p::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"Return v where p^v is the highest power of p dividing f.","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"gcd(f::MyElem, g::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"Return a greatest common divisor of f and g.","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"lcm(f::MyElem, g::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"Return fggcd(f g) if either f or g is not zero, otherwise it throws a DivideError().","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"gcdx(f::MyElem, g::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"Return a triple d, s, t such that d = gcd(f g) and d = sf + tg, with s reduced modulo g and t reduced modulo f.","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"gcdinv(f::MyElem, g::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/euclidean/","page":"Euclidean Ring Interface","title":"Euclidean Ring Interface","text":"Return a tuple d, s such that d = gcd(f g) and s = (fd)^-1 pmodgd. Note that d = 1 iff f is invertible modulo g, in which case s = f^-1 pmodg.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Generic-univariate-polynomials","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"AbstractAlgebra.jl provides a module, implemented in src/generic/Poly.jl for generic polynomials over any commutative ring belonging to the AbstractAlgebra abstract type hierarchy.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"As well as implementing the Univariate Polynomial interface, and relevant parts of the Euclidean Ring interface for polynomials over a field, there are many additional generic algorithms implemented for such polynomial rings. We describe this generic functionality below.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"All of the generic functionality is part of a submodule of AbstractAlgebra called Generic. This is exported by default so that it is not necessary to qualify the function names with the submodule name.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Types-and-parent-objects","page":"Generic univariate polynomials","title":"Types and parent objects","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Polynomials implemented using the AbstractAlgebra generics have type Generic.Poly{T} where T is the type of elements of the coefficient ring. Internally they consist of a Julia array of coefficients and some additional fields for length and a parent object, etc. See the file src/generic/GenericTypes.jl for details.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Parent objects of such polynomials have type Generic.PolyRing{T}.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"The string representation of the variable of the polynomial ring and the base/coefficient ring R is stored in the parent object.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"The polynomial element types belong to the abstract type AbstractAlgebra.PolyElem{T} and the polynomial ring types belong to the abstract type AbstractAlgebra.PolyRing{T}. This enables one to write generic functions that can accept any AbstractAlgebra polynomial type.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Note that both the generic polynomial ring type Generic.PolyRing{T} and the abstract type it belongs to, AbstractAlgebra.PolyRing{T}, are called PolyRing. The former is a (parameterised) concrete type for a polynomial ring over a given base ring whose elements have type T. The latter is an abstract type representing all polynomial ring types in AbstractAlgebra.jl, whether generic or very specialised (e.g. supplied by a C library).","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Polynomial-ring-constructors","page":"Generic univariate polynomials","title":"Polynomial ring constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"In order to construct polynomials in AbstractAlgebra.jl, one must first construct the polynomial ring itself. This is accomplished with the following constructor.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"PolynomialRing(R::AbstractAlgebra.Ring, s::AbstractString; cached::Bool = true)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Given a base ring R and string s specifying how the generator (variable) should be printed, return a tuple S, x representing the new polynomial ring S = Rx and the generator x of the ring. By default the parent object S will depend only on R and x and will be cached. Setting the optional argument cached to false will prevent the parent object S from being cached.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"A shorthand version of this function is provided: given a base ring R, we abbreviate the constructor as follows.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"R[\"x\"]","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Here are some examples of creating polynomial rings and making use of the resulting parent objects to coerce various elements into the polynomial ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"julia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integers, x)\n\njulia> S, y = PolynomialRing(R, \"y\")\n(Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Integers, y)\n\njulia> T, z = QQ[\"z\"]\n(Univariate Polynomial Ring in z over Rationals, z)\n\njulia> f = R()\n0\n\njulia> g = R(123)\n123\n\njulia> h = S(BigInt(1234))\n1234\n\njulia> k = S(x + 1)\nx + 1\n\njulia> m = T(z + 1)\nz + 1\n","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"All of the examples here are generic polynomial rings, but specialised implementations of polynomial rings provided by external modules will also usually provide a PolynomialRing constructor to allow creation of their polynomial rings.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Basic-ring-functionality","page":"Generic univariate polynomials","title":"Basic ring functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Once a polynomial ring is constructed, there are various ways to construct polynomials in that ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"The easiest way is simply using the generator returned by the PolynomialRing constructor and build up the polynomial using basic arithmetic, as described in the Ring interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"The Julia language also has special syntax for the construction of polynomials in terms of a generator, e.g. we can write 2x instead of 2*x.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"The polynomial rings in AbstractAlgebra.jl implement the full Ring interface. Of course the entire Univariate Polynomial Ring interface is also implemented.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"We give some examples of such functionality.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"julia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integers, x)\n\njulia> S, y = PolynomialRing(R, \"y\")\n(Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Integers, y)\n\njulia> f = x^3 + 3x + 21\nx^3 + 3*x + 21\n\njulia> g = (x + 1)*y^2 + 2x + 1\n(x + 1)*y^2 + 2*x + 1\n\njulia> h = zero(S)\n0\n\njulia> k = one(R)\n1\n\njulia> isone(k)\ntrue\n\njulia> iszero(f)\nfalse\n\njulia> n = length(g)\n3\n\njulia> U = base_ring(S)\nUnivariate Polynomial Ring in x over Integers\n\njulia> V = base_ring(y + 1)\nUnivariate Polynomial Ring in x over Integers\n\njulia> v = var(S)\n:y\n\njulia> T = parent(y + 1)\nUnivariate Polynomial Ring in y over Univariate Polynomial Ring in x over Integers\n\njulia> g == deepcopy(g)\ntrue\n\njulia> t = divexact(2g, 2)\n(x + 1)*y^2 + 2*x + 1\n","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"For polynomials over a field, the Euclidean Ring interface is implemented.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"julia> R, x = PolynomialRing(QQ, \"x\")\n(Univariate Polynomial Ring in x over Rationals, x)\n\njulia> S = ResidueRing(R, x^3 + 3x + 1)\nResidue ring of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1\n\njulia> T, y = PolynomialRing(S, \"y\")\n(Univariate Polynomial Ring in y over Residue ring of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1, y)\n\njulia> f = (3*x^2 + x + 2)*y + x^2 + 1\n(3*x^2 + x + 2)*y + x^2 + 1\n\njulia> g = (5*x^2 + 2*x + 1)*y^2 + 2x*y + x + 1\n(5*x^2 + 2*x + 1)*y^2 + 2*x*y + x + 1\n\njulia> h = (3*x^3 + 2*x^2 + x + 7)*y^5 + 2x*y + 1\n(2*x^2 - 8*x + 4)*y^5 + 2*x*y + 1\n\njulia> invmod(f, g)\n(707//3530*x^2 + 2151//1765*x + 123//3530)*y - 178//1765*x^2 - 551//3530*x + 698//1765\n\njulia> mulmod(f, g, h)\n(-30*x^2 - 43*x - 9)*y^3 + (-7*x^2 - 23*x - 7)*y^2 + (4*x^2 - 10*x - 3)*y + (x^2 - 2*x)\n\njulia> powermod(f, 3, h)\n(69*x^2 + 243*x + 79)*y^3 + (78*x^2 + 180*x + 63)*y^2 + (27*x^2 + 42*x + 18)*y + 3*x^2 + 3*x + 2\n\njulia> h = mod(f, g)\n(3*x^2 + x + 2)*y + x^2 + 1\n\njulia> q, r = divrem(f, g)\n(0, (3*x^2 + x + 2)*y + x^2 + 1)\n\njulia> d = gcd(f*h, g*h)\ny + 1//11*x^2 + 6//11\n\njulia> k = gcdinv(f, h)\n(y + 1//11*x^2 + 6//11, 0)\n\njulia> m = lcm(f, h)\n(-14*x^2 - 23*x - 2)*y - 4*x^2 - 5*x + 1\n\njulia> flag, q = divides(g^2, g)\n(true, (5*x^2 + 2*x + 1)*y^2 + 2*x*y + x + 1)\n\njulia> valuation(3g^3, g) == 3\ntrue\n\njulia> val, q = remove(5g^3, g)\n(3, 5)\n\njulia> r, s, t = gcdx(g, h)\n(1, 311//3530*x^2 - 2419//3530*x + 947//1765, (707//3530*x^2 + 2151//1765*x + 123//3530)*y - 178//1765*x^2 - 551//3530*x + 698//1765)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Functions in the Euclidean Ring interface are supported over residue rings that are not fields, except that if an impossible inverse is encountered during the computation an error is thrown.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Polynomial-functionality-provided-by-AbstractAlgebra.jl","page":"Generic univariate polynomials","title":"Polynomial functionality provided by AbstractAlgebra.jl","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"The functionality listed below is automatically provided by AbstractAlgebra.jl for any polynomial module that implements the full Univariate Polynomial Ring interface. This includes AbstractAlgebra.jl's own generic polynomial rings.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"But if a C library provides all the functionality documented in the Univariate Polynomial Ring interface, then all the functions described here will also be automatically supplied by AbstractAlgebra.jl for that polynomial type.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Of course, modules are free to provide specific implementations of the functions described here, that override the generic implementation.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Basic-functionality","page":"Generic univariate polynomials","title":"Basic functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"modulus{T <: ResElem}(::PolyElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.modulus-Union{Tuple{PolyElem{T}}, Tuple{T}} where T<:ResElem","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.modulus","text":"modulus(a::AbstractAlgebra.PolyElem{T}) where {T <: ResElem}\n\nReturn the modulus of the coefficients of the given polynomial.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"leading_coefficient(::PolyElem)\ntrailing_coefficient(::PolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.leading_coefficient-Tuple{PolyElem}","page":"Generic univariate polynomials","title":"AbstractAlgebra.leading_coefficient","text":"leading_coefficient(a::Generic.PolynomialElem)\n\nReturn the leading coefficient of the given polynomial. This will be the nonzero coefficient of the term with highest degree unless the polynomial in the zero polynomial, in which case a zero coefficient is returned.\n\n\n\nleading_coefficient(p::MPolyElem)\n\nReturn the leading coefficient of the polynomial p.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.trailing_coefficient-Tuple{PolyElem}","page":"Generic univariate polynomials","title":"AbstractAlgebra.trailing_coefficient","text":"trailing_coefficient(a::Generic.PolynomialElem)\n\nReturn the trailing coefficient of the given polynomial. This will be the nonzero coefficient of the term with lowest degree unless the polynomial is the zero polynomial, in which case a zero coefficient is returned.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"constant_coefficient(::Generic.PolynomialElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.constant_coefficient-Tuple{Union{NCPolyElem{T}, PolyElem{T}} where T}","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.constant_coefficient","text":"constant_coefficient(a::Generic.PolynomialElem)\n\nReturn the constant coefficient of the given polynomial. If the polynomial is the zero polynomial, the function will return zero.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"gen(::PolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.gen-Tuple{PolyElem}","page":"Generic univariate polynomials","title":"AbstractAlgebra.gen","text":"gen(a::MPolyRing{T}, i::Int) where {T <: RingElement}\n\nReturn the i-th generator (variable) of the given polynomial ring.\n\n\n\ngen(R::AbsSeriesRing{T}) where T <: RingElement\n\nReturn the generator of the power series ring, i.e. x + O(x^n) where n is the precision of the power series ring R.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"isgen(::PolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.isgen-Tuple{PolyElem}","page":"Generic univariate polynomials","title":"AbstractAlgebra.isgen","text":"isgen(a::Generic.PolynomialElem)\n\nReturn true if the given polynomial is the constant generator of its polynomial ring, otherwise return false.\n\n\n\nisgen(x::MPoly{T}) where {T <: RingElement}\n\nReturn true if the given polynomial is a generator (variable) of the polynomial ring it belongs to.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"ismonic(::PolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.ismonic-Tuple{PolyElem}","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.ismonic","text":"ismonic(a::Generic.PolyElem)\n\nReturn true if the given polynomial is monic, i.e. has leading coefficient equal to one, otherwise return false.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"isunit(::PolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.isunit-Tuple{PolyElem}","page":"Generic univariate polynomials","title":"AbstractAlgebra.isunit","text":"isunit(a::Generic.PolynomialElem)\n\nReturn true if the given polynomial is a unit in its polynomial ring, otherwise return false.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"issquare(::PolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.issquare-Tuple{PolyElem}","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.issquare","text":"issquare(f::AbstractAlgebra.PolyElem{T}) where T <: RingElement\n\nReturn true if f is a perfect square.\n\n\n\nissquare(a::AbstractAlgebra.FracElem{T}) where T <: RingElem\n\nReturn true if a is a square.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"degree(::Generic.PolynomialElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.degree-Tuple{Union{NCPolyElem{T}, PolyElem{T}} where T}","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.degree","text":"degree(a::Generic.PolynomialElem)\n\nReturn the degree of the given polynomial. This is defined to be one less than the length, even for constant polynomials.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"ismonomial(::PolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.ismonomial-Tuple{PolyElem}","page":"Generic univariate polynomials","title":"AbstractAlgebra.ismonomial","text":"ismonomial_recursive(a::PolynomialElem)\n\nReturn true if the given polynomial is a monomial.\n\n\n\nismonomial(x::AbstractAlgebra.MPolyElem)\n\nReturn true if the given polynomial has precisely one term whose coefficient is one.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"ismonomial_recursive(::PolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.ismonomial_recursive-Tuple{PolyElem}","page":"Generic univariate polynomials","title":"AbstractAlgebra.ismonomial_recursive","text":"ismonomial_recursive(a::PolynomialElem)\n\nReturn true if the given polynomial is a monomial. This function is recursive, with all scalar types returning true.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"isterm(::PolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.isterm-Tuple{PolyElem}","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.isterm","text":"isterm(a::PolynomialElem)\n\nReturn true if the given polynomial has one term.\n\n\n\nisterm(x::MPoly)\n\nReturn true if the given polynomial has precisely one term.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"isterm_recursive(::PolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.isterm_recursive-Tuple{PolyElem}","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.isterm_recursive","text":"isterm_recursive(a::PolynomialElem)\n\nReturn true if the given polynomial has one term. This function is recursive, with all scalar types returning true.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"julia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integers, x)\n\njulia> S, y = PolynomialRing(R, \"y\")\n(Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Integers, y)\n\njulia> T, z = PolynomialRing(QQ, \"z\")\n(Univariate Polynomial Ring in z over Rationals, z)\n\njulia> U = ResidueRing(ZZ, 17)\nResidue ring of Integers modulo 17\n\njulia> V, w = PolynomialRing(U, \"w\")\n(Univariate Polynomial Ring in w over Residue ring of Integers modulo 17, w)\n\njulia> a = zero(S)\n0\n\njulia> b = one(S)\n1\n\njulia> c = BigInt(1)//2*z^2 + BigInt(1)//3\n1//2*z^2 + 1//3\n\njulia> d = x*y^2 + (x + 1)*y + 3\nx*y^2 + (x + 1)*y + 3\n\njulia> f = leading_coefficient(d)\nx\n\njulia> y = gen(S)\ny\n\njulia> g = isgen(w)\ntrue\n\njulia> m = isunit(b)\ntrue\n\njulia> n = degree(d)\n2\n\njulia> r = modulus(w)\n17\n\njulia> isterm(2y^2)\ntrue\n\njulia> ismonomial(y^2)\ntrue\n\njulia> ismonomial_recursive(x*y^2)\ntrue\n\njulia> ismonomial(x*y^2)\nfalse\n","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Iterators","page":"Generic univariate polynomials","title":"Iterators","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"An iterator is provided to return the coefficients of a univariate polynomial. The iterator is called coefficients and allows iteration over the coefficients, starting with the term of degree zero (if there is one). Note that coefficients of each degree are given, even if they are zero. This is best illustrated by example.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"julia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integers, x)\n\njulia> f = x^2 + 2\nx^2 + 2\n\njulia> C = collect(coefficients(f))\n3-element Array{Any,1}:\n 2\n 0\n 1\n\njulia> for c in coefficients(f)\n          println(c)\n       end\n2\n0\n1","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Truncation","page":"Generic univariate polynomials","title":"Truncation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"truncate(::PolyElem, ::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Base.truncate-Tuple{PolyElem,Int64}","page":"Generic univariate polynomials","title":"Base.truncate","text":"truncate(a::Generic.PolynomialElem, n::Int)\n\nReturn a truncated to n terms.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"mullow{T <: RingElem}(::PolyElem{T}, ::PolyElem{T}, ::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.mullow-Union{Tuple{T}, Tuple{PolyElem{T},PolyElem{T},Int64}} where T<:RingElem","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.mullow","text":"mullow(a::AbstractAlgebra.PolyElem{T}, b::AbstractAlgebra.PolyElem{T}, n::Int) where {T <: RingElement}\n\nReturn atimes b truncated to n terms.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"julia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integers, x)\n\njulia> S, y = PolynomialRing(R, \"y\")\n(Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Integers, y)\n\njulia> f = x*y^2 + (x + 1)*y + 3\nx*y^2 + (x + 1)*y + 3\n\njulia> g = (x + 1)*y + (x^3 + 2x + 2)\n(x + 1)*y + x^3 + 2*x + 2\n\njulia> h = truncate(f, 1)\n3\n\njulia> k = mullow(f, g, 4)\n(x^2 + x)*y^3 + (x^4 + 3*x^2 + 4*x + 1)*y^2 + (x^4 + x^3 + 2*x^2 + 7*x + 5)*y + 3*x^3 + 6*x + 6\n","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Reversal","page":"Generic univariate polynomials","title":"Reversal","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"reverse(::PolyElem, ::Int)\nreverse(::PolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Base.reverse-Tuple{PolyElem,Int64}","page":"Generic univariate polynomials","title":"Base.reverse","text":"reverse(x::Generic.PolynomialElem, len::Int)\n\nReturn the reverse of the polynomial x, thought of as a polynomial of the given length (the polynomial will be notionally truncated or padded with zeroes before the leading term if necessary to match the specified length). The resulting polynomial is normalised. If len is negative we throw a DomainError().\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/#Base.reverse-Tuple{PolyElem}","page":"Generic univariate polynomials","title":"Base.reverse","text":"reverse(x::Generic.PolynomialElem)\n\nReturn the reverse of the polynomial x, i.e. the leading coefficient of x becomes the constant coefficient of the result, etc. The resulting polynomial is normalised.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"julia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integers, x)\n\njulia> S, y = PolynomialRing(R, \"y\")\n(Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Integers, y)\n\njulia> f = x*y^2 + (x + 1)*y + 3\nx*y^2 + (x + 1)*y + 3\n\njulia> g = reverse(f, 7)\n3*y^6 + (x + 1)*y^5 + x*y^4\n\njulia> h = reverse(f)\n3*y^2 + (x + 1)*y + x\n","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Shifting","page":"Generic univariate polynomials","title":"Shifting","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"shift_left(::PolyElem, ::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.shift_left-Tuple{PolyElem,Int64}","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.shift_left","text":"shift_left(f::Generic.PolynomialElem, n::Int)\n\nReturn the polynomial f shifted left by n terms, i.e. multiplied by x^n.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"shift_right(::PolyElem, ::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.shift_right-Tuple{PolyElem,Int64}","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.shift_right","text":"shift_right(f::Generic.PolynomialElem, n::Int)\n\nReturn the polynomial f shifted right by n terms, i.e. divided by x^n.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"julia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integers, x)\n\njulia> S, y = PolynomialRing(R, \"y\")\n(Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Integers, y)\n\njulia> f = x*y^2 + (x + 1)*y + 3\nx*y^2 + (x + 1)*y + 3\n\njulia> g = shift_left(f, 7)\nx*y^9 + (x + 1)*y^8 + 3*y^7\n\njulia> h = shift_right(f, 2)\nx\n","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Square-root","page":"Generic univariate polynomials","title":"Square root","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Base.sqrt(::PolyElem{T}, ::Bool) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Base.sqrt-Union{Tuple{T}, Tuple{PolyElem{T},Bool}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic univariate polynomials","title":"Base.sqrt","text":"Base.sqrt(f::AbstractAlgebra.PolyElem{T}, check::Bool=true) where T <: RingElement\n\nReturn the square root of f if it is a perfect square, otherwise an exception is raised. If check is set to false the function assumes the input is square and may not fully check this.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"R, x = PolynomialRing(ZZ, \"x\")\ng = x^2+6*x+1\nsqrt(g^2)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Change-of-base-ring","page":"Generic univariate polynomials","title":"Change of base ring","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"change_base_ring(::Ring, ::PolyElem{T}) where T <: RingElement\nmap_coeffs(::Any, ::PolyElem{<:RingElement})","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.change_base_ring-Union{Tuple{T}, Tuple{AbstractAlgebra.Ring,PolyElem{T}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic univariate polynomials","title":"AbstractAlgebra.change_base_ring","text":"change_base_ring(R::Ring, p::PolyElem{<: RingElement}; parent::PolyRing)\n\nReturn the polynomial obtained by coercing the non-zero coefficients of p into R.\n\nIf the optional parent keyword is provided, the polynomial will be an element of parent. The caching of the parent object can be controlled via the cached keyword argument.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.map_coeffs-Tuple{Any,PolyElem{var\"#s283\"} where var\"#s283\"<:Union{RingElem, AbstractFloat, Integer, Rational}}","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.map_coeffs","text":"map_coeffs(f, p::PolyElem{<: RingElement}; parent::PolyRing)\n\nTransform the polynomial p by applying f on each non-zero coefficient.\n\nIf the optional parent keyword is provided, the polynomial will be an element of parent. The caching of the parent object can be controlled via the cached keyword argument.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"R, x = PolynomialRing(ZZ, \"x\")\ng = x^3+6*x + 1\nchange_base_ring(GF(2), g)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Pseudodivision","page":"Generic univariate polynomials","title":"Pseudodivision","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Given two polynomials a b, pseudodivision computes polynomials q and r with length(r)  length(b) such that L^d a = bq + r where d = length(a) - length(b) + 1 and L is the leading coefficient of b.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"We call q the pseudoquotient and r the pseudoremainder.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"pseudorem{T <: RingElem}(::PolyElem{T}, ::PolyElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.pseudorem-Union{Tuple{T}, Tuple{PolyElem{T},PolyElem{T}}} where T<:RingElem","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.pseudorem","text":"pseudorem(f::AbstractAlgebra.PolyElem{T}, g::AbstractAlgebra.PolyElem{T}) where {T <: RingElement}\n\nReturn the pseudoremainder of f divided by g. If g = 0 we throw a DivideError().\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"pseudodivrem{T <: RingElem}(::PolyElem{T}, ::PolyElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.pseudodivrem-Union{Tuple{T}, Tuple{PolyElem{T},PolyElem{T}}} where T<:RingElem","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.pseudodivrem","text":"pseudodivrem(f::AbstractAlgebra.PolyElem{T}, g::AbstractAlgebra.PolyElem{T}) where {T <: RingElement}\n\nReturn a tuple (q r) consisting of the pseudoquotient and pseudoremainder of f divided by g. If g = 0 we throw a DivideError().\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"julia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integers, x)\n\njulia> S, y = PolynomialRing(R, \"y\")\n(Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Integers, y)\n\njulia> f = x*y^2 + (x + 1)*y + 3\nx*y^2 + (x + 1)*y + 3\n\njulia> g = (x + 1)*y + (x^3 + 2x + 2)\n(x + 1)*y + x^3 + 2*x + 2\n\njulia> h = pseudorem(f, g)\nx^7 + 3*x^5 + 2*x^4 + x^3 + 5*x^2 + 4*x + 1\n\njulia> q, r = pseudodivrem(f, g)\n((x^2 + x)*y - x^4 - x^2 + 1, x^7 + 3*x^5 + 2*x^4 + x^3 + 5*x^2 + 4*x + 1)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Content-and-primitive-part","page":"Generic univariate polynomials","title":"Content and primitive part","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"content(::PolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.content-Tuple{PolyElem}","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.content","text":"content(a::AbstractAlgebra.PolyElem)\n\nReturn the content of a, i.e. the greatest common divisor of its coefficients.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"primpart(::PolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.primpart-Tuple{PolyElem}","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.primpart","text":"primpart(a::AbstractAlgebra.PolyElem)\n\nReturn the primitive part of a, i.e. the polynomial divided by its content.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"R, x = PolynomialRing(ZZ, \"x\")\nS, y = PolynomialRing(R, \"y\")\n\nk = x*y^2 + (x + 1)*y + 3\n\nn = content(k)\np = primpart(k*(x^2 + 1))","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Evaluation,-composition-and-substitution","page":"Generic univariate polynomials","title":"Evaluation, composition and substitution","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"evaluate{T <: RingElem}(::PolyElem{T}, ::T)\nevaluate(::PolyElem, ::Integer)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.evaluate-Union{Tuple{T}, Tuple{PolyElem{T},T}} where T<:RingElem","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.evaluate","text":"evaluate(a::AbstractAlgebra.PolyElem, b::T) where {T <: RingElement}\n\nEvaluate the polynomial expression a at the value b and return the result.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.evaluate-Tuple{PolyElem,Integer}","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.evaluate","text":"evaluate(a::AbstractAlgebra.PolyElem, b::T) where {T <: RingElement}\n\nEvaluate the polynomial expression a at the value b and return the result.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"compose(::PolyElem, ::PolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.compose-Tuple{PolyElem,PolyElem}","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.compose","text":"compose(a::AbstractAlgebra.PolyElem, b::AbstractAlgebra.PolyElem)\n\nCompose the polynomial a with the polynomial b and return the result, i.e. return acirc b.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"subst{T <: RingElem}(::PolyElem{T}, ::Any)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.subst-Union{Tuple{T}, Tuple{PolyElem{T},Any}} where T<:RingElem","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.subst","text":"subst(f::AbstractAlgebra.PolyElem{T}, a::Any) where {T <: RingElement}\n\nEvaluate the polynomial f at a. Note that a can be anything, whether a ring element or not.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"We also overload the functional notation so that the polynomial f can be evaluated at a by writing f(a).","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"julia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integers, x)\n\njulia> S, y = PolynomialRing(R, \"y\")\n(Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Integers, y)\n\n\njulia> f = x*y^2 + (x + 1)*y + 3\nx*y^2 + (x + 1)*y + 3\n\njulia> g = (x + 1)*y + (x^3 + 2x + 2)\n(x + 1)*y + x^3 + 2*x + 2\n\njulia> M = R[x + 1 2x; x - 3 2x - 1]\n[x + 1       2*x]\n[x - 3   2*x - 1]\n\njulia> k = evaluate(f, 3)\n12*x + 6\n\njulia> m = evaluate(f, x^2 + 2x + 1)\nx^5 + 4*x^4 + 7*x^3 + 7*x^2 + 4*x + 4\n\njulia> n = compose(f, g)\n(x^3 + 2*x^2 + x)*y^2 + (2*x^5 + 2*x^4 + 4*x^3 + 9*x^2 + 6*x + 1)*y + x^7 + 4*x^5 + 5*x^4 + 5*x^3 + 10*x^2 + 8*x + 5\n\njulia> p = subst(f, M)\n[3*x^3 - 3*x^2 + 3*x + 4       6*x^3 + 2*x^2 + 2*x]\n[3*x^3 - 8*x^2 - 2*x - 3   6*x^3 - 8*x^2 + 2*x + 2]\n\njulia> q = f(M)\n[3*x^3 - 3*x^2 + 3*x + 4       6*x^3 + 2*x^2 + 2*x]\n[3*x^3 - 8*x^2 - 2*x - 3   6*x^3 - 8*x^2 + 2*x + 2]\n\njulia> r = f(23)\n552*x + 26\n","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Derivative-and-integral","page":"Generic univariate polynomials","title":"Derivative and integral","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"derivative(::PolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.derivative-Tuple{PolyElem}","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.derivative","text":"derivative(a::Generic.PolynomialElem)\n\nReturn the derivative of the polynomial a.\n\n\n\nderivative(f::AbstractAlgebra.MPolyElem{T}, x::Int) where {T <: RingElement}\n\nReturn the partial derivative of f with respect to j-th variable of the polynomial ring.\n\n\n\nderivative(f::AbstractAlgebra.MPolyElem{T}, x::AbstractAlgebra.MPolyElem{T}) where T <: RingElement\n\nReturn the partial derivative of f with respect to x. The value x must be a generator of the polynomial ring of f.\n\n\n\nderivative(f::RelSeriesElem{T}) -> RelSeriesElem\n\nReturn the derivative of the power series f.\n\njulia> R, x = PowerSeriesRing(QQ, 10, \"x\")\n(Univariate power series ring in x over Rationals, x + O(x^11))\n\njulia> f = 2 + x + 3x^3\n2 + x + 3*x^3 + O(x^10)\n\njulia> derivative(f)\n1 + 9*x^2 + O(x^9)\n\n\n\nderivative(f::AbsSeriesElem{T}) -> AbsSeriesElem\n\nReturn the derivative of the power series f.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"integral{T <: Union{ResElem, FieldElem}}(::PolyElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.integral-Union{Tuple{PolyElem{T}}, Tuple{T}} where T<:Union{FieldElem, ResElem}","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.integral","text":"integral(f::RelSeriesElem{T}) -> RelSeriesElem\n\nReturn the integral of the power series f.\n\n\n\nintegral(x::AbstractAlgebra.PolyElem{T}) where {T <: Union{AbstractAlgebra.ResElem, FieldElement}}\n\nReturn the integral of the polynomial x.\n\n\n\nintegral(f::RelSeriesElem{T}) -> RelSeriesElem\n\nReturn the integral of the power series f.\n\njulia> R, x = PowerSeriesRing(QQ, 10, \"x\")\n(Univariate power series ring in x over Rationals, x + O(x^11))\n\njulia> f = 2 + x + 3x^3\n2 + x + 3*x^3 + O(x^10)\n\njulia> integral(f)\n2*x + 1//2*x^2 + 3//4*x^4 + O(x^11)\n\n\n\nintegral(f::AbsSeriesElem{T}) -> AbsSeriesElem\n\nReturn the integral of the power series f.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"julia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integers, x)\n\njulia> S, y = PolynomialRing(R, \"y\")\n(Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Integers, y)\n\njulia> T, z = PolynomialRing(QQ, \"z\")\n(Univariate Polynomial Ring in z over Rationals, z)\n\njulia> U = ResidueRing(T, z^3 + 3z + 1)\nResidue ring of Univariate Polynomial Ring in z over Rationals modulo z^3 + 3*z + 1\n\njulia> V, w = PolynomialRing(U, \"w\")\n(Univariate Polynomial Ring in w over Residue ring of Univariate Polynomial Ring in z over Rationals modulo z^3 + 3*z + 1, w)\n\njulia> f = x*y^2 + (x + 1)*y + 3\nx*y^2 + (x + 1)*y + 3\n\njulia> g = (z^2 + 2z + 1)*w^2 + (z + 1)*w - 2z + 4\n(z^2 + 2*z + 1)*w^2 + (z + 1)*w - 2*z + 4\n\njulia> h = derivative(f)\n2*x*y + x + 1\n\njulia> k = integral(g)\n(1//3*z^2 + 2//3*z + 1//3)*w^3 + (1//2*z + 1//2)*w^2 + (-2*z + 4)*w\n","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Resultant-and-discriminant","page":"Generic univariate polynomials","title":"Resultant and discriminant","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"sylvester_matrix{T <: RingElem}(::PolyElem{T}, ::PolyElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.sylvester_matrix-Union{Tuple{T}, Tuple{PolyElem{T},PolyElem{T}}} where T<:RingElem","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.sylvester_matrix","text":"sylvester_matrix(p::PolyElem, q::PolyElem)\n\nReturn the sylvester matrix of the given polynomials.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"resultant{T <: RingElem}(::PolyElem{T}, ::PolyElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.resultant-Union{Tuple{T}, Tuple{PolyElem{T},PolyElem{T}}} where T<:RingElem","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.resultant","text":"resultant(p::AbstractAlgebra.PolyElem{T}, q::AbstractAlgebra.PolyElem{T}) where {T <: RingElement}\n\nReturn the resultant of the given polynomials.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"resx{T <: RingElem}(::PolyElem{T}, ::PolyElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.resx-Union{Tuple{T}, Tuple{PolyElem{T},PolyElem{T}}} where T<:RingElem","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.resx","text":"resx(a::AbstractAlgebra.PolyElem{T}, b::AbstractAlgebra.PolyElem{T}) where {T <: RingElement}\n\nReturn a tuple (r s t) such that r is the resultant of a and b and such that r = atimes s + btimes t.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"discriminant(a::PolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.discriminant-Tuple{PolyElem}","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.discriminant","text":"discriminant(a::AbstractAlgebra.PolyElem)\n\nReturn the discriminant of the given polynomial.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"julia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integers, x)\n\njulia> S, y = PolynomialRing(R, \"y\")\n(Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Integers, y)\n\njulia> f = 3x*y^2 + (x + 1)*y + 3\n3*x*y^2 + (x + 1)*y + 3\n\njulia> g = 6(x + 1)*y + (x^3 + 2x + 2)\n(6*x + 6)*y + x^3 + 2*x + 2\n\njulia> S = sylvester_matrix(f, g)\n[    3*x           x + 1               3]\n[6*x + 6   x^3 + 2*x + 2               0]\n[      0         6*x + 6   x^3 + 2*x + 2]\n\njulia> h = resultant(f, g)\n3*x^7 + 6*x^5 - 6*x^3 + 96*x^2 + 192*x + 96\n\njulia> k = discriminant(f)\nx^2 - 34*x + 1\n","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Newton-representation","page":"Generic univariate polynomials","title":"Newton representation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"monomial_to_newton!{T <: RingElem}(::Array{T, 1}, ::Array{T, 1})","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.monomial_to_newton!-Union{Tuple{T}, Tuple{Array{T,1},Array{T,1}}} where T<:RingElem","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.monomial_to_newton!","text":"monomial_to_newton!(P::Array{T, 1}, roots::Array{T, 1}) where {T <: RingElement}\n\nConverts a polynomial p, given as an array of coefficients, in-place from its coefficients given in the standard monomial basis to the Newton basis for the roots r_0 r_1 ldots r_n-2. In other words, this determines output coefficients c_i such that c_0 + c_1(x-r_0) + c_2(x-r_0)(x-r_1) + ldots + c_n-1(x-r_0)(x-r_1)cdots(x-r_n-2) is equal to the input polynomial.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"newton_to_monomial!{T <: RingElem}(::Array{T, 1}, ::Array{T, 1})","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.newton_to_monomial!-Union{Tuple{T}, Tuple{Array{T,1},Array{T,1}}} where T<:RingElem","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.newton_to_monomial!","text":"newton_to_monomial!(P::Array{T, 1}, roots::Array{T, 1}) where {T <: RingElement}\n\nConverts a polynomial p, given as an array of coefficients, in-place from its coefficients given in the Newton basis for the roots r_0 r_1 ldots r_n-2 to the standard monomial basis. In other words, this evaluates c_0 + c_1(x-r_0) + c_2(x-r_0)(x-r_1) + ldots + c_n-1(x-r_0)(x-r_1)cdots(x-r_n-2) where c_i are the input coefficients given by p.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"julia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integers, x)\n\njulia> S, y = PolynomialRing(R, \"y\")\n(Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Integers, y)\n\njulia> f = 3x*y^2 + (x + 1)*y + 3\n3*x*y^2 + (x + 1)*y + 3\n\njulia> g = deepcopy(f)\n3*x*y^2 + (x + 1)*y + 3\n\njulia> roots = [R(1), R(2), R(3)]\n3-element Array{AbstractAlgebra.Generic.Poly{BigInt},1}:\n 1\n 2\n 3\n\njulia> monomial_to_newton!(g.coeffs, roots)\n\njulia> newton_to_monomial!(g.coeffs, roots)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Interpolation","page":"Generic univariate polynomials","title":"Interpolation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"interpolate{T <: RingElem}(::PolyRing, ::Array{T, 1}, ::Array{T, 1})","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.interpolate-Union{Tuple{T}, Tuple{PolyRing,Array{T,1},Array{T,1}}} where T<:RingElem","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.interpolate","text":"interpolate(S::AbstractAlgebra.PolyRing, x::Array{T, 1}, y::Array{T, 1}) where {T <: RingElement}\n\nGiven two arrays of values xs and ys of the same length n, find the polynomial f in the polynomial ring R of length at most n such that f has the value ys at the points xs. The values in the arrays xs and ys must belong to the base ring of the polynomial ring R. If no such polynomial exists, an exception is raised.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"julia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integers, x)\n\njulia> S, y = PolynomialRing(R, \"y\")\n(Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Integers, y)\n\njulia> xs = [R(1), R(2), R(3), R(4)]\n4-element Array{AbstractAlgebra.Generic.Poly{BigInt},1}:\n 1\n 2\n 3\n 4\n\njulia> ys = [R(1), R(4), R(9), R(16)]\n4-element Array{AbstractAlgebra.Generic.Poly{BigInt},1}:\n 1\n 4\n 9\n 16\n\njulia> f = interpolate(S, xs, ys)\ny^2\n","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#Special-functions","page":"Generic univariate polynomials","title":"Special functions","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"The following special functions can be computed for any polynomial ring. Typically one uses the generator x of a polynomial ring to get the respective special polynomials expressed in terms of that generator.","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"chebyshev_t(::Int, ::PolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.chebyshev_t-Tuple{Int64,PolyElem}","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.chebyshev_t","text":"chebyshev_t(n::Int, x::AbstractAlgebra.PolyElem)\n\nReturn the Chebyshev polynomial of the first kind T_n(x), defined by T_n(x) = cos(n cos^-1(x)).\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"chebyshev_u(::Int, ::PolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/#AbstractAlgebra.Generic.chebyshev_u-Tuple{Int64,PolyElem}","page":"Generic univariate polynomials","title":"AbstractAlgebra.Generic.chebyshev_u","text":"chebyshev_u(n::Int, x::AbstractAlgebra.PolyElem)\n\nReturn the Chebyshev polynomial of the first kind U_n(x), defined by (n+1) U_n(x) = T_n+1(x).\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/polynomial/","page":"Generic univariate polynomials","title":"Generic univariate polynomials","text":"julia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integers, x)\n\njulia> S, y = PolynomialRing(R, \"y\")\n(Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Integers, y)\n\njulia> f = chebyshev_t(20, y)\n524288*y^20 - 2621440*y^18 + 5570560*y^16 - 6553600*y^14 + 4659200*y^12 - 2050048*y^10 + 549120*y^8 - 84480*y^6 + 6600*y^4 - 200*y^2 + 1\n\njulia> g = chebyshev_u(15, y)\n32768*y^15 - 114688*y^13 + 159744*y^11 - 112640*y^9 + 42240*y^7 - 8064*y^5 + 672*y^3 - 16*y\n","category":"page"},{"location":"Hecke/docs/src/number_fields/basics/#Creation-of-number-fields","page":"-","title":"Creation of number fields","text":"","category":"section"},{"location":"Hecke/docs/src/number_fields/basics/","page":"-","title":"-","text":"CurrentModule = Hecke","category":"page"},{"location":"Hecke/docs/src/number_fields/basics/#Creation-of-simple-number-fields","page":"-","title":"Creation of simple number fields","text":"","category":"section"},{"location":"Hecke/docs/src/number_fields/basics/","page":"-","title":"-","text":"Number fields are mostly created using the function NumberField, of which number_field is an alias. To create a simple number field, the following functions can be used.","category":"page"},{"location":"Hecke/docs/src/number_fields/basics/","page":"-","title":"-","text":"NumberField(f::PolyElem{<:NumFieldElem}, s::String)\ncyclotomic_field(n::Int)\nwildanger_field(n::Int, B::fmpz)\nradical_extension(n::Int, a::NumFieldElem)","category":"page"},{"location":"Hecke/docs/src/number_fields/basics/#Nemo.NumberField-Tuple{PolyElem{var\"#s283\"} where var\"#s283\"<:NumFieldElem,String}","page":"-","title":"Nemo.NumberField","text":"NumberField(f::Poly{NumFieldElem}, s::String;\n            cached::Bool = false, check::Bool = false) -> NumField, NumFieldElem\n\nGiven an irreducible polynomial f in Kx over some number field K, this function creates the simple number field L = Kx(x) and returns (L b), where b is the class of x in L. The string s is used only for printing the primitive element b.\n\nTesting that f is irreducible can be disabled by setting the keyword argument check to false.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/basics/#Hecke.cyclotomic_field-Tuple{Int64}","page":"-","title":"Hecke.cyclotomic_field","text":"cyclotomic_field(n::Int) -> AnticNumberField, nf_elem\n\nThe n-th cyclotomic field defined by the n-th cyclotomic polynomial.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/basics/#Hecke.wildanger_field-Tuple{Int64,fmpz}","page":"-","title":"Hecke.wildanger_field","text":"wildanger_field(n::Int, B::fmpz) -> AnticNumberField, nf_elem\n\nReturns the field with defining polynomial x^n + sum_i=0^n-1 (-1)^n-iBx^i. These fields tend to have non-trivial class groups.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/basics/#Hecke.radical_extension-Tuple{Int64,NumFieldElem}","page":"-","title":"Hecke.radical_extension","text":"radical_extension(n::Int, a::NumFieldElem; s = \"_$\",\n               check = true, cached = true) -> NumField, NumFieldElem\n\nGiven an element a of a number field K and an integer n, create the simple extension of K with the defining polynomial x^n - a.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/basics/","page":"-","title":"-","text":"","category":"page"},{"location":"Hecke/docs/src/number_fields/basics/","page":"-","title":"-","text":"Many of the constructors have arguments of type Symbol or AbstractString, if used, they define the appearance in printing, and printing only. The named parameter check can be true or false, the default being true. This parameter controlls is the polynomial defining the number field is tested for irreducibility or not. Given that this can be potentially  very time consuming if the degree if large, one can disable this test. Note however, that the behaviour of Hecke is undefined if a reducible polynomial is used to define a field.","category":"page"},{"location":"Hecke/docs/src/number_fields/basics/","page":"-","title":"-","text":"The named boolean parameter cached is inherited from the underlying Nemo system. Two number fields defined using the same polynomial from the identical polynomial ring and the same (identical) symbol/ string will be identical if cached == true and different if cached == false.","category":"page"},{"location":"Hecke/docs/src/number_fields/basics/#Example","page":"-","title":"Example +","text":"","category":"section"},{"location":"Hecke/docs/src/number_fields/basics/","page":"-","title":"-","text":"using Hecke # hide\nQx, x = PolynomialRing(FlintQQ, \"x\");\nK, a = NumberField(x^2 - 10, \"a\")","category":"page"},{"location":"Hecke/docs/src/number_fields/basics/#Creation-of-non-simple-number-fields","page":"-","title":"Creation of non-simple number fields","text":"","category":"section"},{"location":"Hecke/docs/src/number_fields/basics/","page":"-","title":"-","text":"NumberField(::Vector{PolyElem{<:Union{NumFieldElem, fmpq}}}, ::String)","category":"page"},{"location":"Hecke/docs/src/number_fields/basics/#Nemo.NumberField-Tuple{Array{PolyElem{var\"#s700\"} where var\"#s700\"<:Union{fmpq, NumFieldElem},1},String}","page":"-","title":"Nemo.NumberField","text":"NumberField(f::Vector{PolyElem{<:NumFieldElem}}, s::String=\"_\\$\", check = true)\n                                          -> NumField, Vector{NumFieldElem}\n\nGiven a list f_1 ldots f_n of univariate polynomials in Kx over some number field K, constructs the extension Kx_1 ldots x_n(f_1(x_1) ldots f_n(x_n)).\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/basics/","page":"-","title":"-","text":"","category":"page"},{"location":"Hecke/docs/src/number_fields/basics/#Example-2","page":"-","title":"Example +","text":"","category":"section"},{"location":"Hecke/docs/src/number_fields/basics/","page":"-","title":"-","text":"using Hecke # hide\nQx, x = PolynomialRing(FlintQQ, \"x\");\nK, g = number_field([x^2-2, x^2-3, x^2-5])\ng[1]^2\nminpoly(g[1] + g[2])","category":"page"},{"location":"Hecke/docs/src/number_fields/basics/#Conversion","page":"-","title":"Conversion","text":"","category":"section"},{"location":"Hecke/docs/src/number_fields/basics/","page":"-","title":"-","text":"absolute_simple_field(K::NumField)\nsimple_extension(::NonSimpleNumField)","category":"page"},{"location":"Hecke/docs/src/number_fields/basics/#Hecke.absolute_simple_field-Tuple{NumField}","page":"-","title":"Hecke.absolute_simple_field","text":"absolute_simple_field(L::NumField) -> NumField, Map\n\nGiven a number field L, this function returns an absolute simple number field MmathbfQ together with a mathbfQ-linear isomorphism M to K.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/basics/#Hecke.simple_extension-Tuple{NonSimpleNumField}","page":"-","title":"Hecke.simple_extension","text":"simple_extension(L::NonSimpleNumField) -> SimpleNumField, Map\n\nGiven a non-simple extension LK, this function computes a simple extension MK and a K-linear isomorphism M to L.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/basics/#Invariants","page":"-","title":"Invariants","text":"","category":"section"},{"location":"Hecke/docs/src/number_fields/basics/","page":"-","title":"-","text":"basis(::SimpleNumField)\nbasis(::NonSimpleNumField)\nissimple(::NumField)\nisabsolute(::NumField)\ndegree(::NumField)\ndiscriminant(::SimpleNumField)\nabsolute_discriminant(::SimpleNumField)\ndefining_polynomial(::SimpleNumField)","category":"page"},{"location":"Hecke/docs/src/number_fields/basics/#AbstractAlgebra.Generic.basis-Tuple{SimpleNumField}","page":"-","title":"AbstractAlgebra.Generic.basis","text":"basis(L::SimpleNumField) -> Vector{NumFieldElem}\n\nReturns the canonical basis of a simple extension LK, that is, the elements 1adotsca^d - 1, where d is the degree of K and a the primitive element.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/basics/#AbstractAlgebra.Generic.basis-Tuple{NonSimpleNumField}","page":"-","title":"AbstractAlgebra.Generic.basis","text":"basis(L::NonSimpleNumField) -> Vector{NumFieldElem}\n\nReturns the canonical basis of a non-simple extension LK. If L = K(a_1dotsca_n) where each a_i has degree d_i, then the basis will be a_1^i_1dotsm a_d^i_d with 0 leq i_j d_j - 1 for 1 leq j leq n.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/basics/#Hecke.issimple-Tuple{NumField}","page":"-","title":"Hecke.issimple","text":"issimple(L::NumField) -> Bool\n\nGiven a number field LK this function returns whether L is simple, that is, whether LK is defined by a univariate polynomial$.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/basics/#Hecke.isabsolute-Tuple{NumField}","page":"-","title":"Hecke.isabsolute","text":"isabsolute(L::NumField) -> Bool\n\nReturns whether L is an absolute extension, that is, whether the base field of L is mathbfQ.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/basics/#AbstractAlgebra.Generic.degree-Tuple{NumField}","page":"-","title":"AbstractAlgebra.Generic.degree","text":"degree(L::NumField) -> Int\n\nGiven a number field LK, this function returns the degree of L over K.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/basics/#AbstractAlgebra.Generic.discriminant-Tuple{SimpleNumField}","page":"-","title":"AbstractAlgebra.Generic.discriminant","text":"discriminant(L::SimpleNumField) -> NumFieldElem\n\nThe discriminant of the defining polynomial of L, not the discriminant of the maximal order of L.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/basics/#Hecke.absolute_discriminant-Tuple{SimpleNumField}","page":"-","title":"Hecke.absolute_discriminant","text":"absolute_discriminant(L::SimpleNumField, QQ) -> fmpq\n\nThe absolute discriminant of the defining polynomial of L, not the discriminant of the maximal order of L. This is the norm of the discriminant times the d-th power of the discriminant of the base field, where d is the degree of L.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/basics/#Hecke.defining_polynomial-Tuple{SimpleNumField}","page":"-","title":"Hecke.defining_polynomial","text":"defining_polynomial(L::SimpleNumField) -> PolyElem\n\nGiven a simple number field LK, constructed as L = Kx(f), this function returns f.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/basics/","page":"-","title":"-","text":"","category":"page"},{"location":"Hecke/docs/src/number_fields/basics/#Subfields","page":"-","title":"Subfields","text":"","category":"section"},{"location":"Hecke/docs/src/number_fields/basics/","page":"-","title":"-","text":"issubfield(::SimpleNumField, ::SimpleNumField)\nisisomorphic(::SimpleNumField, ::SimpleNumField)","category":"page"},{"location":"Hecke/docs/src/number_fields/basics/#Hecke.issubfield-Tuple{SimpleNumField,SimpleNumField}","page":"-","title":"Hecke.issubfield","text":"issubfield(K::SimpleNumField, L::SimpleNumField) -> Bool, Map\n\nReturns true and an injection from K to L if K is a subfield of L. Otherwise the function returns false and a morphism mapping everything to 0.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/basics/#AbstractAlgebra.Generic.isisomorphic-Tuple{SimpleNumField,SimpleNumField}","page":"-","title":"AbstractAlgebra.Generic.isisomorphic","text":"isisomorphic(K::SimpleNumField, L::SimpleNumField) -> Bool, Map\n\nReturns true and an isomorphism from K to L if K and L are isomorphic. Otherwise the function returns false and a morphism mapping everything to 0.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/basics/","page":"-","title":"-","text":"","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#Quadratic-and-hermitian-lattices","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/lattices/","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"CurrentModule = Hecke","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#Creation-of-lattices","page":"Quadratic and hermitian lattices","title":"Creation of lattices","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/lattices/","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"quadratic_lattice(::NumField, ::MatElem; gram_ambient_space = nothing)\nquadratic_lattice(::NumField, ::PMat; gram_ambient_space = nothing)\nhermitian_lattice(::NumField, ::MatElem; gram_ambient_space = nothing)\nhermitian_lattice(::NumField, ::PMat; gram_ambient_space = nothing)","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.quadratic_lattice-Tuple{NumField,MatElem}","page":"Quadratic and hermitian lattices","title":"Hecke.quadratic_lattice","text":"quadratic_lattice(K::NumField, B::MatElem; gram_ambient_space = F) -> QuadLat\n\nGiven a number field K and a matrix B, returns the quadratic lattice spanned by the rows of B inside the quadratic space over K with gram matrix F.\n\nIf F is not supplied, the gram matrix of the ambient space will be the identity matrix.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.quadratic_lattice-Tuple{NumField,Hecke.PMat}","page":"Quadratic and hermitian lattices","title":"Hecke.quadratic_lattice","text":"quadratic_lattice(K::NumField, B::PMat; gram_ambient_space = F) -> QuadLat\n\nGiven a number field K and a pseudo-matrix B, returns the quadratic lattice spanned by the pseudo-matrix B inside the quadratic space over K with gram matrix F.\n\nIf F is not supplied, the gram matrix of the ambient space will be the identity matrix.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.hermitian_lattice-Tuple{NumField,MatElem}","page":"Quadratic and hermitian lattices","title":"Hecke.hermitian_lattice","text":"hermitian_lattice(K::NumField, B::MatElem; gram_ambient_space = F) -> HermLat\n\nGiven a number field K and a matrix B, returns the hermitian lattice spanned by the rows of B inside the hermitian space over K with gram matrix F.\n\nIf F is not supplied, the gram matrix of the ambient space will be the identity matrix.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.hermitian_lattice-Tuple{NumField,Hecke.PMat}","page":"Quadratic and hermitian lattices","title":"Hecke.hermitian_lattice","text":"hermitian_lattice(K::NumField, B::PMat; gram_ambient_space = F) -> HermLat\n\nGiven a number field K and a pseudo-matrix B, returns the hermitian lattice spanned by the pseudo-matrix B inside the hermitian space over K with gram matrix F.\n\nIf F is not supplied, the gram matrix of the ambient space will be the identity matrix.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#Basic-invariants","page":"Quadratic and hermitian lattices","title":"Basic invariants","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/lattices/","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"ambient_space(L::AbsLat)\nrational_span(::AbsLat)\ndiagonal(L::AbsLat)\nfixed_field(L::AbsLat)\ninvolution(::AbsLat)\nrank(L::AbsLat)\ndegree(L::AbsLat)\ngram_matrix_of_basis(L::AbsLat)\ngenerators(L::AbsLat; minimal::Bool = false)\ndiscriminant(L::AbsLat)\npseudo_matrix(L::AbsLat)\ncoefficient_ideals(L::AbsLat)\nbasis_matrix(L::AbsLat)\nabsolute_basis(L::AbsLat)\nabsolute_basis_matrix(L::AbsLat)","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.ambient_space-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Hecke.ambient_space","text":"ambient_space(L::AbsLat) -> AbsSpace\n\nReturns the ambient space of L. If the ambient space is not known, an error is raised.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.rational_span-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Hecke.rational_span","text":"rational_span(L::AbsLat) -> AbsSpace\n\nReturns the rational span of L.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.diagonal-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Hecke.diagonal","text":"diagonal(A::Mat{T}) -> Vector{T}\n\nReturns the diagonal of A as an array.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.fixed_field-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Hecke.fixed_field","text":"fixed_field(L::AbsLat) -> NumField\n\nReturns the fixed field of the involution of L.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.involution-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Hecke.involution","text":"involution(L::AbsLat) -> Map\n\nReturns the involution of the rational span of L.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#LinearAlgebra.rank-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"LinearAlgebra.rank","text":"rank(L::AbsLat) -> Int\n\nReturns the rank of L, that is the dimension of the rational span of L.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#AbstractAlgebra.Generic.degree-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"AbstractAlgebra.Generic.degree","text":"degree(L::AbsLat) -> Int\n\nReturns the dimension of the ambient space of L.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.generators-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Hecke.generators","text":"generators(L::AbsLat; minimal = false) -> Vector{Vector}\n\nReturns a set of generators of L over the base ring of L.\n\nIf minimal == true, the number of generators is minimal. Note that computing minimal generators is expensive.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#AbstractAlgebra.Generic.discriminant-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"AbstractAlgebra.Generic.discriminant","text":"discriminant(L::AbsLat) -> NfOrdFracIdl\n\nReturns the discriminant of L, that is, the generalized index ideal L^  L.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.pseudo_matrix-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Hecke.pseudo_matrix","text":"pseudo_matrix(L::AbsLat) -> PMat\n\nReturns the basis pseudo-matrix of L.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.coefficient_ideals-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Hecke.coefficient_ideals","text":"coefficient_ideals(L::Abs) -> Vector{NfOrdIdl}\n\nReturns the coefficient ideals of the pseudo-basis of L.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.absolute_basis-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Hecke.absolute_basis","text":"absolute_basis(L::AbsLat) -> Vector\n\nReturns a mathbfZ-basis of L.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.absolute_basis_matrix-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Hecke.absolute_basis_matrix","text":"absolute_basis_matrix(L::AbsLat) -> MatElem\n\nReturns a mathbfZ-basis matrix of L.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#Rational-invariants","page":"Quadratic and hermitian lattices","title":"Rational invariants","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/lattices/","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"hasse_invariant(L::QuadLat, p)\nwitt_invariant(L::QuadLat, p::NfAbsOrdIdl)\nisrationally_equivalent(::AbsLat, ::AbsLat, ::NfAbsOrdIdl)\nisrationally_equivalent(L::AbsLat, M::AbsLat)","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.hasse_invariant-Tuple{QuadLat,Any}","page":"Quadratic and hermitian lattices","title":"Hecke.hasse_invariant","text":"hasse_invariant(L::AbsLat, p::Union{InfPlc, NfOrdIdl}) -> Int\n\nReturns the Hasse invariant of the rational span of L at p. The lattice must be quadratic.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.witt_invariant-Tuple{QuadLat,NfAbsOrdIdl}","page":"Quadratic and hermitian lattices","title":"Hecke.witt_invariant","text":"witt_invariant(L::AbsLat, p::Union{InfPlc, NfOrdIdl}) -> Int\n\nReturns the Witt invariant of the rational span of L at p. The lattice must be quadratic.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.isrationally_equivalent-Tuple{Hecke.AbsLat,Hecke.AbsLat,NfAbsOrdIdl}","page":"Quadratic and hermitian lattices","title":"Hecke.isrationally_equivalent","text":"isrationally_equivalent(L::AbsLat, M::AbsLat, p::Union{InfPlc, NfOrdIdl})\n                                                                     -> Bool\n\nReturns whether the rational spans of L and M are equivalent over the completion at mathfrak p.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.isrationally_equivalent-Tuple{Hecke.AbsLat,Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Hecke.isrationally_equivalent","text":"isrationally_equivalent(L::AbsLat, M::AbsLat)\n                                        -> Bool\n\nReturns whether the rational spans of L and M are equivalent.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#Definiteness","page":"Quadratic and hermitian lattices","title":"Definiteness","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/lattices/","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"ispositive_definite(L::AbsLat)\nisnegative_definite(L::AbsLat)\nisdefinite(L::AbsLat)\ncan_scale_totally_positive(L::AbsLat)","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.ispositive_definite-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Hecke.ispositive_definite","text":"ispositive_definite(L::AbsLat) -> Bool\n\nReturns whether the rational span of L is positive definite.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.isnegative_definite-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Hecke.isnegative_definite","text":"isnegative_definite(L::AbsLat) -> Bool\n\nReturns whether the rational span of L is negative definite.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.isdefinite-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Hecke.isdefinite","text":"isdefinite(L::AbsLat) -> Bool\n\nReturns whether the rational span of L is definite.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.can_scale_totally_positive-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Hecke.can_scale_totally_positive","text":"can_scale_totally_positive(L::AbsLat) -> Bool, NumFieldElem\n\nReturns whether there is a totally positive rescaled lattice of L. If so, the second return value is an element a such that L^a is totally positive.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#Module-operations","page":"Quadratic and hermitian lattices","title":"Module operations","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/lattices/","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"Base.:(+)(::AbsLat, M::AbsLat)\nintersect(L::AbsLat, M::AbsLat)\nBase.:(*)(::NumFieldElem, ::AbsLat)\nBase.:(*)(::NfOrdIdl, ::AbsLat)\nBase.:(*)(::NfOrdFracIdl, ::AbsLat)\nrescale(::AbsLat, ::NumFieldElem)\ndual(::AbsLat)","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#Base.:*-Tuple{NumFieldElem,Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Base.:*","text":"*(a::NumFieldElem, M::AbsLat) -> AbsLat\n\nReturns the lattice aM inside the ambient space of M.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Base.:*-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem},Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Base.:*","text":"*(a::NfOrdIdl, M::AbsLat) -> AbsLat\n\nReturns the lattice aM inside the ambient space of M.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Base.:*-Tuple{Hecke.NfAbsOrdFracIdl{AnticNumberField,nf_elem},Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Base.:*","text":"*(a::NfOrdFracIdl, M::AbsLat) -> AbsLat\n\nReturns the lattice aM inside the ambient space of M.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.rescale-Tuple{Hecke.AbsLat,NumFieldElem}","page":"Quadratic and hermitian lattices","title":"Hecke.rescale","text":"rescale(L::AbsLat, a::NumFieldElem) -> AbsLat\n\nReturns the rescaled lattice L^a. Note that this has a different ambient space than L.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.dual-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Hecke.dual","text":"dual(L::AbsLat) -> AbsLat\n\nReturns the dual lattice of L.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#Invariants","page":"Quadratic and hermitian lattices","title":"Invariants","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/lattices/","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"norm(::AbsLat)\nscale(L::AbsLat)\nisintegral(L::AbsLat)\nvolume(L::AbsLat)\nismodular(L::AbsLat)","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#LinearAlgebra.norm-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"LinearAlgebra.norm","text":"norm(L::AbsLat) -> NfOrdFracIdl\n\nReturns the norm of L. This is a fractional ideal of the fixed field of L.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.scale-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Hecke.scale","text":"scale(L::AbsLat) -> NfOrdFracIdl\n\nReturns the scale of L.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.isintegral-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Hecke.isintegral","text":"isintegral(L::AbsLat) -> Bool\n\nReturns whether the lattice L is integral.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.volume-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Hecke.volume","text":"volume(L::AbsLat) -> NfOrdFracIdl\n\nReturns the volume of L.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.ismodular-Tuple{Hecke.AbsLat}","page":"Quadratic and hermitian lattices","title":"Hecke.ismodular","text":"ismodular(L::AbsLat) -> Bool, NfOrdFracIdl\n\nReturns whether L is modular. In this case, the second return value is a fractional ideal mathfrak a such that mathfrak a L^ = L, where L^ is the dual of L.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#Local-properties","page":"Quadratic and hermitian lattices","title":"Local properties","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/lattices/","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"local_basis_matrix(L::AbsLat, p; type::Symbol = :any)\nismodular(L::AbsLat, p)\nbad_primes(L::AbsLat; even::Bool = false)\njordan_decomposition(L::AbsLat, p::NfOrdIdl)\nislocally_isometric(::AbsLat, ::AbsLat, ::NfOrdIdl)","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.local_basis_matrix-Tuple{Hecke.AbsLat,Any}","page":"Quadratic and hermitian lattices","title":"Hecke.local_basis_matrix","text":"local_basis_matrix(L::AbsLat, p::NfOrdIdl; type = :any) -> MatElem\n\nGiven a prime ideal mathfrak p and a lattice L, this function returns a basis matrix of lattice M such that M_mathfrakp = L_mathfrakp.\n\nIf type == :submodule, the lattice L will be a sublattice of M.\nIf type == :supermodule, the lattice L will be a superlattice of M.\nIf type == :any, there may not be any containment relation between M and L.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.jordan_decomposition-Tuple{Hecke.AbsLat,NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Quadratic and hermitian lattices","title":"Hecke.jordan_decomposition","text":"jordan_decomposition(L::AbsLat, p::NfOrdIdl)\n                            -> Vector{MatElem}, Vector{MatElem}, Vector{Int}\n\nReturns a Jordan decomposition of the completion of L at mathfrak p.\n\nThe return value consists of three lists (M_i)_i, (G_i)_i and (s_i)_i of the same length r. The completions of the row spans of the matrices M_i yield a Jordan decomposition of L_mathfrakp into modular sublattices L_i with gram matrices G_i and scale of mathfrakp-adic valuation s_i.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.islocally_isometric-Tuple{Hecke.AbsLat,Hecke.AbsLat,NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Quadratic and hermitian lattices","title":"Hecke.islocally_isometric","text":"islocally_isometric(L::AbsLat, M::AbsLat, p::NfOrdIdl) -> Bool\n\nReturns whether the completions of L and M at the prime ideal mathfrakp are locally isometric.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#Genera","page":"Quadratic and hermitian lattices","title":"Genera","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/lattices/#Creation-of-genera-from-lattices","page":"Quadratic and hermitian lattices","title":"Creation of genera from lattices","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/lattices/","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"genus(L::HermLat, p)\ngenus(L::HermLat)","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.genus-Tuple{HermLat,Any}","page":"Quadratic and hermitian lattices","title":"Hecke.genus","text":"genus(L::HermLat, p::NfOrdIdl) -> LocalGenusHerm\n\nReturns the genus of L at the prime ideal mathfrak p.\n\nSee [Kir16, Definition 8.3.1].\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.genus-Tuple{HermLat}","page":"Quadratic and hermitian lattices","title":"Hecke.genus","text":"genus(L::HermLat) -> GenusHerm\n\nGiven a Hermitian lattice, return the genus it belongs to.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#Properties-of-genera","page":"Quadratic and hermitian lattices","title":"Properties of genera","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/lattices/","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"rank(G::LocalGenusHerm)\nrank(G::LocalGenusHerm, i::Int)\nranks(G::LocalGenusHerm)\ndet(G::LocalGenusHerm)\ndet_representative(G::LocalGenusHerm)\ngram_matrix(G::LocalGenusHerm)\nprimes(G::GenusHerm)","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#LinearAlgebra.rank-Tuple{Hecke.LocalGenusHerm}","page":"Quadratic and hermitian lattices","title":"LinearAlgebra.rank","text":"rank(G::LocalGenusHerm) -> Int\n\nGiven a genus symbol G, return the rank of a lattice in G.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#LinearAlgebra.rank-Tuple{Hecke.LocalGenusHerm,Int64}","page":"Quadratic and hermitian lattices","title":"LinearAlgebra.rank","text":"rank(G::LocalGenusHerm, i::Int)\n\nGiven a genus symbol for Hermitian lattices over EK, return the rank of the ith Jordan block of G.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.ranks-Tuple{Hecke.LocalGenusHerm}","page":"Quadratic and hermitian lattices","title":"Hecke.ranks","text":"ranks(G::LocalGenusHerm)\n\nGiven a genus symbol for Hermitian lattices over EK, return the ranks of the Jordan blocks of G.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#LinearAlgebra.det-Tuple{Hecke.LocalGenusHerm}","page":"Quadratic and hermitian lattices","title":"LinearAlgebra.det","text":"det(G::LocalGenusHerm) -> Int\n\nGiven a genus symbol G, return the determinant of a lattice in G. This will be 1 or -1 depending on whether the determinant is a local norm or not.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.det_representative-Tuple{Hecke.LocalGenusHerm}","page":"Quadratic and hermitian lattices","title":"Hecke.det_representative","text":"det_representative(G::LocalGenusHerm) -> NumFieldElem\n\nReturn a representative for the norm class of the determinant of G.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.gram_matrix-Tuple{Hecke.LocalGenusHerm}","page":"Quadratic and hermitian lattices","title":"Hecke.gram_matrix","text":"gram_matrix(G::LocalGenusHerm)\n\nReturn a matrix M, such that a lattice with Gram matrix M is an element of the given genus.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.primes-Tuple{Hecke.GenusHerm}","page":"Quadratic and hermitian lattices","title":"Hecke.primes","text":"primes(G::GenusHerm) -> Vector{NfOrdIdl}\n\nReturn the primes of a global genus symbol.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#Check-if-lattice-is-contained-in-genus","page":"Quadratic and hermitian lattices","title":"Check if lattice is contained in genus","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/lattices/","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"Base.in(L::HermLat, G::LocalGenusHerm)\nBase.in(L::HermLat, G::GenusHerm)","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#Base.in-Tuple{HermLat,Hecke.LocalGenusHerm}","page":"Quadratic and hermitian lattices","title":"Base.in","text":"in(L::HermLat, G::LocalGenusHerm) -> Bool\n\nTest if the lattice L is contained in the local genus G.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/#Base.in-Tuple{HermLat,Hecke.GenusHerm}","page":"Quadratic and hermitian lattices","title":"Base.in","text":"in(L::HermLat, G::GenusHerm) -> Bool\n\nTest if the lattice L is contained in the genus G.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/quad_forms/lattices/","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#Creating-representatives","page":"Quadratic and hermitian lattices","title":"Creating representatives","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/lattices/","page":"Quadratic and hermitian lattices","title":"Quadratic and hermitian lattices","text":"representative(G::LocalGenusHerm)","category":"page"},{"location":"Hecke/docs/src/quad_forms/lattices/#Hecke.representative-Tuple{Hecke.LocalGenusHerm}","page":"Quadratic and hermitian lattices","title":"Hecke.representative","text":"representative(G::LocalGenusHerm) -> HermLat\n\nGiven a local genus, return a Hermitian lattice contained in this genus.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/free_module/","page":"Free Modules and Vector Spaces","title":"Free Modules and Vector Spaces","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/free_module/#Free-Modules-and-Vector-Spaces","page":"Free Modules and Vector Spaces","title":"Free Modules and Vector Spaces","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/free_module/","page":"Free Modules and Vector Spaces","title":"Free Modules and Vector Spaces","text":"AbstractAlgebra allows the construction of the free module of any rank over any Euclidean ring and the vector space of any dimension over a field. By default the system considers the free module of a given rank over a given ring or vector space of given dimension over a field to be unique.","category":"page"},{"location":"AbstractAlgebra/docs/src/free_module/#Types-and-parents","page":"Free Modules and Vector Spaces","title":"Types and parents","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/free_module/","page":"Free Modules and Vector Spaces","title":"Free Modules and Vector Spaces","text":"AbstractAlgebra provides the type FreeModule{T} for free modules, where T is the type of the elements of the ring R over which the module is built. The type FreeModule{T} belongs to AbstractAlgebra.FPModule{T}.","category":"page"},{"location":"AbstractAlgebra/docs/src/free_module/","page":"Free Modules and Vector Spaces","title":"Free Modules and Vector Spaces","text":"Vector spaces are simply free modules over a field.","category":"page"},{"location":"AbstractAlgebra/docs/src/free_module/","page":"Free Modules and Vector Spaces","title":"Free Modules and Vector Spaces","text":"The free module of a given rank over a given ring is made unique on the system by caching them (unless an optional cache parameter is set to false).","category":"page"},{"location":"AbstractAlgebra/docs/src/free_module/","page":"Free Modules and Vector Spaces","title":"Free Modules and Vector Spaces","text":"See src/generic/GenericTypes.jl for an example of how to implement such a cache (which usually makes use of a dictionary).","category":"page"},{"location":"AbstractAlgebra/docs/src/free_module/#Functionality-for-free-modules","page":"Free Modules and Vector Spaces","title":"Functionality for free modules","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/free_module/","page":"Free Modules and Vector Spaces","title":"Free Modules and Vector Spaces","text":"As well as implementing the entire module interface, free modules provide the following functionality.","category":"page"},{"location":"AbstractAlgebra/docs/src/free_module/#Constructors","page":"Free Modules and Vector Spaces","title":"Constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/free_module/","page":"Free Modules and Vector Spaces","title":"Free Modules and Vector Spaces","text":"FreeModule(R::AbstractAlgebra.Ring, rank::Int)\nVectorSpace(F::AbstractAlgebra.Field, dim::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/free_module/#AbstractAlgebra.FreeModule-Tuple{AbstractAlgebra.Ring,Int64}","page":"Free Modules and Vector Spaces","title":"AbstractAlgebra.FreeModule","text":"FreeModule(R::NCRing, rank::Int; cached::Bool = true)\n\nReturn the free module over the ring R with the given rank.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/free_module/#AbstractAlgebra.VectorSpace-Tuple{AbstractAlgebra.Field,Int64}","page":"Free Modules and Vector Spaces","title":"AbstractAlgebra.VectorSpace","text":"VectorSpace(R::Field, dim::Int; cached::Bool = true)\n\nReturn the vector space over the field R with the given dimension.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/free_module/","page":"Free Modules and Vector Spaces","title":"Free Modules and Vector Spaces","text":"Construct the free module/vector space of given rank/dimension.","category":"page"},{"location":"AbstractAlgebra/docs/src/free_module/","page":"Free Modules and Vector Spaces","title":"Free Modules and Vector Spaces","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/free_module/","page":"Free Modules and Vector Spaces","title":"Free Modules and Vector Spaces","text":"julia> M = FreeModule(ZZ, 3)\nFree module of rank 3 over Integers\n\njulia> V = VectorSpace(QQ, 2)\nVector space of dimension 2 over Rationals\n","category":"page"},{"location":"AbstractAlgebra/docs/src/free_module/#Basic-manipulation","page":"Free Modules and Vector Spaces","title":"Basic manipulation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/free_module/","page":"Free Modules and Vector Spaces","title":"Free Modules and Vector Spaces","text":"rank(M::Generic.FreeModule{T}) where T <: AbstractAlgebra.RingElem\ndim(V::Generic.FreeModule{T}) where T <: AbstractAlgebra.FieldElem\nbasis(V::Generic.FreeModule{T}) where T <: AbstractAlgebra.FieldElem","category":"page"},{"location":"AbstractAlgebra/docs/src/free_module/","page":"Free Modules and Vector Spaces","title":"Free Modules and Vector Spaces","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/free_module/","page":"Free Modules and Vector Spaces","title":"Free Modules and Vector Spaces","text":"julia> M = FreeModule(ZZ, 3)\nFree module of rank 3 over Integers\n\njulia> V = VectorSpace(QQ, 2)\nVector space of dimension 2 over Rationals\n\njulia> rank(M)\n3\n\njulia> dim(V)\n2\n\njulia> basis(V)\n2-element Array{AbstractAlgebra.Generic.FreeModuleElem{Rational{BigInt}},1}:\n (1//1, 0//1)\n (0//1, 1//1)","category":"page"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/","page":"Module Homomorphisms","title":"Module Homomorphisms","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/#Module-Homomorphisms","page":"Module Homomorphisms","title":"Module Homomorphisms","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/","page":"Module Homomorphisms","title":"Module Homomorphisms","text":"Abstract Algebra provides homomorphisms of finitely presented modules.","category":"page"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/#Generic-functionality","page":"Module Homomorphisms","title":"Generic functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/","page":"Module Homomorphisms","title":"Module Homomorphisms","text":"The following generic functionality is provided for module homomorphisms.","category":"page"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/#Constructors","page":"Module Homomorphisms","title":"Constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/","page":"Module Homomorphisms","title":"Module Homomorphisms","text":"Homomorphisms of AbstractAlgebra modules, f  R^s to R^t, can be represented by stimes t matrices over R.","category":"page"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/","page":"Module Homomorphisms","title":"Module Homomorphisms","text":"Generic.ModuleHomomorphism(M1::AbstractAlgebra.FPModule{T}, M2::AbstractAlgebra.FPModule{T}, m::AbstractAlgebra.MatElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/#AbstractAlgebra.Generic.ModuleHomomorphism-Union{Tuple{T}, Tuple{AbstractAlgebra.FPModule{T},AbstractAlgebra.FPModule{T},MatElem{T}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Module Homomorphisms","title":"AbstractAlgebra.Generic.ModuleHomomorphism","text":"ModuleHomomorphism(M1::AbstractAlgebra.FPModule{T},\n M2::AbstractAlgebra.FPModule{T}, m::AbstractAlgebra.MatElem{T})\n        where T <: RingElement\n\nCreate the homomorphism f  M_1 to M_2 represented by the matrix m.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/","page":"Module Homomorphisms","title":"Module Homomorphisms","text":"Generic.ModuleIsomorphism(M1::AbstractAlgebra.FPModule{T}, M2::AbstractAlgebra.FPModule{T}, m::AbstractAlgebra.MatElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/#AbstractAlgebra.Generic.ModuleIsomorphism-Union{Tuple{T}, Tuple{AbstractAlgebra.FPModule{T},AbstractAlgebra.FPModule{T},MatElem{T}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Module Homomorphisms","title":"AbstractAlgebra.Generic.ModuleIsomorphism","text":"ModuleIsomorphism(M1::AbstractAlgebra.FPModule{T},\n    M2::AbstractAlgebra.FPModule{T}, M::AbstractAlgebra.MatElem{T},\n   minv::AbstractAlgebra.MatElem{T}) where T <: RingElement\n\nCreate the isomorphism f  M_1 to M_2 represented by the matrix M. The inverse morphism is automatically computed.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/","page":"Module Homomorphisms","title":"Module Homomorphisms","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/","page":"Module Homomorphisms","title":"Module Homomorphisms","text":"julia> M = FreeModule(ZZ, 2)\nFree module of rank 2 over Integers\n\njulia> f = ModuleHomomorphism(M, M, matrix(ZZ, 2, 2, [1, 2, 3, 4]))\nModule homomorphism with\nDomain: Free module of rank 2 over Integers\nCodomain: Free module of rank 2 over Integers\n\njulia> m = M([ZZ(1), ZZ(2)])\n(1, 2)\n\njulia> f(m)\n(7, 10)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/","page":"Module Homomorphisms","title":"Module Homomorphisms","text":"They can also be created by giving images (in the codomain) of the generators of the domain:","category":"page"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/","page":"Module Homomorphisms","title":"Module Homomorphisms","text":"Generic.ModuleHomomorphism(M1::AbstractAlgebra.FPModule{T}, M2::AbstractAlgebra.FPModule{T}, v::Vector{<:AbstractAlgebra.FPModuleElem{T}}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/#Kernels","page":"Module Homomorphisms","title":"Kernels","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/","page":"Module Homomorphisms","title":"Module Homomorphisms","text":"kernel(f::Map(AbstractAlgebra.FPModuleHomomorphism))","category":"page"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/#AbstractAlgebra.Generic.kernel-Tuple{Map{D,C,var\"#s90\",T} where var\"#s90\"<:AbstractAlgebra.FPModuleHomomorphism where T where C where D}","page":"Module Homomorphisms","title":"AbstractAlgebra.Generic.kernel","text":"kernel(f::ModuleHomomorphism{T}) where T <: RingElement\n\nReturn a pair K, g consisting of the kernel object K of the given module homomorphism f (as a submodule of its domain) and the canonical injection from the kernel into the domain of f\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/","page":"Module Homomorphisms","title":"Module Homomorphisms","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/","page":"Module Homomorphisms","title":"Module Homomorphisms","text":"julia> M = FreeModule(ZZ, 3)\nFree module of rank 3 over Integers\n\njulia> m = M([ZZ(1), ZZ(2), ZZ(3)])\n(1, 2, 3)\n\njulia> S, f = sub(M, [m])\n(Submodule over Integers with 1 generator and no relations\n, Module homomorphism with\nDomain: Submodule over Integers with 1 generator and no relations\n\nCodomain: Free module of rank 3 over Integers)\n\njulia> Q, g = quo(M, S)\n(Quotient module over Integers with 2 generators and no relations\n, Module homomorphism with\nDomain: Free module of rank 3 over Integers\nCodomain: Quotient module over Integers with 2 generators and no relations\n)\n\njulia> kernel(g)\n(Submodule over Integers with 1 generator and no relations\n, Module homomorphism with\nDomain: Submodule over Integers with 1 generator and no relations\n\nCodomain: Free module of rank 3 over Integers)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/#Images","page":"Module Homomorphisms","title":"Images","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/","page":"Module Homomorphisms","title":"Module Homomorphisms","text":"image(::Map(AbstractAlgebra.FPModuleHomomorphism))","category":"page"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/#AbstractAlgebra.Generic.image-Tuple{Map{D,C,var\"#s90\",T} where var\"#s90\"<:AbstractAlgebra.FPModuleHomomorphism where T where C where D}","page":"Module Homomorphisms","title":"AbstractAlgebra.Generic.image","text":"image(f::Map(AbstractAlgebra.FPModuleHomomorphism))\n\nReturn a pair I, g consisting of the image object I of the given module homomorphism f (as a submodule of its codomain) and the canonical injection from the image into the codomain of f\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/","page":"Module Homomorphisms","title":"Module Homomorphisms","text":"M = FreeModule(ZZ, 3)\n\nm = M([ZZ(1), ZZ(2), ZZ(3)])\n\nS, f = sub(M, [m])\nQ, g = quo(M, S)\nK, k = kernel(g)\n\nimage(compose(k, g))","category":"page"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/#Preimages","page":"Module Homomorphisms","title":"Preimages","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/","page":"Module Homomorphisms","title":"Module Homomorphisms","text":"preimage(::Map(AbstractAlgebra.FPModuleHomomorphism), ::AbstractAlgebra.FPModuleElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/#AbstractAlgebra.Generic.preimage-Union{Tuple{T}, Tuple{Map{D,C,var\"#s90\",T} where var\"#s90\"<:AbstractAlgebra.FPModuleHomomorphism where T where C where D,AbstractAlgebra.FPModuleElem{T}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Module Homomorphisms","title":"AbstractAlgebra.Generic.preimage","text":"preimage(f::Map(AbstractAlgebra.FPModuleHomomorphism),\n      v::AbstractAlgebra.FPModuleElem{T}) where T <: RingElement\n\nReturn a preimage of v under the homomorphism f, i.e. an element of the domain of f that maps to v under f. Note that this has no special mathematical properties. It is an element of the set theoretical preimage of the map f as a map of sets, if one exists. The preimage is neither unique nor chosen in a canonical way in general. When no such element exists, an exception is raised.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/","page":"Module Homomorphisms","title":"Module Homomorphisms","text":"M = FreeModule(ZZ, 3)\n\nm = M([ZZ(1), ZZ(2), ZZ(3)])\n\nS, f = sub(M, [m])\nQ, g = quo(M, S)\n\nm = rand(M, -10:10)\nn = g(m)\n\np = preimage(g, n)","category":"page"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/#Inverses","page":"Module Homomorphisms","title":"Inverses","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/","page":"Module Homomorphisms","title":"Module Homomorphisms","text":"Module isomorphisms can be cheaply inverted.","category":"page"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/","page":"Module Homomorphisms","title":"Module Homomorphisms","text":"Base.inv(::Map(Generic.ModuleIsomorphism))","category":"page"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/#Base.inv-Tuple{Map{AbstractAlgebra.FPModule{T},AbstractAlgebra.FPModule{T},AbstractAlgebra.FPModuleHomomorphism,AbstractAlgebra.Generic.ModuleIsomorphism} where T<:Union{RingElem, AbstractFloat, Integer, Rational}}","page":"Module Homomorphisms","title":"Base.inv","text":"Base.inv(f::Map(ModuleIsomorphism))\n\nReturn the inverse map of the given module isomorphism. This is computed cheaply.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/module_homomorphism/","page":"Module Homomorphisms","title":"Module Homomorphisms","text":"M = FreeModule(ZZ, 2)\nN = matrix(ZZ, 2, 2, BigInt[1, 0, 0, 1])\nf = ModuleIsomorphism(M, M, N)\n\ng = inv(f)","category":"page"},{"location":"Hecke/docs/src/MaximalOrders/Elements/","page":"Elements","title":"Elements","text":"@module{Hecke}","category":"page"},{"location":"Hecke/docs/src/MaximalOrders/Elements/#Elements","page":"Elements","title":"Elements","text":"","category":"section"},{"location":"Hecke/docs/src/MaximalOrders/Elements/#Creation","page":"Elements","title":"Creation","text":"","category":"section"},{"location":"Hecke/docs/src/MaximalOrders/Elements/","page":"Elements","title":"Elements","text":"@{call(::NfMaximalOrder, ::nfelem, ::Bool)} @{call(::NfMaximalOrder, ::fmpz)} @{call(::NfMaximalOrder, ::Array{fmpz, 1})} @{call(::NfMaximalOrder, ::Array{Int, 1})} @{call(::NfMaximalOrder, ::nfelem, ::Array{fmpz, 1})} @{call(::NfMaximalOrder)} @{zero(::NfMaximalOrder)} @{one(::NfMaximalOrder)}","category":"page"},{"location":"Hecke/docs/src/MaximalOrders/Elements/#Basic-invariants","page":"Elements","title":"Basic invariants","text":"","category":"section"},{"location":"Hecke/docs/src/MaximalOrders/Elements/","page":"Elements","title":"Elements","text":"@{parent(::NfOrderElem)} @{eleminnf(::NfOrderElem)} @{coordinates(::NfOrderElem)} @{==(::NfOrderElem, ::NfOrderElem)} @{deepcopy(::NfOrderElem)} @{in(::nfelem, ::NfMaximalOrder)} @{denominator(::nfelem, ::NfMaximalOrder)}","category":"page"},{"location":"Hecke/docs/src/MaximalOrders/Elements/#Binary-and-unary-operations","page":"Elements","title":"Binary and unary operations","text":"","category":"section"},{"location":"Hecke/docs/src/MaximalOrders/Elements/","page":"Elements","title":"Elements","text":"@{-(::NfOrderElem)} @{(::NfOrderElem, ::NfOrderElem)} @{+(::NfOrderElem, ::NfOrderElem)} @{-(::NfOrderElem, ::NfOrderElem)} @{(::NfOrderElem, ::fmpz)} @{+(::NfOrderElem, ::fmpz)} @{-(::NfOrderElem, ::fmpz)} @{^(::NfOrderElem, ::Int)} @{mod(::NfOrderElem, ::Int)} @{powermod(::NfOrderElem, ::Int, ::fmpz)}","category":"page"},{"location":"Hecke/docs/src/MaximalOrders/Elements/#Representation-matrices","page":"Elements","title":"Representation matrices","text":"","category":"section"},{"location":"Hecke/docs/src/MaximalOrders/Elements/","page":"Elements","title":"Elements","text":"@{representationmatrix(::NfOrderElem)} @{representationmatrix(::NfOrderElem, ::AnticNumberField)}","category":"page"},{"location":"Hecke/docs/src/MaximalOrders/Elements/#Trace-and-norm","page":"Elements","title":"Trace and norm","text":"","category":"section"},{"location":"Hecke/docs/src/MaximalOrders/Elements/","page":"Elements","title":"Elements","text":"@{tr(::NfOrderElem)} @{norm(::NfOrderElem)}","category":"page"},{"location":"Hecke/docs/src/MaximalOrders/Elements/#Random-elements","page":"Elements","title":"Random elements","text":"","category":"section"},{"location":"Hecke/docs/src/MaximalOrders/Elements/","page":"Elements","title":"Elements","text":"@{rand(::NfMaximalOrder, ::UnitRange{Int})} @{rand(::NfMaximalOrder, ::Int)}","category":"page"},{"location":"Hecke/docs/src/MaximalOrders/Elements/#Conjugates","page":"Elements","title":"Conjugates","text":"","category":"section"},{"location":"Hecke/docs/src/MaximalOrders/Elements/","page":"Elements","title":"Elements","text":"@{conjugatesarb(::NfOrderElem, ::Int)} @{minkowskimap(::NfOrderElem, ::Int)} @{conjugates_log(::NfOrderElem)}","category":"page"},{"location":"AbstractAlgebra/docs/src/functional_map/","page":"Functional maps","title":"Functional maps","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/functional_map/#Functional-maps","page":"Functional maps","title":"Functional maps","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/functional_map/","page":"Functional maps","title":"Functional maps","text":"A functional map in AbstractAlgebra is a map which can be applied by evaluating a Julia function or closure. It is represented by a map object that contains such a function/closure, usually in a field called image_fn.","category":"page"},{"location":"AbstractAlgebra/docs/src/functional_map/","page":"Functional maps","title":"Functional maps","text":"All functional maps belong to the map class AbstractAlgebra.FunctionalMap.","category":"page"},{"location":"AbstractAlgebra/docs/src/functional_map/","page":"Functional maps","title":"Functional maps","text":"A generic concrete type Generic.FunctionalMap is provided by the Generic module to implement a generic functional map type. This allows for functional maps that contain no extra data, other than a Julia function/closure.","category":"page"},{"location":"AbstractAlgebra/docs/src/functional_map/","page":"Functional maps","title":"Functional maps","text":"Custom map types can also be defined which have map class AbstractAlgebra.FunctionalMap.","category":"page"},{"location":"AbstractAlgebra/docs/src/functional_map/#Functional-map-interface","page":"Functional maps","title":"Functional map interface","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/functional_map/","page":"Functional maps","title":"Functional maps","text":"All functional map types must define their supertypes as in the following example:","category":"page"},{"location":"AbstractAlgebra/docs/src/functional_map/","page":"Functional maps","title":"Functional maps","text":"mutable struct MyFunctionalMap{D, C} <: Map{D, C, FunctionalMap, MyFunctionalMap}\n   # some fields\n   image_fn::Function\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/functional_map/","page":"Functional maps","title":"Functional maps","text":"Of course MyFunctionalMap need not be parameterised if the types D and C of the domain and codomain objects are known.","category":"page"},{"location":"AbstractAlgebra/docs/src/functional_map/#Required-functions-for-functional-maps","page":"Functional maps","title":"Required functions for functional maps","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/functional_map/","page":"Functional maps","title":"Functional maps","text":"The following functions must be defined for all functional map types or classes:","category":"page"},{"location":"AbstractAlgebra/docs/src/functional_map/","page":"Functional maps","title":"Functional maps","text":"image_fn(M::Map(MyFunctionalMap))","category":"page"},{"location":"AbstractAlgebra/docs/src/functional_map/","page":"Functional maps","title":"Functional maps","text":"Return the Julia function or closure that corresponds to application of the map M. This function only needs to be provided if this function is not stored in an image_fn field of the MyFunctionalMap type.","category":"page"},{"location":"AbstractAlgebra/docs/src/functional_map/#Generic-functional-maps","page":"Functional maps","title":"Generic functional maps","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/functional_map/","page":"Functional maps","title":"Functional maps","text":"The Generic module provides a concrete type FunctionalMap which merely keeps track of a Julia function/closure implementing the map.","category":"page"},{"location":"AbstractAlgebra/docs/src/functional_map/","page":"Functional maps","title":"Functional maps","text":"Such maps can be constructed using the following function:","category":"page"},{"location":"AbstractAlgebra/docs/src/functional_map/","page":"Functional maps","title":"Functional maps","text":"map_from_func(f::Function, R, S)","category":"page"},{"location":"AbstractAlgebra/docs/src/functional_map/","page":"Functional maps","title":"Functional maps","text":"Construct the generic functional map with domain and codomain given by the parent objects R and S corresponding to the Julia function f.","category":"page"},{"location":"AbstractAlgebra/docs/src/functional_map/","page":"Functional maps","title":"Functional maps","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/functional_map/","page":"Functional maps","title":"Functional maps","text":"julia> f = map_from_func(x -> x + 1, ZZ, ZZ)\nMap with the following data\n\nDomain:\n=======\nIntegers\n\nCodomain:\n========\nIntegers\n\njulia> f(ZZ(2))\n3","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/#Fraction-Field-Interface","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"Fraction fields are supported in AbstractAlgebra.jl, at least for gcd domains. In addition to the standard Ring interface, some additional functions are required to be present for fraction fields.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/#Types-and-parents","page":"Fraction Field Interface","title":"Types and parents","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"AbstractAlgebra provides two abstract types for fraction fields and their elements:","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"FracField{T} is the abstract type for fraction field parent types\nFracElem{T} is the abstract type for types of fractions","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"We have that FracField{T} <: AbstractAlgebra.Field and  FracElem{T} <: AbstractAlgebra.FieldElem.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"Note that both abstract types are parameterised. The type T should usually be the type of elements of the base ring of the fraction field.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"Fraction fields should be made unique on the system by caching parent objects (unless an optional cache parameter is set to false). Fraction fields should at least be distinguished based on their base ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"See src/generic/GenericTypes.jl for an example of how to implement such a cache (which usually makes use of a dictionary).","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/#Required-functionality-for-fraction-fields","page":"Fraction Field Interface","title":"Required functionality for fraction fields","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"In addition to the required functionality for the Field interface the Fraction Field interface has the following required functions.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"We suppose that R is a fictitious base ring, and that S is the fraction field with  parent object S of type MyFracField{T}. We also assume the fractions in the field  have type MyFrac{T}, where T is the type of elements of the base ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"Of course, in practice these types may not be parameterised, but we use parameterised types here to make the interface clearer.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"Note that the type T must (transitively) belong to the abstract type RingElem.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/#Constructors","page":"Fraction Field Interface","title":"Constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"We provide the following constructors. Note that these constructors don't require construction of the parent object first. This is easier to achieve if the fraction element type doesn't contain a reference to the parent object, but merely contains a reference to the base ring. The parent object can then be constructed on demand.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"//(x::T, y::T) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"Return the fraction xy.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"//(x::T, y::AbstractAlgebra.FracElem{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"Return xy where x is in the base ring of y.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"//(x::AbstractAlgebra.FracElem{T}, y::T) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"Return xy where y is in the base ring of x.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"julia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integers, x)\n\njulia> f = (x^2 + x + 1)//(x^3 + 3x + 1)\n(x^2 + x + 1)//(x^3 + 3*x + 1)\n\njulia> g = f//x\n(x^2 + x + 1)//(x^4 + 3*x^2 + x)\n\njulia> h = x//f\n(x^4 + 3*x^2 + x)//(x^2 + x + 1)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/#Basic-manipulation-of-fields-and-elements","page":"Fraction Field Interface","title":"Basic manipulation of fields and elements","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"numerator(d::MyFrac{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"Given a fraction d = ab return a, where ab is in lowest terms with respect to the canonical_unit and gcd functions on the base ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"denominator(d::MyFrac{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"Given a fraction d = ab return b, where ab is in lowest terms with respect to the canonical_unit and gcd functions on the base ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/fraction_fields/","page":"Fraction Field Interface","title":"Fraction Field Interface","text":"julia> R, x = PolynomialRing(QQ, \"x\")\n(Univariate Polynomial Ring in x over Rationals, x)\n\njulia> f = (x^2 + x + 1)//(x^3 + 3x + 1)\n(x^2 + x + 1)//(x^3 + 3*x + 1)\n\njulia> n = numerator(f)\nx^2 + x + 1\n\njulia> d = denominator(f)\nx^3 + 3*x + 1\n","category":"page"},{"location":"#Welcome-to-Oscar","page":"Welcome to Oscar","title":"Welcome to Oscar","text":"","category":"section"},{"location":"","page":"Welcome to Oscar","title":"Welcome to Oscar","text":"Oscar is a new computer algebra system under development.","category":"page"},{"location":"references/","page":"References","title":"References","text":"","category":"page"},{"location":"AbstractAlgebra/docs/src/real/","page":"Real field","title":"Real field","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/real/#Real-field","page":"Real field","title":"Real field","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/real/","page":"Real field","title":"Real field","text":"AbstractAlgebra.jl provides a module, implemented in src/julia/Float.jl for making Julia BigFloats conform to the AbstractAlgebra.jl Field interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/real/","page":"Real field","title":"Real field","text":"In addition to providing a parent object RealField for Julia BigFloats, we implement any additional functionality required by AbstractAlgebra.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/real/","page":"Real field","title":"Real field","text":"Because BigFloat cannot be directly included in the AbstractAlgebra.jl abstract type hierarchy, we achieve integration of Julia BigFloats by introducing a type union, called FieldElement, which is a union of AbstractAlgebra.FieldElem and a number of Julia types, including BigFloat. Everywhere that FieldElem is notionally used in AbstractAlgebra.jl, we are in fact using FieldElement, with additional care being taken to avoid ambiguities.","category":"page"},{"location":"AbstractAlgebra/docs/src/real/","page":"Real field","title":"Real field","text":"The details of how this is done are technical, and we refer the reader to the implementation for details. For most intents and purposes, one can think of the Julia BigFloat type as belonging to AbstractAlgebra.FieldElem.","category":"page"},{"location":"AbstractAlgebra/docs/src/real/#Types-and-parent-objects","page":"Real field","title":"Types and parent objects","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/real/","page":"Real field","title":"Real field","text":"Reals have type BigFloat, as in Julia itself. We simply supplement the functionality for this type as required for computer algebra.","category":"page"},{"location":"AbstractAlgebra/docs/src/real/","page":"Real field","title":"Real field","text":"The parent objects of such integers has type Floats{BigFloat}.","category":"page"},{"location":"AbstractAlgebra/docs/src/real/","page":"Real field","title":"Real field","text":"For convenience, we also make Float64 a part of the AbstractAlgebra.jl type hierarchy and its parent object (accessible as RDF) has type Floats{Float64}.","category":"page"},{"location":"AbstractAlgebra/docs/src/real/#Rational-constructors","page":"Real field","title":"Rational constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/real/","page":"Real field","title":"Real field","text":"In order to construct reals in AbstractAlgebra.jl, one can first construct the real field itself. This is accomplished using the following constructor.","category":"page"},{"location":"AbstractAlgebra/docs/src/real/","page":"Real field","title":"Real field","text":"Floats{BigFloat}()","category":"page"},{"location":"AbstractAlgebra/docs/src/real/","page":"Real field","title":"Real field","text":"This gives the unique object of type Floats{BigFloat} representing the field of reals in AbstractAlgebra.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/real/","page":"Real field","title":"Real field","text":"In practice, one simply uses RealField which is assigned to be the return value of the above constructor. There is no need to call the constructor in practice.","category":"page"},{"location":"AbstractAlgebra/docs/src/real/","page":"Real field","title":"Real field","text":"Here are some examples of creating the real field and making use of the resulting parent object to coerce various elements into the field.","category":"page"},{"location":"AbstractAlgebra/docs/src/real/","page":"Real field","title":"Real field","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/real/","page":"Real field","title":"Real field","text":"julia> RR = RealField\nFloats\n\njulia> f = RR()\n0.0\n\njulia> g = RR(123)\n123.0\n\njulia> h = RR(BigInt(1234))\n1234.0\n\njulia> k = RR(12//7)\n1.714285714285714285714285714285714285714285714285714285714285714285714285714291\n\njulia> m = RR(2.3)\n2.29999999999999982236431605997495353221893310546875\n","category":"page"},{"location":"AbstractAlgebra/docs/src/real/#Basic-field-functionality","page":"Real field","title":"Basic field functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/real/","page":"Real field","title":"Real field","text":"The real field in AbstractAlgebra.jl implements the full Field interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/real/","page":"Real field","title":"Real field","text":"We give some examples of such functionality.","category":"page"},{"location":"AbstractAlgebra/docs/src/real/","page":"Real field","title":"Real field","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/real/","page":"Real field","title":"Real field","text":"julia> RR = RealField\nFloats\n\njulia> f = RR(12//7)\n1.714285714285714285714285714285714285714285714285714285714285714285714285714291\n\njulia> h = zero(RR)\n0.0\n\njulia> k = one(RR)\n1.0\n\njulia> isone(k)\ntrue\n\njulia> iszero(f)\nfalse\n\njulia> U = base_ring(RR)\nUnion{}\n\njulia> T = parent(f)\nFloats\n\njulia> f == deepcopy(f)\ntrue\n\njulia> g = f + 12\n13.71428571428571428571428571428571428571428571428571428571428571428571428571433\n\njulia> m = inv(g)\n0.07291666666666666666666666666666666666666666666666666666666666666666666666666631\n","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"CurrentModule = Oscar","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"using Oscar","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Pages = [\"rational.md\"]","category":"page"},{"location":"Rings/rational/#Rationals","page":"Rationals","title":"Rationals","text":"","category":"section"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Fractions are created in Julia with the double slash operator //. If a fraction is created from Julia integers, a Julia fraction results and if either the numerator or denominator is an Oscar integer, an Oscar fraction results.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Oscar has just a single rational fraction type Oscar.fmpq. The Oscar fraction type belongs to Oscar.Rational.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Julia has a parameterised type Base.Rational{T} for its own fractions, where T is the integer type the fractions are constructed from, e.g. Base.Rational{Int} and Base.Rational{BigInt}.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Note that conveniently, both of these Julia rational types belong to Base.Rational. Therefore in the description below we refer to Oscar.Rational for Oscar rational numbers and Base.Rational for any of the Julia rational number types.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"The situation is described by the following diagram.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"(Image: alt text)","category":"page"},{"location":"Rings/rational/#The-field-of-rationals","page":"Rationals","title":"The field of rationals","text":"","category":"section"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"The parent of an Oscar rational number is the field of rationals. It can be constructed from the ring of integers ZZ using the FractionField constructor.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"For convenience, QQ is already defined to be the field of rational numbers.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"S = FractionField(ZZ)\nQQ","category":"page"},{"location":"Rings/rational/#Integer-constructors","page":"Rationals","title":"Integer constructors","text":"","category":"section"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Oscar rationals can be created using QQ. Two arguments can be passed to specify numerator and denominator. If a single argument is passed, the denominator is set to 1.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"For convenience, QQ also accepts Julia integers and rationals, but will always construct an Oscar rational.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Naturally, Julia's double slash operator can also be used to construct fractions. However, unlike QQ, the double slash operator only constructs an Oscar rational if either the numerator or denominator is an Oscar integer.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"An exception is raised if a fraction is constructed with denominator zero.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"QQ(1, 2)\nQQ(5)\nZZ(3)//5\n1//ZZ(7)\nQQ(2//3)\nZZ(3)//0","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"One can also construct the rational number 0 with the empty constructor:","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"QQ()","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"The following special constructors are also provided:","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"zero(QQ)\none(QQ)","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"zero(QQ)\none(QQ)","category":"page"},{"location":"Rings/rational/#Predicates","page":"Rationals","title":"Predicates","text":"","category":"section"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"iszero(n::Oscar.Rational) -> Bool\nisone(n::Oscar.Rational) -> Bool\nisunit(n::Oscar.Rational) -> Bool","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"The isunit function will return true iff n neq 0.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"iszero(QQ())\nisone(one(QQ))\nisunit(QQ(-2, 3))","category":"page"},{"location":"Rings/rational/#Properties","page":"Rationals","title":"Properties","text":"","category":"section"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"numerator(n::Oscar.Rational) -> Oscar.Integer\ndenominator(n::Oscar.Rational) -> Oscar.Integer","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Return the numerator and denominator respectively, of n.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"sign(n::Oscar.Rational) -> Oscar.Rational","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Returns the sign of n, i.e. nn if n neq 0, or 0 otherwise.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"sign(QQ(2, 3))\nsign(QQ())\nsign(QQ(-1))","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"abs(n::Oscar.Rational) -> Oscar.Rational","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Return the absolute value of n, i.e. n if n geq 0 and -n otherwise.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"abs(QQ(-3, 2))","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"height(n::Oscar.Rational) -> Oscar.Integer","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Return the maximum of the absolute values of the numerator and denominator of n.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"height(QQ(324987329, -8372492324))","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"floor(n::Oscar.Rational) -> Oscar.Rational","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Return the greatest integer m (as a rational number) such that m leq n.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"ceil(n::Oscar.Rational) -> Oscar.Rational","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Return the least integer m (as a rational number) such that m geq n.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"floor(QQ(-2, 3))\nceil(QQ(7, 2))\ntypeof(ans)\nceil(QQ(5))","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"floor(Oscar.Integer, n::Oscar.Rational) -> Oscar.Integer","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Return the greatest integer m such that m leq n.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"ceil(Oscar.Integer, n::Oscar.Rational) -> Oscar.Integer","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Return the least integer m such that m geq n.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"floor(Oscar.Integer, QQ(-2, 3))\nceil(Oscar.Integer, QQ(7, 2))\ntypeof(ans)\nceil(Oscar.Integer, QQ(5))","category":"page"},{"location":"Rings/rational/#Basic-arithmetic","page":"Rationals","title":"Basic arithmetic","text":"","category":"section"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Oscar provides the basic arithmetic operations +, - and * and comparison operators ==, !=, <, <=, >, >=, including mixed operations between Julia and Oscar rationals and integers.","category":"page"},{"location":"Rings/rational/#[Exact-Division]","page":"Rationals","title":"[Exact Division]","text":"","category":"section"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"divexact(a::Oscar.Rational, b::Oscar.Rational) -> Oscar.Rational\ndivexact(a::Oscar.Rational, b::Oscar.Integer) -> Oscar.Rational\ndivexact(a::Oscar.Integer, b::Oscar.Rational) -> Oscar.Rational","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"In the first signature, one of the arguments may be a Julia rational and in the other two signatures the integers may be Julia integers.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Returns the quotient of a by b. Exact division raises an exception if division by zero is attempted.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"divexact(QQ(2, 3), QQ(3, 5))\ndivexact(QQ(1, 3), ZZ(0))\ndivexact(QQ(3, 4), ZZ(5))\ndivexact(ZZ(6), QQ(2, 3))\ndivexact(QQ(1, 3), 5)","category":"page"},{"location":"Rings/rational/#Powering","page":"Rationals","title":"Powering","text":"","category":"section"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"^(a::Oscar.Rational, b::Base.Int) -> Oscar.Rational","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Powering can be accomplished naturally using the special caret infix operator:","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"QQ(5, 7)^32\nQQ(1, 2)^(-2)","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"The following is allowed for convenience.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"QQ(0)^0","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"note: Note\nIn Julia, the rational number 01 when raised to a negative power returns 10 to indicate that the value is undefined. Oscar raises an exception.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"QQ(0)^-2","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"ispower(a::Oscar.Rational, b::Base.Int) -> Bool, Oscar.Rational","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Tests if a is an n-th power. If so, return true and the root, false and any rational otherwise.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"ispower(a::Oscar.Rational) -> Int, Oscar.Rational","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Finds the largest n such that a is an n-th power. Return n and the root.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"root(a::Oscar.Rational, b::Base.Int) -> Oscar.Rational","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Computes an n-th root of a, raises an error if a is not an n-th power.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"ispower(QQ(8), 3)\nispower(QQ(8), 2)\nispower(QQ(9//16))\nroot(QQ(25//9), 2)","category":"page"},{"location":"Hecke/docs/src/MaximalOrders/Creation/","page":"Orders","title":"Orders","text":"@module{Hecke}","category":"page"},{"location":"Hecke/docs/src/MaximalOrders/Creation/#Orders","page":"Orders","title":"Orders","text":"","category":"section"},{"location":"Hecke/docs/src/MaximalOrders/Creation/#Creation","page":"Orders","title":"Creation","text":"","category":"section"},{"location":"Hecke/docs/src/MaximalOrders/Creation/","page":"Orders","title":"Orders","text":"@{MaximalOrder(::AnticNumberField)} @{MaximalOrder(::AnticNumberField, ::Array{fmpz, 1})}","category":"page"},{"location":"Hecke/docs/src/MaximalOrders/Creation/#Basic-invariants","page":"Orders","title":"Basic invariants","text":"","category":"section"},{"location":"Hecke/docs/src/MaximalOrders/Creation/","page":"Orders","title":"Orders","text":"@{nf(::NfMaximalOrder)} @{degree(::NfMaximalOrder)} @{basis(::NfMaximalOrder)} @{basis(::NfMaximalOrder, ::AnticNumberField)} @{basismatrix(::NfMaximalOrder)} @{basismatinv(::NfMaximalOrder)} @{index(::NfMaximalOrder)} @{signature(::NfMaximalOrder)} @{isindexdivisor(::NfMaximalOrder, ::fmpz)} @{minkowski_matrix(::NfMaximalOrder, ::Int)}","category":"page"},{"location":"Hecke/docs/src/class_fields/intro/#Class-Field-Theory","page":"Class Field Theory","title":"Class Field Theory","text":"","category":"section"},{"location":"Hecke/docs/src/class_fields/intro/","page":"Class Field Theory","title":"Class Field Theory","text":"CurrentModule = Hecke","category":"page"},{"location":"Hecke/docs/src/class_fields/intro/#Introduction","page":"Class Field Theory","title":"Introduction","text":"","category":"section"},{"location":"Hecke/docs/src/class_fields/intro/","page":"Class Field Theory","title":"Class Field Theory","text":"This chapter deals with abelian extensions of number fields and the rational numbers.","category":"page"},{"location":"Hecke/docs/src/class_fields/intro/","page":"Class Field Theory","title":"Class Field Theory","text":"Class Field Theory, here specifically, class field theory of global number fields, deals with abelian extension, ie. fields where the group of automorphisms is abelian. For extensions of {\\Q}, the famous Kronnecker-Weber theorem classifies all such fields: a field is abelian if and only if it is contained in some cyclotomic field. For general number fields this is more involved and even for extensions of {\\Q} is is not practical.","category":"page"},{"location":"Hecke/docs/src/class_fields/intro/","page":"Class Field Theory","title":"Class Field Theory","text":"In Hecke, abelian extensions are parametrized by quotients of so called ray class groups. The language of ray class groups while dated is more applicable to algorithms than the modern language of idel class groups and quotients.","category":"page"},{"location":"Hecke/docs/src/class_fields/intro/#Ray-Class-Groups","page":"Class Field Theory","title":"Ray Class Groups","text":"","category":"section"},{"location":"Hecke/docs/src/class_fields/intro/","page":"Class Field Theory","title":"Class Field Theory","text":"Given an integral ideal m_0 le Z_K and a list of real places m_infty, the ray class group modulo (m_0 m_infty), C(m) is defined as the group of ideals coprime to m_0 modulo the elements ain K^* s.th. v_p(a-1) ge v_p(m_0) and for all vin m_infty, a^(v) 0. This is a finite abelian group. For m_0 = Z_K and m_infty =  we get C() is the class group, if m_infty contains all real places, we obtain the narrow class group, or strict class group.","category":"page"},{"location":"Hecke/docs/src/class_fields/intro/","page":"Class Field Theory","title":"Class Field Theory","text":"ray_class_group(m::Hecke.NfAbsOrdIdl{Nemo.AnticNumberField,Nemo.nf_elem}, inf_plc::Array{Hecke.InfPlc,1}; p_part, n_quo)\nclass_group(O::Hecke.NfAbsOrd{Nemo.AnticNumberField,Nemo.nf_elem}; bound, method, redo, unit_method, large)\nclass_group(K::Nemo.AnticNumberField)\nnorm_group(f::Nemo.PolyElem, mR::Hecke.MapRayClassGrp, isabelian::Bool)\nnorm_group(K::NfRel{nf_elem}, mR::Hecke.MapRayClassGrp, isabelian::Bool)","category":"page"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.ray_class_group-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem},Array{InfPlc,1}}","page":"Class Field Theory","title":"Hecke.ray_class_group","text":"ray_class_group(m::NfOrdIdl, inf_plc::Array{InfPlc, 1}; n_quo::Int, lp::Dict{NfOrdIdl, Int}) -> GrpAbFinGen, MapRayClassGrp\n\nGiven an ideal m and a set of infinite places of K, this function returns the corresponding ray class group as an abstract group mathcal Cl_m and a map going from the group into the group of ideals of K that are coprime to m. If n_quo is set, it will return the group modulo n_quo. The factorization of m can be given with the keyword argument lp.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.class_group-Tuple{NfAbsOrd{AnticNumberField,nf_elem}}","page":"Class Field Theory","title":"Hecke.class_group","text":"class_group(O::NfOrd; bound = -1, method = 3, redo = false, large = 1000) -> GrpAbFinGen, Map\n\nReturns a group A and a map f from A to the set of ideals of O. The inverse of the map is the projection onto the group of ideals modulo the group of principal ideals. redo allows to trigger a re-computation, thus avoiding the cache. bound, when given, is the bound for the factor base.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.class_group-Tuple{AnticNumberField}","page":"Class Field Theory","title":"Hecke.class_group","text":"class_group(K::AnticNumberField) -> GrpAbFinGen, Map\n\nShortcut for class_group(maximal_order(K)): returns the class group as an abelian group and a map from this group to the set of ideals of the maximal order.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.norm_group-Tuple{PolyElem,MapRayClassGrp,Bool}","page":"Class Field Theory","title":"Hecke.norm_group","text":"norm_group(f::Nemo.PolyElem, mR::Hecke.MapRayClassGrp, isabelian::Bool = true; of_closure::Bool = false) -> Hecke.FinGenGrpAb, Hecke.FinGenGrpAbMap\n\nnorm_group(f::Array{PolyElem{nf_elem}}, mR::Hecke.MapRayClassGrp, isabelian::Bool = true; of_closure::Bool = false) -> Hecke.FinGenGrpAb, Hecke.FinGenGrpAbMap\n\nComputes the subgroup of the Ray Class Group R given by the norm of the extension generated by a/the roots of f. If isabelian is set to true, then the code assumes the field to be abelian, hence the algorithm stops when the quotient by the norm group has the correct order. Even though the algorithm is probabilistic by nature, in this case the result is guaranteed. If of_closure is given, then the norm group of the splitting field of the polynomial(s) is computed. It is the callers responsibility to ensure that the ray class group passed in is large enough.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.norm_group-Tuple{Hecke.NfRel{nf_elem},MapRayClassGrp,Bool}","page":"Class Field Theory","title":"Hecke.norm_group","text":"norm_group(K::NfRel{nf_elem}, mR::Hecke.MapRayClassGrp) -> Hecke.FinGenGrpAb, Hecke.FinGenGrpAbMap\n\nnorm_group(K::NfRelNS{nf_elem}, mR::Hecke.MapRayClassGrp) -> Hecke.FinGenGrpAb, Hecke.FinGenGrpAbMap\n\nComputes the subgroup of the Ray Class Group R given by the norm of the extension.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Ray-Class-Fields","page":"Class Field Theory","title":"Ray Class Fields","text":"","category":"section"},{"location":"Hecke/docs/src/class_fields/intro/","page":"Class Field Theory","title":"Class Field Theory","text":"In general, the construction of a class field starts with a (ray) class group. Each quotient of a ray class group then defines a ray class field, the defining property is that the (relative) automorphism group is canonically isomorphic to the quotient of the ray class group where the isomorphism is given by the Artin (or Frobenius) map. Since, in Hecke, the (ray) class groups have no link to the field, actually this has to be specified using the maps.","category":"page"},{"location":"Hecke/docs/src/class_fields/intro/","page":"Class Field Theory","title":"Class Field Theory","text":"It should be noted that this is a {\\em lazy} construction: nothing is computed at this point.","category":"page"},{"location":"Hecke/docs/src/class_fields/intro/","page":"Class Field Theory","title":"Class Field Theory","text":"ray_class_field(m::Union{Hecke.MapClassGrp, Hecke.MapRayClassGrp})\nray_class_field(m::Union{Hecke.MapClassGrp, Hecke.MapRayClassGrp}, quomap::Hecke.GrpAbFinGenMap)\nray_class_field(I::Hecke.NfAbsOrdIdl; n_quo, p_part)\nray_class_field(I::Hecke.NfAbsOrdIdl, ::Array{InfPlc, 1}; n_quo, p_part)\nhilbert_class_field(k::AnticNumberField)\nring_class_field(::NfAbsOrd)","category":"page"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.ray_class_field-Tuple{Union{Hecke.MapClassGrp, MapRayClassGrp}}","page":"Class Field Theory","title":"Hecke.ray_class_field","text":"ray_class_field(m::MapClassGrp) -> ClassField\nray_class_field(m::MapRayClassGrp) -> ClassField\n\nCreates the (formal) abelian extension defined by the map m A to I where I is the set of ideals coprime to the modulus defining m and A  is a quotient of the ray class group (or class group). The map m must be the map returned from a call to {classgroup} or {rayclass_group}.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.ray_class_field-Tuple{Union{Hecke.MapClassGrp, MapRayClassGrp},GrpAbFinGenMap}","page":"Class Field Theory","title":"Hecke.ray_class_field","text":"ray_class_field(m::Union{MapClassGrp, MapRayClassGrp}, quomap::GrpAbFinGenMap) -> ClassField\n\nFor m a map computed by either {rayclassgroup} or {class_group} and q a canonical projection (quotient map) as returned by {quo} for q  quotient of the domain of m and a subgroup of m, create the (formal) abelian extension where the (relative) automorphism group is canonically isomorphic to the codomain of q.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.ray_class_field-Tuple{NfAbsOrdIdl}","page":"Class Field Theory","title":"Hecke.ray_class_field","text":"ray_class_field(I::NfAbsOrdIdl; n_quo = 0) -> ClassField\n\nThe ray class field modulo I. If n_quo is given, then the largest subfield of exponent n is computed.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.ray_class_field-Tuple{NfAbsOrdIdl,Array{InfPlc,1}}","page":"Class Field Theory","title":"Hecke.ray_class_field","text":"ray_class_field(I::NfAbsOrdIdl, inf::Array{InfPlc, 1}; n_quo = 0) -> ClassField\n\nThe ray class field modulo I and the infinite places given. If n_quo is given, then the largest subfield of exponent n is computed.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.hilbert_class_field-Tuple{AnticNumberField}","page":"Class Field Theory","title":"Hecke.hilbert_class_field","text":"hilbert_class_field(k::AnticNumberField) -> ClassField\n\nThe Hilbert class field of k as a formal (ray-) class field.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.ring_class_field-Tuple{NfAbsOrd}","page":"Class Field Theory","title":"Hecke.ring_class_field","text":"ring_class_field(O::NfAbsOrd) -> ClassField\n\nThe ring class field of O, i.e. the maximal abelian extension ramified only at primes dividing the conductor with the automorphism group isomorphic to the Picard group.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Example","page":"Class Field Theory","title":"Example","text":"","category":"section"},{"location":"Hecke/docs/src/class_fields/intro/","page":"Class Field Theory","title":"Class Field Theory","text":"using Hecke # hide\nQx, x = PolynomialRing(FlintQQ, \"x\");\nK, a = NumberField(x^2 - 10, \"a\");\nc, mc = class_group(K)\nA = ray_class_field(mc)","category":"page"},{"location":"Hecke/docs/src/class_fields/intro/#Conversions","page":"Class Field Theory","title":"Conversions","text":"","category":"section"},{"location":"Hecke/docs/src/class_fields/intro/","page":"Class Field Theory","title":"Class Field Theory","text":"Given a ray class field, it is possible to actually compute defining equation(s) for this field. In general, the number field constructed this way will be non-simple by type and is defined by a polynomial for each maximal cyclic quotient of prime power order in the defining group.","category":"page"},{"location":"Hecke/docs/src/class_fields/intro/","page":"Class Field Theory","title":"Class Field Theory","text":"The algorithm employed is based on Kummer-theory and requires the addition of a suitable root of unity. Progress can be monitored by setting {{{setverboselevel(:ClassField, n)}}} where 0le nle 3","category":"page"},{"location":"Hecke/docs/src/class_fields/intro/","page":"Class Field Theory","title":"Class Field Theory","text":"number_field(C::ClassField)","category":"page"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.number_field-Tuple{ClassField}","page":"Class Field Theory","title":"Hecke.number_field","text":"NumberField(CF::ClassField) -> NfRelNS{nf_elem}\n\nGiven a (formal) abelian extension, compute the class field by finding defining polynomials for all prime power cyclic subfields.\n\nNote, the return type is always a non-simple extension.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/","page":"Class Field Theory","title":"Class Field Theory","text":"using Hecke; # hide\nQx, x = PolynomialRing(FlintQQ, \"x\");\nk, a = NumberField(x^2 - 10, \"a\");\nc, mc = class_group(k);\nA = ray_class_field(mc)\nK = number_field(A)\nZK = maximal_order(K)\nisone(discriminant(ZK))","category":"page"},{"location":"Hecke/docs/src/class_fields/intro/","page":"Class Field Theory","title":"Class Field Theory","text":"ray_class_field(K::NfRel{nf_elem})\ngenus_field(A::ClassField, k::AnticNumberField)\nmaximal_abelian_subfield(A::ClassField, k::AnticNumberField)\nmaximal_abelian_subfield(K::NfRel{nf_elem})","category":"page"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.ray_class_field-Tuple{Hecke.NfRel{nf_elem}}","page":"Class Field Theory","title":"Hecke.ray_class_field","text":"ray_class_field(K::NfRel{nf_elem}) -> ClassField\n\nFor a (relative) abelian extension, compute an abstract representation as a class field.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.genus_field-Tuple{ClassField,AnticNumberField}","page":"Class Field Theory","title":"Hecke.genus_field","text":"genus_field(A::ClassField, k::AnticNumberField) -> ClassField\n\nThe maximal extension contained in A that is the compositum of K with an abelian extension of k.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.maximal_abelian_subfield-Tuple{ClassField,AnticNumberField}","page":"Class Field Theory","title":"Hecke.maximal_abelian_subfield","text":"maximal_abelian_subfield(A::ClassField, k::AnticNumberField) -> ClassField\n\nThe maximal abelian extension of k contained in A. k must be a subfield of the base field of A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.maximal_abelian_subfield-Tuple{Hecke.NfRel{nf_elem}}","page":"Class Field Theory","title":"Hecke.maximal_abelian_subfield","text":"maximal_abelian_subfield(K::NfRel{nf_elem}; of_closure::Bool = false) -> ClassField\n\nUsing a probabilistic algorithm for the norm group computation, determine the maximal abelian subfield in K over its base field. If of_closure is set to true, then the algorithm is applied to the normal closure of K (without computing it).\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Invariants","page":"Class Field Theory","title":"Invariants","text":"","category":"section"},{"location":"Hecke/docs/src/class_fields/intro/","page":"Class Field Theory","title":"Class Field Theory","text":"degree(C::ClassField)\nbase_ring(A::Hecke.ClassField) \nbase_field(A::Hecke.ClassField) \ndiscriminant(C::Hecke.ClassField)\nconductor(C::Hecke.ClassField) \ndefining_modulus(C::ClassField)\niscyclic(C::ClassField)\nisconductor(C::Hecke.ClassField, m::NfOrdIdl, inf_plc::Array{InfPlc,1})\nisnormal(C::ClassField)\niscentral(C::ClassField)","category":"page"},{"location":"Hecke/docs/src/class_fields/intro/#AbstractAlgebra.Generic.degree-Tuple{ClassField}","page":"Class Field Theory","title":"AbstractAlgebra.Generic.degree","text":"degree(A::ClassField)\n\nThe degree of A over its base field, i.e. the size of the defining ideal group.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#AbstractAlgebra.base_ring-Tuple{ClassField}","page":"Class Field Theory","title":"AbstractAlgebra.base_ring","text":"base_ring(A::ClassField)\n\nThe maximal order of the field that A is defined over.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.base_field-Tuple{ClassField}","page":"Class Field Theory","title":"Hecke.base_field","text":"base_field(A::ClassField)\n\nThe number field that A is defined over.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#AbstractAlgebra.Generic.discriminant-Tuple{ClassField}","page":"Class Field Theory","title":"AbstractAlgebra.Generic.discriminant","text":"discriminant(C::ClassField) -> NfOrdIdl\n\nUsing the conductor-discriminant formula, compute the (relative) discriminant of C. This does not use the defining equations.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.conductor-Tuple{ClassField}","page":"Class Field Theory","title":"Hecke.conductor","text":"conductor(C::ClassField) -> NfOrdIdl, Array{InfPlc,1}\n\nReturn the conductor of the abelian extension corresponding to C.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.defining_modulus-Tuple{ClassField}","page":"Class Field Theory","title":"Hecke.defining_modulus","text":"defining_modulus(CF::ClassField)\n\nThe modulus, i.e. an ideal of the set of real places, used to create the class field.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.iscyclic-Tuple{ClassField}","page":"Class Field Theory","title":"Hecke.iscyclic","text":"iscyclic(C::ClassField)\n\nTests if the (relative) automorphism group of C is cyclic (by checking the defining ideal group).\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.isconductor-Tuple{ClassField,NfAbsOrdIdl{AnticNumberField,nf_elem},Array{InfPlc,1}}","page":"Class Field Theory","title":"Hecke.isconductor","text":"isconductor(C::Hecke.ClassField, m::NfOrdIdl, inf_plc::Array{InfPlc,1}=InfPlc[]; check) -> NfOrdIdl, Array{InfPlc,1}\n\nChecks if (m, inf_plc) is the conductor of the abelian extension corresponding to C. If check is false, it assumes that the given modulus is a multiple of the conductor. This is usually faster than computing the conductor.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.isnormal-Tuple{ClassField}","page":"Class Field Theory","title":"Hecke.isnormal","text":"isnormal(C::ClassField) -> Bool\n\nFor a class field C defined over a normal base field k, decide if C is normal over Q.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.iscentral-Tuple{ClassField}","page":"Class Field Theory","title":"Hecke.iscentral","text":"iscentral(C::ClassField) -> Bool\n\nFor a class field C defined over a normal base field k, decide if C is central over Q.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Operations","page":"Class Field Theory","title":"Operations","text":"","category":"section"},{"location":"Hecke/docs/src/class_fields/intro/","page":"Class Field Theory","title":"Class Field Theory","text":"*(a::Hecke.ClassField, b::Hecke.ClassField)\ncompositum(a::Hecke.ClassField, b::Hecke.ClassField)\n==(a::Hecke.ClassField, b::Hecke.ClassField)\nintersect(a::Hecke.ClassField, b::Hecke.ClassField)\nprime_decomposition_type(C::Hecke.ClassField, p::Hecke.NfAbsOrdIdl)\nHecke.issubfield(a::ClassField, b::ClassField)\nHecke.islocal_norm(r::Hecke.ClassField, a::Hecke.NfAbsOrdElem)\nHecke.islocal_norm(r::Hecke.ClassField, a::Hecke.NfAbsOrdElem, p::Hecke.NfAbsOrdIdl)\nHecke.normal_closure(r::Hecke.ClassField) \nsubfields(r::ClassField)\nsubfields(r::ClassField, d::Int)","category":"page"},{"location":"Hecke/docs/src/class_fields/intro/#Base.:*-Tuple{ClassField,ClassField}","page":"Class Field Theory","title":"Base.:*","text":"*(A::ClassField, B::ClassField) -> ClassField\n\nThe compositum of a and b as a (formal) class field.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.compositum-Tuple{ClassField,ClassField}","page":"Class Field Theory","title":"Hecke.compositum","text":"compositum(a::ClassField, b::ClassField) -> ClassField\n\nThe compositum of a and b as a (formal) class field.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Base.:==-Tuple{ClassField,ClassField}","page":"Class Field Theory","title":"Base.:==","text":"==(a::ClassField, b::ClassField)\n\nTests if a and b are equal.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Base.intersect-Tuple{ClassField,ClassField}","page":"Class Field Theory","title":"Base.intersect","text":"intersect(a::ClassField, b::ClassField) -> ClassField\n\nThe intersection of a and b as a class field.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.prime_decomposition_type-Tuple{ClassField,NfAbsOrdIdl}","page":"Class Field Theory","title":"Hecke.prime_decomposition_type","text":"prime_decomposition_type(C::ClassField, p::NfAbsOrdIdl) -> (Int, Int, Int)\n\nFor a prime p in the base ring of r, determine the splitting type of p  in r. ie. the tuple (e f g) giving the ramification degree, the inertia and the number of primes above p.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.issubfield-Tuple{ClassField,ClassField}","page":"Class Field Theory","title":"Hecke.issubfield","text":"issubfield(a::ClassField, b::ClassField) -> Bool\n\nDetermines if a is a subfield of b.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.islocal_norm-Tuple{ClassField,NfAbsOrdElem}","page":"Class Field Theory","title":"Hecke.islocal_norm","text":"islocal_norm(r::ClassField, a::NfAbsOrdElem) -> Bool\n\nTests if a is a local norm at all finite places in the extension implictly given by r.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.islocal_norm-Tuple{ClassField,NfAbsOrdElem,NfAbsOrdIdl}","page":"Class Field Theory","title":"Hecke.islocal_norm","text":"islocal_norm(r::ClassField, a::NfAbsOrdElem, p::NfAbsOrdIdl) -> Bool\n\nTests if a is a local norm at p in the extension implictly given by r. Currently the conductor cannot have infinite places.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.normal_closure-Tuple{ClassField}","page":"Class Field Theory","title":"Hecke.normal_closure","text":"normal_closure(C::ClassField) -> ClassField\n\nFor a ray class field C extending a normal base field k, compute the normal closure over Q.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.subfields-Tuple{ClassField}","page":"Class Field Theory","title":"Hecke.subfields","text":"subfields(C::ClassField) -> Array{ClassField, 1}\n\nFind all subfields of C as class fields. Note: this will not find all subfields over Q, but only the ones sharing the same base field.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/class_fields/intro/#Hecke.subfields-Tuple{ClassField,Int64}","page":"Class Field Theory","title":"Hecke.subfields","text":"subfields(C::ClassField, d::Int) -> Array{ClassField, 1}\n\nFind all subfields of C of degree d as class fields. Note: this will not find all subfields over Q, but only the ones sharing the same base field.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/toc/#Table-of-contents","page":"-","title":"Table of contents","text":"","category":"section"},{"location":"Hecke/docs/src/toc/","page":"-","title":"-","text":"Pages = [\"number_fields/intro.md\",\n           \"orders/introduction.md\", \n           \"orders/basics.md\",\n           \"orders/ideals.md\",\n           \"MaximalOrders/Introduction.md\",\n           \"MaximalOrders/Creation.md\",\n           \"MaximalOrders/Elements.md\",\n           \"MaximalOrders/Ideals.md\",\n         \"abelian/introduction.md\",\n         \"class_fields/intro.md\"\n         ]","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#Generic-power-series","page":"Generic power series","title":"Generic power series","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"AbstractAlgebra.jl allows the creation of capped relative and absolute power series over any computable commutative ring R.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Capped relative power series are power series of the form a_jx^j + a_j+1x^j+1 + cdots + a_k-1x^k-1 + O(x^k) where a_j in R and the relative precision k - j is at most equal to some specified precision n.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Capped absolute power series are power series of the form a_jx^j + a_j+1x^j+1 + cdots + a_n-1x^n-1 + O(x^n) where j geq 0, a_j in R and the precision n is fixed.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"There are two implementations of relative series: relative power series, implemented in src/generic/RelSeries.jl for which j  0 in the above description, and Laurent series where j can be negative, implemented in src/generic/Laurent.jl. Note that there are two implementations for Laurent series, one over rings and one over fields, though in practice most of the implementation uses the same code in both cases.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"There is a single implementation of absolute series: absolute power series, implemented in src/generic/AbsSeries.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"As well as implementing the Series Ring interface, the series modules in AbstractAlgebra.jl implement the generic algorithms described below.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"All of the generic functionality is part of the Generic submodule of AbstractAlgebra.jl. This is exported by default so that it is not necessary to qualify function names.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#Types-and-parent-objects","page":"Generic power series","title":"Types and parent objects","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"The types of generic series implemented by AbstractAlgebra.jl are Generic.RelSeries{T}, Generic.AbsSeries{T}, Generic.LaurentSeriesRingElem{T} and Generic.LaurentSeriesFieldElem{T}.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Relative power series elements belong to the abstract type AbstractAlgebra.RelSeriesElem.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Laurent series elements belong directly to either AbstractAlgebra.RingElem or AbstractAlgebra.FieldElem since it is more useful to be able to distinguish whether they belong to a ring or field than it is to distinguish that they are relative series.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Absolute power series elements belong to AbstractAlgebra.AbsSeriesElem.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"The parent types for relative and absolute power series, Generic.RelSeriesRing{T} and Generic.AbsSeriesRing{T} respectively, belong to AbstractAlgebra.SeriesRing{T}.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"The parent types for Laurent series rings and fields, Generic.LaurentSeriesRing{T} and Generic.LaurentSeriesField{T} respectively, belong directly to AbstractAlgebra.Ring and AbstractAlgebra.Field respectively.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"The default precision, string representation of the variable and base ring R of a generic power series are stored in its parent object.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#Series-ring-constructors","page":"Generic power series","title":"Series ring constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"In order to construct series in AbstractAlgebra.jl, one must first construct the ring itself. This is accomplished with any of the following constructors.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"PowerSeriesRing(R::AbstractAlgebra.Ring, prec_max::Int, s::AbstractString; cached::Bool = true, model=:capped_relative)","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"LaurentSeriesRing(R::AbstractAlgebra.Ring, prec_max::Int, s::AbstractString; cached::Bool = true)","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"LaurentSeriesRing(R::AbstractAlgebra.Field, prec_max::Int, s::AbstractString; cached::Bool = true)","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Given a base ring R, a maximum precision (relative or absolute, depending on the model) and a string s specifying how the generator (variable) should be printed, return a typle S, x representing the series ring and its generator.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"By default, S will depend only on S, x and the maximum precision and will be cached. Setting the optional argument cached to false will prevent this.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"In the case of power series, the optional argument model can be set to either :capped_absolute or capped_relative, depending on which power series model is required.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Here are some examples of constructing various kinds of series rings and coercing various elements into those rings.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"julia> R, x = PowerSeriesRing(ZZ, 10, \"x\")\n(Univariate power series ring in x over Integers, x + O(x^11))\n\njulia> S, y = PowerSeriesRing(ZZ, 10, \"y\"; model=:capped_absolute)\n(Univariate power series ring in y over Integers, y + O(y^10))\n\njulia> T, z = LaurentSeriesRing(ZZ, 10, \"z\")\n(Laurent series ring in z over Integers, z + O(z^11))\n\njulia> U, w = LaurentSeriesField(QQ, 10, \"w\")\n(Laurent series field in w over Rationals, w + O(w^11))\n\njulia> f = R()\nO(x^10)\n\njulia> g = S(123)\n123 + O(y^10)\n\njulia> h = U(BigInt(1234))\n1234 + O(w^10)\n\njulia> k = T(z + 1)\n1 + z + O(z^10)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#Big-oh-notation","page":"Generic power series","title":"Big-oh notation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Series elements can be given a precision using the big-oh notation. This is provided by a function of the following form, (or something equivalent for Laurent series):","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"O(x::SeriesElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"julia> R, x = PowerSeriesRing(ZZ, 10, \"x\")\n(Univariate power series ring in x over Integers, x + O(x^11))\n\njulia> S, y = LaurentSeriesRing(ZZ, 10, \"y\")\n(Laurent series ring in y over Integers, y + O(y^11))\n\njulia> f = 1 + 2x + O(x^5)\n1 + 2*x + O(x^5)\n\njulia> g = 2y + 7y^2 + O(y^7)\n2*y + 7*y^2 + O(y^7)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"What is happening here in practice is that O(x^n) is creating the series 0 + O(x^n) and the rules for addition of series dictate that if this is added to a series of greater precision, then the lower of the two precisions must be used.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Of course it may be that the precision of the series that O(x^n) is added to is already lower than n, in which case adding O(x^n) has no effect. This is the case if the default precision is too low, since x on its own has the default precision.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#Power-series-models","page":"Generic power series","title":"Power series models","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Capped relative power series have their maximum relative precision capped at some value prec_max. This means that if the leading term of a nonzero power series element is c_ax^a and the precision is b then the power series is of the form  c_ax^a + c_a+1x^a+1 + ldots + O(x^a + b).","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"The zero power series is simply taken to be 0 + O(x^b).","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"The capped relative model has the advantage that power series are stable multiplicatively. In other words, for nonzero power series f and g we have that divexact(f*g), g) == f.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"However, capped relative power series are not additively stable, i.e. we do not always have (f + g) - g = f.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Similar comments apply to Laurent series.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"On the other hand, capped absolute power series have their absolute precision capped. This means that if the leading term of a nonzero power series element is c_ax^a and the precision is b then the power series is of the form c_ax^a + c_a+1x^a+1 + ldots + O(x^b).","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Capped absolute series are additively stable, but not necessarily multiplicatively stable.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"For all models, the maximum precision is also used as a default precision in the case of coercing coefficients into the ring and for any computation where the result could mathematically be given to infinite precision.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"In all models we say that two power series are equal if they agree up to the minimum absolute precision of the two power series.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Thus, for example, x^5 + O(x^10) == 0 + O(x^5), since the minimum absolute precision is 5.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"During computations, it is possible for power series to lose relative precision due to cancellation. For example if f = x^3 + x^5 + O(x^8) and g = x^3 + x^6 + O(x^8) then f - g = x^5 - x^6 + O(x^8) which now has relative precision 3 instead of relative precision 5.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Amongst other things, this means that equality is not transitive. For example x^6 + O(x^11) == 0 + O(x^5) and x^7 + O(x^12) == 0 + O(x^5) but x^6 + O(x^11) neq x^7 + O(x^12).","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Sometimes it is necessary to compare power series not just for arithmetic equality, as above, but to see if they have precisely the same precision and terms. For this purpose we introduce the isequal function.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"For example, if f = x^2 + O(x^7) and g = x^2 + O(x^8) and h = 0 + O(x^2) then f == g, f == h and g == h, but isequal(f, g), isequal(f, h) and isequal(g, h) would all return false. However, if k = x^2 + O(x^7) then isequal(f, k) would return true.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"There are further difficulties if we construct polynomial over power series. For example, consider the polynomial in y over the power series ring in x over the rationals. Normalisation of such polynomials is problematic. For instance, what is the leading coefficient of (0 + O(x^10))y + (1 + O(x^10))?","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"If one takes it to be (0 + O(x^10)) then some functions may not terminate due to the fact that algorithms may require the degree of polynomials to decrease with each iteration. Instead, the degree may remain constant and simply accumulate leading terms which are arithmetically zero but not identically zero.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"On the other hand, when constructing power series over other power series, if we simply throw away terms which are arithmetically equal to zero, our computations may have different output depending on the order in which the power series are added!","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"One should be aware of these difficulties when working with power series. Power series, as represented on a computer, simply don't satisfy the axioms of a ring. They must be used with care in order to approximate operations in a mathematical power series ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Simply increasing the precision will not necessarily give a \"more correct\" answer and some computations may not even terminate due to the presence of arithmetic zeroes!","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"An absolute power series ring over a ring R with precision p behaves very much like the quotient Rx(x^p) of the polynomial ring over R. Therefore one can often treat absolute power series rings as though they were rings. However, this depends on all series being given a precision equal to the specified maximum precision and not a lower precision.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#Basic-ring-functionality","page":"Generic power series","title":"Basic ring functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"All power series models provide the functionality described in the Ring and Series Ring interfaces.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"julia> S, x = PowerSeriesRing(ZZ, 10, \"x\")\n(Univariate power series ring in x over Integers, x + O(x^11))\n\njulia> f = 1 + 3x + x^3 + O(x^10)\n1 + 3*x + x^3 + O(x^10)\n\njulia> g = 1 + 2x + x^2 + O(x^10)\n1 + 2*x + x^2 + O(x^10)\n\njulia> h = zero(S)\nO(x^10)\n\njulia> k = one(S)\n1 + O(x^10)\n\njulia> isone(k)\ntrue\n\njulia> iszero(f)\nfalse\n\njulia> n = pol_length(f)\n4\n\njulia> c = polcoeff(f, 3)\n1\n\njulia> U = base_ring(S)\nIntegers\n\njulia> v = var(S)\n:x\n\njulia> T = parent(x + 1)\nUnivariate power series ring in x over Integers\n\njulia> g == deepcopy(g)\ntrue\n\njulia> t = divexact(2g, 2)\n1 + 2*x + x^2 + O(x^10)\n\njulia> p = precision(f)\n10\n","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#Series-functionality-provided-by-AbstractAlgebra.jl","page":"Generic power series","title":"Series functionality provided by AbstractAlgebra.jl","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"The functionality below is automatically provided by AbstractAlgebra.jl for any series module that implements the full Series Ring interface. This includes AbstractAlgebra's own generic series rings.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Of course, modules are encouraged to provide specific implementations of the functions described here, that override the generic implementation.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Unless otherwise noted, the functions are available for all series models, including Laurent series. We denote this by using the abstract type AbstractAlgebra.RelSeriesElem, even though absolute series and Laurent series types do not belong to this abstract type.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#Basic-functionality","page":"Generic power series","title":"Basic functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"coeff(a::AbstractAlgebra.SeriesElem, n::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Return the degree n coefficient of the given power series. Note coefficients are numbered from n = 0 for the constant coefficient. If n exceeds the current precision of the power series, the function returns a zero coefficient.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"For power series types, n must be non-negative. Laurent series do not have this restriction.","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"modulus{T <: ResElem}(::SeriesElem{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#AbstractAlgebra.Generic.modulus-Union{Tuple{SeriesElem{T}}, Tuple{T}} where T<:ResElem","page":"Generic power series","title":"AbstractAlgebra.Generic.modulus","text":"modulus(a::AbstractAlgebra.SeriesElem{T}) where {T <: ResElem}\n\nReturn the modulus of the coefficients of the given power series.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"isgen(::RelSeriesElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#AbstractAlgebra.isgen-Tuple{RelSeriesElem}","page":"Generic power series","title":"AbstractAlgebra.isgen","text":"isgen(a::AbstractAlgebra.RelSeriesElem)\n\nReturn true if the given power series is arithmetically equal to the generator of its power series ring to its current precision, otherwise return false.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"isunit(::RelSeriesElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#AbstractAlgebra.isunit-Tuple{RelSeriesElem}","page":"Generic power series","title":"AbstractAlgebra.isunit","text":"isunit(a::AbstractAlgebra.RelSeriesElem)\n\nReturn true if the given power series is arithmetically equal to a unit, i.e. is invertible, otherwise return false.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"julia> R, t = PowerSeriesRing(QQ, 10, \"t\")\n(Univariate power series ring in t over Rationals, t + O(t^11))\n\njulia> S, x = PowerSeriesRing(R, 30, \"x\")\n(Univariate power series ring in x over Univariate power series ring in t over Rationals, x + O(x^31))\n\njulia> a = O(x^4)\nO(x^4)\n\njulia> b = (t + 3)*x + (t^2 + 1)*x^2 + O(x^4)\n(3 + t + O(t^10))*x + (1 + t^2 + O(t^10))*x^2 + O(x^4)\n\njulia> k = isgen(gen(R))\ntrue\n\njulia> m = isunit(-1 + x + 2x^2)\ntrue\n\njulia> n = valuation(a)\n4\n\njulia> p = valuation(b)\n1\n\njulia> c = coeff(b, 2)\n1 + t^2 + O(t^10)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#Shifting","page":"Generic power series","title":"Shifting","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"shift_left{T <: RingElem}(::RelSeriesElem{T}, ::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#AbstractAlgebra.Generic.shift_left-Union{Tuple{T}, Tuple{RelSeriesElem{T},Int64}} where T<:RingElem","page":"Generic power series","title":"AbstractAlgebra.Generic.shift_left","text":"shift_left(x::AbstractAlgebra.RelSeriesElem{T}, n::Int) where {T <: RingElement}\n\nReturn the power series x shifted left by n terms, i.e. multiplied by x^n.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"shift_right{T <: RingElem}(::RelSeriesElem{T}, ::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#AbstractAlgebra.Generic.shift_right-Union{Tuple{T}, Tuple{RelSeriesElem{T},Int64}} where T<:RingElem","page":"Generic power series","title":"AbstractAlgebra.Generic.shift_right","text":"shift_right(x::AbstractAlgebra.RelSeriesElem{T}, n::Int) where {T <: RingElement}\n\nReturn the power series x shifted right by n terms, i.e. divided by x^n.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"julia> R, t = PolynomialRing(QQ, \"t\")\n(Univariate Polynomial Ring in t over Rationals, t)\n\njulia> S, x = PowerSeriesRing(R, 30, \"x\")\n(Univariate power series ring in x over Univariate Polynomial Ring in t over Rationals, x + O(x^31))\n\njulia> a = 2x + x^3\n2*x + x^3 + O(x^31)\n\njulia> b = O(x^4)\nO(x^4)\n\njulia> c = 1 + x + 2x^2 + O(x^5)\n1 + x + 2*x^2 + O(x^5)\n\njulia> d = 2x + x^3 + O(x^4)\n2*x + x^3 + O(x^4)\n\njulia> f = shift_left(a, 2)\n2*x^3 + x^5 + O(x^33)\n\njulia> g = shift_left(b, 2)\nO(x^6)\n\njulia> h = shift_right(c, 1)\n1 + 2*x + O(x^4)\n\njulia> k = shift_right(d, 3)\n1 + O(x^1)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#Truncation","page":"Generic power series","title":"Truncation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"truncate{T <: RingElem}(::RelSeriesElem{T}, ::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#Base.truncate-Union{Tuple{T}, Tuple{RelSeriesElem{T},Int64}} where T<:RingElem","page":"Generic power series","title":"Base.truncate","text":"truncate(a::AbstractAlgebra.RelSeriesElem{T}, n::Int) where {T <: RingElement}\n\nReturn a truncated to (absolute) precision n.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"julia> R, t = PolynomialRing(QQ, \"t\")\n(Univariate Polynomial Ring in t over Rationals, t)\n\njulia> S, x = PowerSeriesRing(R, 30, \"x\")\n(Univariate power series ring in x over Univariate Polynomial Ring in t over Rationals, x + O(x^31))\n\njulia> a = 2x + x^3\n2*x + x^3 + O(x^31)\n\njulia> b = O(x^4)\nO(x^4)\n\njulia> c = 1 + x + 2x^2 + O(x^5)\n1 + x + 2*x^2 + O(x^5)\n\njulia> d = 2x + x^3 + O(x^4)\n2*x + x^3 + O(x^4)\n\njulia> f = truncate(a, 3)\n2*x + O(x^3)\n\njulia> g = truncate(b, 2)\nO(x^2)\n\njulia> h = truncate(c, 7)\n1 + x + 2*x^2 + O(x^5)\n\njulia> k = truncate(d, 5)\n2*x + x^3 + O(x^4)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#Division","page":"Generic power series","title":"Division","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Base.inv(::RelSeriesElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#Base.inv-Tuple{RelSeriesElem}","page":"Generic power series","title":"Base.inv","text":"Base.inv(a::AbstractAlgebra.RelSeriesElem)\n\nReturn the inverse of the power series a, i.e. 1a.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"julia> R, t = PolynomialRing(QQ, \"t\")\n(Univariate Polynomial Ring in t over Rationals, t)\n\njulia> S, x = PowerSeriesRing(R, 30, \"x\")\n(Univariate power series ring in x over Univariate Polynomial Ring in t over Rationals, x + O(x^31))\n\njulia> a = 1 + x + 2x^2 + O(x^5)\n1 + x + 2*x^2 + O(x^5)\n\njulia> b = S(-1)\n-1 + O(x^30)\n\njulia> c = inv(a)\n1 - x - x^2 + 3*x^3 - x^4 + O(x^5)\n\njulia> d = inv(b)\n-1 + O(x^30)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#Derivative-and-integral","page":"Generic power series","title":"Derivative and integral","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"derivative(a::RelSeriesElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#AbstractAlgebra.Generic.derivative-Tuple{RelSeriesElem}","page":"Generic power series","title":"AbstractAlgebra.Generic.derivative","text":"derivative(f::AbstractAlgebra.MPolyElem{T}, x::Int) where {T <: RingElement}\n\nReturn the partial derivative of f with respect to j-th variable of the polynomial ring.\n\n\n\nderivative(f::AbstractAlgebra.MPolyElem{T}, x::AbstractAlgebra.MPolyElem{T}) where T <: RingElement\n\nReturn the partial derivative of f with respect to x. The value x must be a generator of the polynomial ring of f.\n\n\n\nderivative(f::RelSeriesElem{T}) -> RelSeriesElem\n\nReturn the derivative of the power series f.\n\njulia> R, x = PowerSeriesRing(QQ, 10, \"x\")\n(Univariate power series ring in x over Rationals, x + O(x^11))\n\njulia> f = 2 + x + 3x^3\n2 + x + 3*x^3 + O(x^10)\n\njulia> derivative(f)\n1 + 9*x^2 + O(x^9)\n\n\n\nderivative(f::AbsSeriesElem{T}) -> AbsSeriesElem\n\nReturn the derivative of the power series f.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"integral(a::RelSeriesElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#AbstractAlgebra.Generic.integral-Tuple{RelSeriesElem}","page":"Generic power series","title":"AbstractAlgebra.Generic.integral","text":"integral(f::RelSeriesElem{T}) -> RelSeriesElem\n\nReturn the integral of the power series f.\n\n\n\nintegral(f::RelSeriesElem{T}) -> RelSeriesElem\n\nReturn the integral of the power series f.\n\njulia> R, x = PowerSeriesRing(QQ, 10, \"x\")\n(Univariate power series ring in x over Rationals, x + O(x^11))\n\njulia> f = 2 + x + 3x^3\n2 + x + 3*x^3 + O(x^10)\n\njulia> integral(f)\n2*x + 1//2*x^2 + 3//4*x^4 + O(x^11)\n\n\n\nintegral(f::AbsSeriesElem{T}) -> AbsSeriesElem\n\nReturn the integral of the power series f.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/series/#Special-functions","page":"Generic power series","title":"Special functions","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Base.log(a::SeriesElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Base.exp(a::RelSeriesElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#Base.exp-Tuple{RelSeriesElem}","page":"Generic power series","title":"Base.exp","text":"exp(a::FlintPuiseuxSeriesElem{T}) where T <: RingElem\n\nReturn the exponential of the given Puiseux series.\n\n\n\nexp(a::AbstractAlgebra.RelSeriesElem)\n\nReturn the exponential of the power series a.\n\n\n\nexp(a::AbstractAlgebra.AbsSeriesElem)\n\nReturn the exponential of the power series a.\n\n\n\nexp(a::Generic.LaurentSeriesElem)\n\nReturn the exponential of the power series a.\n\n\n\nexp(a::Generic.PuiseuxSeriesElem{T}) where T <: RingElement\n\nReturn the exponential of the given Puiseux series a.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Base.sqrt(a::RelSeriesElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/series/#Base.sqrt-Tuple{RelSeriesElem}","page":"Generic power series","title":"Base.sqrt","text":"sqrt(a::AbstractAlgebra.RelSeriesElem)\n\nReturn the square root of the power series a.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/series/","page":"Generic power series","title":"Generic power series","text":"julia> R, t = PolynomialRing(QQ, \"t\")\n(Univariate Polynomial Ring in t over Rationals, t)\n\njulia> S, x = PowerSeriesRing(R, 30, \"x\")\n(Univariate power series ring in x over Univariate Polynomial Ring in t over Rationals, x + O(x^31))\n\njulia> T, z = PowerSeriesRing(QQ, 30, \"z\")\n(Univariate power series ring in z over Rationals, z + O(z^31))\n\njulia> a = 1 + z + 3z^2 + O(z^5)\n1 + z + 3*z^2 + O(z^5)\n\njulia> b = z + 2z^2 + 5z^3 + O(z^5)\nz + 2*z^2 + 5*z^3 + O(z^5)\n\njulia> c = exp(x + O(x^40))\n1 + x + 1//2*x^2 + 1//6*x^3 + 1//24*x^4 + 1//120*x^5 + 1//720*x^6 + 1//5040*x^7 + 1//40320*x^8 + 1//362880*x^9 + 1//3628800*x^10 + 1//39916800*x^11 + 1//479001600*x^12 + 1//6227020800*x^13 + 1//87178291200*x^14 + 1//1307674368000*x^15 + 1//20922789888000*x^16 + 1//355687428096000*x^17 + 1//6402373705728000*x^18 + 1//121645100408832000*x^19 + 1//2432902008176640000*x^20 + 1//51090942171709440000*x^21 + 1//1124000727777607680000*x^22 + 1//25852016738884976640000*x^23 + 1//620448401733239439360000*x^24 + 1//15511210043330985984000000*x^25 + 1//403291461126605635584000000*x^26 + 1//10888869450418352160768000000*x^27 + 1//304888344611713860501504000000*x^28 + 1//8841761993739701954543616000000*x^29 + 1//265252859812191058636308480000000*x^30 + O(x^31)\n\njulia> d = divexact(x, exp(x + O(x^40)) - 1)\n1 - 1//2*x + 1//12*x^2 - 1//720*x^4 + 1//30240*x^6 - 1//1209600*x^8 + 1//47900160*x^10 - 691//1307674368000*x^12 + 1//74724249600*x^14 - 3617//10670622842880000*x^16 + 43867//5109094217170944000*x^18 - 174611//802857662698291200000*x^20 + 77683//14101100039391805440000*x^22 - 236364091//1693824136731743669452800000*x^24 + 657931//186134520519971831808000000*x^26 - 3392780147//37893265687455865519472640000000*x^28 + O(x^29)\n\njulia> f = exp(b)\n1 + z + 5//2*z^2 + 43//6*z^3 + 193//24*z^4 + O(z^5)\n\njulia> log(exp(b)) == b\ntrue\n\njulia> h = sqrt(a)\n1 + 1//2*z + 11//8*z^2 - 11//16*z^3 - 77//128*z^4 + O(z^5)\n","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/series/#Power-series-and-Laurent-series","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"","category":"section"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"Nemo allows the creation of capped relative and absolute power series over any computable ring R. Capped relative power series are power series of the form a_jx^j + a_j+1x^j+1 + cdots + a_k-1x^k-1 + O(x^k) where j geq 0, a_j in R and the relative precision k - j is at most equal to some specified precision n. On the other hand capped absolute power series are power series of the form a_jx^j + a_j+1x^j+1 + cdots + a_n-1x^n-1 + O(x^n) where j geq 0, a_j in R and the precision n is fixed.","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"There are two different kinds of implementation: a generic one for the case where no specific implementation exists (provided by AbstractAlgebra.jl), and efficient implementations of power series over numerous specific rings, usually provided by C/C++ libraries.","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"The following table shows each of the relative power series types available in Nemo, the base ring R, and the Julia/Nemo types for that kind of series (the type information is mainly of concern to developers).","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"Base ring Library Element type Parent type\nGeneric ring R AbstractAlgebra.jl `Generic.RelSeries{T} Generic.RelSeriesRing{T}\nmathbbZ Flint fmpz_rel_series FmpzRelSeriesRing\nmathbbZnmathbbZ (small n) Flint nmod_rel_series NmodRelSeriesRing\nmathbbZnmathbbZ Flint fmpz_mod_rel_series FmpzModRelSeriesRing\nmathbbQ Flint fmpq_rel_series FmpqRelSeriesRing\nmathbbF_p^n (small p) Flint fq_nmod_rel_series FqNmodRelSeriesRing\nmathbbF_p^n (large p) Flint fq_rel_series FqRelSeriesRing","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"All relative power series elements belong to the abstract type RelSeriesElem and all of the relative power series ring types belong to the abstract type RelSeriesRing.","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"The maximum relative precision, the string representation of the variable and the base ring R of a generic power series are stored in its parent object. ","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"Here is the corresponding table for the absolute power series types.","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"Base ring Library Element type Parent type\nGeneric ring R AbstractAlgebra.jl Generic.AbsSeries{T} Generic.AbsSeriesRing{T}\nmathbbZ Flint fmpz_abs_series FmpzAbsSeriesRing\nmathbbZnmathbbZ Flint fmpz_mod_abs_series FmpzModAbsSeriesRing\nmathbbQ Flint fmpq_abs_series FmpqAbsSeriesRing\nmathbbF_p^n (small n) Flint fq_nmod_abs_series FqNmodAbsSeriesRing\nmathbbF_p^n (large n) Flint fq_abs_series FqAbsSeriesRing","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"All absolute power series elements belong to the abstract type AbsSeriesElem and all of the absolute power series ring types belong to the abstract type AbsSeriesRing.","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"The absolute precision, the string representation of the variable and the base ring R of a generic power series are stored in its parent object. ","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"All power series element types belong to the abstract type SeriesElem and all of the power series ring types belong to the abstract type SeriesRing. This enables one to write generic functions that can accept any Nemo power series type.","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"AbstractAlgebra.jl also provides Nemo with a generic implementation of Laurent series over a given ring R. For completeness, we list it here.","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"Base ring Library Element type Parent type\nGeneric ring R AbstractAlgebra.jl Generic.LaurentSeriesRingElem{T} Generic.LaurentSeriesRing{T}\nGeneric field K AbstractAlgebra.jl Generic.LaurentSeriesFieldElem{T} ","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"Generic.LaurentSeriesField{T}","category":"page"},{"location":"Nemo/docs/src/series/#Capped-relative-power-series","page":"Power series and Laurent series","title":"Capped relative power series","text":"","category":"section"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"Capped relative power series have their maximum relative precision capped at some value prec_max. This means that if the leading term of a nonzero power series element is c_ax^a and the precision is b then the power series is of the form  c_ax^a + c_a+1x^a+1 + ldots + O(x^a + b).","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"The zero power series is simply taken to be 0 + O(x^b).","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"The capped relative model has the advantage that power series are stable multiplicatively. In other words, for nonzero power series f and g we have that divexact(f*g), g) == f.","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"However, capped relative power series are not additively stable, i.e. we do not always have (f + g) - g = f.","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"In the capped relative model we say that two power series are equal if they agree up to the minimum absolute precision of the two power series. Thus, for example, x^5 + O(x^10) == 0 + O(x^5), since the minimum absolute precision is 5.","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"During computations, it is possible for power series to lose relative precision due to cancellation. For example if f = x^3 + x^5 + O(x^8) and g = x^3 + x^6 + O(x^8) then f - g = x^5 - x^6 + O(x^8) which now has relative precision 3 instead of relative precision 5.","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"Amongst other things, this means that equality is not transitive. For example x^6 + O(x^11) == 0 + O(x^5) and x^7 + O(x^12) == 0 + O(x^5) but x^6 + O(x^11) neq x^7 + O(x^12).","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"Sometimes it is necessary to compare power series not just for arithmetic equality, as above, but to see if they have precisely the same precision and terms. For this purpose we introduce the isequal function.","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"For example, if f = x^2 + O(x^7) and g = x^2 + O(x^8) and h = 0 + O(x^2) then f == g, f == h and g == h, but isequal(f, g), isequal(f, h) and isequal(g, h) would all return false. However, if k = x^2 + O(x^7) then isequal(f, k) would return true.","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"There are further difficulties if we construct polynomial over power series. For example, consider the polynomial in y over the power series ring in x over the rationals. Normalisation of such polynomials is problematic. For instance, what is the leading coefficient of (0 + O(x^10))y + (1 + O(x^10))?","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"If one takes it to be (0 + O(x^10)) then some functions may not terminate due to the fact that algorithms may require the degree of polynomials to decrease with each iteration. Instead, the degree may remain constant and simply accumulate leading terms which are arithmetically zero but not identically zero.","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"On the other hand, when constructing power series over other power series, if we simply throw away terms which are arithmetically equal to zero, our computations may have different output depending on the order in which the power series are added!","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"One should be aware of these difficulties when working with power series. Power series, as represented on a computer, simply don't satisfy the axioms of a ring. They must be used with care in order to approximate operations in a mathematical power series ring.","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"Simply increasing the precision will not necessarily give a \"more correct\" answer and some computations may not even terminate due to the presence of arithmetic zeroes!","category":"page"},{"location":"Nemo/docs/src/series/#Capped-absolute-power-series","page":"Power series and Laurent series","title":"Capped absolute power series","text":"","category":"section"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"An absolute power series ring over a ring R with precision p behaves  very much like the quotient Rx(x^p) of the polynomial ring over R.","category":"page"},{"location":"Nemo/docs/src/series/#Power-series-functionality","page":"Power series and Laurent series","title":"Power series functionality","text":"","category":"section"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"Power series rings in Nemo implement the AbstractAlgebra.jl series interface:","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/series_rings","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"In addition, generic power series and Laurent series are provided by AbstractAlgebra.jl:","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/series","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"Power series rings in Nemo also implement this generic functionality. We list below only the functionality that differs from this generic functionality, for specific rings provided by Nemo.","category":"page"},{"location":"Nemo/docs/src/series/#Special-functions","page":"Power series and Laurent series","title":"Special functions","text":"","category":"section"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"log(a::fmpq_rel_series)","category":"page"},{"location":"Nemo/docs/src/series/#Base.log-Tuple{fmpq_rel_series}","page":"Power series and Laurent series","title":"Base.log","text":"log(a::fmpq_rel_series)\n\nReturn log(a). Requires the constant term to be one.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"Base.sqrt(a::fmpq_rel_series)","category":"page"},{"location":"Nemo/docs/src/series/#Base.sqrt-Tuple{fmpq_rel_series}","page":"Power series and Laurent series","title":"Base.sqrt","text":"sqrt(a::fmpq_rel_series)\n\nReturn the power series square root of a. Requires a constant term equal to one.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"tan(a::fmpq_rel_series)\ntanh(a::fmpq_rel_series)\nsin(a::fmpq_rel_series)\nsinh(a::fmpq_rel_series)\ncos(a::fmpq_rel_series)\ncosh(a::fmpq_rel_series)","category":"page"},{"location":"Nemo/docs/src/series/#Base.tan-Tuple{fmpq_rel_series}","page":"Power series and Laurent series","title":"Base.tan","text":"tan(a::fmpq_rel_series)\n\nReturn tan(a). Requires a zero constant term.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/series/#Base.tanh-Tuple{fmpq_rel_series}","page":"Power series and Laurent series","title":"Base.tanh","text":"tanh(a::fmpq_rel_series)\n\nReturn tanh(a). Requires a zero constant term.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/series/#Base.sin-Tuple{fmpq_rel_series}","page":"Power series and Laurent series","title":"Base.sin","text":"sin(a::fmpq_rel_series)\n\nReturn sin(a). Requires a zero constant term.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/series/#Base.sinh-Tuple{fmpq_rel_series}","page":"Power series and Laurent series","title":"Base.sinh","text":"sinh(a::fmpq_rel_series)\n\nReturn sinh(a). Requires a zero constant term.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/series/#Base.cos-Tuple{fmpq_rel_series}","page":"Power series and Laurent series","title":"Base.cos","text":"cos(a::fmpq_rel_series)\n\nReturn cos(a). Requires a zero constant term.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/series/#Base.cosh-Tuple{fmpq_rel_series}","page":"Power series and Laurent series","title":"Base.cosh","text":"cosh(a::fmpq_rel_series)\n\nReturn cosh(a). Requires a zero constant term.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"asin(a::fmpq_rel_series)\nasinh(a::fmpq_rel_series)\natan(a::fmpq_rel_series)\natanh(a::fmpq_rel_series)","category":"page"},{"location":"Nemo/docs/src/series/#Base.asin-Tuple{fmpq_rel_series}","page":"Power series and Laurent series","title":"Base.asin","text":"asin(a::fmpq_rel_series)\n\nReturn asin(a). Requires a zero constant term.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/series/#Base.asinh-Tuple{fmpq_rel_series}","page":"Power series and Laurent series","title":"Base.asinh","text":"asinh(a::fmpq_rel_series)\n\nReturn asinh(a). Requires a zero constant term.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/series/#Base.atan-Tuple{fmpq_rel_series}","page":"Power series and Laurent series","title":"Base.atan","text":"atan(a::fmpq_rel_series)\n\nReturn atan(a). Requires a zero constant term.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/series/#Base.atanh-Tuple{fmpq_rel_series}","page":"Power series and Laurent series","title":"Base.atanh","text":"atanh(a::fmpq_rel_series)\n\nReturn atanh(a). Requires a zero constant term.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"Examples","category":"page"},{"location":"Nemo/docs/src/series/","page":"Power series and Laurent series","title":"Power series and Laurent series","text":"S, x = PowerSeriesRing(R, 30, \"x\")\nT, z = PowerSeriesRing(QQ, 30, \"z\")\n\na = 1 + z + 3z^2 + O(z^5)\nb = z + 2z^2 + 5z^3 + O(z^5)\n\nd = divexact(x, exp(x + O(x^40)) - 1)\nf = exp(b)\ng = log(a)\nh = sqrt(a)\nk = sin(b)\nm = atanh(b)","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/developer/parents/#Parent-objects","page":"Parent objects","title":"Parent objects","text":"","category":"section"},{"location":"Nemo/docs/src/developer/parents/#The-use-of-parent-objects-in-Nemo","page":"Parent objects","title":"The use of parent objects in Nemo","text":"","category":"section"},{"location":"Nemo/docs/src/developer/parents/#The-parent/element-model","page":"Parent objects","title":"The parent/element model","text":"","category":"section"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"As for other major computer algebra projects such as Sage and Magma, Nemo uses the parent/element model to manage its mathematical objects.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"As explained in the appendix to the AbstractAlgebra documentation, the standard type/object model used in most programming languages is insufficient for much of mathematics which often requires mathematical structures parameterised by other objects.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"For example a quotient ring by an ideal would be parameterised by the ideal. The ideal is an object in the system and not a type and so parameterised types are not sufficient to represent such quotient rings.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"This means that each mathematical \"domain\" in the system (set, group, ring, field, module, etc.) must be represented by an object in the system, rather than a type. Such objects are called parent objects.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"Just as one would write typeof(a) to get the type of an object a in an object/type system of a standard programming language, we write parent(a) to return the parent of the object a.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"When talked about with reference to a parent in this way, the object a is referred to as an element of the parent. Thus the system is divided into elements and parents. For example a polynomial would be an element of a polynomial ring, the latter being the parent of the former.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"Naturally the parent/element system leads to some issues in a programming language not built around this model. We discuss some of these issues below.","category":"page"},{"location":"Nemo/docs/src/developer/parents/#Types-in-the-parent/element-model","page":"Parent objects","title":"Types in the parent/element model","text":"","category":"section"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"As all elements and parents in Nemo are objects, those objects have types which we refer to as the element type and parent type respectively.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"For example, Flint integers have type fmpz and the parent object they all belong to, FlintZZ has type FlintIntegerRing.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"More complex parents and elements are parameterised. For example, generic univariate polynomials over a base ring R are parameterised by R. The base ring of a ring S can be obtained by the call base_ring(S).","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"We have found it extremely useful to parameterise the type of both the parent and element objects of such a ring by the type of the elements of the base ring. Thus for example, a generic polynomial with Flint integer coefficients would have type Poly{fmpz}.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"In practice Flint already implements univariate polynomials over Flint integers, and these have type fmpz_poly. But both fmpz_poly and the generic polynomials Poly{fmpz} belong to the abstract type PolyElem{fmpz} making it possible to write functions for all univariate polynomials over Flint integers.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"Given a specific element type or parent type it is possible to compute one from the other with the functions elem_type and parent_type. For example parent_type(fmpz_poly) returns FmpzPolyRing and elem_type(FmpzPolyRing) returns fmpz_poly. Similarly parent_type(Generic.Poly{fmpz}) returns Generic.PolyRing{fmpz} and so on.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"These functions are especially useful when writing type assertions or constructing arrays of elements insides function where only the parent object was passed.","category":"page"},{"location":"Nemo/docs/src/developer/parents/#Other-functions-for-computing-types","page":"Parent objects","title":"Other functions for computing types","text":"","category":"section"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"Sometimes one needs to know the type of a polynomial or matrix one would obtain if it were constructed over a given ring or with coefficients/entries of a given element type.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"This is especially important in generic code where it may not even be known which Julia package is being used. The user may be expecting an AbstractAlgebra object, a Nemo object or even some other kind of object to be constructed, depending on which package they are using.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"The function for returning the correct type for a dense matrix is dense_matrix_type to which one can pass either a base ring or an element type. For example, if AbstractAlgebra is being used, dense_matrix_type(ZZ) will return Mat{BigInt} whereas if Nemo is being used it will return fmpz_mat.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"In theory such functions should exist for all major object types, however they have in most cases not been implemented yet.","category":"page"},{"location":"Nemo/docs/src/developer/parents/#Functions-for-creating-objects-of-a-similar-type","page":"Parent objects","title":"Functions for creating objects of a similar type","text":"","category":"section"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"A slightly more consistent interface for creating objects of a type that is suitable for the package currently in use is the similar interface.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"For example, given a matrix M one can create one with the same dimensions but over a different ring R by calling similar(M, R). Likewise one can create one over the same ring with different dimensions r x c by calling similar(M, r, c).","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"The similar system is sophisticated enough to know that there is no native type provided by Flint/Antic for matrices and polynomials over a number field. The system knows that in such cases it must create a generic matrix or polynomial over the given number field.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"A great deal of thought went into the design of the similar system so that developers would not be required to implement similar for every pair of types in the package.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"Again this interface should exist for all major Nemo domains, but the functionality is still being implemented in some cases.","category":"page"},{"location":"Nemo/docs/src/developer/parents/#Changing-base-rings-and-map","page":"Parent objects","title":"Changing base rings and map","text":"","category":"section"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"Given a polynomial, matrix or other composite object over a base ring, it is often convenient to create a similar object but with all the entries or coefficients coerced into a different ring.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"For this purpose the function change_base_ring is provided.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"Similarly it may be useful to create the matrix or polynomial that results by applying a given map/function/lambda to each of the entries or coefficients.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"For this purpose Julia's map function is overloaded. There are also functions specific to polynomials and matrices called map_coeffs and map_entries respectively, which essentially do the same thing.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"Note that the implementation of such functions must make use of the functions discussed above to ensure that a matrix/polynomial of the right type is output.","category":"page"},{"location":"Nemo/docs/src/developer/parents/#Parent-checking","page":"Parent objects","title":"Parent checking","text":"","category":"section"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"When applying binary operations to a pair of elements of a given ring, it is useful to check that they are in fact elements of the same ring. This is not possible by checking the types alone. For example elements of Z7Z and Z3Z would have the same type but different parents (one parameterised by the integer 7, the other by the integer 3).","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"In order to perform such a check in a function one uses parent_check(a, b) where a and b are the objects one wishes to assert must have the same parent. If not, an exception is raised by parent_check.","category":"page"},{"location":"Nemo/docs/src/developer/parents/#Parent-object-constructors","page":"Parent objects","title":"Parent object constructors","text":"","category":"section"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"Various functions are provided for constructing parent objects. For example a polynomial ring is constructed by calling a PolynomialRing function. Such functions are called parent object constructors.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"In general parent object constructors are intended for the user and should not be used in library code. There are a number of reasons for this.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"Firstly, inside the Generic submodule of AbstractAlgebra the only parent object constructors that are directly accessible are the ones inside Generic. Thus if a Nemo function calls a function inside Generic and it creates a parent object using one of the parent object constructors, it will create a parent object for a generic ring rather than a Nemo one.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"One can work around this by calling AbstractAlgebra.PolynomialRing instead of simply PolynomialRing inside Generic, but even safer would be to find another way to construct the polynomials required.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"A second issue is that parent objects are allowed to be as large as one likes and they are cached by the system. They can also perform arbitrary precomputations for the ring/field/module etc. that is being constructed. Over time they tend to accumulate such precomputations, slowing down all generic code which made use of them. Both memory usage and performance may blow out in previously working code.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"Thirdly, parent objects must be unique across the system for a given set of parameters. This means they must be cached globally. This is problematic for any future attempts to parallelise library code.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"Most parent object constructors take a cached keyword which specifies whether the parent object should be cached or not, but again it is better overall to simply eschew the use of parent object constructors in library code.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"Instead, it is recommended to use functions such as similar, zero_matrix, identity_matrix, change_base_ring, map, etc.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"There are also functions that provide alternative ways of constructing objects, e.g. matrix provides a means of creating a matrix over a given ring with given dimensions. These should be used in preference to parent object constructors where possible. Additional functions of this type should be added in future.","category":"page"},{"location":"Nemo/docs/src/developer/parents/","page":"Parent objects","title":"Parent objects","text":"Naturally many such functions are missing at present and it is hoped that developers will fill in such infrastructure rather than simply push the can down the road for someone else to fix. Forcing the creating of parent objects into as few bottlenecks as possible will make it much easier for developers to remove problems associated with such calls when they arise in future.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/developer/topics/#Specific-topics","page":"Specific topics","title":"Specific topics","text":"","category":"section"},{"location":"Nemo/docs/src/developer/topics/#Julia-arithmetic","page":"Specific topics","title":"Julia arithmetic","text":"","category":"section"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"At the console, Julia arithmetic is often defined in a way that a numerical person would expect. For example, 3/1 returns a floating point number 3.0, sqrt(4) returns the floating point number 2.0 and exp(0) returns the floating point number 1.0.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"In each case the ring is changed from the input to the output of the function. Whilst this is often what one expects to happen in a computer algebra system, these are not the definitions one would want for algebraic operations.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"In this section we describe the alternatives we have implemented to allow algebraic computations, particularly for rings and fields.","category":"page"},{"location":"Nemo/docs/src/developer/topics/#divexact-and-divides","page":"Specific topics","title":"divexact and divides","text":"","category":"section"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Nemo implements numerous kinds of division:","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"floating point division using the / operator as per Julia\nexact division in a ring using divexact and divides\nquotient field element construction using // as per Julia\nEuclidean division using div, rem, divrem, mod and %","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"The expression divexact(a, b) for a and b in a ring R returns a value c in R such that a = bc. If such an element of R does not exist, an exception is raised.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"To instead test whether such an element exists, divides(a, b) returns a tuple (flag, q) where flag is a boolean saying whether such an exact quotient exists in the ring and if so q is such a quotient.","category":"page"},{"location":"Nemo/docs/src/developer/topics/#Euclidean-division","page":"Specific topics","title":"Euclidean division","text":"","category":"section"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Nemo must provide Euclidean division, i.e. given a and b in a Euclidean ring R it must be able to find q and r such that a = bq + r with r smaller than a with respect to some fixed Euclidean function on R. There are some restrictions imposed by Julia however.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Firstly, % is a constant alias of rem in Julia, so these are not actually two independent functions but the same function.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Julia defines div, rem and divrem for integers as a triple of functions that return Euclidean quotient and remainder, where the remainder has the same sign as the dividend, e.g. rem(1, 3) == 1 but rem(-2, 3) == -2. In other words, this triple of functions gives Euclidean division, but without a consistent set of representatives.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"When using Nemo at the console (or indeed inside any other package without importing the internal Nemo definitions) div, rem and divrem return the same values as Julia and these functions follows the Julia convention of making the sign of the remainder the same as the dividend over ZZ, e.g. rem(ZZ(1), ZZ(3)) == 1 but rem(ZZ(-2), ZZ(3)) == -2.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Internally to Nemo however, this is not convenient. For example, Hermite normal form over ZZ will only return a unique result if there is a consistent choice of representatives for the Euclidean division. This applies to the generic HNF code in AbstractAlgebra, but similar problems exist for the generic finitely presented module code in AbstractAlgebra, even when used over Nemo integers. Thus the Julia definition of rem will not suffice.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Furthermore, as Nemo wraps Flint, it is convenient that Euclidean division inside Nemo should operate the way Flint operates. This is critical if for example one wants the result of a Hermite normal form coming from Flint to be reduced using the same definition of Euclidean remainder as used elsewhere throughout the Nemo module and to return the same answers as the generic HNF code in AbstractAlgebra for example.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"In particular, Flint defines Euclidean remainder over the integers in line with the Julia function mod, namely by returning the smallest remainder with the same sign as the divisor, i.e. mod(1, 3) == 1 but mod(1, -3) == -2.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Therefore internally, Nemo chooses div, mod and divrem to be a consistent triple of functions for Euclidean division, with mod defined as per Julia. Thus in particular, div and divrem behave differently to Julia inside of Nemo itself, viz. Nemo.divrem(-1, 3) == (-1, 2).","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"The same definitions for div, mod and divrem are used internally to AbstractAlgebra as well, even for Julia integers, so that AbstractAlgebra and Nemo are both consistent internally. However, both AbstractAlgebra and Nemo export definitions in line with Julia so that behaviour at the console is consistent.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"The Nemo developers have given considerable thought to this compromise and the current situation has evolved over many iterations to the current state. We do not consider this to be a situation that needs 'fixing', though we are acutely aware that many tickets will be opened complaining about some inconsistency.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"When reflecting on the choice we have made, one must consider the following:","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Nemo must internally behave as Flint does for consistency\nThere are also functions such as powmod, invmod that reduce as per mod\nHNF requires a consistent set of representatives for uniqueness over ZZ","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Also note that Julia's rem does not provide symmetric mod, a misconception that often arises. The issues here are independent of the decision to use positive remainder (for positive modulus) in Flint, rather than symmetric mod.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"We are aware that the conventions we have chosen have inconsistencies with Julia and do not have the nice property that div, rem and divrem are a triple of Euclidean functions inside Nemo. However, we are sure that the convention we have chosen is one of only two sensible possibilities, and switching to the other convention (apart from being a huge amount of effort) would only succeed in replacing one kind of inconsistency with another.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"As a consequence of these choices, div, mod and divrem are a triple of functions for all Euclidean division across Nemo, not just for the integers. As generic code must use a consistent set of functions, we ask that developers respect this choice by using these three functions in all generic code. The functions rem and % should only be used for Julia integers, and only when one specifically wants the Julia definition.","category":"page"},{"location":"Nemo/docs/src/developer/topics/#sqrt,-inv-and-exp","page":"Specific topics","title":"sqrt, inv and exp","text":"","category":"section"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"As mentioned above, Julia does not perform computations within a given ring, but often returns a numerical result when given an exact input.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Whilst this is often what a user expects, it makes operations such as power series square root, inversion or exponentiation more tricky over an exact ring.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Therefore, AbstractAlgebra defines sqrt, inv and exp internally in a strictly algebraic way, returning a result only if it exists in the ring of the input and otherwise raising an exception.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"For example, AbstractAlgebra.sqrt(4) == 2, AbstractAlgebra.inv(-1) == -1 and AbstractAlgebra.exp(0) == 1.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Naturally these definitions are not so terribly useful to a user and are only needed for internal consistency. Therefore, of course these definitions are not exported by AbstractAlgebra so that the behaviour at the console is not affected by these definitions.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"There is currently some inconsistency in that Nemo follows the Julia numerical definitions internally rather than following the algebraic definitions provided internally in AbstractAlgebra. This may or may not change in future.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"It is worth recalling that Julia provides isqrt for integer square root. This is not sufficient to solve our problem as we require square root for all rings, not just integers. We don't feel that developers will want to type isqrt rather than sqrt internally for all rings.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"A number of changes are expected to be made with regard to the behaviour of root taking and division functions, including the ability to specify high performance alternatives that do not check the exactness of the computation. These changes are being discussed on the Nemo ticket https://github.com/Nemocas/Nemo.jl/issues/862 In particular, the table given there by thofma represents the current consensus on the changes that will be made in the future.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Note that many of the above issues with exact computations in rings exist for all the Julia transcendental functions, sin, cos, log, etc., of which there are many. If we ever add some kind of generic power series functions for these, we may extend the internal definitions to include exact algebraic versions of all these functions. At least for now this is not a pressing issue.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"The way that AbstractAlgebra deals with functions which must have a different definition inside the module than what it exports is as follows. Firstly, we do not import the functions from Base or export the functions at all. Internally we make our definitions as we want them, but then we overload the Base version explicitly to do what the console version of the function should do. This is done by explicitly defining Base.sqrt(::fmpz) for example without explicitly importing sqrt from Base, etc.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"In the Generic module discussed below, we import the definitions from AbstractAlgebra rather than Base.","category":"page"},{"location":"Nemo/docs/src/developer/topics/#Determinant","page":"Specific topics","title":"Determinant","text":"","category":"section"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Another function which Nemo handles differently to Julia is det for determinant of matrices. If the input is an integer matrix, Nemo outputs an integer rather than a floating point number for the determinant.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"However, this is not such an acute problem as Julia's det has now been placed in LinearAlgebra rather than Base. Moreover, Nemo has its own matrices and so does not conflict with the definition of det for Julia matrices.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"It is important for developers to understand this difference however. It is not generally wise to use the Julia linear algebra functionality on the Julia matrices underlying generic Nemo matrices for this reason.","category":"page"},{"location":"Nemo/docs/src/developer/topics/#The-Generic-submodule","page":"Specific topics","title":"The Generic submodule","text":"","category":"section"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"In AbstractAlgebra we define a submodule called Generic. The purpose of this module is to allow generic constructions over a given base ring. For example in Nemo, R, x = Generic.PolynomialRing(ZZ, \"x\") will construct a generic polynomial ring over Nemo integers instead of constructing a Flint polynomial ring.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"In other words x will have the type Generic.Poly{fmpz} instead of the usual fmpz_poly.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"The ability to construct generic polynomials and matrices and the like is useful for test code and for tracking down bugs in basic arithmetic. It is also useful for performance comparison of arithmetic defined for generic ring constructions vs the specialised implementations provided by C libraries like Flint.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Whilst most developers will not need to use the Generic module specifically, unless they have such needs, all Nemo developers need to understand how to define new generic ring constructions and functions for them. They also need to understand some subtleties that arise because of this mechanism.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Firstly, a generic construction like PolynomialRing must be defined inside the Generic submodule of AbstractAlgebra. All files inside the src/generic directory of AbstractAlgebra exist for this purpose. However, exporting from that submodule will not export the functionality to the Nemo user.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"To do this, one must add a function PolynomialRing for example, in src/AbstractAlgebra.jl which calls Generic.PolynomialRing. Then one needs to export PolynomialRing from AbstractAlgebra (also in that file).","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Similarly, all functions provided for generic polynomial rings are not automatically available, even when exported from the Generic submodule. Two additional things are required, namely an import from Generic into AbstractAlgebra and then an export from AbstractAlgebra to the user.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Two large lists exist in src/AbstractAlgebra.jl with these imports and exports. These are kept in alphabetical order to prevent duplicate imports/exports being added over time.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"If one wishes to extend a definition provided by Base, one can simply overload Base.blah inside the Generic submodule directly. Exceptions to this include the div, mod, divrem, sqrt, inv and exp functions mentioned above.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"For AbstractAlgebra types, one still defines these exceptions blah by overloading Base.blah directly inside Generic. However, for the versions that would conflict with the Julia definition (e.g. the definition for Int), we instead define AbstractAlgebra.blah for that specific type and a fallback AbstractAlgebra.blah(a) = Base.blah(a) which calls the Base version of the function for all other types. Of course we do not export blah from AbstractAlgebra.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"In order to make the AbstractAlgebra version available in Generic (rather than the Base version), we do not import blah from Base inside Generic, but instead import it from AbstractAlgebra. One can see these imports for the exceptional functions blah in the file src/Generic.jl.","category":"page"},{"location":"Nemo/docs/src/developer/topics/#Unsafe-operations-and-aliasing","page":"Specific topics","title":"Unsafe operations and aliasing","text":"","category":"section"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"As with most object oriented languages that overload arithmetic operators, Julia creates new objects when doing an arithmetic operation. For example, BigInt(3) + BigInt(5) creates a new BigInt object to return the value BigInt(8). This can be problematic when accumulating many such operations in a single coefficient of a polynomial or entry of a matrix due to the large number of temporary objects the garbage collector must allocate and clean up.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"To speed up such accumulations, Nemo provides numerous unsafe operators, which mutate the existing elements of the polynomial, matrix, etc. These include functions such as add!, addeq!, mul!, zero! and addmul!.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"These functions take as their first argument the object that should be modified with the return value.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Note that functions such as sub!, submul! and subeq! are not in the official interface and not provided consistently, thus generic code cannot rely on them existing. So far it has always been the case that when doing accumulation where subtraction is needed rather than addition, that a single negation can be performed outside the accumulation loop and then the additive versions of the functions can be called inside the loop where the performance matters.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"If we encounter cases in future where this is not the case, it may be necessary to add the versions that do subtraction to the interface. However, this can only be done if all rings in Nemo support it. One cannot define a fallback which turns a subtraction into a negation and an addition, as then the old performance characteristics of a new object being created per operation will result, meaning that the developer will not be able to reason about the likely performance of unsafe operators.","category":"page"},{"location":"Nemo/docs/src/developer/topics/#Interaction-of-unsafe-operators-and-immutable-types","page":"Specific topics","title":"Interaction of unsafe operators and immutable types","text":"","category":"section"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Because not all objects in Nemo are mutable, the unsafe operators somehow have to support immutable objects. This is done by also returning the \"modified\" return value from the unsafe operators. Naturally, this return value is not a mutated version of the original value, as that is not possible. However, it does allow the unsafe operators to accept immutable values in their first argument. Instead of modifying this value, the old value is replaced with the return value of the unsafe operator.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"In order to make this work correctly, every single call to an unsafe operator must assign the return value to the original location. This requires discipline on the part of the developer using unsafe operators.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"For example, to set the existing value a to a + b one must write","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"a = addeq!(a, b)","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"i.e. one must have an explicit assignment to the left of the addeq! call and indeed all the unsafe operator calls.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"In the case of a mutable type, addeq! will simply modify the original a. The modified object will be returned and assigned to the exact same variable, which has no effect.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"In the case of an immutable type, addeq! does not modify the original object a as this is impossible, but it still returns the new value and assigns it to a which is what one wants.","category":"page"},{"location":"Nemo/docs/src/developer/topics/#Aliasing-rules-and-mutation","page":"Specific topics","title":"Aliasing rules and mutation","text":"","category":"section"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"One must be incredibly careful when mutating an existing value that one owns the value. If the user passes an object to a generic function for example and it changes the object without the user knowing, this can result in incorrect results in user code due to the value of their objects changing from under them.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"In the first instance, functions should never modify their inputs. But further problems can also occur if the output of an unsafe operator happens to alias one of the other inputs. Such cases need to be handled exceptionally carefully.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"A second issue arises as Nemo is based on Flint, which has its own aliasing rules which are distinct from the default expectation in Julia. This leads to some interesting corner cases.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"In particularly, Flint always allows aliasing of inputs and outputs in its polynomial functions but expects matrix functions to have output matrices that are distinct from their inputs, except in a handful of functions that are specially documented to be inplace operations.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Moreover, when assigning an element to a coefficient of a polynomial or entry of a matrix Flint always makes a copy of the element being assigned to that location. In Julia however, if one assigns an element to some index of an array, the existing object at that location is replaced with the new object. This means that inplace modification of Julia array elements is not safe as it would modify the original object that was assigned to that location, whereas in Flint inplace modification is highly desirable for performance reasons and is completely safe due to the fact that a copy was made when the value was assigned to that location.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"We have developed over a period of many years a set of rules that maximise the performance benefit we get from our unsafe operators, whilst keeping the burden imposed on the programmer to a minimum. It has been a very difficult task to arrive at the set of rules we have whilst respecting correctness of our code, and it would be extremely hard to change any of them.","category":"page"},{"location":"Nemo/docs/src/developer/topics/#Arithmetic-operations-return-a-new-object","page":"Specific topics","title":"Arithmetic operations return a new object","text":"","category":"section"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"In order to make it easy for the Nemo developer to create a completely new object when one is needed, e.g. for accumulating values using unsafe operators, we developed the following rules.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Whenever an arithmetic operation is used, i.e. +, -, *, unary minus and ^, Nemo always returns a new object, in line with Julia. Naturally, deepcopy also makes a copy of an object which can be used in unsafe functions.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Note that if R is a type and an element a of that type is passed to it, e.g. R(a) then, the Julia convention is that the original object a will be returned rather than a copy of a. This convention ensures there is not an additional cost when coercing values that are already of the right type, e.g in generic code where coercion may or may not be needed depending on the type.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"We extend this convention to parent objects R and elements a of that parent. In particular, R(a) cannot be used to make a copy of a for use in an unsafe function if R is the parent of a.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"All other functions may also return the input object if they wish. In other words, the return value of all other functions is not suitable for use in an unsafe function. Only return values of arithmetic operations and deepcopy or objects freshly created using inner constructors will be suitable for such use.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"This convention has been chosen to maximise performance of Nemo. Low level operations (where performance matters) make a new object, even if the result is the same arithmetically as one of the inputs. But higher level functions will not necessarily make a new object, meaning that they cannot be used with unsafe functions.","category":"page"},{"location":"Nemo/docs/src/developer/topics/#Aliasing-rules","page":"Specific topics","title":"Aliasing rules","text":"","category":"section"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"We now summarise the aliasing rules used by Nemo and AbstractAlgebra. We are relatively confident by now that following these rules will result in correct code given the constraints mentioned above.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"matrices are viewed as containers which may contain elements that alias one another. Other objects, e.g. polynomials, series, etc., are constructed from objects that do not alias one another, even in part\nstandard unsafe operators, addeq!, mul!, addmul!, zero!, add! which mutate their outputs are allow to be used iff that output is entirely under the control of the caller, i.e. it was created for the purpose of accumulation, but otherwise must not be used\nall arithmetic functions i.e. unary minus, +, -, *, ^, and deepcopy must return new objects and cannot return one of their inputs\nall other functions are allowed to return their inputs as outputs\nmatrix functions with an exclamation mark should not mutate the objects that occur as entries of the output matrix, though should be allowed to arbitrarily replace/swap the entries that appear in the matrix. In other words, these functions should be interpreted as inplace operations, rather than operations that are allowed to mutate the actual entries themselves\nR(a) where R is the parent of a, always just returns a and not a copy\nsetcoeff! and setindex! and getcoeff and getindex should not make copies. Note that this implies that setcoeff! should not be passed an element that aliases another somewhere else, even in part\nConstructors for polynomials, series and similar ring element objects (that are not matrices) that take an array as input, must ensure that the coefficients being placed into the object do not alias, even in part","category":"page"},{"location":"Nemo/docs/src/developer/topics/#The-SparsePoly-module","page":"Specific topics","title":"The SparsePoly module","text":"","category":"section"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"The SparsePoly module in AbstractAlgebra is a generic module for sparse univariate polynomials over a given base ring.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"This module is used internally, e.g. in the generic multivariate gcd code, however it is not particularly suitable for general use.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Firstly, whilst the representation is sparse (recursive) the algorithms used generally are not. This is because the amount of time taken by the Jit in Julia is simply too large (upwards of 6s for the first multivariate gcd).","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Secondly, the order of terms in that representation is not the one which a developer would expect for a sparse univariate format.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"If the Julia Jit is ever made orders of magnitude faster, it may be worth cleaning up this module and making it generally available. But for now, it should be considered internal and heavily incomplete.","category":"page"},{"location":"Nemo/docs/src/developer/topics/#Parent-object-caching","page":"Specific topics","title":"Parent object caching","text":"","category":"section"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Parent objects in Nemo must be unique given the data that is used to create them. For this purpose most parent objects are cached globally and looked up upon creation. If a parent object with that data already exists, it is returned from the cache instead of creating a new one.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"There are two situations where this can be problematic however.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"The first situation is if one is doing some parallel programming. Here global objects are a blight and it may be necessary to turn off caching and simply ensure that that same data is only ever used once when creating parent objects.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"The second situation is when doing multimodular algorithms, where many similar parent objects with different moduli are created. The cache can become overwhelmed slowing the code down or even grinding to a halt.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"In both these situations one can pass false as an additional argument to a parent constructor to avoid caching the parent object it creates. This parameter normally has a default value of true and under normal circumstances doesn't need to be supplied.","category":"page"},{"location":"Nemo/docs/src/developer/topics/#Throw/nothrow-for-check_parent","page":"Specific topics","title":"Throw/nothrow for check_parent","text":"","category":"section"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"By default the check_parent functions throw an exception if parents do not match. However sometimes one would like to know if they match without throwing.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"For this purpose one can pass an additional false argument to check_parent. This supresses the exception that would be thrown if the parent objects didn't match. Instead the function simply returns true or false to indicate whether they matched or not.","category":"page"},{"location":"Nemo/docs/src/developer/topics/#Delayed-reduction","page":"Specific topics","title":"Delayed reduction","text":"","category":"section"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"When working in residue rings, various functions will perform an arithmetic operation followed by a reduction modulo the modulus of the residue ring.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Some accumulations, e.g. in linear algebra or polynomial arithmetic, can be dramatically sped up if one can delay the reductions that would happen after each operation in the accumulation.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Some of the Generic code in Nemo is designed to allow such delayed reduction if the ring supports it and to simply use fallbacks that do the reduction after every intermediate operation if they don't.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"To support delayed reduction, a ring must support the delayed reduction interface which we describe here.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Two additional functions must be supplied for the element type. We give examples for the Nemo nf_elem type:","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"mul_red!(z::nf_elem, x::nf_elem, y::nf_elem, red::Bool)","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"This function behaves as per mul! but only performs reduction if the additional boolean argument red is set to true. This function can assume that both the inputs are reduced.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"reduce!(x::nf_elem)","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"This function must perform reduction on an unreduced element (mutating it). Note that it must return the mutated value as per all unsafe operators.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Finally, the add! and addeq! operators must be able to add nonreduced values.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"If one wishes to speed up generic code for rings that provide delayed reduction, one makes use of the function addmul_delayed_reduction! in the accumulation loop. Here is an example for accumulation into a two dimensional matrix element in Generic in a matrix multiplication routine:","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"A[i, j] = base_ring(X)()\nfor k = 1:ncols(X)\n    A[i, j] = addmul_delayed_reduction!(A[i, j], x[i, k], y[k, j], C)\nend\nA[i, j] = reduce!(A[i, j])","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Here C is a temporary element of the same type as the other inputs which is used internally in addmul_delayed_reduction! if needed.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Notice the final call to reduce! to reduce the accumulated value after the accumulation loop has finished.","category":"page"},{"location":"Nemo/docs/src/developer/topics/","page":"Specific topics","title":"Specific topics","text":"Note that mul_red! is never called directly but is called inside the generic implementation of addmul_delayed_reduction! for rings that support delayed reduction. That generic code falls back to a call to addmul! which in turn falls back to mul! and addeq! where delayed reduction or addmul! are not available.","category":"page"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/qadic/#Qadics","page":"Qadics","title":"Qadics","text":"","category":"section"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"Q-adic fields, that is, unramified extensions of p-adic fields, are provided in Nemo by Flint. This allows construction of q-adic fields for any prime power q.","category":"page"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"Q-adic fields are constructed using the FlintQadicField function. However, for convenience we define","category":"page"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"QadicField = FlintQadicField","category":"page"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"so that q-adic fields can be constructed using QadicField rather than FlintQadicField. Note that this is the name of the constructor, but not of qadic field type.","category":"page"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"The types of q-adic fields in Nemo are given in the following table, along with the libraries that provide them and the associated types of the parent objects.","category":"page"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"Library Field Element type Parent type\nFlint mathbbQ_q qadic QadicField","category":"page"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"All the q-adic field types belong to the Field abstract type and the q-adic field element types belong to the FieldElem abstract type.","category":"page"},{"location":"Nemo/docs/src/qadic/#P-adic-functionality","page":"Qadics","title":"P-adic functionality","text":"","category":"section"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"Q-adic fields in Nemo implement the AbstractAlgebra.jl field interface.","category":"page"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/fields","category":"page"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"Below, we document all the additional function that is provide by Nemo for p-adic fields.","category":"page"},{"location":"Nemo/docs/src/qadic/#Constructors","page":"Qadics","title":"Constructors","text":"","category":"section"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"In order to construct q-adic field elements in Nemo, one must first construct the q-adic field itself. This is accomplished with one of the following constructors.","category":"page"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"FlintQadicField(::Integer, ::Int, ::Int)","category":"page"},{"location":"Nemo/docs/src/qadic/#Nemo.FlintQadicField-Tuple{Integer,Int64,Int64}","page":"Qadics","title":"Nemo.FlintQadicField","text":"FlintQadicField(p::Integer, d::Int, prec::Int, var::String = \"a\")\n\nReturns the parent object for the q-adic field for given prime p and degree d, where the default absolute precision of elements of the field is given by prec and the generator is printed as var.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"It is also possible to call the inner constructor directly. It has the following form.","category":"page"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"FlintQadicField(p::fmpz, d::Int, prec::Int)","category":"page"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"Returns the parent object for the q-adic field for given prime p and degree d, where the default absolute precision of elements of the field is given by prec. It also return the uniformizer p with the default precision.","category":"page"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"Here are some examples of creating q-adic fields and making use of the resulting parent objects to coerce various elements into those fields.","category":"page"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"Examples","category":"page"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"R, p = QadicField(7, 1, 30)\nS, _ = QadicField(ZZ(65537), 1, 30)\n\na = R()\nb = S(1)\nc = S(ZZ(123))\nd = R(ZZ(1)//7^2)","category":"page"},{"location":"Nemo/docs/src/qadic/#Big-oh-notation","page":"Qadics","title":"Big-oh notation","text":"","category":"section"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"Elements of p-adic fields can  be constructed using the big-oh notation. For this purpose we define the following functions.","category":"page"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"O(::FlintQadicField, ::Integer)\nO(::FlintQadicField, ::fmpz)\nO(::FlintQadicField, ::fmpq)","category":"page"},{"location":"Nemo/docs/src/qadic/#AbstractAlgebra.Generic.O-Tuple{FlintQadicField,Integer}","page":"Qadics","title":"AbstractAlgebra.Generic.O","text":"O(R::FlintQadicField, m::Integer)\n\nConstruct the value 0 + O(p^n) given m = p^n. An exception results if m is not found to be a power of p = prime(R).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/qadic/#AbstractAlgebra.Generic.O-Tuple{FlintQadicField,fmpz}","page":"Qadics","title":"AbstractAlgebra.Generic.O","text":"O(R::FlintQadicField, m::fmpz)\n\nConstruct the value 0 + O(p^n) given m = p^n. An exception results if m is not found to be a power of p = prime(R).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/qadic/#AbstractAlgebra.Generic.O-Tuple{FlintQadicField,fmpq}","page":"Qadics","title":"AbstractAlgebra.Generic.O","text":"O(R::FlintQadicField, m::fmpq)\n\nConstruct the value 0 + O(p^n) given m = p^n. An exception results if m is not found to be a power of p = prime(R).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"The O(p^n) construction can be used to construct q-adic values of precision n by adding it to integer values representing the q-adic value modulo p^n as in the examples.","category":"page"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"Examples","category":"page"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"R, _ = QadicField(7, 30)\nS, _ = QadicField(ZZ(65537), 30)\n\nc = 1 + 2*7 + 4*7^2 + O(R, 7^3)\nd = 13 + 357*ZZ(65537) + O(S, ZZ(65537)^12)\nf = ZZ(1)//7^2 + ZZ(2)//7 + 3 + 4*7 + O(R, 7^2)","category":"page"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"Beware that the expression 1 + 2*p + 3*p^2 + O(R, p^n) is actually computed as a normal Julia expression. Therefore if {Int} values are used instead of Flint integers or Julia bignums, overflow may result in evaluating the value.","category":"page"},{"location":"Nemo/docs/src/qadic/#Basic-manipulation","page":"Qadics","title":"Basic manipulation","text":"","category":"section"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"prime(::FlintQadicField)","category":"page"},{"location":"Nemo/docs/src/qadic/#AbstractAlgebra.Generic.prime-Tuple{FlintQadicField}","page":"Qadics","title":"AbstractAlgebra.Generic.prime","text":"prime(R::FlintQadicField)\n\nReturn the prime p for the given q-adic field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"precision(::qadic)","category":"page"},{"location":"Nemo/docs/src/qadic/#Base.precision-Tuple{qadic}","page":"Qadics","title":"Base.precision","text":"precision(a::qadic)\n\nReturn the precision of the given q-adic field element, i.e. if the element is known to O(p^n) this function will return n.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"valuation(::qadic)","category":"page"},{"location":"Nemo/docs/src/qadic/#AbstractAlgebra.Generic.valuation-Tuple{qadic}","page":"Qadics","title":"AbstractAlgebra.Generic.valuation","text":"valuation(a::qadic)\n\nReturn the valuation of the given q-adic field element, i.e. if the given element is divisible by p^n but not a higher power of q then the function will return n.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"lift(::FmpqPolyRing, ::qadic)\nlift(::FmpzPolyRing, ::qadic)","category":"page"},{"location":"Nemo/docs/src/qadic/#Nemo.lift-Tuple{FmpqPolyRing,qadic}","page":"Qadics","title":"Nemo.lift","text":"lift(R::FmpqPolyRing, a::qadic)\n\nReturn a lift of the given q-adic field element to mathbbQx.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/qadic/#Nemo.lift-Tuple{FmpzPolyRing,qadic}","page":"Qadics","title":"Nemo.lift","text":"lift(R::FmpzPolyRing, a::qadic)\n\nReturn a lift of the given q-adic field element to mathbbZx if possible.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"Examples","category":"page"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"R, _ = QadicField(7, 1, 30)\n\na = 1 + 2*7 + 4*7^2 + O(R, 7^3)\nb = 7^2 + 3*7^3 + O(R, 7^5)\nc = R(2)\n\nk = precision(a)\nm = prime(R)\nn = valuation(b)\nQx, x = FlintQQ[\"x\"]\np = lift(Qx, a)\nZy, y = FlintZZ[\"y\"]\nq = lift(Zy, divexact(a, b))","category":"page"},{"location":"Nemo/docs/src/qadic/#Square-root","page":"Qadics","title":"Square root","text":"","category":"section"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"Base.sqrt(::qadic)","category":"page"},{"location":"Nemo/docs/src/qadic/#Base.sqrt-Tuple{qadic}","page":"Qadics","title":"Base.sqrt","text":"sqrt(a::qadic)\n\nReturn the q-adic square root of a. We define this only when the valuation of a is even. The precision of the output will be precision(a) - valuation(a)2. If the square root does not exist, an exception is thrown.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"Examples","category":"page"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"R, _ = QadicField(7, 1, 30)\n\na = 1 + 7 + 2*7^2 + O(R, 7^3)\nb = 2 + 3*7 + O(R, 7^5)\nc = 7^2 + 2*7^3 + O(R, 7^4)\n\nd = sqrt(a)\nf = sqrt(b)\nf = sqrt(c)\ng = sqrt(R(121))","category":"page"},{"location":"Nemo/docs/src/qadic/#Special-functions","page":"Qadics","title":"Special functions","text":"","category":"section"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"Base.exp(::qadic)","category":"page"},{"location":"Nemo/docs/src/qadic/#Base.exp-Tuple{qadic}","page":"Qadics","title":"Base.exp","text":"exp(a::qadic)\n\nReturn the q-adic exponential of a. We define this only when the valuation of a is positive (unless a = 0). The precision of the output will be the same as the precision of the input. If the input is not valid an exception is thrown.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"log(::qadic)","category":"page"},{"location":"Nemo/docs/src/qadic/#Base.log-Tuple{qadic}","page":"Qadics","title":"Base.log","text":"log(a::qadic)\n\nReturn the q-adic logarithm of a. We define this only when the valuation of a is zero (but not for a = 0). The precision of the output will be the same as the precision of the input. If the input is not valid an exception is thrown.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"teichmuller(::qadic)","category":"page"},{"location":"Nemo/docs/src/qadic/#Nemo.teichmuller-Tuple{qadic}","page":"Qadics","title":"Nemo.teichmuller","text":"teichmuller(a::qadic)\n\nReturn the Teichmuller lift of the q-adic value a. We require the valuation of a to be nonnegative. The precision of the output will be the same as the precision of the input. For convenience, if a is congruent to zero modulo q we return zero. If the input is not valid an exception is thrown.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"frobenius(::qadic, ::Int)","category":"page"},{"location":"Nemo/docs/src/qadic/#Nemo.frobenius-Tuple{qadic,Int64}","page":"Qadics","title":"Nemo.frobenius","text":"frobenius(a::qadic, e::Int = 1)\n\nReturn the image of the e-th power of Frobenius on the q-adic value a. The precision of the output will be the same as the precision of the input.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"Examples","category":"page"},{"location":"Nemo/docs/src/qadic/","page":"Qadics","title":"Qadics","text":"R, _ = QadicField(7, 30)\n\na = 1 + 7 + 2*7^2 + O(R, 7^3)\nb = 2 + 5*7 + 3*7^2 + O(R, 7^3)\nc = 3*7 + 2*7^2 + O(R, 7^5)\n\nc = exp(c)\nd = log(a)\nc = exp(R(0))\nd = log(R(1))\nf = teichmuller(b)\ng = frobenius(a, 2)","category":"page"},{"location":"AbstractAlgebra/docs/src/#AbstractAlgebra.jl","page":"AbstractAlgebra.jl","title":"AbstractAlgebra.jl","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/#Introduction","page":"AbstractAlgebra.jl","title":"Introduction","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/","page":"AbstractAlgebra.jl","title":"AbstractAlgebra.jl","text":"AbstractAlgebra.jl is a computer algebra package for the Julia programming language, maintained by William Hart, Tommy Hofmann, Claus Fieker and Fredrik Johansson and other interested contributors.","category":"page"},{"location":"AbstractAlgebra/docs/src/","page":"AbstractAlgebra.jl","title":"AbstractAlgebra.jl","text":"Source code","category":"page"},{"location":"AbstractAlgebra/docs/src/","page":"AbstractAlgebra.jl","title":"AbstractAlgebra.jl","text":"AbstractAlgebra.jl grew out of the Nemo project after a number of requests from the community for the pure Julia part of Nemo to be split off into a separate project. See the Nemo website for more details about Nemo.","category":"page"},{"location":"AbstractAlgebra/docs/src/","page":"AbstractAlgebra.jl","title":"AbstractAlgebra.jl","text":"Nemo website","category":"page"},{"location":"AbstractAlgebra/docs/src/#Features","page":"AbstractAlgebra.jl","title":"Features","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/","page":"AbstractAlgebra.jl","title":"AbstractAlgebra.jl","text":"The features of AbstractAlgebra.jl include:","category":"page"},{"location":"AbstractAlgebra/docs/src/","page":"AbstractAlgebra.jl","title":"AbstractAlgebra.jl","text":"Use of Julia multiprecision integers and rationals\nFinite fields (prime order, naive implementation only)\nNumber fields (naive implementation only)\nUnivariate polynomials\nMultivariate polynomials\nRelative and absolute power series\nLaurent series\nFraction fields\nResidue rings, including mathbbZnmathbbZ\nMatrices and linear algebra","category":"page"},{"location":"AbstractAlgebra/docs/src/","page":"AbstractAlgebra.jl","title":"AbstractAlgebra.jl","text":"All implementations are fully recursive and generic, so that one can build matrices over polynomial rings, over a finite field, for example.","category":"page"},{"location":"AbstractAlgebra/docs/src/","page":"AbstractAlgebra.jl","title":"AbstractAlgebra.jl","text":"AbstractAlgebra.jl also provides a set of abstract types for Groups, Rings, Fields, Modules and elements thereof, which allow external types to be made part of the AbstractAlgebra.jl type hierarchy.","category":"page"},{"location":"AbstractAlgebra/docs/src/#Installation","page":"AbstractAlgebra.jl","title":"Installation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/","page":"AbstractAlgebra.jl","title":"AbstractAlgebra.jl","text":"To use AbstractAlgebra we require Julia 1.0 or higher. Please see https://julialang.org/downloads/ for instructions on how to obtain Julia for your system.","category":"page"},{"location":"AbstractAlgebra/docs/src/","page":"AbstractAlgebra.jl","title":"AbstractAlgebra.jl","text":"At the Julia prompt simply type","category":"page"},{"location":"AbstractAlgebra/docs/src/","page":"AbstractAlgebra.jl","title":"AbstractAlgebra.jl","text":"julia> Pkg.add(\"AbstractAlgebra\")","category":"page"},{"location":"AbstractAlgebra/docs/src/#Quick-start","page":"AbstractAlgebra.jl","title":"Quick start","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/","page":"AbstractAlgebra.jl","title":"AbstractAlgebra.jl","text":"Here are some examples of using AbstractAlgebra.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/","page":"AbstractAlgebra.jl","title":"AbstractAlgebra.jl","text":"This example makes use of multivariate polynomials.","category":"page"},{"location":"AbstractAlgebra/docs/src/","page":"AbstractAlgebra.jl","title":"AbstractAlgebra.jl","text":"using AbstractAlgebra\n\nR, (x, y, z) = PolynomialRing(ZZ, [\"x\", \"y\", \"z\"])\n\nf = x + y + z + 1\n\np = f^20;\n\n@time q = p*(p+1);","category":"page"},{"location":"AbstractAlgebra/docs/src/","page":"AbstractAlgebra.jl","title":"AbstractAlgebra.jl","text":"Here is an example using generic recursive ring constructions.","category":"page"},{"location":"AbstractAlgebra/docs/src/","page":"AbstractAlgebra.jl","title":"AbstractAlgebra.jl","text":"using AbstractAlgebra\n\nR = GF(7)\n\nS, y = PolynomialRing(R, \"y\")\n\nT = ResidueRing(S, y^3 + 3y + 1)\n\nU, z = PolynomialRing(T, \"z\")\n\nf = (3y^2 + y + 2)*z^2 + (2*y^2 + 1)*z + 4y + 3;\n\ng = (7y^2 - y + 7)*z^2 + (3y^2 + 1)*z + 2y + 1;\n\ns = f^4;\n\nt = (s + g)^4;\n\n@time resultant(s, t)","category":"page"},{"location":"AbstractAlgebra/docs/src/","page":"AbstractAlgebra.jl","title":"AbstractAlgebra.jl","text":"Here is an example using matrices.","category":"page"},{"location":"AbstractAlgebra/docs/src/","page":"AbstractAlgebra.jl","title":"AbstractAlgebra.jl","text":"using AbstractAlgebra\n\nR, x = PolynomialRing(ZZ, \"x\")\n\nS = MatrixSpace(R, 10, 10)\n\nM = rand(S, 0:3, -10:10);\n\n@time det(M)","category":"page"},{"location":"AbstractAlgebra/docs/src/","page":"AbstractAlgebra.jl","title":"AbstractAlgebra.jl","text":"And here is an example with power series.","category":"page"},{"location":"AbstractAlgebra/docs/src/","page":"AbstractAlgebra.jl","title":"AbstractAlgebra.jl","text":"using AbstractAlgebra\n\nR, x = QQ[\"x\"]\n\nS, t = PowerSeriesRing(R, 30, \"t\")\n\nu = t + O(t^100)\n\n@time divexact((u*exp(x*u)), (exp(u)-1));","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Noncommutative-ring-Interface","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"AbstractAlgebra.jl generic code makes use of a standardised set of functions which it expects to be implemented for all noncommutative rings. Here we document this interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"All libraries which want to make use of the generic capabilities of AbstractAlgebra.jl must supply all of the required functionality for their noncommutative rings.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Types","page":"Noncommutative ring Interface","title":"Types","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Most noncommutative rings must supply two types:","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"a type for the parent object (representing the ring itself)\na type for elements of that ring","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"The parent type must belong to AbstractAlgebra.NCRing and the element type must belong to AbstractAlgebra.NCRingElem. Of course, the types may belong to these abstract types transitively via an intermediate abstract type.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"For parameterised rings, we advise that the types of both the parent objects and element objects to be parameterised by the types of the elements of the base ring (see the function base_ring below for a definition).","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"There can be variations on this theme: e.g. in some areas of mathematics there is a notion of a coefficient domain, in which case it may make sense to parameterise all types by the type of elements of this coefficient domain. But note that this may have implications for the ad hoc operators one might like to explicitly implement.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#NCRingElement-type-union","page":"Noncommutative ring Interface","title":"NCRingElement type union","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Because of its lack of multiple inheritance, Julia does not allow Julia Base types to belong to AbstractAlgebra.NCRingElem. To allow us to work equally with AbstractAlgebra and Julia types that represent elements of rings we define a union type AbstractAlgebra.NCRingElement in src/julia/JuliaTypes.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"So far, in addition to AbstractAlgebra.NCRingElem the  union type AbstractAlgebra.NCRingElement includes the Julia types Integer, Rational and AbstractFloat.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Most of the generic code in AbstractAlgebra for general rings makes use of the union type AbstractAlgebra.NCRingElement instead of AbstractAlgebra.NCRingElem so that the generic functions also accept the Julia Base ring types.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"One must be careful when defining ad hoc binary operations for ring element types. It is often necessary to define separate versions of the functions for AbstractAlgebra.NCRingElem then for each of the Julia types separately in order to avoid ambiguity warnings.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Parent-object-caches","page":"Noncommutative ring Interface","title":"Parent object caches","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"In many cases, it is desirable to have only one object in the system to represent each ring. This means that if the same ring is constructed twice, elements of the two rings will be compatible as far as arithmetic is concerned.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"In order to facilitate this, global caches of rings are stored in AbstractAlgebra.jl, usually implemented using dictionaries. For example, the Generic.PolyRing parent objects are looked up in a dictionary PolyID to see if they have been previously defined.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Whether these global caches are provided or not, depends on both mathematical and algorithmic considerations. E.g. in the case of number fields, it isn't desirable to identify all number fields with the same defining polynomial, as they may be considered with distinct embeddings into one another. In other cases, identifying whether two rings are the same may be prohibitively expensive. Generally, it may only make sense algorithmically to identify two rings if they were constructed from identical data.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"If a global cache is provided, it must be optionally possible to construct the parent objects without caching. This is done by passing a boolean value cached to the inner constructor of the parent object. See generic/GenericTypes.jl` for examples of how to construct and handle such caches.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Required-functions-for-all-rings","page":"Noncommutative ring Interface","title":"Required functions for all rings","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"In the following, we list all the functions that are required to be provided for noncommutative rings in AbstractAlgebra.jl or by external libraries wanting to use AbstractAlgebra.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"We give this interface for fictitious types MyParent for the type of the ring parent object R and MyElem for the type of the elements of the ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Note that generic functions in AbstractAlgebra.jl may not rely on the existence of functions that are not documented here. If they do, those functions will only be available for rings that implement that additional functionality, and should be documented as such.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Data-type-and-parent-object-methods","page":"Noncommutative ring Interface","title":"Data type and parent object methods","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"parent_type(::Type{MyElem})","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Return the type of the corresponding parent object for the given element type. For example, parent_type(Generic.Poly{T}) will return Generic.PolyRing{T}.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"elem_type(::Type{MyParent})","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Return the type of the elements of the ring whose parent object has the given type. This is the inverse of the parent_type function, i.e. elem_type(Generic.PolyRing{T}) will return Generic.Poly{T}.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"base_ring(R::MyParent)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Given a parent object R, representing a ring, this function returns the parent object of any base ring that parameterises this ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"If the ring is not parameterised by another ring, this function must return Union{}.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"parent(f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Return the parent object of the given element, i.e. return the ring to which the given element belongs.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"This is usually stored in a field parent in each ring element. (If the parent objects have mutable struct types, the internal overhead here is just an additional machine pointer stored in each element of the ring.)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"For some element types it isn't necessary to append the parent object as a field of every element. This is the case when the parent object can be reconstructed just given the type of the elements. For example, this is the case for the ring of integers and in fact for any ring element type that isn't parameterised or generic in any way.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"isexact_type(::Type{MyElem})","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Return true if every element of the given type is represented exactly.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Note that MyElem may be parameterised or an abstract type, in which case every element of every type represented by MyElem must be exact, otherwise the function must return false.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Base.hash(f::MyElem, h::UInt)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Return a hash for the object f of type UInt. This is used as a hopefully cheap way to distinguish objects that differ arithmetically.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"If the object has components, e.g. the coefficients of a polynomial or elements of a matrix, these should be hashed recursively, passing the same parameter h to all levels. Each component should then be xor'd with h before combining the individual component hashes to give the final hash.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"The hash functions in AbstractAlgebra.jl usually start from some fixed 64 bit hexadecimal  value that has been picked at random by the library author for that type. That is then truncated to fit a UInt (in case the latter is not 64 bits). This ensures that objects that are the same arithmetically (or that have the same components), but have different types (or structures), are unlikely to hash to the same value.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"deepcopy_internal(f::MyElem, dict::ObjectIdDict)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Return a copy of the given element, recursively copying all components of the object.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Obviously the parent, if it is stored in the element, should not be copied. The new element should have precisely the same parent as the old object.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"For types that cannot self-reference themselves anywhere internally, the dict argument may be ignored.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"In the case that internal self-references are possible, please consult the Julia documentation on how to implement deepcopy_internal.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Constructors","page":"Noncommutative ring Interface","title":"Constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Outer constructors for most AbstractAlgebra types are provided by overloading the call syntax for parent objects.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"If R is a parent object for a given ring we provide the following constructors.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"(R::MyParent)()","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Return the zero object of the given ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"(R::MyParent)(a::Integer)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Coerce the given integer into the given ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"(R::MyParent)(a::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"If a belongs to the given ring, the function returns it (without making a copy). Otherwise an error is thrown.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"For parameterised rings we also require a function to coerce from the base ring into the parent ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"(R::MyParent{T})(a::T) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Coerce a into the ring R if a belongs to the base ring of R.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Basic-manipulation-of-rings-and-elements","page":"Noncommutative ring Interface","title":"Basic manipulation of rings and elements","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"zero(R::MyParent)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Return the zero element of the given ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"one(R::MyParent)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Return the multiplicative identity of the given ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"iszero(f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Return true if the given element is the zero element of the ring it belongs to.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"isone(f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Return true if the given element is the multiplicative identity of the ring it belongs to.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#String-I/O","page":"Noncommutative ring Interface","title":"String I/O","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"show(io::IO, R::MyParent)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"This should print (to the given IO object), an English description of the parent ring. If the ring is parameterised, it can call the corresponding show function for any rings it depends on.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"show(io::IO, f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"This should print a human readable, textual representation of the object (to the given IO object). It can recursively call the corresponding show functions for any of its components.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"note: Note\nThe functionality of the function needs_parentheses has been replaced by expressify and needs_parentheses will be removed in future versions.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"It may be necessary in some cases to print parentheses around components of f or to print signs of components. For these, the following functions will exist for each component or component type.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"needs_parentheses(f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Should returns true if parentheses are needed around this object when printed, e.g. as a coefficient of a polynomial. As an example, non-constant polynomials would need such parentheses if used as coefficients of another polynomial.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Note that since this approach quickly leads to unnecessary parentheses, the expression method below is preferred.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Expressions","page":"Noncommutative ring Interface","title":"Expressions","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"To obtain best results when printing composed types derived from other types, e.g., polynomials, the following method should be implemented.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"expressify(f::MyElem; context = nothing)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"For more information about expressify, please refer to the \"Ring Interface\" section.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Unary-operations","page":"Noncommutative ring Interface","title":"Unary operations","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"-(f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Return -f.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Binary-operations","page":"Noncommutative ring Interface","title":"Binary operations","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"+(f::MyElem, g::MyElem)\n-(f::MyElem, g::MyElem)\n*(f::MyElem, g::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Return f + g, f - g or fg, respectively.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Comparison","page":"Noncommutative ring Interface","title":"Comparison","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"==(f::MyElem, g::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Return true if f and g are arithmetically equal. In the case where the two elements are inexact, the function returns true if they agree to the minimum precision of the two.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"isequal(f::MyElem, g::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"For exact rings, this should return the same thing as == above. For inexact rings, this returns true only if the two elements are arithmetically equal and have the same precision.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Powering","page":"Noncommutative ring Interface","title":"Powering","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"^(f::MyElem, e::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Return f^e. The function should throw a DomainError() if negative exponents don't make sense but are passed to the function.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Exact-division","page":"Noncommutative ring Interface","title":"Exact division","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"divexact_left(f::MyElem, g::MyElem)\ndivexact_right(f::MyElem, g::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"If f = ga for some a in the ring, the function divexact_left(f, g) returns a. If f = ag then divexact_right(f, g) returns a. A DivideError() should be thrown if division is by zero. If no exact quotient exists or an impossible inverse is unavoidably encountered, an error should be thrown.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Unsafe-operators","page":"Noncommutative ring Interface","title":"Unsafe operators","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"To speed up arithmetic of objects built over a given ring, it sometimes makes sense to mutate values in place rather than replace them with a newly created object every time they are modified.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"For this purpose, certain mutating operators are required. In order to support immutable types (struct in Julia) and systems that don't have in-place operators, all unsafe operators must return the (ostensibly) mutated value. Only the returned value is used in computations, so this lifts the requirement that the unsafe operators actually mutate the value.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Note the exclamation point is a convention, which indicates that the object may be mutated in-place.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"To make use of these functions, one must be certain that no other references are held to the object being mutated, otherwise those values will also be changed!","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"The results of deepcopy and all arithmetic operations, including powering and division can be assumed to be new objects without other references being held, as can objects returned from constructors.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Note that R(a) where R is the ring a belongs to, does not create a new value. For this case, use deepcopy(a).","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"zero!(f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Set the value f to zero in place. Return the mutated value.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"mul!(c::MyElem, a::MyElem, b::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Set c to the value ab in place. Return the mutated value. Aliasing is permitted.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"add!(c::MyElem, a::MyElem, b::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Set c to the value a + b in place. Return the mutated value. Aliasing is permitted.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"addeq!(a::MyElem, b::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Set a to a + b in place. Return the mutated value. Aliasing is permitted.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Random-generation","page":"Noncommutative ring Interface","title":"Random generation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"The random functions are only used for test code to generate test data. They therefore don't need to provide any guarantees on uniformity, and in fact, test values that are known to be a good source of corner cases can be supplied.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"rand(R::MyParent, v...)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Return a random element in the given ring of the specified size.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"There can be as many arguments as is necessary to specify the size of the test example which is being produced.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Promotion-rules","page":"Noncommutative ring Interface","title":"Promotion rules","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"In order for AbstractAlgebra to be able to automatically coerce up towers of rings, certain promotion rules must be defined. For every ring, one wants to be able to coerce integers into the ring. And for any ring constructed over a base ring, one would like to be able to coerce from the base ring into the ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"The promotion rules look a bit different depending on whether the element type is parameterised or not and whether it is built on a base ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"For ring element types MyElem that are neither parameterised nor built over a base ring, the promotion rules can be defined as follows:","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"promote_rule(::Type{MyElem}, ::Type{T}) where {T <: Integer} = MyElem","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"For ring element types MyType that aren't parameterised, but which have a base ring with concrete element type T the promotion rules can be defined as follows:","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"promote_rule(::Type{MyElem}, ::Type{U}) where U <: Integer = MyElem","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"promote_rule(::Type{MyElem}, ::Type{T}) = MyElem","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"For ring element types MyElem{T} that are parameterised by the type of elements of the base ring, the promotion rules can be defined as follows:","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"promote_rule(::Type{MyElem{T}}, ::Type{MyElem{T}}) where T <: RingElement = MyElem{T}","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"function promote_rule(::Type{MyElem{T}}, ::Type{U}) where {T <: RingElement, U <: RingEle\nment}\n   promote_rule(T, U) == T ? MyElem{T} : Union{}\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Required-functionality-for-inexact-rings","page":"Noncommutative ring Interface","title":"Required functionality for inexact rings","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/#Approximation-(floating-point-and-ball-arithmetic-only)","page":"Noncommutative ring Interface","title":"Approximation (floating point and ball arithmetic only)","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"isapprox(f::MyElem, g::MyElem; atol::Real=sqrt(eps()))","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"This is used by test code that uses rings involving floating point or ball arithmetic. The function should return true if all components of f and g are equal to within the square root of the Julia epsilon, since numerical noise may make an exact comparison impossible.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"For parameterised rings over an inexact ring, we also require the following ad hoc approximation functionality.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"isapprox(f::MyElem{T}, g::T; atol::Real=sqrt(eps())) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"isapprox(f::T, g::MyElem{T}; atol::Real=sqrt(eps())) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"These notionally coerce the element of the base ring into the parameterised ring and do a full comparison.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Optional-functionality","page":"Noncommutative ring Interface","title":"Optional functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Some functionality is difficult or impossible to implement for all rings in the system. If it is provided, additional functionality or performance may become available. Here is a list of all functions that are considered optional and can't be relied on by generic functions in the AbstractAlgebra Ring interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"It may be that no algorithm, or no efficient algorithm is known to implement these functions. As these functions are optional, they do not need to exist. Julia will already inform the user that the function has not been implemented if it is called but doesn't exist.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Optional-basic-manipulation-functionality","page":"Noncommutative ring Interface","title":"Optional basic manipulation functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"isunit(f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Return true if the given element is a unit in the ring it belongs to.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"characteristic(R::MyParent)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Return the characteristic of the ring R or -1 if this is unknown or cannot be computed efficiently. Defining this function may speed up some code paths, as more efficient algorithms exist for certain characteristics but are invalid for others.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Optional-binary-ad-hoc-operators","page":"Noncommutative ring Interface","title":"Optional binary ad hoc operators","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"By default, ad hoc operations are handled by AbstractAlgebra.jl if they are not defined explicitly, by coercing both operands into the same ring and then performing the required operation.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"In some cases, e.g. for matrices, this leads to very inefficient behaviour. In such cases, it is advised to implement some of these operators explicitly.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"It can occasionally be worth adding a separate set of ad hoc binary operators for the type Int, if this can be done more efficiently than for arbitrary Julia Integer types.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"+(f::MyElem, c::Integer)\n-(f::MyElem, c::Integer)\n*(f::MyElem, c::Integer)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"+(c::Integer, f::MyElem)\n-(c::Integer, f::MyElem)\n*(c::Integer, f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"For parameterised types, it is also sometimes more performant to provide explicit ad hoc operators with elements of the base ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"+(f::MyElem{T}, c::T) where T <: AbstractAlgebra.RingElem\n-(f::MyElem{T}, c::T) where T <: AbstractAlgebra.RingElem\n*(f::MyElem{T}, c::T) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"+(c::T, f::MyElem{T}) where T <: AbstractAlgebra.RingElem\n-(c::T, f::MyElem{T}) where T <: AbstractAlgebra.RingElem\n*(c::T, f::MyElem{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Optional-ad-hoc-comparisons","page":"Noncommutative ring Interface","title":"Optional ad hoc comparisons","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"==(f::MyElem, c::Integer)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"==(c::Integer, f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"==(f::MyElem{T}, c:T) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"==(c::T, f::MyElem{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Optional-powering-functions","page":"Noncommutative ring Interface","title":"Optional powering functions","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"^(f::MyElem, e::BigInt)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"In case f cannot explode in size when powered by a very large integer, and it is practical to do so, one may provide this function to support powering with BigInt exponents (or for external modules, any other big integer type).","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/#Optional-unsafe-operators","page":"Noncommutative ring Interface","title":"Optional unsafe operators","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"addmul!(c::MyElem, a::MyElem, b::MyElem, t::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncrings/","page":"Noncommutative ring Interface","title":"Noncommutative ring Interface","text":"Set c = c + ab in-place. Return the mutated value. The value t should be a temporary of the same type as a, b and c, which can be used arbitrarily by the implementation to speed up the computation. Aliasing between a, b and c is permitted.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/#Multivariate-Polynomial-Ring-Interface","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Multivariate polynomial rings are supported in AbstractAlgebra.jl, and in addition to the standard Ring interface, numerous additional functions are provided.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Unlike other kinds of rings, even complex operations such as GCD depend heavily on the multivariate representation. Therefore AbstractAlgebra.jl cannot provide much in the way of additional functionality to external multivariate implementations.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"This means that external libraries must be able to implement their multivariate formats in whatever way they see fit. The required interface here should be implemented, even if it is not optimal. But it can be extended, either by implementing one of the optional interfaces, or by extending the required interface in some other way.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Naturally, any multivariate polynomial ring implementation provides the full Ring interface, in order to be treated as a ring for the sake of AbstractAlgebra.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Considerations which make it impossible for AbstractAlgebra.jl to provide generic functionality on top of an arbitrary multivariate module include:","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"orderings (lexical, degree, weighted, block, arbitrary)\nsparse or dense representation\ndistributed or recursive representation\npacked or unpacked exponents\nexponent bounds (and whether adaptive or not)\nrandom access or iterators\nwhether monomials and polynomials have the same type\nwhether special cache aware data structures such as Geobuckets are used","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/#Types-and-parents","page":"Multivariate Polynomial Ring Interface","title":"Types and parents","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"AbstractAlgebra.jl provides two abstract types for multivariate polynomial rings and their elements:","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"MPolyRing{T} is the abstract type for multivariate polynomial ring parent types\nMPolyElem{T} is the abstract type for multivariate polynomial types","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"We have that MPolyRing{T} <: AbstractAlgebra.Ring and MPolyElem{T} <: AbstractAlgebra.RingElem.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Note that both abstract types are parameterised. The type T should usually be the type of elements of the coefficient ring of the polynomial ring. For example, in the case of mathbbZx y the type T would be the type of an integer, e.g. BigInt.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Multivariate polynomial rings should be made unique on the system by caching parent objects (unless an optional cache parameter is set to false). Multivariate polynomial rings should at least be distinguished based on their base (coefficient) ring and number of variables. But if they have the same base ring, symbols (for their variables/generators) and ordering, they should certainly have the same parent object.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"See src/generic/GenericTypes.jl for an example of how to implement such a cache (which usually makes use of a dictionary).","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/#Required-functionality-for-multivariate-polynomials","page":"Multivariate Polynomial Ring Interface","title":"Required functionality for multivariate polynomials","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"In addition to the required functionality for the Ring interface, the Multivariate Polynomial interface has the following required functions.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"We suppose that R is a fictitious base ring (coefficient ring) and that S is a multivariate polynomial ring over R (i.e. S = Rx y ldots) with parent object S of type MyMPolyRing{T}. We also assume the polynomials in the ring have type MyMPoly{T}, where T is the type of elements of the base (coefficient) ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Of course, in practice these types may not be parameterised, but we use parameterised types here to make the interface clearer.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Note that the type T must (transitively) belong to the abstract type RingElem or more generally the union type RingElement which includes the Julia integer, rational and floating point types.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/#Constructors","page":"Multivariate Polynomial Ring Interface","title":"Constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"To construct a multivariate polynomial ring, there is the following constructor.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"PolynomialRing(R::Ring, s::Vector{AbstractString}; ordering=:lex, cached=true)","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return a tuple, S, vars consisting of a polynomial ring S and an array of generators (variables) which print according to the strings in the supplied vector s. The ordering can at present be :lex, :deglex or :degrevlex. By default, the polynomial ring is cached, and creating a polynomial ring with the same data will return the same ring object S. If this caching is not desired, it can be switched off by setting cached=false.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Polynomials in a given ring can be constructed using the generators and basic polynomial arithmetic. However, this is inefficient and the following build context is provided for building polynomials term-by-term. It assumes the polynomial data type is random access, and so the constructor functions must be reimplemented for all other types of polynomials.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"MPolyBuildCtx(R::MPolyRing)","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return a build context for creating polynomials in the given polynomial ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"push_term!(M::MPolyBuildCtx, c::RingElem, v::Vector{Int})","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Add the term with coefficient c and exponent vector v to the polynomial under construction in the build context M.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"finish(M::MPolyBuildCtx)","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Finish construction of the polynomial, sort the terms, remove duplicate and zero terms and return the created polynomial.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"julia> R, (x, y) = PolynomialRing(ZZ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Integers, AbstractAlgebra.Generic.MPoly{BigInt}[x, y])\n\njulia> C = MPolyBuildCtx(R)\nBuilder for a polynomial in Multivariate Polynomial Ring in x, y over Integers\n\njulia> push_term!(C, ZZ(3), [1, 2])\nBuilder for a polynomial in Multivariate Polynomial Ring in x, y over Integers\n\njulia> finish(C)\n3*x*y^2\n\njulia> push_term!(C, ZZ(2), [1, 1]); finish(C)\n3*x*y^2 + 2*x*y\n\njulia> push_term!(C, ZZ(4), [0, 0]); finish(C)\n3*x*y^2 + 2*x*y + 4","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/#Data-type-and-parent-object-methods","page":"Multivariate Polynomial Ring Interface","title":"Data type and parent object methods","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"symbols(S::MyMPolyRing{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return an array of Symbols representing the variables (generators) of the polynomial ring. Note that these are Symbols not Strings, though their string values will usually be used when printing polynomials.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"nvars(f::MyMPolyRing{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return the number of variables of the polynomial ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"gens(S::MyMPolyRing{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return an array of all the generators (variables) of the given polynomial ring (as polynomials).","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"The first entry in the array will be the variable with most significance with respect to the ordering.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"gen(S::MyMPolyRing{T}, i::Int) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return the i-th generator (variable) of the given polynomial ring (as a polynomial).","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"ordering(S::MyMPolyRing{T})","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return the ordering of the given polynomial ring as a symbol. Supported values currently include :lex, :deglex and :degrevlex.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"julia> S, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"]; ordering=:deglex)\n(Multivariate Polynomial Ring in x, y over Rationals, AbstractAlgebra.Generic.MPoly{Rational{BigInt}}[x, y])\n\njulia> V = symbols(S)\n2-element Array{Symbol,1}:\n :x\n :y\n\njulia> X = gens(S)\n2-element Array{AbstractAlgebra.Generic.MPoly{Rational{BigInt}},1}:\n x\n y\n\njulia> ord = ordering(S)\n:deglex\n","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/#Basic-manipulation-of-rings-and-elements","page":"Multivariate Polynomial Ring Interface","title":"Basic manipulation of rings and elements","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"length(f::MyMPoly{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return the number of nonzero terms of the given polynomial. The length of the zero polynomial is defined to be 0. The return value should be of type Int.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return an array of the degrees of the polynomial f in each of the variables.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"total_degree(f::MyMPoly{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return the total degree of the polynomial f, i.e. the highest sum of exponents occuring in any term of f.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"isgen(x::MyMPoly{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return true if x is a generator of the polynomial ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"coefficients(p::MyMPoly{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return an iterator for the coefficients of the polynomial p, starting with the coefficient of the most significant term with respect to the ordering. Generic code will provide this function automatically for random access polynomials that implement the coeff function.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"monomials(p::MyMPoly{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return an iterator for the monomials of the polynomial p, starting with the monomial of the most significant term with respect to the ordering. Monomials in AbstractAlgebra are defined to have coefficient 1. See the function terms if you also require the coefficients, however note that only monomials can be compared. Generic code will provide this function automatically for random access polynomials that implement the monomial function.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"terms(p::MyMPoly{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return an iterator for the terms of the polynomial p, starting with the most significant term with respect to the ordering. Terms in AbstractAlgebra include the coefficient. Generic code will provide this function automatically for random access polynomials that implement the term function.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"exponent_vectors(a::MyMPoly{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return an iterator for the exponent vectors for each of the terms of the polynomial starting with the most significant term with respect to the ordering. Each exponent vector is an array of Ints, one for each variable, in the order given when the polynomial ring was created. Generic code will provide this function automatically for random access polynomials that implement the exponent_vector function.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"julia> S, (x, y) = PolynomialRing(ZZ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Integers, AbstractAlgebra.Generic.MPoly{BigInt}[x, y])\n\njulia> f = x^3*y + 3x*y^2 + 1\nx^3*y + 3*x*y^2 + 1\n\njulia> n = length(f)\n3\n\njulia> isgen(y)\ntrue\n\njulia> nvars(S) == 2\ntrue\n\njulia> C = collect(coefficients(f))\n3-element Array{BigInt,1}:\n 1\n 3\n 1\n\njulia> M = collect(monomials(f))\n3-element Array{AbstractAlgebra.Generic.MPoly{BigInt},1}:\n x^3*y\n x*y^2\n 1\n\njulia> T = collect(terms(f))\n3-element Array{AbstractAlgebra.Generic.MPoly{BigInt},1}:\n x^3*y\n 3*x*y^2\n 1\n\njulia> V = collect(exponent_vectors(f))\n3-element Array{Array{Int64,1},1}:\n [3, 1]\n [1, 2]\n [0, 0]\n\njulia> d = total_degree(f)\n4\n","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/#Exact-division","page":"Multivariate Polynomial Ring Interface","title":"Exact division","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"For any ring that implements exact division, the following can be implemented.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"divexact(f::MyMPoly{T}, g::MyMPoly{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return the exact quotient of f by g if it exists, otherwise throw an error.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"divides(f::MyMPoly{T}, g::MyMPoly{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return a tuple (flag, q) where flag is true if g divides f, in which case q will be the exact quotient, or flag is false and q is set to zero.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"remove(f::MyMPoly{T}, g::MyMPoly{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return a tuple (v q) such that the highest power of g that divides f is g^v and the cofactor is q.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"valuation(f::MyMPoly{T}, g::MyMPoly{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return v such that the highest power of g that divides f is g^v.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"julia> R, (x, y) = PolynomialRing(ZZ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Integers, AbstractAlgebra.Generic.MPoly{BigInt}[x, y])\n\njulia> f = 2x^2*y + 2x + y + 1\n2*x^2*y + 2*x + y + 1\n\njulia> g = x^2*y^2 + 1\nx^2*y^2 + 1\n\njulia> flag, q = divides(f*g, f)\n(true, x^2*y^2 + 1)\n\njulia> d = divexact(f*g, f)\nx^2*y^2 + 1\n\njulia> v, q = remove(f*g^3, g)\n(3, 2*x^2*y + 2*x + y + 1)\n\njulia> n = valuation(f*g^3, g)\n3\n","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/#Ad-hoc-exact-division","page":"Multivariate Polynomial Ring Interface","title":"Ad hoc exact division","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"For any ring that implements exact division, the following can be implemented.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"divexact(f::MyMPoly{T}, c::Integer) where T <: AbstractAlgebra.RingElem\ndivexact(f::MyMPoly{T}, c::Rational) where T <: AbstractAlgebra.RingElem\ndivexact(f::MyMPoly{T}, c::T) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Divide the polynomial exactly by the constant c.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"julia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rationals, AbstractAlgebra.Generic.MPoly{Rational{BigInt}}[x, y])\n\njulia> f = 3x^2*y^2 + 2x + 1\n3*x^2*y^2 + 2*x + 1\n\njulia> f1 = divexact(f, 5)\n3//5*x^2*y^2 + 2//5*x + 1//5\n\njulia> f2 = divexact(f, QQ(2, 3))\n9//2*x^2*y^2 + 3*x + 3//2\n","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/#Euclidean-division","page":"Multivariate Polynomial Ring Interface","title":"Euclidean division","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Although multivariate polynomial rings are not in general Euclidean, it is possible to define a quotient with remainder function that depends on the polynomial ordering in the case that the quotient ring is a field or a Euclidean domain. In the case that a polynomial g divides a polynomial f, the result no longer depends on the ordering and the remainder is zero, with the quotient agreeing with the exact quotient.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"divrem(f::MyMPoly{T}, g::MyMPoly{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return a tuple (q r) such that f = qg + r, where the coefficients of terms of r whose monomials are divisible by the leading monomial of g are reduced modulo the leading coefficient of g (according to the Euclidean function on the coefficients).","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Note that the result of this function depends on the ordering of the polynomial ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"div(f::MyMPoly{T}, g::MyMPoly{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"As per the divrem function, but returning the quotient only. Especially when the quotient happens to be exact, this function can be exceedingly fast.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"julia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rationals, AbstractAlgebra.Generic.MPoly{Rational{BigInt}}[x, y])\n\njulia> f = 2x^2*y + 2x + y + 1\n2*x^2*y + 2*x + y + 1\n\njulia> g = x + y\nx + y\n\njulia> q = div(f, g)\n2*x*y - 2*y^2 + 2\n\njulia> q, r = divrem(f, g)\n(2*x*y - 2*y^2 + 2, 2*y^3 - y + 1)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/#GCD","page":"Multivariate Polynomial Ring Interface","title":"GCD","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"In cases where there is a meaningful Euclidean structure on the coefficient ring, it is possible to compute the GCD of multivariate polynomials.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"gcd(f::MyMPoly{T}, g::MyMPoly{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return a greatest common divisor of f and g.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"julia> R, (x, y) = PolynomialRing(ZZ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Integers, AbstractAlgebra.Generic.MPoly{BigInt}[x, y])\n\njulia> f = 2x^2*y + 2x + y + 1\n2*x^2*y + 2*x + y + 1\n\njulia> g = x^2*y^2 + 1\nx^2*y^2 + 1\n\njulia> d = gcd(f*g^2, f^2*g)\n2*x^4*y^3 + 2*x^3*y^2 + x^2*y^3 + x^2*y^2 + 2*x^2*y + 2*x + y + 1\n","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/#Square-root","page":"Multivariate Polynomial Ring Interface","title":"Square root","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Over rings for which an exact square root is available, it is possible to take the square root of a polynomial or test whether it is a square.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"sqrt(f::MyMPoly{T}, check::bool=true) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return the square root of the polynomial f and raise an exception if it is not a square. If check is set to false, the input is assumed to be a perfect square and this assumption is not fully checked. This can be significantly faster.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"issquare(::MyMPoly{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return true if f is a square.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"julia> R, (x, y) = PolynomialRing(ZZ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Integers, AbstractAlgebra.Generic.MPoly{BigInt}[x, y])\n\njulia> f = -4*x^5*y^4 + 5*x^5*y^3 + 4*x^4 - x^3*y^4\n-4*x^5*y^4 + 5*x^5*y^3 + 4*x^4 - x^3*y^4\n\njulia> sqrt(f^2)\n4*x^5*y^4 - 5*x^5*y^3 - 4*x^4 + x^3*y^4\n\njulia> issquare(f)\nfalse","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/#Interface-for-sparse-distributed,-random-access-multivariates","page":"Multivariate Polynomial Ring Interface","title":"Interface for sparse distributed, random access multivariates","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"The following additional functions should be implemented by libraries that provide a sparse distributed polynomial format, stored in a representation for which terms can be accessed in constant time (e.g. where arrays are used to store coefficients and exponent vectors).","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/#Sparse-distributed,-random-access-constructors","page":"Multivariate Polynomial Ring Interface","title":"Sparse distributed, random access constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"In addition to the standard constructors, the following constructor, taking arrays of coefficients and exponent vectors, should be provided.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"(S::MyMPolyRing{T})(A::Vector{T}, m::Vector{Vector{Int}}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Create the polynomial in the given ring with nonzero coefficients specified by the elements of A and corresponding exponent vectors given by the elements of m.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"There is no assumption about coefficients being nonzero or terms being in order or unique. Zero terms are removed by the function, duplicate terms are combined (added) and the terms are sorted so that they are in the correct order.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Each exponent vector uses a separate integer for each exponent field, the first of which should be the exponent for the most significant variable with respect to the ordering. All exponents must be non-negative.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"A library may also optionally provide an interface that makes use of BigInt (or any other big integer type) for exponents instead of Int.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"julia> S, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rationals, AbstractAlgebra.Generic.MPoly{Rational{BigInt}}[x, y])\n\njulia> f = S(Rational{BigInt}[2, 3, 1], [[3, 2], [1, 0], [0, 1]])\n2*x^3*y^2 + 3*x + y\n","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/#Sparse-distributed,-random-access-basic-manipulation","page":"Multivariate Polynomial Ring Interface","title":"Sparse distributed, random access basic manipulation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"coeff(f::MyMPoly{T}, n::Int) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return the coefficient of the n-th term of f. The first term should be the most significant term with respect to the ordering.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"coeff(a::MyMPoly{T}, exps::Vector{Int}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return the coefficient of the term with the given exponent vector, or zero if there is no such term.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"monomial(f::MyMPoly{T}, n::Int) where T <: AbstractAlgebra.RingElem\nmonomial!(m::MyMPoly{T}, f::MyMPoly{T}, n::Int) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return the n-th monomial of f or set m to the n-th monomial of f, respectively. The first monomial should be the most significant term with respect to the ordering. Monomials have coefficient 1 in AbstractAlgebra. See the function term if you also require the coefficient, however, note that only monomials can be compared.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"term(f::MyMPoly{T}, n::Int) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return the n-th term of f. The first term should be the one whose monomial is most significant with respect to the ordering.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"exponent(f::MyMPoly{T}, i::Int, j::Int) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return the exponent of the j-th variable in the n-th term of the polynomial f. The first term is the one with whose monomial is most significant with respect to the ordering.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"exponent_vector(a::MyMPoly{T}, i::Int) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Return a vector of exponents, corresponding to the exponent vector of the i-th term of the polynomial. Term numbering begins at 1 and the exponents are given in the order of the variables for the ring, as supplied when the ring was created.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"setcoeff!(a::MyMPoly, exps::Vector{Int}, c::S) where S <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Set the coefficient of the term with the given exponent vector to the given value c. If no such term exists (and c neq 0), one will be inserted. This function takes O(log n) operations if a term with the given exponent already exists and c neq 0, or if the term is inserted at the end of the polynomial. Otherwise it can take O(n) operations in the worst case. This function must return the modified polynomial.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"julia> S, (x, y) = PolynomialRing(ZZ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Integers, AbstractAlgebra.Generic.MPoly{BigInt}[x, y])\n\njulia> f = x^3*y + 3x*y^2 + 1\nx^3*y + 3*x*y^2 + 1\n\njulia> c1 = coeff(f, 1)\n1\n\njulia> c2 = coeff(f, x^3*y)\n1\n\njulia> m = monomial(f, 2)\nx*y^2\n\njulia> e1 = exponent(f, 1, 1)\n3\n\njulia> v1 = exponent_vector(f, 1)\n2-element Array{Int64,1}:\n 3\n 1\n\njulia> t1 = term(f, 1)\nx^3*y\n\njulia> setcoeff!(f, [3, 1], 12)\n12*x^3*y + 3*x*y^2 + 1\n","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/#Unsafe-functions","page":"Multivariate Polynomial Ring Interface","title":"Unsafe functions","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"The following functions must be provided, but are considered unsafe, as they may leave the polynomials in an inconsistent state and they mutate their inputs. As usual, such functions should only be applied on polynomials that have no references elsewhere in the system and are mainly intended to be used in carefully written library code, rather than by users.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Users should instead build polynomials using the constructors described above.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"fit!(f::MyMPoly{T}, n::Int) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Ensure that the polynomial f internally has space for n nonzero terms. This function must mutate the function in-place if it is mutable. It does not return the mutated polynomial. Immutable types can still be supported by defining this function to do nothing.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"setcoeff!(a::MyMPoly{T}, i::Int, c::T) where T <: RingElement\nsetcoeff!(a::MyMPoly{T}, i::Int, c::U) where {T <: RingElement, U <: Integer}","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Set the i-th coefficient of the polynomial a to c. No check is performed on the index i or for c = 0. It may be necessary to call combine_like_terms after calls to this function, to remove zero terms. The function must return the modified polynomial.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"combine_like_terms!(a::MyMPoly{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Remove zero terms and combine any adjacent terms with the same exponent vector (by adding them). It is assumed that all the exponent vectors are already in the correct order with respect to the ordering. The function must return the resulting polynomial.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"set_exponent_vector!(a::MyMPoly{T}, i::Int, exps::Vector{Int}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Set the i-th exponent vector to the given exponent vector. No check is performed on the index i, which is assumed to be valid (or that the polynomial has enough space allocated). No sorting of exponents is performed by this function. To sort the terms after setting any number of exponents with this function, run the sort_terms! function. The function must return the modified polynomial.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"sort_terms!(a::MyMPoly{T}) where {T <: RingElement}","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Sort the terms of the given polynomial according to the polynomial ring ordering. Zero terms and duplicate exponents are ignored. To deal with those call combine_like_terms. The sorted polynomial must be returned by the function.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/#Optional-functionality-for-multivariate-polynomials","page":"Multivariate Polynomial Ring Interface","title":"Optional functionality for multivariate polynomials","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"The following functions can optionally be implemented for multivariate polynomial types.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/#Reduction-by-an-ideal","page":"Multivariate Polynomial Ring Interface","title":"Reduction by an ideal","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"divrem(f::MyMPoly{T}, G::Array{MyMPoly{T}, 1}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"As per the divrem function above, except that each term of r starting with the most significant term, is reduced modulo the leading terms of each of the polynomials in the array G for which the leading monomial is a divisor.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"A tuple (Q r) is returned from the function, where Q is an array of polynomials of the same length as G, and such that f = r + sum QiGi.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"The result is again dependent on the ordering in general, but if the polynomials in G are over a field and the reduced generators of a Groebner basis, then the result is unique.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"julia> R, (x, y) = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rationals, AbstractAlgebra.Generic.MPoly{Rational{BigInt}}[x, y])\n\njulia> f = 2x^2*y + 2x + y + 1\n2*x^2*y + 2*x + y + 1\n\njulia> g = x + y\nx + y\n\njulia> h = y + 1\ny + 1\n\njulia> Q, r = divrem(f, [g, h])\n(AbstractAlgebra.Generic.MPoly{Rational{BigInt}}[2*x*y - 2*y^2 + 2, 2*y^2 - 2*y + 1], 0)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/#Evaluation","page":"Multivariate Polynomial Ring Interface","title":"Evaluation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"evaluate(a::MyMPoly{T}, A::Vector{T}) where T <: RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Evaluate the polynomial at the given values in the coefficient ring of the polynomial. The result should be an element of the coefficient ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"evaluate(f::MyMPoly{T}, A::Vector{U}) where {T <: AbstractAlgebra.RingElem, U <: Intege\nr}","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Evaluate the polynomial f at the values specified by the entries of the array A.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"(a::MyMPoly{T})(vals::Union{NCRingElem, RingElement}...) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Evaluate the polynomial at the given arguments. This provides functional notation for polynomial evaluation, i.e. f(a b c). It must be defined for each supported polynomial type (Julia does not allow functional notation to be defined for an abstract type).","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"The code for this function in MPoly.jl can be used when implementing this as it provides the most general possible evaluation, which is much more general than the case of evaluation at elements of the same ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"The evaluation should succeed for any set of values for which a multiplication is defined with the product of a coefficient and all the values before it.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Note that the values may be in non-commutative rings. Products are performed in the order of the variables in the polynomial ring that the polynomial belongs to, preceded by a multiplication by the coefficient on the left.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"julia> R, (x, y) = AbstractAlgebra.PolynomialRing(ZZ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Integers, AbstractAlgebra.Generic.MPoly{BigInt}[x, y])\n\njulia> S = MatrixAlgebra(ZZ, 2)\nMatrix Algebra of degree 2 over Integers\n\njulia> f = x*y + x + y + 1\nx*y + x + y + 1\n\njulia> evaluate(f, [ZZ(1), ZZ(2)])\n6\n\njulia> evaluate(f, [2, 3])\n12\n\njulia> f(1, 2)\n6\n\njulia> f(ZZ(1), ZZ(2))\n6\n\njulia> f(x - y, x + y)\nx^2 + 2*x - y^2 + 1\n\njulia> M1 = S([1 2; 3 4])\n[1   2]\n[3   4]\n\njulia> M2 = S([2 4; 1 -1])\n[2    4]\n[1   -1]\n\njulia> M3 = S([1 -1; 1 1])\n[1   -1]\n[1    1]\n\njulia> f(M1, M2)\n[ 8    8]\n[14   12]\n\njulia> f(M1, ZZ(2))\n[6    6]\n[9   15]\n","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/#Derivations","page":"Multivariate Polynomial Ring Interface","title":"Derivations","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"The following function allows to compute derivations of multivariate polynomials of type MPoly.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"derivative(f::MyMPoly{T}, j::Int) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Compute the derivative of f with respect to the j-th variable of the polynomial ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial_rings/","page":"Multivariate Polynomial Ring Interface","title":"Multivariate Polynomial Ring Interface","text":"julia> R, (x, y) = AbstractAlgebra.PolynomialRing(ZZ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Integers, AbstractAlgebra.Generic.MPoly{BigInt}[x, y])\n\njulia> f = x*y + x + y + 1\nx*y + x + y + 1\n\njulia> derivative(f, 1)\ny + 1\n\njulia> derivative(f, 2)\nx + 1\n","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Ring-Interface","page":"Ring Interface","title":"Ring Interface","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"AbstractAlgebra.jl generic code makes use of a standardised set of functions which it expects to be implemented for all rings. Here we document this interface. All libraries which want to make use of the generic capabilities of AbstractAlgebra.jl must supply all of the required functionality for their rings.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"In addition to the required functions, there are also optional functions which can be provided for certain types of rings, e.g. GCD domains or fields, etc. If implemented, these allow the generic code to provide additional functionality for those rings, or in some cases, to select more efficient algorithms.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Types","page":"Ring Interface","title":"Types","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Most rings must supply two types:","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"a type for the parent object (representing the ring itself)\na type for elements of that ring","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"For example, the generic univariate polynomial type in AbstractAlgebra.jl provides two types in generic/GenericTypes.jl:","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Generic.PolyRing{T} for the parent objects\nGeneric.Poly{T} for the actual polynomials","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"The parent type must belong to AbstractAlgebra.Ring and the element type must belong to AbstractAlgebra.RingElem. Of course, the types may belong to these abstract types transitively, e.g. Poly{T} actually belongs to AbstractAlgebra.PolyElem{T} which in turn belongs to AbstractAlgebra.RingElem.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"For parameterised rings, we advise that the types of both the parent objects and element objects to be parameterised by the types of the elements of the base ring (see the function base_ring below for a definition).","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"There can be variations on this theme: e.g. in some areas of mathematics there is a notion of a coefficient domain, in which case it may make sense to parameterise all types by the type of elements of this coefficient domain. But note that this may have implications for the ad hoc operators one might like to explicitly implement.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#RingElement-type-union","page":"Ring Interface","title":"RingElement type union","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Because of its lack of multiple inheritance, Julia does not allow Julia Base types to belong to AbstractAlgebra.RingElem. To allow us to work equally with AbstractAlgebra and Julia types that represent elements of rings we define a union type AbstractAlgebra.RingElement in src/julia/JuliaTypes.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"So far, in addition to AbstractAlgebra.RingElem the  union type AbstractAlgebra.RingElement includes the Julia types Integer, Rational and AbstractFloat.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Most of the generic code in AbstractAlgebra makes use of the union type AbstractAlgebra.RingElement instead of AbstractAlgebra.RingElem so that the generic functions also accept the Julia Base ring types.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"One must be careful when defining ad hoc binary operations for ring element types. It is often necessary to define separate versions of the functions for AbstractAlgebra.RingElem then for each of the Julia types separately in order to avoid ambiguity warnings.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Note that even though AbstractAlgebra.RingElement is a union type we still have the following inclusion","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"AbstractAlgebra.RingElement <: AbstractAlgebra.NCRingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Parent-object-caches","page":"Ring Interface","title":"Parent object caches","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"In many cases, it is desirable to have only one object in the system to represent each ring. This means that if the same ring is constructed twice, elements of the two rings will be compatible as far as arithmetic is concerned.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"In order to facilitate this, global caches of rings are stored in AbstractAlgebra.jl, usually implemented using dictionaries. For example, the Generic.PolyRing parent objects are looked up in a dictionary PolyID to see if they have been previously defined.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Whether these global caches are provided or not, depends on both mathematical and algorithmic considerations. E.g. in the case of number fields, it isn't desirable to identify all number fields with the same defining polynomial, as they may be considered with distinct embeddings into one another. In other cases, identifying whether two rings are the same may be prohibitively expensive. Generally, it may only make sense algorithmically to identify two rings if they were constructed from identical data.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"If a global cache is provided, it must be optionally possible to construct the parent objects without caching. This is done by passing a boolean value cached to the inner constructor of the parent object. See generic/GenericTypes.jl for examples of how to construct and handle such caches.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Required-functions-for-all-rings","page":"Ring Interface","title":"Required functions for all rings","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"In the following, we list all the functions that are required to be provided for rings in AbstractAlgebra.jl or by external libraries wanting to use AbstractAlgebra.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"We give this interface for fictitious types MyParent for the type of the ring parent object R and MyElem for the type of the elements of the ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Note that generic functions in AbstractAlgebra.jl may not rely on the existence of functions that are not documented here. If they do, those functions will only be available for rings that implement that additional functionality, and should be documented as such.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Data-type-and-parent-object-methods","page":"Ring Interface","title":"Data type and parent object methods","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"parent_type(::Type{MyElem})","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Return the type of the corresponding parent object for the given element type. For example, parent_type(Generic.Poly{T}) will return Generic.PolyRing{T}.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"elem_type(::Type{MyParent})","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Return the type of the elements of the ring whose parent object has the given type. This is the inverse of the parent_type function, i.e. elem_type(Generic.PolyRing{T}) will return Generic.Poly{T}.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"base_ring(R::MyParent)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Given a parent object R, representing a ring, this function returns the parent object of any base ring that parameterises this ring. For example, the base ring of the ring of polynomials over the integers would be the integer ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"If the ring is not parameterised by another ring, this function must return Union{}.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Note that there is a distinction between a base ring and other kinds of parameters. For example, in the ring mathbbZnmathbbZ, the modulus n is a parameter, but the only base ring is mathbbZ. We consider the ring mathbbZnmathbbZ to have been constructed from the base ring mathbbZ by taking its quotient by a (principal) ideal.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"parent(f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Return the parent object of the given element, i.e. return the ring to which the given element belongs.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"This is usually stored in a field parent in each ring element. (If the parent objects have mutable struct types, the internal overhead here is just an additional machine pointer stored in each element of the ring.)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"For some element types it isn't necessary to append the parent object as a field of every element. This is the case when the parent object can be reconstructed just given the type of the elements. For example, this is the case for the ring of integers and in fact for any ring element type that isn't parameterised or generic in any way.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"isdomain_type(::Type{MyElem})","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Return true if every element of the given element type (which may be parameterised or an abstract type) necessarily has a parent that is an integral domain, otherwise if this cannot be guaranteed, the function returns false.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"For example, if MyElem was the type of elements of generic residue rings of a polynomial ring, the answer to the question would depend on the modulus of the residue ring. Therefore isdomain_type would have to return false, since we cannot guarantee that we are dealing with elements of an integral domain in general. But if the given element type was for rational integers, the answer would be true, since every rational integer has as parent the ring of rational integers, which is an integral domain.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Note that this function depends only on the type of an element and cannot access information about the object itself, or its parent.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"isexact_type(::Type{MyElem})","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Return true if every element of the given type is represented exactly. For example, p-adic numbers, real and complex floating point numbers and power series are not exact, as we can only represent them in general with finite truncations. Similarly polynomials and matrices over inexact element types are themselves inexact.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Integers, rationals, finite fields and polynomials and matrices over them are always exact.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Note that MyElem may be parameterised or an abstract type, in which case every element of every type represented by MyElem must be exact, otherwise the function must return false.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Base.hash(f::MyElem, h::UInt)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Return a hash for the object f of type UInt. This is used as a hopefully cheap way to distinguish objects that differ arithmetically.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"If the object has components, e.g. the coefficients of a polynomial or elements of a matrix, these should be hashed recursively, passing the same parameter h to all levels. Each component should then be xor'd with h before combining the individual component hashes to give the final hash.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"The hash functions in AbstractAlgebra.jl usually start from some fixed 64 bit hexadecimal  value that has been picked at random by the library author for that type. That is then truncated to fit a UInt (in case the latter is not 64 bits). This ensures that objects that are the same arithmetically (or that have the same components), but have different types (or structures), are unlikely to hash to the same value.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"deepcopy_internal(f::MyElem, dict::ObjectIdDict)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Return a copy of the given element, recursively copying all components of the object.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Obviously the parent, if it is stored in the element, should not be copied. The new element should have precisely the same parent as the old object.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"For types that cannot self-reference themselves anywhere internally, the dict argument may be ignored.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"In the case that internal self-references are possible, please consult the Julia documentation on how to implement deepcopy_internal.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Constructors","page":"Ring Interface","title":"Constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Outer constructors for most AbstractAlgebra types are provided by overloading the call syntax for parent objects.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"If R is a parent object for a given ring we provide the following constructors.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"(R::MyParent)()","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Return the zero object of the given ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"(R::MyParent)(a::Integer)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Coerce the given integer into the given ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"(R::MyParent)(a::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"If a belongs to the given ring, the function returns it (without making a copy). Otherwise an error is thrown.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"For parameterised rings we also require a function to coerce from the base ring into the parent ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"(R::MyParent{T})(a::T) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Coerce a into the ring R if a belongs to the base ring of R.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Basic-manipulation-of-rings-and-elements","page":"Ring Interface","title":"Basic manipulation of rings and elements","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"zero(R::MyParent)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Return the zero element of the given ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"one(R::MyParent)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Return the multiplicative identity of the given ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"iszero(f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Return true if the given element is the zero element of the ring it belongs to.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"isone(f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Return true if the given element is the multiplicative identity of the ring it belongs to.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Canonicalisation","page":"Ring Interface","title":"Canonicalisation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"canonical_unit(f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"When fractions are created with two elements of the given type, it is nice to be able to represent them in some kind of canonical form. This is of course not always possible. But for example, fractions of integers can be canonicalised by first removing any common factors of the numerator and denominator, then making the denominator positive.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"In AbstractAlgebra.jl, the denominator would be made positive by dividing both the numerator and denominator by the canonical unit of the denominator. For a negative denominator, this would be -1.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"For elements of a field, canonical_unit simply returns the element itself. In general, canonical_unit of an invertible element should be that element. Finally, if a = ub we should have the identity canonical_unit(a) = canonical_unit(u)*canonical_unit(b).","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"For some rings, it is completely impractical to implement this function, in which case it may return 1 in the given ring. The function must however always exist, and always return an element of the ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#String-I/O","page":"Ring Interface","title":"String I/O","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"show(io::IO, R::MyParent)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"This should print an English description of the parent ring (to the given IO object). If the ring is parameterised, it can call the corresponding show function for any rings it depends on.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"show(io::IO, f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"This should print a human readable, textual representation of the object (to the given IO object). It can recursively call the corresponding show functions for any of its components.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"note: Note\nThe functionality of the function needs_parentheses has been replaced by expressify and needs_parentheses will be removed in future versions.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"It may be necessary in some cases to print parentheses around components of f or to print signs of components. For these, the following functions will exist for each component or component type.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"needs_parentheses(f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Should return true if parentheses are needed around this object when printed, e.g. as a coefficient of a polynomial. As an example, non-constant polynomials would need such parentheses if used as coefficients of another polynomial.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Note that since this approach quickly leads to unnecessary parentheses, the expression method below is preferred.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Expressions","page":"Ring Interface","title":"Expressions","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"To obtain best results when printing composed types derived from other types, e.g., polynomials, the following method should be implemented.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"expressify(f::MyElem; context = nothing)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"which must return either Expr, Symbol, Integer or String. In case one implements expressify, one can define the following show methods for MyElem:","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"function Base.show(io::IO, a::MyElem)\n  show_via_expressify(io, a)\nend\n\nfunction Base.show(io::IO, mi::MIME\"text/plain\", a::MyElem)\n  show_via_expressify(io, mi, a)\nend\n\nfunction Base.show(io::IO, mi::MIME\"text/latex\", a::MyElem)\n  show_via_expressify(io, mi, a)\nend\n\nfunction Base.show(io::IO, mi::MIME\"text/html\", a::MyElem)\n  show_via_expressify(io, mi, a)\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"As an example, assume that an object f of type MyElem has two components f.a and f.b of integer type, which should be printed as a^b, this can be implemented as","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"expressify(f::MyElem; context = nothing) = Expr(:call, :^, f.a, f.b)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"If f.a and f.b themselves are objects that can be expressified, this can be implemented as","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"function expressify(f::MyElem; context = nothing)\n  return Expr(:call, :^, expressify(f.a, context = context),\n                         expressify(f.b, context = context))\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Unary-operations","page":"Ring Interface","title":"Unary operations","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"-(f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Return -f.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Binary-operations","page":"Ring Interface","title":"Binary operations","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"+(f::MyElem, g::MyElem)\n-(f::MyElem, g::MyElem)\n*(f::MyElem, g::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Return f + g, f - g or fg, respectively.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Comparison","page":"Ring Interface","title":"Comparison","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"==(f::MyElem, g::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Return true if f and g are arithmetically equal. In the case where the two elements are inexact, the function returns true if they agree to the minimum precision of the two.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"isequal(f::MyElem, g::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"For exact rings, this should return the same thing as == above. For inexact rings, this returns true only if the two elements are arithmetically equal and have the same precision.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Powering","page":"Ring Interface","title":"Powering","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"^(f::MyElem, e::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Return f^e. The function should throw a DomainError() if negative exponents don't make sense but are passed to the function.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Exact-division","page":"Ring Interface","title":"Exact division","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"divexact(f::MyElem, g::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Return fg, though note that Julia uses / for floating point division. Here we mean exact division in the ring, i.e. return q such that f = gq. A DivideError() should be thrown if g is zero. If no exact quotient exists or an impossible inverse is unavoidably encountered, an error should be thrown.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Inverse","page":"Ring Interface","title":"Inverse","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"inv(f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Return the inverse of f, i.e. 1f, though note that Julia uses / for floating point division. Here we mean exact division in the ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"A fallback for this function is provided in terms of divexact so an implementation can be omitted if preferred.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Unsafe-operators","page":"Ring Interface","title":"Unsafe operators","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"To speed up polynomial and matrix arithmetic, it sometimes makes sense to mutate values in place rather than replace them with a newly created object every time they are modified.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"For this purpose, certain mutating operators are required. In order to support immutable types (struct in Julia) and systems that don't have in-place operators, all unsafe operators must return the (ostensibly) mutated value. Only the returned value is used in computations, so this lifts the requirement that the unsafe operators actually mutate the value.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Note the exclamation point is a convention, which indicates that the object may be mutated in-place.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"To make use of these functions, one must be certain that no other references are held to the object being mutated, otherwise those values will also be changed!","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"The results of deepcopy and all arithmetic operations, including powering and division can be assumed to be new objects without other references being held, as can objects returned from constructors.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Note that R(a) where R is the ring a belongs to, does not create a new value. For this case, use deepcopy(a).","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"zero!(f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Set the value f to zero in place. Return the mutated value.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"mul!(c::MyElem, a::MyElem, b::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Set c to the value ab in place. Return the mutated value. Aliasing is permitted.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"add!(c::MyElem, a::MyElem, b::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Set c to the value a + b in place. Return the mutated value. Aliasing is permitted.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"addeq!(a::MyElem, b::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Set a to a + b in place. Return the mutated value. Aliasing is permitted.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Random-generation","page":"Ring Interface","title":"Random generation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"The random functions are only used for test code to generate test data. They therefore don't need to provide any guarantees on uniformity, and in fact, test values that are known to be a good source of corner cases can be supplied.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"rand(R::MyParent, v...)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Return a random element in the given ring of the specified size.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"There can be as many arguments as is necessary to specify the size of the test example which is being produced.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Promotion-rules","page":"Ring Interface","title":"Promotion rules","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"In order for AbstractAlgebra to be able to automatically coerce up towers of rings, certain promotion rules must be defined. For every ring, one wants to be able to coerce integers into the ring. And for any ring constructed over a base ring, one would like to be able to coerce from the base ring into the ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"The promotion rules look a bit different depending on whether the element type is parameterised or not and whether it is built on a base ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"For ring element types MyElem that are neither parameterised nor built over a base ring, the promotion rules can be defined as follows:","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"promote_rule(::Type{MyElem}, ::Type{T}) where {T <: Integer} = MyElem","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"For ring element types MyElem that aren't parameterised, but which have a base ring with concrete element type T the promotion rules can be defined as follows:","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"promote_rule(::Type{MyElem}, ::Type{U}) where U <: Integer = MyElem","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"promote_rule(::Type{MyElem}, ::Type{T}) = MyElem","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"For ring element types MyElem{T} that are parameterised by the type of elements of the base ring, the promotion rules can be defined as follows:","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"promote_rule(::Type{MyElem{T}}, ::Type{MyElem{T}}) where T <: RingElement = MyElem{T}","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"function promote_rule(::Type{MyElem{T}}, ::Type{U}) where {T <: RingElement, U <: RingElement}\n   promote_rule(T, U) == T ? MyElem{T} : Union{}\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Required-functionality-for-inexact-rings","page":"Ring Interface","title":"Required functionality for inexact rings","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/#Approximation-(floating-point-and-ball-arithmetic-only)","page":"Ring Interface","title":"Approximation (floating point and ball arithmetic only)","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"isapprox(f::MyElem, g::MyElem; atol::Real=sqrt(eps()))","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"This is used by test code that uses rings involving floating point or ball arithmetic. The function should return true if all components of f and g are equal to within the square root of the Julia epsilon, since numerical noise may make an exact comparison impossible.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"For parameterised rings over an inexact ring, we also require the following ad hoc approximation functionality.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"isapprox(f::MyElem{T}, g::T; atol::Real=sqrt(eps())) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"isapprox(f::T, g::MyElem{T}; atol::Real=sqrt(eps())) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"These notionally coerce the element of the base ring into the parameterised ring and do a full comparison.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Optional-functionality","page":"Ring Interface","title":"Optional functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Some functionality is difficult or impossible to implement for all rings in the system. If it is provided, additional functionality or performance may become available. Here is a list of all functions that are considered optional and can't be relied on by generic functions in the AbstractAlgebra Ring interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"It may be that no algorithm, or no efficient algorithm is known to implement these functions. As these functions are optional, they do not need to exist. Julia will already inform the user that the function has not been implemented if it is called but doesn't exist.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Optional-basic-manipulation-functionality","page":"Ring Interface","title":"Optional basic manipulation functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"isunit(f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Return true if the given element is a unit in the ring it belongs to.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"characteristic(R::MyParent)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Return the characteristic of the ring. The function should not be defined if it is not possible to unconditionally give the characteristic as the function is used in some generic code for correctness, but will always take the safe path if the function is not defined.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Optional-binary-ad-hoc-operators","page":"Ring Interface","title":"Optional binary ad hoc operators","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"By default, ad hoc operations are handled by AbstractAlgebra.jl if they are not defined explicitly, by coercing both operands into the same ring and then performing the required operation.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"In some cases, e.g. for matrices, this leads to very inefficient behaviour. In such cases, it is advised to implement some of these operators explicitly.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"It can occasionally be worth adding a separate set of ad hoc binary operators for the type Int, if this can be done more efficiently than for arbitrary Julia Integer types.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"+(f::MyElem, c::Integer)\n-(f::MyElem, c::Integer)\n*(f::MyElem, c::Integer)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"+(c::Integer, f::MyElem)\n-(c::Integer, f::MyElem)\n*(c::Integer, f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"For parameterised types, it is also sometimes more performant to provide explicit ad hoc operators with elements of the base ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"+(f::MyElem{T}, c::T) where T <: AbstractAlgebra.RingElem\n-(f::MyElem{T}, c::T) where T <: AbstractAlgebra.RingElem\n*(f::MyElem{T}, c::T) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"+(c::T, f::MyElem{T}) where T <: AbstractAlgebra.RingElem\n-(c::T, f::MyElem{T}) where T <: AbstractAlgebra.RingElem\n*(c::T, f::MyElem{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Optional-ad-hoc-comparisons","page":"Ring Interface","title":"Optional ad hoc comparisons","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"==(f::MyElem, c::Integer)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"==(c::Integer, f::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"==(f::MyElem{T}, c:T) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"==(c::T, f::MyElem{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Optional-ad-hoc-exact-division-functions","page":"Ring Interface","title":"Optional ad hoc exact division functions","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"divexact(a::MyElem{T}, b::T) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"divexact(a::MyElem, b::Integer)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Optional-powering-functions","page":"Ring Interface","title":"Optional powering functions","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"^(f::MyElem, e::BigInt)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"In case f cannot explode in size when powered by a very large integer, and it is practical to do so, one may provide this function to support powering with BigInt exponents (or for external modules, any other big integer type).","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/#Optional-unsafe-operators","page":"Ring Interface","title":"Optional unsafe operators","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"addmul!(c::MyElem, a::MyElem, b::MyElem, t::MyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/rings/","page":"Ring Interface","title":"Ring Interface","text":"Set c = c + ab in-place. Return the mutated value. The value t should be a temporary of the same type as a, b and c, which can be used arbitrarily by the implementation to speed up the computation. Aliasing between a, b and c is permitted.","category":"page"},{"location":"CommutativeAlgebra/ca_invariant_theory/","page":"Invariant Theory","title":"Invariant Theory","text":"CurrentModule = Oscar","category":"page"},{"location":"CommutativeAlgebra/ca_invariant_theory/","page":"Invariant Theory","title":"Invariant Theory","text":"using Oscar","category":"page"},{"location":"CommutativeAlgebra/ca_invariant_theory/","page":"Invariant Theory","title":"Invariant Theory","text":"Pages = [\"ca_invariant_theory.md\"]","category":"page"},{"location":"CommutativeAlgebra/ca_invariant_theory/#Invariant-Theory","page":"Invariant Theory","title":"Invariant Theory","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_invariant_theory/#Invariant-Theory-of-Finite-Groups","page":"Invariant Theory","title":"Invariant Theory of Finite Groups","text":"","category":"section"},{"location":"CommutativeAlgebra/ca_invariant_theory/#...","page":"Invariant Theory","title":"...","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/#Integer-ring","page":"Integer ring","title":"Integer ring","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"AbstractAlgebra.jl provides a module, implemented in src/julia/Integer.jl for making Julia BigInts conform to the AbstractAlgebra.jl Ring interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"In addition to providing a parent object ZZ for Julia BigInts, we implement any additional functionality required by AbstractAlgebra.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"Because BigInt cannot be directly included in the AbstractAlgebra.jl abstract type hierarchy, we achieve integration of Julia BigInts by introducing a type union, called RingElement, which is a union of AbstractAlgebra.RingElem and a number of Julia types, including BigInt. Everywhere that RingElem is notionally used in AbstractAlgebra.jl, we are in fact using RingElement, with additional care being taken to avoid ambiguities.","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"The details of how this is done are technical, and we refer the reader to the implementation for details. For most intents and purposes, one can think of the Julia BigInt type as belonging to AbstractAlgebra.RingElem.","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"One other technicality is that Julia defines certain functions for BigInt, such as sqrt and exp differently to what AbstractAlgebra.jl requires. To get around this, we redefine these functions internally to AbstractAlgebra.jl, without redefining them for users of AbstractAlgebra.jl. This allows the internals of AbstractAlgebra.jl to function correctly, without broadcasting pirate definitions of already defined Julia functions to the world.","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"To access the internal definitions, one can use AbstractAlgebra.sqrt and AbstractAlgebra.exp, etc.","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/#Types-and-parent-objects","page":"Integer ring","title":"Types and parent objects","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"Integers have type BigInt, as in Julia itself. We simply supplement the functionality for this type as required for computer algebra.","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"The parent objects of such integers has type Integers{BigInt}.","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"For convenience, we also make Int a part of the AbstractAlgebra.jl type hierarchy and its parent object (accessible as zz) has type Integers{Int}. But we caution that this type is not particularly useful as a model of the integers and may not function as expected within AbstractAlgebra.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/#Integer-constructors","page":"Integer ring","title":"Integer constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"In order to construct integers in AbstractAlgebra.jl, one can first construct the integer ring itself. This is accomplished using the following constructor.","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"Integers{BigInt}()","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"This gives the unique object of type Integers{BigInt} representing the ring of integers in AbstractAlgebra.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"In practice, one simply uses ZZ which is assigned to be the return value of the above constructor. There is no need to call the constructor in practice.","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"Here are some examples of creating the integer ring and making use of the resulting parent object to coerce various elements into the ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"julia> f = ZZ()\n0\n\njulia> g = ZZ(123)\n123\n\njulia> h = ZZ(BigInt(1234))\n1234\n","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/#Basic-ring-functionality","page":"Integer ring","title":"Basic ring functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"The integer ring in AbstractAlgebra.jl implements the full Ring interface and the  Euclidean Ring interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"We give some examples of such functionality.","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"julia> f = ZZ(12)\n12\n\njulia> h = zero(ZZ)\n0\n\njulia> k = one(ZZ)\n1\n\njulia> isone(k)\ntrue\n\njulia> iszero(f)\nfalse\n\njulia> T = parent(f)\nIntegers\n\njulia> f == deepcopy(f)\ntrue\n\njulia> g = f + 12\n24\n\njulia> h = powermod(f, 12, ZZ(17))\n4\n\njulia> flag, q = divides(f, ZZ(3))\n(true, 4)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/#Integer-functionality-provided-by-AbstractAlgebra.jl","page":"Integer ring","title":"Integer functionality provided by AbstractAlgebra.jl","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"The functionality below supplements that provided by Julia itself for its BigInt type.","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/#Basic-functionality","page":"Integer ring","title":"Basic functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"isunit(::Integer)","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/#AbstractAlgebra.isunit-Tuple{Integer}","page":"Integer ring","title":"AbstractAlgebra.isunit","text":"isunit(a::Integer)\n\nReturn true if a is 1 or -1.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"julia> r = ZZ(-1)\n-1\n\njulia> isunit(r)\ntrue\n","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/#Square-root","page":"Integer ring","title":"Square root","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"AbstractAlgebra.sqrt(a::BigInt)","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/#AbstractAlgebra.sqrt-Tuple{BigInt}","page":"Integer ring","title":"AbstractAlgebra.sqrt","text":"sqrt(a::T) where T <: Integer\n\nReturn the integer square root of a. If a is not a perfect square an exception is thrown. If check is set to false this check is not performed.\n\n\n\nsqrt(a::Rational{T}) where T <: Integer\n\nReturn the square root of a if it is the square of a rational, otherwise throw an error.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"issquare(a::BigInt)","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/#AbstractAlgebra.Generic.issquare-Tuple{BigInt}","page":"Integer ring","title":"AbstractAlgebra.Generic.issquare","text":"issquare(a::AbstractAlgebra.ResFieldElem{T}) where T <: Integer\n\nReturn true if a is a square.\n\n\n\nissquare(f::AbstractAlgebra.PolyElem{T}) where T <: RingElement\n\nReturn true if f is a perfect square.\n\n\n\nissquare(a::T) where T <: Integer\n\nReturn true if a is a square.\n\n\n\nissquare(a::Rational{T}) where T <: Integer\n\nReturn true if a is the square of a rational.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"AbstractAlgebra.exp(a::BigInt)","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/#AbstractAlgebra.exp-Tuple{BigInt}","page":"Integer ring","title":"AbstractAlgebra.exp","text":"exp(a::T) where T <: Integer\n\nReturn 1 if a = 0, otherwise throw an exception. This function is not generally of use to the user, but is used internally in AbstractAlgebra.jl.\n\n\n\nexp(a::Rational{T}) where T <: Integer\n\nReturn 1 if a = 0, otherwise throw an exception.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"julia> d = AbstractAlgebra.sqrt(ZZ(36))\n6\n\njulia> issquare(ZZ(9))\ntrue\n\njulia> m = AbstractAlgebra.exp(ZZ(0))\n1","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/#Coprime-bases","page":"Integer ring","title":"Coprime bases","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"ppio(a::BigInt, b::BigInt)","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/#AbstractAlgebra.ppio-Tuple{BigInt,BigInt}","page":"Integer ring","title":"AbstractAlgebra.ppio","text":"ppio(a::T, b::T)\n\nSplit a into c*d where c = gcd(a b^infty).\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/integer/","page":"Integer ring","title":"Integer ring","text":"julia> c, n = ppio(ZZ(12), ZZ(26))\n(4, 3)\n","category":"page"},{"location":"Nemo/docs/src/about/#About-Nemo","page":"About Nemo","title":"About Nemo","text":"","category":"section"},{"location":"Nemo/docs/src/about/","page":"About Nemo","title":"About Nemo","text":"Nemo is a library for fast basic arithmetic in various commonly used rings, for the Julia programming language. Our aim is to provide a highly performant package covering","category":"page"},{"location":"Nemo/docs/src/about/","page":"About Nemo","title":"About Nemo","text":"Commutative Algebra\nNumber Theory\nGroup Theory","category":"page"},{"location":"Nemo/docs/src/about/","page":"About Nemo","title":"About Nemo","text":"Nemo consists of wrappers of specialised C/C++ libraries:","category":"page"},{"location":"Nemo/docs/src/about/","page":"About Nemo","title":"About Nemo","text":"Flint    http://flintlib.org/\nArb      https://fredrikj.net/arb/\nAntic    https://github.com/wbhart/antic/","category":"page"},{"location":"Nemo/docs/src/about/","page":"About Nemo","title":"About Nemo","text":"Nemo also uses AbstractAlgebra.jl to provide generic constructions over the basic rings provided by the above packages.","category":"page"},{"location":"Nemo/docs/src/about/#Why-Julia?","page":"About Nemo","title":"Why Julia?","text":"","category":"section"},{"location":"Nemo/docs/src/about/","page":"About Nemo","title":"About Nemo","text":"Julia is a sophisticated, modern programming language which is designed to be both performant and flexible. It was written by mathematicians, for mathematicians.","category":"page"},{"location":"Nemo/docs/src/about/","page":"About Nemo","title":"About Nemo","text":"The benefits of Julia include","category":"page"},{"location":"Nemo/docs/src/about/","page":"About Nemo","title":"About Nemo","text":"Familiar imperative syntax\nJIT compilation (provides near native performance, even for highly generic code)\nREPL console (cuts down on development time)\nParametric types (allows for fast generic constructions over other data types)\nPowerful metaprogramming facilities\nOperator overloading\nMultiple dispatch (dispatch on every argument of a function)\nEfficient native C interface (little or no wrapper overhead)\nExperimental C++ interface\nDynamic type inference\nBuilt-in bignums\nAble to be embedded in C programs\nHigh performance collection types (dictionaries, iterators, arrays, etc.)\nJupyter support (for web based notebooks)","category":"page"},{"location":"Nemo/docs/src/about/","page":"About Nemo","title":"About Nemo","text":"The main benefits for Nemo are the parametric type system and JIT compilation. The former allows us to model many mathematical types, e.g. generic polynomial rings over an arbitrary base ring. The latter speeds up the runtime performance, even of highly generic mathematical procedures.","category":"page"},{"location":"Hecke/docs/src/orders/ideals/#Ideals","page":"Ideals","title":"Ideals","text":"","category":"section"},{"location":"Hecke/docs/src/orders/ideals/","page":"Ideals","title":"Ideals","text":"CurrentModule = Hecke","category":"page"},{"location":"Hecke/docs/src/orders/ideals/","page":"Ideals","title":"Ideals","text":"(Integral) ideals in orders are always free Z-module of the same rank as the order, hence have a representation via a Z-basis. This can be made unique by normalising the corresponding matrix to be in reduced row echelon form  (HNF).","category":"page"},{"location":"Hecke/docs/src/orders/ideals/","page":"Ideals","title":"Ideals","text":"For ideals in maximal orders Z_K, we also have a second presentation coming from the Z_K module structure and the fact that Z_K is a Dedekind ring: ideals can be generated by 2 elements, one of which can be any non-zero element in the ideal.","category":"page"},{"location":"Hecke/docs/src/orders/ideals/","page":"Ideals","title":"Ideals","text":"For efficiency, we will choose the 1st generator to be an integer.","category":"page"},{"location":"Hecke/docs/src/orders/ideals/","page":"Ideals","title":"Ideals","text":"Ideals here are of type NfAbsOrdIdl, which is, similar to the elements above, also indexed by the type of the field and their elements: NfAbsOrdIdl{AnticNumberField,nf_elem} for ideals in simple absolute fields.","category":"page"},{"location":"Hecke/docs/src/orders/ideals/","page":"Ideals","title":"Ideals","text":"Different to elements, the parentof an ideal is teh set of all ideals in the ring, of type NfAbsOrdIdlSet.","category":"page"},{"location":"Hecke/docs/src/orders/ideals/#Creation","page":"Ideals","title":"Creation","text":"","category":"section"},{"location":"Hecke/docs/src/orders/ideals/","page":"Ideals","title":"Ideals","text":"ideal(::NfOrd, ::fmpz)\nideal(::NfOrd, ::fmpz_mat)\nideal(::NfOrd, ::NfOrdElem)\nideal(::NfOrd, ::fmpz, ::NfOrdElem)\nideal(::NfOrd, ::NfAbsOrdIdl)\n*(::NfOrd, ::NfOrdElem)\nprime_decomposition(::NfOrd, ::Integer)\nprime_decomposition(::NfOrd, ::fmpz)\nfactor(::NfOrdIdl)\nfactor(::nf_elem, ::NfOrdIdlSet)","category":"page"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.ideal-Tuple{NfAbsOrd{AnticNumberField,nf_elem},fmpz}","page":"Ideals","title":"Hecke.ideal","text":"ideal(O::NfOrd, a::fmpz) -> NfAbsOrdIdl\nideal(O::NfOrd, a::Integer) -> NfAbsOrdIdl\n\nReturns the ideal of mathcal O which is generated by a.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.ideal-Tuple{NfAbsOrd{AnticNumberField,nf_elem},fmpz_mat}","page":"Ideals","title":"Hecke.ideal","text":"ideal(O::NfOrd, x::fmpz_mat, check::Bool = false, x_in_hnf::Bool = false) -> NfAbsOrdIdl\n\nCreates the ideal of mathcal O with basis matrix x. If check is set, then it is checked whether x defines an ideal (expensive). If x_in_hnf is set, then it is assumed that x is already in lower left HNF.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.ideal-Tuple{NfAbsOrd{AnticNumberField,nf_elem},NfAbsOrdElem{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.ideal","text":"ideal(O::NfOrd, x::NfOrdElem) -> NfAbsOrdIdl\n\nCreates the principal ideal (x) of mathcal O.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.ideal-Tuple{NfAbsOrd{AnticNumberField,nf_elem},fmpz,NfAbsOrdElem{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.ideal","text":"ideal(O::NfOrd, x::fmpz, y::NfOrdElem) -> NfAbsOrdIdl\nideal(O::NfOrd, x::Integer, y::NfOrdElem) -> NfAbsOrdIdl\n\nCreates the ideal (x y) of mathcal O.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Base.:*-Tuple{NfAbsOrd{AnticNumberField,nf_elem},NfAbsOrdElem{AnticNumberField,nf_elem}}","page":"Ideals","title":"Base.:*","text":"*(O::NfOrd, x::NfOrdElem) -> NfAbsOrdIdl\n*(x::NfAbsOrdElem, O::NfAbsOrd) -> NfAbsOrdIdl\n\nReturns the principal ideal (x) of mathcal O.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.factor-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.factor","text":"factor(A::NfOrdIdl) -> Dict{NfOrdIdl, Int}\n\nComputes the prime ideal factorization A as a dictionary, the keys being the prime ideal divisors: If lp = factor_dict(A), then keys(lp) are the prime ideal divisors of A and lp[P] is the P-adic valuation of A for all P in keys(lp).\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.factor-Tuple{nf_elem,Hecke.NfAbsOrdIdlSet{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.factor","text":"factor(a::nf_elem, I::NfOrdIdlSet) -> Dict{NfOrdIdl, fmpz}\n\nFactors the principal ideal generated by a.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Arithmetic","page":"Ideals","title":"Arithmetic","text":"","category":"section"},{"location":"Hecke/docs/src/orders/ideals/","page":"Ideals","title":"Ideals","text":"==(::NfOrdIdl, ::NfOrdIdl)\n+(::NfOrdIdl, ::NfOrdIdl)\n*(::NfOrdIdl, ::NfOrdIdl)\ndivexact(::NfOrdIdl, ::NfOrdIdl)\ndivides(::NfAbsOrdIdl{AnticNumberField,nf_elem}, ::NfAbsOrdIdl{AnticNumberField,nf_elem})\nlcm(::NfOrdIdl, ::NfOrdIdl)\ngcd(::NfOrdIdl, ::NfOrdIdl)\ngcd(::NfOrdIdl, ::fmpz)\nintersect(::NfOrdIdl, ::NfOrdIdl)\ncolon(::NfOrdIdl, ::NfOrdIdl)\nin(::NfOrdElem, ::NfAbsOrdIdl)\nispower(::NfAbsOrdIdl, ::Int)\nispower(::NfAbsOrdIdl)\nisinvertible(::NfOrdIdl)\nisone(::NfOrdIdl)","category":"page"},{"location":"Hecke/docs/src/orders/ideals/#Base.:==-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem},NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Base.:==","text":"==(x::NfAbsOrdIdl, y::NfAbsOrdIdl)\n\nReturns whether x and y are equal.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Base.:+-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem},NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Base.:+","text":"+(x::NfOrdIdl, y::NfOrdIdl)\n\nReturns x + y.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Base.:*-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem},NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Base.:*","text":"*(x::NfOrdIdl, y::NfOrdIdl)\n\nReturns x cdot y.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#AbstractAlgebra.Generic.divexact-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem},NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"AbstractAlgebra.Generic.divexact","text":"divexact(A::NfOrdIdl, B::NfOrdIdl) -> NfOrdIdl\n\nReturns AB^-1 assuming that AB^-1 is again an integral ideal.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#AbstractAlgebra.Generic.divides-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem},NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"AbstractAlgebra.Generic.divides","text":"divides(A::NfOrdIdl, B::NfOrdIdl)\n\nChecks if B divides A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Base.lcm-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem},NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Base.lcm","text":"intersect(x::NfOrdIdl, y::NfOrdIdl) -> NfOrdIdl\nlcm(x::NfOrdIdl, y::NfOrdIdl) -> NfOrdIdl\n\nReturns x cap y.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Base.gcd-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem},NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Base.gcd","text":"gcd(A::NfOrdIdl, B::NfOrdIdl) -> NfOrdIdl\n\nThe gcd or sum (A+B).\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Base.gcd-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem},fmpz}","page":"Ideals","title":"Base.gcd","text":"gcd(A::NfOrdIdl, p::fmpz) -> NfOrdIdl\n\nThe gcd or sum (A + pO).\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Base.intersect-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem},NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Base.intersect","text":"intersect(x::NfOrdIdl, y::NfOrdIdl) -> NfOrdIdl\nlcm(x::NfOrdIdl, y::NfOrdIdl) -> NfOrdIdl\n\nReturns x cap y.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.colon-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem},NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.colon","text":"colon(a::NfAbsOrdIdl, b::NfAbsOrdIdl) -> NfOrdFracIdl\n\nThe ideal (ab) = x in K  xb subseteq a = hom(b a) where K is the number field.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Base.in-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem},NfAbsOrdIdl}","page":"Ideals","title":"Base.in","text":"in(x::NfOrdElem, y::NfAbsOrdIdl)\nin(x::nf_elem, y::NfAbsOrdIdl)\nin(x::fmpz, y::NfAbsOrdIdl)\n\nReturns whether x is contained in y.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.ispower-Tuple{NfAbsOrdIdl,Int64}","page":"Ideals","title":"Hecke.ispower","text":"ispower(A::NfAbsOrdIdl, n::Int) -> Bool, NfAbsOrdIdl\nispower(A::NfOrdFracIdl, n::Int) -> Bool, NfOrdFracIdl\n\nComputes, if possible, an ideal B s.th. B^n==A holds. In this case, true and B are returned.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.ispower-Tuple{NfAbsOrdIdl}","page":"Ideals","title":"Hecke.ispower","text":"ispower(I::NfAbsOrdIdl) -> Int, NfAbsOrdIdl\nispower(a::NfOrdFracIdl) -> Int, NfOrdFracIdl\n\nWrites a = r^e with e maximal. Note: 1 = 1^0.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#AbstractAlgebra.Generic.isinvertible-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"AbstractAlgebra.Generic.isinvertible","text":"isinvertible(A::NfAbsOrdIdl) -> Bool, NfOrdFracIdl\n\nReturns true and an inverse of A or false and an ideal B such that A*B subsetneq order(A), if A is not invertible.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Base.isone-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Base.isone","text":"isone(A::NfAbsOrdIdl) -> Bool\nisunit(A::NfAbsOrdIdl) -> Bool\n\nTests if A is the trivial ideal generated by 1.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Class-Group","page":"Ideals","title":"Class Group","text":"","category":"section"},{"location":"Hecke/docs/src/orders/ideals/","page":"Ideals","title":"Ideals","text":"The group of invertable ideals in any order forms a group and the principal ideals a subgroup.  The finite quotient is called class group for maximal orders and Picard group or ring class group in general.","category":"page"},{"location":"Hecke/docs/src/orders/ideals/","page":"Ideals","title":"Ideals","text":"class_group(::NfOrd)\nclass_group(::AnticNumberField)\npicard_group(::NfOrd)\nring_class_group(::NfAbsOrd)","category":"page"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.picard_group-Tuple{NfAbsOrd{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.picard_group","text":"picard_group(O::NfOrd) -> GrpAbFinGen, MapClassGrp\n\nReturns the Picard group of O and a map from the group in the set of (invertible) ideals of O.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.ring_class_group-Tuple{NfAbsOrd}","page":"Ideals","title":"Hecke.ring_class_group","text":"ring_class_group(O::NfAbsOrd)\n\nThe ring class group (Picard group) of O.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/","page":"Ideals","title":"Ideals","text":"using Hecke # hide\nk, a = wildanger_field(3, 13);\nzk = maximal_order(k);\nc, mc = class_group(zk)\nlp = prime_ideals_up_to(zk, 20);\n[ mc \\ I for I = lp]\nmc(c[1])\norder(c[1])\nmc(c[1])^Int(order(c[1]))\nmc \\ ans","category":"page"},{"location":"Hecke/docs/src/orders/ideals/","page":"Ideals","title":"Ideals","text":"The class group, or more precisely the information used to compute it also allows for principal ideal testing and related tasks.  In general, due to the size of the objetcs, the fac_elem versions are more effcient.","category":"page"},{"location":"Hecke/docs/src/orders/ideals/","page":"Ideals","title":"Ideals","text":"Hecke.isprincipal(::NfOrdIdl)\nisprincipal_fac_elem(::NfAbsOrdIdl{AnticNumberField,nf_elem})\npower_class(::NfOrdIdl,::fmpz)\npower_product_class(::Array{NfOrdIdl, 1}, ::Array{fmpz, 1})\npower_reduce(::NfAbsOrdIdl{AnticNumberField,nf_elem},::fmpz)\nclass_group_ideal_relation(::NfAbsOrdIdl{AnticNumberField,nf_elem}, ::Hecke.ClassGrpCtx)","category":"page"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.isprincipal-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.isprincipal","text":"isprincipal(A::NfOrdIdl) -> Bool, NfOrdElem\nisprincipal(A::NfOrdFracIdl) -> Bool, NfOrdElem\n\nTests if A is principal and returns (mathtttrue alpha) if A = langle alpharangle or (mathttfalse 1) otherwise.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.isprincipal_fac_elem-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.isprincipal_fac_elem","text":"isprincipal_fac_elem(A::NfOrdIdl) -> Bool, FacElem{nf_elem, NumberField}\n\nTests if A is principal and returns (mathtttrue alpha) if A = langle alpharangle or (mathttfalse 1) otherwise. The generator will be in factored form.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.power_class-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem},fmpz}","page":"Ideals","title":"Hecke.power_class","text":"power_class(A::NfOrdIdl, e::fmpz) -> NfOrdIdl\n\nComputes a (small) ideal in the same class as A^e.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.power_product_class-Tuple{Array{NfAbsOrdIdl{AnticNumberField,nf_elem},1},Array{fmpz,1}}","page":"Ideals","title":"Hecke.power_product_class","text":"power_product_class(A::Array{NfOrdIdl, 1}, e::Array{fmpz, 1}) -> NfOrdIdl\n\nComputes a (small) ideal in the same class as prod A_i^e_i.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.power_reduce-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem},fmpz}","page":"Ideals","title":"Hecke.power_reduce","text":"power_reduce(A::NfOrdIdl, e::fmpz) -> NfOrdIdl, FacElem{nf_elem}\n\nComputes B and alpha in factored form, such that alpha B = A^e B has small norm.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.class_group_ideal_relation-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem},Hecke.ClassGrpCtx}","page":"Ideals","title":"Hecke.class_group_ideal_relation","text":"class_group_ideal_relation(I::NfOrdIdl, c::ClassGrpCtx) -> nf_elem, SRow{fmpz}\n\nFinds a number field element alpha such that alpha I factors over the factor base in c.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/","page":"Ideals","title":"Ideals","text":"I = mc(c[1])\nHecke.isprincipal(I)\nI = I^Int(order(c[1]))\nHecke.isprincipal(I)\nHecke.isprincipal_fac_elem(I)","category":"page"},{"location":"Hecke/docs/src/orders/ideals/","page":"Ideals","title":"Ideals","text":"The computation of S-units is also tied to the class group:","category":"page"},{"location":"Hecke/docs/src/orders/ideals/","page":"Ideals","title":"Ideals","text":"unit_group(::NfOrd)\nunit_group_fac_elem(::NfOrd)\nHecke.sunit_group(::Array{NfOrdIdl, 1})\nHecke.sunit_group_fac_elem(::Array{NfOrdIdl, 1})\nHecke.sunit_mod_units_group_fac_elem(::Array{NfOrdIdl, 1})","category":"page"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.unit_group-Tuple{NfAbsOrd{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.unit_group","text":"unit_group(O::NfOrd) -> GrpAbFinGen, Map\n\nReturns a group U and an isomorphism map f colon U to mathcal O^times. A set of fundamental units of mathcal O can be obtained via [ f(U[1+i]) for i in 1:unit_rank(O) ]. f(U[1]) will give a generator for the torsion subgroup.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.unit_group_fac_elem-Tuple{NfAbsOrd{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.unit_group_fac_elem","text":"unit_group_fac_elem(O::NfOrd) -> GrpAbFinGen, Map\n\nReturns a group U and an isomorphism map f colon U to mathcal O^times. A set of fundamental units of mathcal O can be obtained via [ f(U[1+i]) for i in 1:unit_rank(O) ]. f(U[1]) will give a generator for the torsion subgroup. All elements will be returned in factored form.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.sunit_group-Tuple{Array{NfAbsOrdIdl{AnticNumberField,nf_elem},1}}","page":"Ideals","title":"Hecke.sunit_group","text":"sunit_group(I::Array{NfOrdIdl, 1}) -> GrpAb, Map\n\nFor an array I of (coprime prime) ideals, find the S-unit group defined by I, ie. the group of non-zero field elements which are only divisible by ideals in I.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.sunit_group_fac_elem-Tuple{Array{NfAbsOrdIdl{AnticNumberField,nf_elem},1}}","page":"Ideals","title":"Hecke.sunit_group_fac_elem","text":"sunit_group_fac_elem(I::Array{NfOrdIdl, 1}) -> GrpAb, Map\n\nFor an array I of (coprime prime) ideals, find the S-unit group defined by I, ie. the group of non-zero field elements which are only divisible by ideals in I. The map will return elements in factored form.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.sunit_mod_units_group_fac_elem-Tuple{Array{NfAbsOrdIdl{AnticNumberField,nf_elem},1}}","page":"Ideals","title":"Hecke.sunit_mod_units_group_fac_elem","text":"sunit_mod_units_group_fac_elem(I::Array{NfOrdIdl, 1}) -> GrpAb, Map\n\nFor an array I of (coprime prime) ideals, find the S-unit group defined by I, ie. the group of non-zero field elements which are only divisible by ideals in I modulo the units of the field. The map will return elements in factored form.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/","page":"Ideals","title":"Ideals","text":"u, mu = unit_group(zk)\nmu(u[2])\nu, mu = unit_group_fac_elem(zk)\nmu(u[2])\nevaluate(ans)\nlp = factor(6*zk)\ns, ms = Hecke.sunit_group(collect(keys(lp)))\nms(s[4])\nnorm(ans)\nfactor(numerator(ans))","category":"page"},{"location":"Hecke/docs/src/orders/ideals/#Miscaellenous","page":"Ideals","title":"Miscaellenous","text":"","category":"section"},{"location":"Hecke/docs/src/orders/ideals/","page":"Ideals","title":"Ideals","text":"order(::NfAbsOrdIdl)\nnf(::NfAbsOrdIdl)\nbasis(::NfOrdIdl)\nbasis_matrix(::NfOrdIdl)\nbasis_mat_inv(::NfOrdIdl)\nHecke.assure_has_basis_mat_inv(::NfOrdIdl)\nHecke.has_basis(::NfOrdIdl)\nHecke.has_basis_matrix(::NfOrdIdl)\nHecke.has_2_elem(::NfOrdIdl)\nHecke.has_2_elem_normal(::NfOrdIdl)\nHecke.has_weakly_normal(::NfOrdIdl)\nHecke.has_princ_gen_special(::NfOrdIdl)\nHecke.principal_generator(::NfOrdIdl)\nHecke.principal_generator_fac_elem(::NfOrdIdl)\nminimum(::NfOrdIdl)\n#minimum(m::T, I::NfOrdIdl) where T <: (AbstractAlgebra.Map{Nemo.AnticNumberField,Nemo.AnticNumberField,S,T} where T where S)\nhas_minimum(::NfOrdIdl)\nnorm(::NfOrdIdl)\nHecke.has_norm(::NfOrdIdl)\nidempotents(::NfOrdIdl, ::NfOrdIdl)\nisprime(::NfOrdIdl)\nHecke.isprime_known(::NfOrdIdl)\nisramified(::NfOrd, ::Union{Int, fmpz})\nramification_index(::NfOrdIdl)\ndegree(::NfOrdIdl)\nvaluation(::nf_elem, ::NfOrdIdl)\nvaluation(::NfOrdElem, ::NfOrdIdl)\nvaluation(::NfOrdIdl, ::NfOrdIdl)\nvaluation(::Integer, ::NfOrdIdl)\nvaluation(::fmpz, ::NfOrdIdl)\nvaluation(::NfOrdFracIdl, ::NfOrdIdl)","category":"page"},{"location":"Hecke/docs/src/orders/ideals/#AbstractAlgebra.Generic.order-Tuple{NfAbsOrdIdl}","page":"Ideals","title":"AbstractAlgebra.Generic.order","text":"order(I::NfAbsOrdIdl) -> NfOrd\n\nReturns the order of I.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.nf-Tuple{NfAbsOrdIdl}","page":"Ideals","title":"Hecke.nf","text":"nf(x::NfAbsOrdIdl) -> AnticNumberField\n\nReturns the number field, of which x is an integral ideal.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#AbstractAlgebra.Generic.basis-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"AbstractAlgebra.Generic.basis","text":"basis(A::NfAbsOrdIdl) -> Array{NfOrdElem, 1}\n\nReturns the basis of A.\n\n\n\nbasis(I::NfAbsOrdFracIdl) -> Array{nf_elem, 1}\n\nReturns the mathbf Z-basis of I.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.basis_matrix-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.basis_matrix","text":"basis_matrix(A::NfAbsOrdIdl) -> fmpz_mat\n\nReturns the basis matrix of A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.basis_mat_inv-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.basis_mat_inv","text":"basis_mat_inv(O::NfOrd) -> FakeFmpqMat\n\nReturns the inverse of the basis matrix of mathcal O.\n\n\n\nbasis_mat_inv(A::NfAbsOrdIdl) -> fmpz_mat\n\nReturns the inverse basis matrix of A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.assure_has_basis_mat_inv-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.assure_has_basis_mat_inv","text":"basis_mat_inv(A::NfAbsOrdIdl) -> FakeFmpqMat\n\nReturns the inverse of the basis matrix of A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.has_basis-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.has_basis","text":"has_basis(A::NfAbsOrdIdl) -> Bool\n\nReturns whether A has a basis already computed.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.has_basis_matrix-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.has_basis_matrix","text":"has_basis_matrix(A::NfAbsOrdIdl) -> Bool\n\nReturns whether A knows its basis matrix.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.has_2_elem-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.has_2_elem","text":"has_2_elem(A::NfAbsOrdIdl) -> Bool\n\nReturns whether A is generated by two elements.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.has_2_elem_normal-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.has_2_elem_normal","text":"has_2_elem_normal(A::NfAbsOrdIdl) -> Bool\n\nReturns whether A has normal two element generators.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.has_weakly_normal-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.has_weakly_normal","text":"has_weakly_normal(A::NfAbsOrdIdl) -> Bool\n\nReturns whether A has weakly normal two element generators.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.has_princ_gen_special-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.has_princ_gen_special","text":"has_princ_gen_special(A::NfAbsOrdIdl) -> Bool\n\nReturns whether A knows if it is generated by a rational integer.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.principal_generator-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.principal_generator","text":"principal_generator(A::NfOrdIdl) -> NfOrdElem\n\nFor a principal ideal A, find a generator.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.principal_generator_fac_elem-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.principal_generator_fac_elem","text":"principal_generator_fac_elem(A::NfOrdIdl) -> FacElem{nf_elem, NumberField}\n\nFor a principal ideal A, find a generator in factored form.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Base.minimum-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Base.minimum","text":"  minimum(A::NfRelOrdIdl) -> NfOrdIdl\n  minimum(A::NfRelOrdIdl) -> NfRelOrdIdl\n\nReturns the ideal A cap O where O is the maximal order of the coefficient ideals of A.\n\n\n\nminimum(A::NfAbsOrdIdl) -> fmpz\n\nReturns the smallest nonnegative element in A cap mathbf Z.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.has_minimum-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.has_minimum","text":"has_minimum(A::NfAbsOrdIdl) -> Bool\n\nReturns whether A knows its mininum.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#LinearAlgebra.norm-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"LinearAlgebra.norm","text":"norm(a::NfRelOrdIdl) -> NfOrdIdl\n\nReturns the norm of a.\n\n\n\nnorm(a::NfRelOrdFracIdl{T, S}) -> S\n\nReturns the norm of a.\n\n\n\nnorm(A::NfAbsOrdIdl) -> fmpz\n\nReturns the norm of A, that is, the cardinality of mathcal OA, where mathcal O is the order of A.\n\n\n\nnorm(a::AlgAssAbsOrdIdl, O::AlgAssAbsOrd; copy::Bool = true) -> fmpq\n\nReturns the norm of a considered as an (possibly fractional) ideal of O.\n\n\n\nnorm(a::AlgAssRelOrdIdl{S, T, U}, O::AlgAssRelOrd{S, T, U}; copy::Bool = true)\n  where { S, T, U } -> T\n\nReturns the norm of a considered as an (possibly fractional) ideal of O.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.has_norm-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.has_norm","text":"has_norm(A::NfAbsOrdIdl) -> Bool\n\nReturns whether A knows its norm.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.idempotents-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem},NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.idempotents","text":"idempotents(x::NfOrdIdl, y::NfOrdIdl) -> NfOrdElem, NfOrdElem\n\nReturns a tuple (e, f) consisting of elements e in x, f in y such that 1 = e + f.\n\nIf the ideals are not coprime, an error is raised.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Nemo.isprime-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Nemo.isprime","text":"isprime(A::NfOrdIdl) -> Bool\n\nReturns whether A is a prime ideal.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.isprime_known-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.isprime_known","text":"isprime_known(A::NfOrdIdl) -> Bool\n\nReturns whether A knows if it is prime.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.isramified-Tuple{NfAbsOrd{AnticNumberField,nf_elem},Union{Int64, fmpz}}","page":"Ideals","title":"Hecke.isramified","text":"isramified(O::NfOrd, p::Int) -> Bool\n\nReturns whether the integer p is ramified in mathcal O. It is assumed that p is prime.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Hecke.ramification_index-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"Hecke.ramification_index","text":"ramification_index(P::NfOrdIdl) -> Int\n\nThe ramification index of the prime-ideal P.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#AbstractAlgebra.Generic.degree-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"AbstractAlgebra.Generic.degree","text":"degree(P::NfOrdIdl) -> Int\n\nThe inertia degree of the prime-ideal P.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#AbstractAlgebra.Generic.valuation-Tuple{nf_elem,NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"AbstractAlgebra.Generic.valuation","text":"valuation(a::nf_elem, p::NfOrdIdl) -> fmpz\nvaluation(a::NfOrdElem, p::NfOrdIdl) -> fmpz\nvaluation(a::fmpz, p::NfOrdIdl) -> fmpz\n\nComputes the mathfrak p-adic valuation of a, that is, the largest i such that a is contained in mathfrak p^i.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#AbstractAlgebra.Generic.valuation-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem},NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"AbstractAlgebra.Generic.valuation","text":"valuation(a::nf_elem, p::NfOrdIdl) -> fmpz\nvaluation(a::NfOrdElem, p::NfOrdIdl) -> fmpz\nvaluation(a::fmpz, p::NfOrdIdl) -> fmpz\n\nComputes the mathfrak p-adic valuation of a, that is, the largest i such that a is contained in mathfrak p^i.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#AbstractAlgebra.Generic.valuation-Tuple{NfAbsOrdIdl{AnticNumberField,nf_elem},NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"AbstractAlgebra.Generic.valuation","text":"valuation(A::NfOrdIdl, p::NfOrdIdl) -> fmpz\n\nComputes the mathfrak p-adic valuation of A, that is, the largest i such that A is contained in mathfrak p^i.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#AbstractAlgebra.Generic.valuation-Tuple{Integer,NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"AbstractAlgebra.Generic.valuation","text":"valuation(a::Integer, p::NfOrdIdl) -> fmpz\n\nComputes the mathfrak p-adic valuation of a, that is, the largest i such that a is contained in mathfrak p^i.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#AbstractAlgebra.Generic.valuation-Tuple{fmpz,NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"AbstractAlgebra.Generic.valuation","text":"valuation(a::nf_elem, p::NfOrdIdl) -> fmpz\nvaluation(a::NfOrdElem, p::NfOrdIdl) -> fmpz\nvaluation(a::fmpz, p::NfOrdIdl) -> fmpz\n\nComputes the mathfrak p-adic valuation of a, that is, the largest i such that a is contained in mathfrak p^i.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#AbstractAlgebra.Generic.valuation-Tuple{Hecke.NfAbsOrdFracIdl{AnticNumberField,nf_elem},NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"AbstractAlgebra.Generic.valuation","text":"valuation(A::NfAbsOrdFracIdl, p::NfAbsOrdIdl)\n\nThe valuation of A at p.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Quotient-Rings","page":"Ideals","title":"Quotient Rings","text":"","category":"section"},{"location":"Hecke/docs/src/orders/ideals/","page":"Ideals","title":"Ideals","text":"quo(::Union{NfAbsOrd, AlgAssAbsOrd}, ::Union{NfAbsOrdIdl, AlgAssAbsOrdIdl})\nResidueRing(::NfOrd, ::NfOrdIdl)\nResidueField(::NfOrd, ::NfOrdIdl, ::Bool)\nmod(::NfOrdElem, ::NfAbsOrdIdl)\ncrt(::NfOrdElem, ::NfOrdIdl, ::NfOrdElem, ::NfOrdIdl)","category":"page"},{"location":"Hecke/docs/src/orders/ideals/#AbstractAlgebra.quo-Tuple{Union{Hecke.AlgAssAbsOrd, NfAbsOrd},Union{Hecke.AlgAssAbsOrdIdl, NfAbsOrdIdl}}","page":"Ideals","title":"AbstractAlgebra.quo","text":"quo(O::NfOrd, I::NfOrdIdl) -> NfOrdQuoRing, Map\nquo(O::AlgAssAbsOrd, I::AlgAssAbsOrdIdl) -> AbsOrdQuoRing, Map\n\nThe quotient ring OI as a ring together with the section M OI to O. The pointwise inverse of M is the canonical projection Oto OI.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#AbstractAlgebra.ResidueRing-Tuple{NfAbsOrd{AnticNumberField,nf_elem},NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"AbstractAlgebra.ResidueRing","text":"ResidueRing(O::NfOrd, I::NfOrdIdl) -> NfOrdQuoRing\nResidueRing(O::AlgAssAbsOrd, I::AlgAssAbsOrdIdl) -> AbsOrdQuoRing\n\nThe quotient ring O modulo I as a new ring.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#AbstractAlgebra.ResidueField-Tuple{NfAbsOrd{AnticNumberField,nf_elem},NfAbsOrdIdl{AnticNumberField,nf_elem},Bool}","page":"Ideals","title":"AbstractAlgebra.ResidueField","text":"ResidueField(O::NfOrd, P::NfOrdIdl, check::Bool = true) -> Field, Map\n\nReturns the residue field of the prime ideal P together with the projection map. If check is true, the ideal is checked for being prime.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#Base.mod-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem},NfAbsOrdIdl}","page":"Ideals","title":"Base.mod","text":"mod(x::NfOrdElem, I::NfAbsOrdIdl)\n\nReturns the unique element y of the ambient order of x with x equiv y bmod I and the following property: If a_1dotsca_d in mathbfZ_geq 1 are the diagonal entries of the unique HNF basis matrix of I and (b_1dotscb_d) is the coefficient vector of y, then 0 leq b_i  a_i for 1 leq i leq d.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/orders/ideals/#AbstractAlgebra.crt-Tuple{NfAbsOrdElem{AnticNumberField,nf_elem},NfAbsOrdIdl{AnticNumberField,nf_elem},NfAbsOrdElem{AnticNumberField,nf_elem},NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Ideals","title":"AbstractAlgebra.crt","text":"crt(r1::NfOrdElem, i1::NfOrdIdl, r2::NfOrdElem, i2::NfOrdIdl) -> NfOrdElem\n\nFind x such that x equiv r_1 bmod i_1 and x equiv r_2 bmod i_2 using idempotents.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/intro/#Number-Fields","page":"Number Fields","title":"Number Fields","text":"","category":"section"},{"location":"Hecke/docs/src/number_fields/intro/","page":"Number Fields","title":"Number Fields","text":"CurrentModule = Hecke","category":"page"},{"location":"Hecke/docs/src/number_fields/intro/#NumberFieldsLink","page":"Number Fields","title":"Introduction","text":"","category":"section"},{"location":"Hecke/docs/src/number_fields/intro/","page":"Number Fields","title":"Number Fields","text":"By definition, mathematically a number field is just a finite extension of the rational mathbfQ. In Hecke, a number field L is recursively defined as being the field of rational numbers mathbfQ or a finite extension of a number field K. In the second case, the extension can be defined in the one of the following two ways:","category":"page"},{"location":"Hecke/docs/src/number_fields/intro/","page":"Number Fields","title":"Number Fields","text":"We have L = Kx(f), where f in Kx is an irreducible polynomial (simple extension), or\nWe have L = Kx_1dotscx_n(f_1(x_1)dotscf_n(x_n)), where f_1dotscf_n in Kx are univariate polynomials (non-simple extension).","category":"page"},{"location":"Hecke/docs/src/number_fields/intro/","page":"Number Fields","title":"Number Fields","text":"In both cases we refer to K as the base field of the number field L. Another useful dichotomy comes from the type of the base field. We call L an absolute number field, if the base field is equal to the rational numbers mathbfQ.","category":"page"},{"location":"Hecke/docs/src/number_fields/intro/#Types","page":"Number Fields","title":"Types","text":"","category":"section"},{"location":"Hecke/docs/src/number_fields/intro/","page":"Number Fields","title":"Number Fields","text":"The abstract type for number fields is NumField. For simple number fields the type is SimpleNumField, where as for non-simple number fields the type is NonSimpleNumField.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"CurrentModule = Oscar","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"using Oscar","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Pages = [\"groups.md\"]","category":"page"},{"location":"Groups/groups/#Groups","page":"Groups","title":"Groups","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Oscar supports the following types of groups:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"PermGroup = groups of permutations\nMatrixGroup = groups of matrices\nFPGroup = finitely presented groups\nPcGroup = polycyclic groups\nDirectProductOfGroups = direct product of two groups\nAutomorphismGroup = group of automorphisms over a group","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"If x is an element of the group G of type T, then the type of x is GAPGroupElement{T}.","category":"page"},{"location":"Groups/groups/#Basics","page":"Groups","title":"Basics","text":"","category":"section"},{"location":"Groups/groups/#elements_of_groups","page":"Groups","title":"Elements of groups","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Given a group G, it is always possible to have access to some particular elements.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"one(x::GAPGroup)\nrand(::GAPGroup)\nrand_pseudo(G::GAPGroup)\ngens(::GAPGroup)\ngen(::GAPGroup, i::Int)","category":"page"},{"location":"Groups/groups/#Base.one-Tuple{Oscar.GAPGroup}","page":"Groups","title":"Base.one","text":"one(G::Group) -> x::GAPGroupElem{typeof(G)}\n\nReturn the identity of the group G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Base.rand-Tuple{Oscar.GAPGroup}","page":"Groups","title":"Base.rand","text":"rand(G::Group)\n\nReturn a random element of the group G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.rand_pseudo-Tuple{Oscar.GAPGroup}","page":"Groups","title":"Oscar.rand_pseudo","text":"rand_pseudo(G::Group)\n\nReturn a random element of the group G. It works faster than rand, but the elements are not necessarily equally distributed.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#AbstractAlgebra.gens-Tuple{Oscar.GAPGroup}","page":"Groups","title":"AbstractAlgebra.gens","text":"gens(G::Group)\n\nReturn an array of generators of the group G. To get a specific generator, use G[i] or gen(G,i) instead of gens(G)[i], as that is more efficient.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#AbstractAlgebra.gen-Tuple{Oscar.GAPGroup,Int64}","page":"Groups","title":"AbstractAlgebra.gen","text":"gen(G::Group, i::Integer)\n\nReturn the i-th element of the array gens(G). This is equivalent to G[i], and returns gens(G)[i] but may be more efficient than the latter. If i is greater than the length of gens(G), an ERROR is thrown.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"It is also possible to obtain the generators of G by typing","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"f1,f2,f3 = gens(G)","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"This is equivalent to","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"f1=G[1]; f2=G[2]; f3=G[3];","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"If the group G has been created as the subgroup of another group generated by a list of elements L, then the generating set returned by the function gens corresponds to L.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"note: Note\nThe output of gens(G) is not, in general, the minimal list of generators for G.","category":"page"},{"location":"Groups/groups/#Operations","page":"Groups","title":"Operations","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Oscar supports the following operations and functions on group elements.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"* = multiplication between two elements in a group.\ninv(x) = x^-1 the inverse of x.\nx/y = the element xy^-1.\nx^n = the n-th power of x. If n = 0, the identity of the group is returned; if n  0, the -n-th power of the inverse of x is returned.\nisone(x): returns whether x is the identity of the group.\nconj(x,y) = x^y = the conjugate of x by y, i.e. the element y^-1xy.\ncomm(x,y) = the commutator of x and y, i.e. the element x^-1y^-1xy.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"note: Note\nIn Oscar, the expression x^y^z is equivalent to x^(y^z). In other words, conjugations are evaluated from the right to the left.","category":"page"},{"location":"Groups/groups/#subgroups","page":"Groups","title":"Subgroups","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"The subgroup of a group G generated by the elements x,y,... is defined by the following instruction:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"sub(G, [x,y,...]) ;\nsub(x,y,...).","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"This function returns two objects: a group H, that is the subgroup of G generated by the elements x,y,..., and the embedding homomorphism of H into G. The object H has the same type of G, and it has no memory of the \"parent\" group G: it is an independent group.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Examples:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"julia> G = symmetric_group(4); H = sub(G,[cperm([1,2,3]),cperm([2,3,4])]);\njulia> H[1] == alternating_group(4)\ntrue","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"The following functions are available in Oscar for subgroup properties:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"issubgroup\nembedding(G::T, H::T) where T <: GAPGroup\nindex(G::T, H::T) where T <: GAPGroup\nisnormal(G::T, H::T) where T <: GAPGroup\nischaracteristic(G::T, H::T) where T <: GAPGroup","category":"page"},{"location":"Groups/groups/#Hecke.issubgroup","page":"Groups","title":"Hecke.issubgroup","text":"issubgroup(G::T, H::T) where T <: GAPGroup\n\nReturn (true,f) if H is a subgroup of G, where f is the embedding homomorphism of H into G, otherwise return (false,nothing).\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.embedding-Union{Tuple{T}, Tuple{T,T}} where T<:Oscar.GAPGroup","page":"Groups","title":"Oscar.embedding","text":"embedding(G::T, H::T) where T <: GAPGroup\n\nReturn the embedding morphism of H into G. It throws ERROR if H is not a subgroup of G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Hecke.index-Union{Tuple{T}, Tuple{T,T}} where T<:Oscar.GAPGroup","page":"Groups","title":"Hecke.index","text":"index(G::T, H::T) where T <: GAPGroup\n\nReturn the index of H in G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Hecke.isnormal-Union{Tuple{T}, Tuple{T,T}} where T<:Oscar.GAPGroup","page":"Groups","title":"Hecke.isnormal","text":"isnormal(G::T, H::T) where T <: GAPGroup\n\nReturn whether the subgroup H is normal in G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Hecke.ischaracteristic-Union{Tuple{T}, Tuple{T,T}} where T<:Oscar.GAPGroup","page":"Groups","title":"Hecke.ischaracteristic","text":"ischaracteristic(G::T, H::T) where T <: GAPGroup\n\nReturn whether the subgroup H is characteristic in G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Standard-subgroups","page":"Groups","title":"Standard subgroups","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"The following functions are available in Oscar to obtain standard subgroups of a group G. Every such function returns a tuple (H,f), where H is a group of the same type of G and f is the embedding homomorphism of H into G.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"trivial_subgroup\ncentre\nsylow_subgroup(G::GAPGroup, p::Int64)\nhall_subgroup(G::GAPGroup, P::AbstractVector{<:Base.Integer})\nderived_subgroup\nfitting_subgroup(G::GAPGroup)\nfrattini_subgroup(G::GAPGroup)\nradical_subgroup(G::GAPGroup)\nsocle(G::GAPGroup)","category":"page"},{"location":"Groups/groups/#Oscar.trivial_subgroup","page":"Groups","title":"Oscar.trivial_subgroup","text":"trivial_subgroup(G::GAPGroup)\n\nReturn the trivial subgroup of G.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.centre","page":"Groups","title":"Oscar.centre","text":"centre(G::Group)\n\nReturn the centre of G, i.e. the subgroup of all x in G such that xy=yx for every y in G, together with its embedding morphism into G.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.sylow_subgroup-Tuple{Oscar.GAPGroup,Int64}","page":"Groups","title":"Oscar.sylow_subgroup","text":"sylow_subgroup(G::Group, p::Int64)\n\nReturn a Sylow p-subgroup of G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.hall_subgroup-Tuple{Oscar.GAPGroup,AbstractArray{var\"#s283\",1} where var\"#s283\"<:Integer}","page":"Groups","title":"Oscar.hall_subgroup","text":"hall_subgroup(G::Group, P::Array{Int64})\n\nReturn a Hall P-subgroup of G. It works only if G is solvable.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.derived_subgroup","page":"Groups","title":"Oscar.derived_subgroup","text":"derived_subgroup(G::GAPGroup)\n\nReturn the derived subgroup of G, i.e. the subgroup generated by all commutators of G.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.fitting_subgroup-Tuple{Oscar.GAPGroup}","page":"Groups","title":"Oscar.fitting_subgroup","text":"fitting_subgroup(G::GAPGroup)\n\nReturn the Fitting subgroup of G, the largest nilpotent normal subgroup of G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.frattini_subgroup-Tuple{Oscar.GAPGroup}","page":"Groups","title":"Oscar.frattini_subgroup","text":"frattini_subgroup(G::GAPGroup)\n\nReturn the Frattini subgroup of G, the intersection of all maximal subgroups of G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.radical_subgroup-Tuple{Oscar.GAPGroup}","page":"Groups","title":"Oscar.radical_subgroup","text":"radical_subgroup(G::GAPGroup)\n\nReturn the radical subgroup of G, the largest solvable normal subgroup of G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.socle-Tuple{Oscar.GAPGroup}","page":"Groups","title":"Oscar.socle","text":"socle(G::GAPGroup)\n\nReturn the socle of G, the subgroup generated by all minimal normal subgroups of G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"The following functions return a list of subgroups.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"subgroups(G::GAPGroup)\nnormal_subgroups\nmaximal_subgroups\nmaximal_normal_subgroups\nminimal_normal_subgroups\ncharacteristic_subgroups\nderived_series\nsylow_system\nhall_system","category":"page"},{"location":"Groups/groups/#Hecke.subgroups-Tuple{Oscar.GAPGroup}","page":"Groups","title":"Hecke.subgroups","text":"subgroups(G::Group)\n\nReturn the list of subgroups of G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.normal_subgroups","page":"Groups","title":"Oscar.normal_subgroups","text":"normal_subgroups(G::Group)\n\nReturn the list of normal subgroups of G.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.maximal_subgroups","page":"Groups","title":"Oscar.maximal_subgroups","text":"maximal_subgroups(G::Group)\n\nReturn the list of maximal subgroups of G.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.maximal_normal_subgroups","page":"Groups","title":"Oscar.maximal_normal_subgroups","text":"maximal_normal_subgroups(G::Group)\n\nReturn the list of maximal normal subgroups of G.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.minimal_normal_subgroups","page":"Groups","title":"Oscar.minimal_normal_subgroups","text":"minimal_normal_subgroups(G::Group)\n\nReturn the list of minimal normal subgroups of G.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.characteristic_subgroups","page":"Groups","title":"Oscar.characteristic_subgroups","text":"characteristic_subgroups(G::Group)\n\nReturn the list of characteristic subgroups of G, i.e. the subgroups that are invariant under all automorphisms of G.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Hecke.derived_series","page":"Groups","title":"Hecke.derived_series","text":"derived_series(G::GAPGroup)\n\nReturn the list [G_1, G_2, G_3, ... ], where G_1=G and G_{i+1} = derived_subgroup(G_i).\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.sylow_system","page":"Groups","title":"Oscar.sylow_system","text":"sylow_system(G::Group)\n\nReturn an array of Sylow p-subgroups of G, where p runs over the prime factors of |G|, such that every two such subgroups commute each other (as subgroups). It works only if G is solvable.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.hall_system","page":"Groups","title":"Oscar.hall_system","text":"hall_system(G::Group)\n\nReturn an array of P-Hall subgroups of G, where P runs over the subsets of prime factors of |G|. It works only if G is solvable.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"note: Note\nWhen a function returns a list of subgroups, the output consists in the subgroups only; the embeddings are not returned as well. To get the embedding homomorphism of the subgroup H in G, one has to type embedding(G,H)","category":"page"},{"location":"Groups/groups/#quotient","page":"Groups","title":"Quotients","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Quotient groups in Oscar can be defined using the instruction quo in two ways.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Quotients by normal subgroups.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"quo(G::T, H::T) where T <: GAPGroup","category":"page"},{"location":"Groups/groups/#AbstractAlgebra.quo-Union{Tuple{T}, Tuple{T,T}} where T<:Oscar.GAPGroup","page":"Groups","title":"AbstractAlgebra.quo","text":"quo(G::T, H::T)\n\nReturn the quotient group G/H of type PcGroup (if the quotient group is solvable) or PermGroup (otherwise), together with the projection G -> G/H.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Quotients by elements.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"quo(G::T, elements::Vector{S}) where T <: GAPGroup where S <: GAPGroupElem","category":"page"},{"location":"Groups/groups/#AbstractAlgebra.quo-Union{Tuple{T}, Tuple{S}, Tuple{T,Array{S,1}}} where T<:Oscar.GAPGroup where S<:GAPGroupElem","page":"Groups","title":"AbstractAlgebra.quo","text":"quo(G::T, elements::Vector{S})\n\nReturn the quotient group G/H of type FPGroup (if T=FPGroup), PcGroup (if the quotient group is solvable) or PermGroup (otherwise), where H is the normal closure of elements in G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"This is the typical way to build finitely presented groups.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Example:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"julia> F=free_group(2);\njulia> (f1,f2)=gens(F);\njulia> G=quo(F,[f1^2,f2^3,(f1*f2)^2])[1];\njulia> isisomorphic(G,symmetric_group(3))[1]\ntrue","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Similarly to the subgroups, the output consists of a pair (Q,p), where Q is the quotient group and p is the projection homomorphism of G into Q.","category":"page"},{"location":"Groups/groups/#Permutation-groups","page":"Groups","title":"Permutation groups","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Permutation groups can be defined as symmetric groups, alternating groups or their subgroups.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"symmetric_group\nalternating_group","category":"page"},{"location":"Groups/groups/#Oscar.symmetric_group","page":"Groups","title":"Oscar.symmetric_group","text":"symmetric_group(n::Int64)\nsymmetric_group(::Type{T}, n::Int)\n\nReturn the full symmetric group over a set of n elements. The group is returned of type T for T in {PermGroup, PcGroup}. If T is not specified, then T is set as PermGroup.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.alternating_group","page":"Groups","title":"Oscar.alternating_group","text":"alternating_group(n::Int64)\nalternating_group(::Type{T}, n::Int)\n\nReturn the full alternating group over a set of n elements. The group is returned of type T for T in {PermGroup, PcGroup}. If T is not specified, then T is set as PermGroup.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"In Oscar, every permutation group has a degree n, that corresponds to the size of the set on which G acts. This can be displayed by typing","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"degree(G)","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"note: Note\nThe degree of a group of permutations is not necessarily equal to the largest moved point of the group G. For example, the trivial subgroup of symmetric_group(n) has degree n even though it fixes n.","category":"page"},{"location":"Groups/groups/#Permutations","page":"Groups","title":"Permutations","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Permutations in Oscar are displayed as products of disjoint cycles, as in GAP. An explicit permutation can be built using the functions perm, gap_perm and cperm.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"perm\ngap_perm\ncperm","category":"page"},{"location":"Groups/groups/#AbstractAlgebra.Generic.perm","page":"Groups","title":"AbstractAlgebra.Generic.perm","text":"perm(G::PermGroup, L::AbstractVector{<:Integer})\n(G::PermGroup)(L::AbstractVector{<:Integer})\n\nReturn the permutation x which maps every i from 1 to length(L) to L[i]. L must contain every integer from 1 to length(L) exactly, otherwise an exception is thrown. The parent of x is G. If x is not contained in G, an ERROR is returned. For gap_perm, the parent group of x is set as Sym(n), where n is the largest moved point of x. Example:\n\njulia> perm(symmetric_group(6),[2,4,6,1,3,5])\n(1,2,4)(3,6,5)\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.gap_perm","page":"Groups","title":"Oscar.gap_perm","text":"gap_perm(L::AbstractVector)\n\nReturn the permutation x which maps every i from 1 to length(L) to L[i]. L must contain every integer from 1 to length(L) exactly, otherwise an exception is thrown. The parent of x is set as Sym(n).\n\njulia> gap_perm([2,4,6,1,3,5])\n(1,2,4)(3,6,5)\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.cperm","page":"Groups","title":"Oscar.cperm","text":"cperm(L::AbstractVector{<:T}...) where T <: Union{Base.Integer, fmpz}\ncperm(G::PermGroup, L::AbstractVector{<:T}...)\n\nFor given lists of positive integers [a_1, a_2, ..., a_n],[b_1, b_2, ... , b_m], ... return the permutation x = (a_1,a_2,...,a_n)(b_1,b_2,...,b_m).... The array [n,n+1,...,n+k] can be replaced by n:n+k.\n\nIf a list is empty or contains duplicates, it fails. The parent of x is G. If x is not contained in G, an ERROR is returned. If G is not specified, then the parent of x is set as Sym(n), where n is the largest moved point of x. Example:\n\njulia> cperm([1,2,3],4:7)\n(1,2,3)(4,5,6,7)\n\njulia> cperm([1,2],[2,3])\n(1,3,2)\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Example:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"julia> perm(symmetric_group(6),[2,4,6,1,3,5])\n(1,2,4)(3,6,5)\n\njulia> cperm([1,2,3],4:7)\n(1,2,3)(4,5,6,7)\n\njulia> cperm([1,2],[2,3])\n(1,3,2)","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"At the moment, the input vectors of the function cperm need not to be disjoint.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"warning: Warning\nIf the function perm is evaluated in a vector of integers without specifying the group G, then the returned value is an element of the AbstractAlgebra.jl type Perm{Int}. For this reason, if one wants a permutation of type GAPGroupElem{PermGroup} without specifying a parent, one has to use the function gap_perm.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Every permutation has always a permutation group as a parent. Two permutations coincide if, and only if, they move the same points and their parent groups have the same degree.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"julia> G=symmetric_group(5);\njulia> A=alternating_group(5);\njulia> x=cperm(G,[1,2]);\njulia> y=cperm(A,[1,2]);\njulia> z=cperm([1,2]);\njulia> x==y\ntrue\n\njulia> x==z\nfalse","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"In the example above, x and y are equal because both act on a set of cardinality 5, while x and z are different because x belongs to Sym(5) and z belongs to Sym(2).","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"If G is a group and x is a permutation, it is possible to set G as parent of x simply typing G(x). This returns the permutation x as element of G (or ERROR if x does not embed into G).","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"G=symmetric_group(5);\nx=cperm([1,2,3]);\ny=G(x);\nparent(x)\nparent(y)","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"The function Vector{T} works in the opposite way with respect to perm:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Vector(x::PermGroupElem, n::Int = x.parent.deg)","category":"page"},{"location":"Groups/groups/#Base.Vector","page":"Groups","title":"Base.Vector","text":"Vector{T}(x::PermGroupElem, n::Int = x.parent.deg) where {T}\nVector(x::PermGroupElem, n::Int = x.parent.deg)\n\nReturn the list of length n that contains x(i) at position i. If not specified, T is set as Int.\n\n\n\n\n\n","category":"type"},{"location":"Groups/groups/#Permutations-as-functions","page":"Groups","title":"Permutations as functions","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"A permutation can be viewed as a function on the set {1,...,n}, hence it can be evaluated on integers.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"note: Note\nThe multiplication between permutations works from the left to the right. So, if x and y are permutations and n is an integer, then (x*y)(n) = (y(x(n)), NOT x(y(n)).","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"julia> x = cperm([1,2,3,4,5]);\njulia> x(2)\n3","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"This works also if the argument is not in the range 1:n; in such a case, the output coincides with the input.","category":"page"},{"location":"Groups/groups/#Polycyclic-groups","page":"Groups","title":"Polycyclic groups","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Julia has the following functions that allow to generate polycyclic groups:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"abelian_group(::Type{T}, v::Vector{Int}) where T <: GAPGroup\ncyclic_group\ndihedral_group\nquaternion_group","category":"page"},{"location":"Groups/groups/#Hecke.abelian_group-Union{Tuple{T}, Tuple{Type{T},Array{Int64,1}}} where T<:Oscar.GAPGroup","page":"Groups","title":"Hecke.abelian_group","text":"abelian_group(::Type{T}, v::Vector{Int}) where T <: Group -> PcGroup\n\nReturn the direct product of cyclic groups of order v[1] x v[2] x ... x v[n], as group of type T. Here, T must be of type PermGroup, FPGroup or PcGroup.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.cyclic_group","page":"Groups","title":"Oscar.cyclic_group","text":"cyclic_group(::Type{T}, n::Int)\n\nReturn the cyclic group of order n and type T. If the type is not specified, the group is returned of type PcGroup.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.dihedral_group","page":"Groups","title":"Oscar.dihedral_group","text":"dihedral_group(n::Int)\ndihedral_group(::Type{T}, n::Int)\n\nReturn the dihedral group of order n of type T, where T is in {PcGroup,PermGroup,FPGroup}. In the first case, the type is set as PcGroup.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.quaternion_group","page":"Groups","title":"Oscar.quaternion_group","text":"quaternion_group(n::Int)\nquaternion_group(::Type{T}, n::Int)\n\nReturn the quaternion group of order n of type T, where T is in {PcGroup,PermGroup,FPGroup}. In the first case, the type is set as PcGroup.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"warning: Warning\nThe type need to be specified in the input of the function abelian_group, otherwise a group of type GrpAbFinGen is returned, which is not a GAP group type. In future versions of Oscar, this may change.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"The generators of a polycyclic group are displayed as f1, f2, f3, etc., and every element of a polycyclic group is displayed as product of such generators.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Example:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"julia> G=abelian_group(PcGroup, [2,4]);\njulia> G[1], G[2]\n(f1, f2)\njulia> G[2]*G[1]\nf1*f2","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Note that this does not define Julia variables named f1, f2, etc.! To get the generators of the group G, use gens(G); for convenience they can also be accessed as G[1], G[2], as shown in Section Elements of groups.","category":"page"},{"location":"Groups/groups/#Homomorphisms","page":"Groups","title":"Homomorphisms","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"In Oscar, a group homomorphism from G to H is an object of parametric type GAPGroupHomomorphism{S,T}, where S and T are the types of G and H respectively.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"A homomorphism from G to H can be defined in two ways.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Writing explicitly the images of the generators of G:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"f = hom(G,H,[x1,x2,...],[y1,y2,...])","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Here, [x1,x2,...] must be a generating set for G (not necessarily minimal) and [y1,y2,...] is a vector of elements of H of the same length of [x1,x2,...]. This assigns to f the value of the group homomorphism sending x_i into y_i. If such a homomorphism does not exist, an error is returned.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Taking an existing function g satisfying the group homomorphism properties:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"f = hom(G,H,g)","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"If the function g does not satisfy the group homomorphism properties, an error is returned.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Example: The following procedures define the same homomorphism (conjugation by x) in the two ways explained above.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"julia> S=symmetric_group(4);\njulia> x=S[1];\njulia> f=hom(S,S,gens(S),[S[1]^x,S[2]^x]);\njulia> g=hom(S,S,y->y^x);\njulia> f==g\ntrue","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Oscar has also the following standard homomorphism.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"id_hom\ntrivial_morphism","category":"page"},{"location":"Groups/groups/#Hecke.id_hom","page":"Groups","title":"Hecke.id_hom","text":"id_hom(G::GAPGroup)\n\nReturn the identity homomorphism on the group G.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.trivial_morphism","page":"Groups","title":"Oscar.trivial_morphism","text":"trivial_morphism(G::GAPGroup, H::GAPGroup)\n\nReturn the homomorphism from G to H sending every element of G into the identity of H. If H is not specified, it is taken equal to G.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"To evaluate the homomorphism f in the element x of G, it is possible to use the instruction","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"image(f,x)","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"or the more compact notations f(x) and x^f.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Example:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"julia> S=symmetric_group(4);\njulia> f=hom(S,S,x->x^S[1]);\njulia> x=cperm(S,[1,2]);\njulia> image(f,x)\n(2,3)\njulia> f(x)\n(2,3)\njulia> x^f\n(2,3)","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"A sort of \"inverse\" of the evaluation is the following","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"haspreimage(f::GAPGroupHomomorphism, x::GAPGroupElem)","category":"page"},{"location":"Groups/groups/#Hecke.haspreimage-Tuple{GAPGroupHomomorphism,GAPGroupElem}","page":"Groups","title":"Hecke.haspreimage","text":"haspreimage(f::GAPGroupHomomorphism, x::GAPGroupElem)\n\nReturn (true,y) if there exists y such that f(y) = x; otherwise, return (false,1).\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Example:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"julia> S=symmetric_group(4);\njulia> f=hom(S,S,x->x^S[1]);\njulia> x=cperm(S,[1,2]);\njulia> haspreimage(f,x)\n(true,(1,4))","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"warning: Warning\nDo not confuse haspreimage with the function has_preimage, which works on variable of type GrpGenToGrpGenMor.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"A further function that produces isomorphisms is isisomorphic:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"isisomorphic(G::GAPGroup, H::GAPGroup)","category":"page"},{"location":"Groups/groups/#AbstractAlgebra.Generic.isisomorphic-Tuple{Oscar.GAPGroup,Oscar.GAPGroup}","page":"Groups","title":"AbstractAlgebra.Generic.isisomorphic","text":"isisomorphic(G::Group, H::Group)\n\nReturn (true,f) if G and H are isomorphic groups, where f is a group isomorphism. Otherwise, return (false,f), where f is the trivial homomorphism.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Operations-on-homomorphisms","page":"Groups","title":"Operations on homomorphisms","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Oscar supports the following operations on homomorphisms.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"inv(f) = the inverse of f. An error is returned if f is not bijective.\nf^n = the homomorphism f composed n times with itself. An error is returned if the domain and the codomain of f do not coincide (unless n=1). If n is negative, the result is the inverse of f composed n times with itself.\ncompose(g,f) = composition of g and f. This works only if the codomain of g coincide with the domain of f. Shorter equivalent expressions are g*f and f(g).\nExample:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"julia> S=symmetric_group(4);\njulia> f=hom(S,S,x->x^S[1]);\njulia> g=hom(S,S,x->x^S[2]);\njulia> f*g==hom(S,S,x->x^(S[1]*S[2]))\ntrue\njulia> f==f^-3\ntrue","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"note: Note\nThe composition operation * has to be read from the right to the left. So, (f*g)(x) is equivalent to g(f(x)).","category":"page"},{"location":"Groups/groups/#Properties-of-homomorphisms","page":"Groups","title":"Properties of homomorphisms","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Oscar implements the following attributes of homomorphisms.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"domain\ncodomain\nisinjective(f::GAPGroupHomomorphism)\nissurjective(f::GAPGroupHomomorphism)\nisbijective(f::GAPGroupHomomorphism)\nisinvertible(f::GAPGroupHomomorphism)\nisinvariant(f::GAPGroupHomomorphism, H::GAPGroup)","category":"page"},{"location":"Groups/groups/#AbstractAlgebra.Generic.domain","page":"Groups","title":"AbstractAlgebra.Generic.domain","text":"domain(f::GAPGroupHomomorphism)\n\nReturn the domain of f.\n\n\n\n\n\nfunction domain(F::AlgHom)\n\nReturns the domain of F.\n\n\n\n","category":"function"},{"location":"Groups/groups/#AbstractAlgebra.Generic.codomain","page":"Groups","title":"AbstractAlgebra.Generic.codomain","text":"codomain(f::GAPGroupHomomorphism)\n\nReturn the codomain of f.\n\n\n\n\n\nfunction codomain(F::AlgHom)\n\nReturns the codomain of F.\n\n\n\n","category":"function"},{"location":"Groups/groups/#Hecke.isinjective-Tuple{GAPGroupHomomorphism}","page":"Groups","title":"Hecke.isinjective","text":"isinjective(f::GAPGroupHomomorphism)\n\nReturn whether f is injective.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Hecke.issurjective-Tuple{GAPGroupHomomorphism}","page":"Groups","title":"Hecke.issurjective","text":"issurjective(f::GAPGroupHomomorphism)\n\nReturn whether f is surjective.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Hecke.isbijective-Tuple{GAPGroupHomomorphism}","page":"Groups","title":"Hecke.isbijective","text":"isbijective(f::GAPGroupHomomorphism)\n\nReturn whether f is bijective.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#AbstractAlgebra.Generic.isinvertible-Tuple{GAPGroupHomomorphism}","page":"Groups","title":"AbstractAlgebra.Generic.isinvertible","text":"isinvertible(f::GAPGroupHomomorphism)\n\nReturn whether f is invertible.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.isinvariant-Tuple{GAPGroupHomomorphism,Oscar.GAPGroup}","page":"Groups","title":"Oscar.isinvariant","text":"isinvariant(f::GAPGroupHomomorphism, H::Group)\nisinvariant(f::GAPGroupElem{AutomorphismGroup{T}}, H::T)\n\nReturn whether f(H) == H.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Subgroups-described-by-homomorphisms","page":"Groups","title":"Subgroups described by homomorphisms","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"The following functions compute subgroups or quotients of either the domain or the codomain. Analogously to the functions described in Sections Subgroups and Quotients, the output consists of a pair (H, g), where H is a subgroup (resp. quotient) and g is its embedding (resp. projection) homomorphism.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"kernel(f::GAPGroupHomomorphism)\nimage(f::GAPGroupHomomorphism)\nimage(f::GAPGroupHomomorphism{S, T}, H::S) where S <: GAPGroup where T <: GAPGroup\ncokernel(f::GAPGroupHomomorphism)\npreimage(f::GAPGroupHomomorphism{S, T}, H::T) where S <: GAPGroup where T <: GAPGroup","category":"page"},{"location":"Groups/groups/#AbstractAlgebra.Generic.kernel-Tuple{GAPGroupHomomorphism}","page":"Groups","title":"AbstractAlgebra.Generic.kernel","text":"kernel(f::GAPGroupHomomorphism)\n\nReturn the kernel of f, together with its embedding into domain(f).\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#AbstractAlgebra.Generic.image-Tuple{GAPGroupHomomorphism}","page":"Groups","title":"AbstractAlgebra.Generic.image","text":"image(f::GAPGroupHomomorphism)\n\nReturn the image of f as subgroup of codomain(f), together with the embedding homomorphism.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#AbstractAlgebra.Generic.image-Union{Tuple{S}, Tuple{T}, Tuple{GAPGroupHomomorphism{S,T},S}} where S<:Oscar.GAPGroup where T<:Oscar.GAPGroup","page":"Groups","title":"AbstractAlgebra.Generic.image","text":"image(f::GAPGroupHomomorphism{S, T}, H::S) where S <: GAPGroup where T <: GAPGroup\n(f::GAPGroupHomomorphism{S, T})(H::S)\n\nReturn f(H), together with the embedding homomorphism into codomain(f).\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Hecke.cokernel-Tuple{GAPGroupHomomorphism}","page":"Groups","title":"Hecke.cokernel","text":"cokernel(f::GAPGroupHomomorphism)\n\nReturn the cokernel of f, that is, the quotient of the codomain of f by the normal closure of the image.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#AbstractAlgebra.Generic.preimage-Union{Tuple{S}, Tuple{T}, Tuple{GAPGroupHomomorphism{S,T},T}} where S<:Oscar.GAPGroup where T<:Oscar.GAPGroup","page":"Groups","title":"AbstractAlgebra.Generic.preimage","text":"preimage(f::GAPGroupHomomorphism{S, T}, H::T) where S <: GAPGroup where T <: GAPGroup\n\nIf H is a subgroup of the codomain of f, return the subgroup f^-1(H), together with its embedding homomorphism into the domain of f.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Automorphisms-groups","page":"Groups","title":"Automorphisms groups","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Groups of automorphisms over a group G have parametric type AutomorphismGroup{T}, where T is the type of G. The group of automorphisms over a group G is defined by the following instruction:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"automorphism_group(G)","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"The evaluation of the automorphism f in the element x is analogous to the homomorphism evaluation: it can be obtained by typing either f(x) or x^f.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"It is possible to turn an automorphism f into a homomorphism by typing hom(f). The viceversa is also possible: if g is a bijective homomorphism from the group G to itself and A is the automorphism group of G, then the instruction A(g) returns g as automorphism of G. This is the standard way to build explicitly an automorphism (another way, available for inner automorphisms, is shown in Section Inner_automorphisms).","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Example:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"julia> S=symmetric_group(4);\njulia> A=automorphism_group(S);\njulia> g=hom(S,S,x->x^S[1]);\njulia> g in A\nfalse\njulia> au=A(g);\njulia> au in A\ntrue\njulia> g=hom(au)\ntrue\njulia> x=cperm(S,[1,2,3]);\njulia> au(x)\n(2,3,4)\njulia> g(x)==au(x)\ntrue","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"In Oscar it is possible to multiply homomorphisms and automorphisms (whenever it makes sense); in such cases, the output is always a variable of type GAPGroupHomomorphism{S,T}.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"S=symmetric_group(4);\nA=automorphism_group(S);\ng=hom(S,S,x->x^S[1]);\nf=A(g);\ntypeof(g*f)","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"The following functions are available for automorphisms, some of them similar to the corresponding functions for homomorphisms of groups.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"isinvariant(f::GAPGroupElem{AutomorphismGroup{T}}, H::T) where T<:GAPGroup\nrestrict_automorphism(f::GAPGroupElem{AutomorphismGroup{T}}, H::T, A=automorphism_group(H)) where T <: GAPGroup\ninduced_automorphism(f::GAPGroupHomomorphism, mH::GAPGroupHomomorphism)","category":"page"},{"location":"Groups/groups/#Oscar.isinvariant-Union{Tuple{T}, Tuple{GAPGroupElem{AutomorphismGroup{T}},T}} where T<:Oscar.GAPGroup","page":"Groups","title":"Oscar.isinvariant","text":"isinvariant(f::GAPGroupElem{AutomorphismGroup{T}}, H::T)\n\nReturn whether f(H) == H.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.restrict_automorphism-Union{Tuple{T}, Tuple{GAPGroupElem{AutomorphismGroup{T}},T}, Tuple{GAPGroupElem{AutomorphismGroup{T}},T,Any}} where T<:Oscar.GAPGroup","page":"Groups","title":"Oscar.restrict_automorphism","text":"restrict_automorphism(f::GAPGroupElem{AutomorphismGroup{T}}, H::T)\n\nIf H is invariant under f, returns the restriction of f to H as automorphism of H; otherwise it returns ERROR.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.induced_automorphism-Tuple{GAPGroupHomomorphism,GAPGroupHomomorphism}","page":"Groups","title":"Oscar.induced_automorphism","text":"induced_automorphism(f::GAPGroupHomomorphism, g::GAPGroupHomomorphism)\ninduced_automorphism(f::GAPGroupHomomorphism, g::GAPGroupElem{AutomorphismGroup{T}})\n\nReturn the automorphism h of the image of f such that h(f) == f(g), where g is an automorphism of a group G and f is a group homomorphism defined over G such that the kernel of f is invariant under g\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#inner_automorphisms","page":"Groups","title":"Inner automorphisms","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Oscar disposes of the following functions to handle inner automorphisms of a group.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"inner_automorphism(g::GAPGroupElem)\nisinner_automorphism(f::GAPGroupHomomorphism)\ninner_automorphisms_group(A::AutomorphismGroup{T}) where T <: GAPGroup","category":"page"},{"location":"Groups/groups/#Oscar.inner_automorphism-Tuple{GAPGroupElem}","page":"Groups","title":"Oscar.inner_automorphism","text":"inner_automorphism(g::GAPGroupElem)\n\nReturn the inner automorphism in automorphism_group(parent(g)) defined by x -> x^g.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.isinner_automorphism-Tuple{GAPGroupHomomorphism}","page":"Groups","title":"Oscar.isinner_automorphism","text":"isinner_automorphism(f::GAPGroupHomomorphism)\nisinner_automorphism(f::GAPGroupElem{AutomorphismGroup{T}})\n\nReturn whether f is an inner automorphism.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.inner_automorphisms_group-Union{Tuple{AutomorphismGroup{T}}, Tuple{T}} where T<:Oscar.GAPGroup","page":"Groups","title":"Oscar.inner_automorphisms_group","text":"inner_automorphisms_group(A::AutomorphismGroup{T})\n\nReturn the subgroup of A of the inner automorphisms.\n\n\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#Generic-sparse-distributed-multivariate-polynomials","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"AbstractAlgebra.jl provides a module, implemented in src/generic/MPoly.jl for generic sparse distributed multivariate polynomials over any commutative ring belonging to the AbstractAlgebra abstract type hierarchy.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"This modules implements the Multivariate Polynomial interface, including the sparse distributed, random access part of the interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"All of the generic functionality is part of a submodule of AbstractAlgebra called Generic. This is exported by default so that it is not necessary to qualify the function names with the submodule name.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"Multivariates are implemented in this module using a Julia array of coefficients and a 2-dimensional Julia array of UInts for the exponent vectors. Note that exponent n is represented by the n-th column of the exponent array, not the n-th row. This is because Julia uses a column major representation.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#Types-and-parent-objects","page":"Generic sparse distributed multivariate polynomials","title":"Types and parent objects","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"Multivariate polynomials implemented in AbstractAlgebra.jl have type Generic.MPoly{T} where T is the type of elements of the coefficient ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"The polynomials are implemented using a Julia array of coefficients and a 2-dimensional Julia array of UInts for the exponent vectors. Note that exponent n is represented by the n-th column of the exponent array, not the n-th row. This is because Julia uses a column major representation. See the file src/generic/GenericTypes.jl for details.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"The top bit of each UInt is reserved for overflow detection.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"Parent objects of such polynomials have type Generic.MPolyRing{T}.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"The string representation of the variables of the polynomial ring and the base/coefficient ring R and the ordering are stored in the parent object.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"The polynomial element types belong to the abstract type AbstractAlgebra.MPolyElem{T} and the polynomial ring types belong to the abstract type AbstractAlgebra.MPolyRing{T}.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"Note that both the generic polynomial ring type Generic.MPolyRing{T} and the abstract type it belongs to, AbstractAlgebra.MPolyRing{T} are both called MPolyRing. The former is a (parameterised) concrete type for a polynomial ring over a given base ring whose elements have type T. The latter is an abstract type representing all multivariate polynomial ring types in AbstractAlgebra.jl, whether generic or very specialised (e.g. supplied by a C library).","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#Polynomial-ring-constructors","page":"Generic sparse distributed multivariate polynomials","title":"Polynomial ring constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"In order to construct multivariate polynomials in AbstractAlgebra.jl, one must first construct the polynomial ring itself. This is accomplished with the following constructor.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"PolynomialRing(R::AbstractAlgebra.Ring, S::Array{String, 1}; cached::Bool = true, ordering::Symbol=:lex)","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"Given a base ring R and and array S of strings specifying how the generators (variables) should be printed, return a tuple S, (x, ...) representing the new polynomial ring S = Rx ldots and a tuple of the generators (x ) of the ring. By default the parent object S will depend only on R and  (x, ...) and will be cached. Setting the optional argument cached to false will prevent the parent object S from being cached.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"The optional named argument ordering can be used to specify an ordering. The currently supported options are :lex, :deglex and :degrevlex.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"Like for univariate polynomials, a shorthand version of this function is provided when the number of generators is greater than 1: given a base ring R, we abbreviate the constructor as follows:","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"R[\"x\", \"y\", ...]","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"Here are some examples of creating multivariate polynomial rings and making use of the resulting parent objects to coerce various elements into the polynomial ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"julia> R, (x, y) = PolynomialRing(ZZ, [\"x\", \"y\"]; ordering=:deglex)\n(Multivariate Polynomial Ring in x, y over Integers, AbstractAlgebra.Generic.MPoly{BigInt}[x, y])\n\njulia> T, (z, t) = QQ[\"z\", \"t\"]\n(Multivariate Polynomial Ring in z, t over Rationals, AbstractAlgebra.Generic.MPoly{Rational{BigInt}}[z, t])\n\njulia> f = R()\n0\n\njulia> g = R(123)\n123\n\njulia> h = R(BigInt(1234))\n1234\n\njulia> k = R(x + 1)\nx + 1\n\njulia> m = R(x + y + 1)\nx + y + 1\n\njulia> derivative(k, 1)\n1\n\njulia> derivative(k, 2)\n0\n","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"All of the examples here are generic polynomial rings, but specialised implementations of polynomial rings provided by external modules will also usually provide a PolynomialRing constructor to allow creation of their polynomial rings.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#Polynomial-functionality-provided-by-AbstractAlgebra.jl","page":"Generic sparse distributed multivariate polynomials","title":"Polynomial functionality provided by AbstractAlgebra.jl","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#Basic-manipulation","page":"Generic sparse distributed multivariate polynomials","title":"Basic manipulation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"vars(p::AbstractAlgebra.MPolyElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.vars-Union{Tuple{MPolyElem{T}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.vars","text":"vars(p::AbstractAlgebra.MPolyElem{T}) where {T <: RingElement}\n\nReturn the variables actually occuring in p.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"var_index(::AbstractAlgebra.MPolyElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.var_index-Union{Tuple{MPolyElem{T}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.var_index","text":"var_index(p::AbstractAlgebra.MPolyElem{T}) where {T <: RingElement}\n\nReturn the index of the given variable x. If x is not a variable in a multivariate polynomial ring, an exception is raised.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"degree(::AbstractAlgebra.MPolyElem{T}, ::Int) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.degree-Union{Tuple{T}, Tuple{MPolyElem{T},Int64}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.degree","text":"degree(f::AbstractAlgebra.MPolyElem{T}, i::Int) where T <: RingElement\n\nReturn the degree of the polynomial f in terms of the i-th variable.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"degree(::AbstractAlgebra.MPolyElem{T}, ::AbstractAlgebra.MPolyElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.degree-Union{Tuple{T}, Tuple{MPolyElem{T},MPolyElem{T}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.degree","text":"degree(f::AbstractAlgebra.MPolyElem{T}, x::AbstractAlgebra.MPolyElem{T}) where T <: RingElement\n\nReturn the degree of the polynomial f in terms of the variable x.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"degrees(::AbstractAlgebra.MPolyElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.degrees-Union{Tuple{MPolyElem{T}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.degrees","text":"degrees(f::AbstractAlgebra.MPolyElem{T}) where T <: RingElement\n\nReturn an array of the degrees of the polynomial f in terms of each variable.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"isconstant(::AbstractAlgebra.MPolyElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.isconstant-Union{Tuple{MPolyElem{T}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.isconstant","text":"isconstant(x::AbstractAlgebra.MPolyElem{T}) where T <: RingElement\n\nReturn true if x is a degree zero polynomial or the zero polynomial, i.e. a constant polynomial.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"isterm(::AbstractAlgebra.MPolyElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.isterm-Union{Tuple{MPolyElem{T}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.isterm","text":"isterm(x::MPoly)\n\nReturn true if the given polynomial has precisely one term.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"ismonomial(::AbstractAlgebra.MPolyElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.ismonomial-Union{Tuple{MPolyElem{T}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.ismonomial","text":"ismonomial(x::AbstractAlgebra.MPolyElem)\n\nReturn true if the given polynomial has precisely one term whose coefficient is one.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"coeff(::AbstractAlgebra.MPolyElem{T}, ::AbstractAlgebra.MPolyElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.coeff-Union{Tuple{T}, Tuple{MPolyElem{T},MPolyElem{T}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.coeff","text":"coeff(f::AbstractAlgebra.MPolyElem{T}, m::AbstractAlgebra.MPolyElem{T}) where T <: RingElement\n\nReturn the coefficient of the monomial m of the polynomial f. If there is no such monomial, zero is returned.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"julia> R, (x, y) = PolynomialRing(ZZ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Integers, AbstractAlgebra.Generic.MPoly{BigInt}[x, y])\n\njulia> f = x^2 + 2x + 1\nx^2 + 2*x + 1\n\njulia> V = vars(f)\n1-element Array{AbstractAlgebra.Generic.MPoly{BigInt},1}:\n x\n\njulia> var_index(y) == 2\ntrue\n\njulia> degree(f, x) == 2\ntrue\n\njulia> degree(f, 2) == 0\ntrue\n\njulia> d = degrees(f)\n2-element Array{Int64,1}:\n 2\n 0\n\njulia> isconstant(R(1))\ntrue\n\njulia> isterm(2x)\ntrue\n\njulia> ismonomial(y)\ntrue\n\njulia> isunit(R(1))\ntrue\n\njulia> c = coeff(f, x^2)\n1\n","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#Changing-base-(coefficient)-rings","page":"Generic sparse distributed multivariate polynomials","title":"Changing base (coefficient) rings","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"In order to substitute the variables of a polynomial f over a ring T by elements in a T-algebra S, you first have to change the base ring of f using the following function, where g is a function representing the structure homomorphism of the T-algebra S.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"change_base_ring(::Ring, p::AbstractAlgebra.MPolyElem{T}) where {T <: RingElement}\nmap_coeffs(::Any, p::AbstractAlgebra.MPolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.change_base_ring-Union{Tuple{T}, Tuple{AbstractAlgebra.Ring,MPolyElem{T}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.change_base_ring","text":"change_base_ring(R::Ring, p::MPolyElem{<: RingElement}; parent::MPolyRing, cached::Bool)\n\nReturn the polynomial obtained by coercing the non-zero coefficients of p into R.\n\nIf the optional parent keyword is provided, the polynomial will be an element of parent. The caching of the parent object can be controlled via the cached keyword argument.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.map_coeffs-Tuple{Any,MPolyElem}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.map_coeffs","text":"map_coeffs(f, p::MPolyElem{<: RingElement}; parent::MPolyRing)\n\nTransform the polynomial p by applying f on each non-zero coefficient.\n\nIf the optional parent keyword is provided, the polynomial will be an element of parent. The caching of the parent object can be controlled via the cached keyword argument.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"julia> R, (x, y) = PolynomialRing(ZZ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Integers, AbstractAlgebra.Generic.MPoly{BigInt}[x, y])\n\njulia> fz = x^2*y^2 + x + 1\nx^2*y^2 + x + 1\n\njulia> fq = change_base_ring(QQ, fz)\nx^2*y^2 + x + 1\n","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"In case a specific parent ring is constructed, it can also be passed to the function.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"julia> R, (x, y) = PolynomialRing(ZZ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Integers, AbstractAlgebra.Generic.MPoly{BigInt}[x, y])\n\njulia> S,  = PolynomialRing(QQ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Rationals, AbstractAlgebra.Generic.MPoly{Rational{BigInt}}[x, y])\n\njulia> fz = x^5 + y^3 + 1\nx^5 + y^3 + 1\n\njulia> fq = change_base_ring(QQ, fz, parent=S)\nx^5 + y^3 + 1","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#Multivariate-coefficients","page":"Generic sparse distributed multivariate polynomials","title":"Multivariate coefficients","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"In order to return the \"coefficient\" (as a multivariate polynomial in the same ring), of a given monomial (in which some of the variables may not appear and others may be required to appear to exponent zero), we can use the following function.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"coeff(a::AbstractAlgebra.MPolyElem{T}, vars::Vector{Int}, exps::Vector{Int}) where T <: RingElement\ncoeff(a::T, vars::Vector{T}, exps::Vector{Int}) where T <: AbstractAlgebra.MPolyElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.coeff-Union{Tuple{T}, Tuple{MPolyElem{T},Array{Int64,1},Array{Int64,1}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.coeff","text":"coeff(a::AbstractAlgebra.MPolyElem{T}, vars::Vector{Int}, exps::Vector{Int}) where T <: RingElement\n\nReturn the \"coefficient\" of a (as a multivariate polynomial in the same ring) of the monomial consisting of the product of the variables of the given indices raised to the given exponents (note that not all variables need to appear and the exponents can be zero). E.g. coeff(f, [1, 3], [0, 2]) returns the coefficient of x^0*z^2 in the polynomial f (assuming variables x y z in that order).\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.coeff-Union{Tuple{T}, Tuple{T,Array{T,1},Array{Int64,1}}} where T<:MPolyElem","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.coeff","text":"coeff(a::T, vars::Vector{T}, exps::Vector{Int}) where T <: AbstractAlgebra.MPolyElem\n\nReturn the \"coefficient\" of a (as a multivariate polynomial in the same ring) of the monomial consisting of the product of the given variables to the given exponents (note that not all variables need to appear and the exponents can be zero). E.g. coeff(f, [x, z], [0, 2]) returns the coefficient of x^0*z^2 in the polynomial f.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"julia> R, (x, y, z) = PolynomialRing(ZZ, [\"x\", \"y\", \"z\"])\n(Multivariate Polynomial Ring in x, y, z over Integers, AbstractAlgebra.Generic.MPoly{BigInt}[x, y, z])\n\njulia> f = x^4*y^2*z^2 - 2x^4*y*z^2 + 4x^4*z^2 + 2x^2*y^2 + x + 1\nx^4*y^2*z^2 - 2*x^4*y*z^2 + 4*x^4*z^2 + 2*x^2*y^2 + x + 1\n\njulia> coeff(f, [1, 3], [4, 2]) == coeff(f, [x, z], [4, 2])\ntrue\n","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#Inflation/deflation","page":"Generic sparse distributed multivariate polynomials","title":"Inflation/deflation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"deflation(f::AbstractAlgebra.MPolyElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.deflation-Union{Tuple{MPolyElem{T}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.deflation","text":"deflation(f::AbstractAlgebra.MPolyElem{T}) where T <: RingElement\n\nCompute deflation parameters for the exponents of the polynomial f. This is a pair of arrays of integers, the first array of which (the shift) gives the minimum exponent for each variable of the polynomial, and the second of which (the deflation) gives the gcds of all the exponents after subtracting the shift, again per variable. This functionality is used by gcd (and can be used by factorisation algorithms).\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"deflate(f::AbstractAlgebra.MPolyElem{T}, shift::Vector{Int}, defl::Vector{Int}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.deflate-Union{Tuple{T}, Tuple{MPolyElem{T},Array{Int64,1},Array{Int64,1}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.deflate","text":"deflate(f::AbstractAlgebra.MPolyElem{T}, v::Vector{Int}) where T <: RingElement\n\nReturn a polynomial with the same coefficients as f but whose exponents have been shifted down by the given shifts (supplied as an array of shifts, one for each variable, then deflated (divided) by the given exponents (again supplied as an array of deflation factors, one for each variable). The algorithm automatically replaces a deflation of 0 by 1, to avoid division by 0.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"inflate(f::AbstractAlgebra.MPolyElem{T}, shift::Vector{Int}, defl::Vector{Int}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.inflate-Union{Tuple{T}, Tuple{MPolyElem{T},Array{Int64,1},Array{Int64,1}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.inflate","text":"inflate(f::AbstractAlgebra.MPolyElem{T}, v::Vector{Int}) where T <: RingElement\n\nReturn a polynomial with the same coefficients as f but whose exponents have been inflated (multiplied) by the given deflation exponents (supplied as an array of inflation factors, one for each variable) and then shifted by the given shifts (again supplied as an array of shifts, one for each variable).\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"julia> R, (x, y) = PolynomialRing(ZZ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Integers, AbstractAlgebra.Generic.MPoly{BigInt}[x, y])\n\njulia> f = x^7*y^8 + 3*x^4*y^8 - x^4*y^2 + 5x*y^5 - x*y^2\nx^7*y^8 + 3*x^4*y^8 - x^4*y^2 + 5*x*y^5 - x*y^2\n\njulia> def, shift = deflation(f)\n([1, 2], [3, 3])\n\njulia> f1 = deflate(f, def, shift)\nx^2*y^2 + 3*x*y^2 - x + 5*y - 1\n\njulia> f2 = inflate(f1, def, shift)\nx^7*y^8 + 3*x^4*y^8 - x^4*y^2 + 5*x*y^5 - x*y^2\n\njulia> f2 == f\ntrue\n","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#Conversions","page":"Generic sparse distributed multivariate polynomials","title":"Conversions","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"to_univariate(R::AbstractAlgebra.PolyRing{T}, p::AbstractAlgebra.MPolyElem{T}) where T <: AbstractAlgebra.RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.to_univariate-Union{Tuple{T}, Tuple{PolyRing{T},MPolyElem{T}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.to_univariate","text":"to_univariate(R::AbstractAlgebra.PolyRing{T}, p::AbstractAlgebra.MPolyElem{T}) where T <: AbstractAlgebra.RingElement\n\nAssuming the polynomial p is actually a univariate polynomial, convert the polynomial to a univariate polynomial in the given univariate polynomial ring R. An exception is raised if the polynomial p involves more than one variable.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"julia> R, (x, y) = PolynomialRing(ZZ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Integers, AbstractAlgebra.Generic.MPoly{BigInt}[x, y])\n\njulia> S, z = PolynomialRing(ZZ, \"z\")\n(Univariate Polynomial Ring in z over Integers, z)\n\njulia> f = 2x^5 + 3x^4 - 2x^2 - 1\n2*x^5 + 3*x^4 - 2*x^2 - 1\n\njulia> g = to_univariate(S, f)\n2*z^5 + 3*z^4 - 2*z^2 - 1\n","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#Evaluation","page":"Generic sparse distributed multivariate polynomials","title":"Evaluation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"The following function allows evaluation of a polynomial at all its variables. The result is always in the ring that a product of a coefficient and one of the values belongs to, i.e. if all the values are in the coefficient ring, the result of the evaluation will be too.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"evaluate(::AbstractAlgebra.MPolyElem{T}, ::Vector{U}) where {T <: RingElement, U <: RingElement}","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.evaluate-Union{Tuple{U}, Tuple{T}, Tuple{MPolyElem{T},Array{U,1}}} where U<:Union{RingElem, AbstractFloat, Integer, Rational} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.evaluate","text":"evaluate(a::AbstractAlgebra.MPolyElem{T}, vals::Vector{U}) where {T <: RingElement, U <: RingElement}\n\nEvaluate the polynomial expression by substituting in the array of values for each of the variables. The evaluation will succeed if multiplication is defined between elements of the coefficient ring of a and elements of the supplied vector.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"The following functions allow evaluation of a polynomial at some of its variables. Note that the result will be a product of values and an element of the polynomial ring, i.e. even if all the values are in the coefficient ring and all variables are given values, the result will be a constant polynomial, not a coefficient.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"evaluate(::AbstractAlgebra.MPolyElem{T}, ::Vector{Int}, ::Vector{U}) where {T <: RingElement, U <: RingElement}","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.evaluate-Union{Tuple{U}, Tuple{T}, Tuple{MPolyElem{T},Array{Int64,1},Array{U,1}}} where U<:Union{RingElem, AbstractFloat, Integer, Rational} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.evaluate","text":"evaluate(a::AbstractAlgebra.MPolyElem{T}, vars::Vector{Int}, vals::Vector{U}) where {T <: RingElement, U <: RingElement}\n\nEvaluate the polynomial expression by substituting in the supplied values in the array vals for the corresponding variables with indices given by the array vars. The evaluation will succeed if multiplication is defined between elements of the coefficient ring of a and elements of vals.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"evaluate(::S, ::Vector{S}, ::Vector{U}) where {S <: AbstractAlgebra.MPolyElem{T}, U <: RingElement} where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.evaluate-Union{Tuple{U}, Tuple{S}, Tuple{T}, Tuple{S,Array{S,1},Array{U,1}}} where U<:Union{RingElem, AbstractFloat, Integer, Rational} where S<:MPolyElem{T} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.evaluate","text":"evaluate(a::S, vars::Vector{S}, vals::Vector{U}) where {S <: AbstractAlgebra.MPolyElem{T}, U <: RingElement} where T <: RingElement\n\nEvaluate the polynomial expression by substituting in the supplied values in the array vals for the corresponding variables (supplied as polynomials) given by the array vars. The evaluation will succeed if multiplication is defined between elements of the coefficient ring of a and elements of vals.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"The following function allows evaluation of a polynomial at values in a not necessarily commutative ring, e.g. elements of a matrix algebra.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"evaluate(::AbstractAlgebra.MPolyElem{T}, ::Vector{U}) where {T <: RingElement, U <: NCRingElem}","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.evaluate-Union{Tuple{U}, Tuple{T}, Tuple{MPolyElem{T},Array{U,1}}} where U<:NCRingElem where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.evaluate","text":"evaluate(a::AbstractAlgebra.MPolyElem{T}, vals::Vector{U}) where {T <: RingElement, U <: NCRingElem}\n\nEvaluate the polynomial expression at the supplied values, which may be any ring elements, commutative or non-commutative, but in the same ring. Evaluation always proceeds in the order of the variables as supplied when creating the polynomial ring to which a belongs. The evaluation will succeed if a product of a coefficient of the polynomial by one of the values is defined.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"julia> R, (x, y) = PolynomialRing(ZZ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Integers, AbstractAlgebra.Generic.MPoly{BigInt}[x, y])\n\njulia> f = 2x^2*y^2 + 3x + y + 1\n2*x^2*y^2 + 3*x + y + 1\n\njulia> evaluate(f, BigInt[1, 2])\n14\n\njulia> evaluate(f, [QQ(1), QQ(2)])\n14//1\n\njulia> evaluate(f, [1, 2])\n14\n\njulia> f(1, 2) == 14\ntrue\n\njulia> evaluate(f, [x + y, 2y - x])\n2*x^4 - 4*x^3*y - 6*x^2*y^2 + 8*x*y^3 + 2*x + 8*y^4 + 5*y + 1\n\njulia> f(x + y, 2y - x)\n2*x^4 - 4*x^3*y - 6*x^2*y^2 + 8*x*y^3 + 2*x + 8*y^4 + 5*y + 1\n\njulia> R, (x, y, z) = PolynomialRing(ZZ, [\"x\", \"y\", \"z\"])\n(Multivariate Polynomial Ring in x, y, z over Integers, AbstractAlgebra.Generic.MPoly{BigInt}[x, y, z])\n\njulia> f = x^2*y^2 + 2x*z + 3y*z + z + 1\nx^2*y^2 + 2*x*z + 3*y*z + z + 1\n\njulia> evaluate(f, [1, 3], [3, 4])\n9*y^2 + 12*y + 29\n\njulia> evaluate(f, [x, z], [3, 4])\n9*y^2 + 12*y + 29\n\njulia> evaluate(f, [1, 2], [x + z, x - z])\nx^4 - 2*x^2*z^2 + 5*x*z + z^4 - z^2 + z + 1\n\njulia> S = MatrixAlgebra(ZZ, 2)\nMatrix Algebra of degree 2 over Integers\n\njulia> M1 = S([1 2; 3 4])\n[1   2]\n[3   4]\n\njulia> M2 = S([2 3; 1 -1])\n[2    3]\n[1   -1]\n\njulia> M3 = S([-1 1; 1 1])\n[-1   1]\n[ 1   1]\n\njulia> evaluate(f, [M1, M2, M3])\n[ 64    83]\n[124   149]","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#Leading-and-constant-coefficients,-leading-monomials-and-leading-terms","page":"Generic sparse distributed multivariate polynomials","title":"Leading and constant coefficients, leading monomials and leading terms","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"The leading coefficient, constant coefficient, leading monomial and leading term of a polynomial p are returned by the following functions:","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"leading_coefficient(p::AbstractAlgebra.MPolyElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.leading_coefficient-Union{Tuple{MPolyElem{T}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.leading_coefficient","text":"leading_coefficient(p::MPolyElem)\n\nReturn the leading coefficient of the polynomial p.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"leading_monomial(p::AbstractAlgebra.MPolyElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.leading_monomial-Union{Tuple{MPolyElem{T}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.leading_monomial","text":"leading_monomial(p::MPolyElem)\n\nReturn the leading monomial of the polynomial p.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"leading_term(p::AbstractAlgebra.MPolyElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.leading_term-Union{Tuple{MPolyElem{T}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.leading_term","text":"leading_term(p::MPolyElem)\n\nReturn the leading term of the polynomial p.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"constant_coefficient(p::AbstractAlgebra.MPolyElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.constant_coefficient-Union{Tuple{MPolyElem{T}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.constant_coefficient","text":"constant_coefficient(p::MPolyElem)\n\nReturn the constant coefficient of the polynomial p or zero if it doesn't have one.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"using AbstractAlgebra\nR,(x,y) = PolynomialRing(ZZ, [\"x\", \"y\"], ordering=:deglex)\np = 2*x*y + 3*y^3\nleading_term(p)\nleading_monomial(p)\nleading_coefficient(p)\nleading_term(p) == leading_coefficient(p) * leading_monomial(p)\nconstant_coefficient(p)","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#Least-common-multiple,-greatest-common-divisor","page":"Generic sparse distributed multivariate polynomials","title":"Least common multiple, greatest common divisor","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"The greated common divisor of two polynomials a and b is returned by","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"gcd(a::AbstractAlgebra.Generic.MPoly{T}, b::AbstractAlgebra.Generic.MPoly{T}) where {T <: RingElement}","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#Base.gcd-Union{Tuple{T}, Tuple{AbstractAlgebra.Generic.MPoly{T},AbstractAlgebra.Generic.MPoly{T}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"Base.gcd","text":"gcd(a::AbstractAlgebra.Generic.MPoly{T}, a::AbstractAlgebra.Generic.MPoly{T}) where {T <: RingElement}\n\nReturn the greatest common divisor of a and b in parent(a).\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"Note that this functionality is currently only provided for AbstractAlgebra generic polynomials. It is not automatically provided for all multivariate rings that implement the multivariate interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"However, if such a gcd is provided, the least common multiple of two polynomials a and b is returned by","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"lcm(a::AbstractAlgebra.MPolyElem{T}, b::AbstractAlgebra.MPolyElem{T}) where {T <: RingElement}","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#Base.lcm-Union{Tuple{T}, Tuple{MPolyElem{T},MPolyElem{T}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"Base.lcm","text":"lcm(a::AbstractAlgebra.MPolyElem{T}, a::AbstractAlgebra.MPolyElem{T}) where {T <: RingElement}\n\nReturn the least common multiple of a and b in parent(a).\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"julia> using AbstractAlgebra\n\njulia> R,(x,y) = PolynomialRing(ZZ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Integers, AbstractAlgebra.Generic.MPoly{BigInt}[x, y])\n\njulia> a = x*y + 2*y\nx*y + 2*y\n\njulia> b = x^3*y + y\nx^3*y + y\n\njulia> gcd(a,b)\ny\n\njulia> lcm(a,b)\nx^4*y + 2*x^3*y + x*y + 2*y\n\njulia> lcm(a,b) == a * b // gcd(a,b)\ntrue\n","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#Derivations","page":"Generic sparse distributed multivariate polynomials","title":"Derivations","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"derivative(::AbstractAlgebra.MPolyElem{T}, ::AbstractAlgebra.MPolyElem{T}) where T <: AbstractAlgebra.RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.derivative-Union{Tuple{T}, Tuple{MPolyElem{T},MPolyElem{T}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.derivative","text":"derivative(f::AbstractAlgebra.MPolyElem{T}, x::AbstractAlgebra.MPolyElem{T}) where T <: RingElement\n\nReturn the partial derivative of f with respect to x. The value x must be a generator of the polynomial ring of f.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"julia> R, (x, y) = AbstractAlgebra.PolynomialRing(ZZ, [\"x\", \"y\"])\n(Multivariate Polynomial Ring in x, y over Integers, AbstractAlgebra.Generic.MPoly{BigInt}[x, y])\n\njulia> f = x*y + x + y + 1\nx*y + x + y + 1\n\njulia> derivative(f, x)\ny + 1\n\njulia> derivative(f, y)\nx + 1\n","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#Homogeneous-polynomials","page":"Generic sparse distributed multivariate polynomials","title":"Homogeneous polynomials","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"It is possible to test whether a polynomial is homogeneous with respect to the standard grading using the function","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/","page":"Generic sparse distributed multivariate polynomials","title":"Generic sparse distributed multivariate polynomials","text":"ishomogeneous(x::AbstractAlgebra.MPolyElem{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/mpolynomial/#AbstractAlgebra.Generic.ishomogeneous-Union{Tuple{MPolyElem{T}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic sparse distributed multivariate polynomials","title":"AbstractAlgebra.Generic.ishomogeneous","text":"ishomogeneous(x::MPoly{T}) where {T <: RingElement}\n\nReturn true if the given polynomial is homogeneous with respect to the standard grading and false otherwise.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/puiseux/","page":"Puiseux series","title":"Puiseux series","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/puiseux/#Puiseux-series","page":"Puiseux series","title":"Puiseux series","text":"","category":"section"},{"location":"Nemo/docs/src/puiseux/","page":"Puiseux series","title":"Puiseux series","text":"Nemo allows the creation of Puiseux series over any computable ring R. Puiseux series are series of the form a_jx^jm + a_j+1x^(j+1)m + cdots + a_k-1x^(k-1)m + O(x^km) where m is a positive integer, a_i in R and the relative precision k - j is at most equal to some specified precision n.","category":"page"},{"location":"Nemo/docs/src/puiseux/","page":"Puiseux series","title":"Puiseux series","text":"There are two different kinds of implementation: a generic one for the case where no specific implementation exists (provided by AbstractAlgebra.jl), and efficient implementations of Puiseux series over numerous specific rings, usually provided by C/C++ libraries.","category":"page"},{"location":"Nemo/docs/src/puiseux/","page":"Puiseux series","title":"Puiseux series","text":"The following table shows each of the Puiseux series types available in Nemo, the base ring R, and the Julia/Nemo types for that kind of series (the type information is mainly of concern to developers).","category":"page"},{"location":"Nemo/docs/src/puiseux/","page":"Puiseux series","title":"Puiseux series","text":"Base ring Library Element type Parent type\nGeneric ring R AbstractAlgebra.jl `Generic.PuiseuxSeriesRingElem{T} Generic.PuiseuxSeriesRing{T}\nGeneric field K AbstractAlgebra.jl `Generic.PuiseuxSeriesFieldElem{T} Generic.PuiseuxSeriesField{T}\nmathbbZ Flint FlintPuiseuxSeriesRingElem{fmpz_laurent_series} FlintPuiseuxSeriesRing{fmpz_laurent_series}","category":"page"},{"location":"Nemo/docs/src/puiseux/","page":"Puiseux series","title":"Puiseux series","text":"For convenience, FlintPuiseuxSeriesRingElem and FlintPuiseuxSeriesFieldElem both belong to a union type called FlintPuiseuxSeriesElem.","category":"page"},{"location":"Nemo/docs/src/puiseux/","page":"Puiseux series","title":"Puiseux series","text":"The maximum relative precision, the string representation of the variable and the base ring R of a generic power series are stored in the parent object. ","category":"page"},{"location":"Nemo/docs/src/puiseux/","page":"Puiseux series","title":"Puiseux series","text":"Note that unlike most other Nemo types, Puiseux series are parameterised by the type of the underlying Laurent series type (which must exist before Nemo can make use of it), instead of the type of the coefficients.","category":"page"},{"location":"Nemo/docs/src/puiseux/#Puiseux-power-series","page":"Puiseux series","title":"Puiseux power series","text":"","category":"section"},{"location":"Nemo/docs/src/puiseux/","page":"Puiseux series","title":"Puiseux series","text":"Puiseux series have their maximum relative precision capped at some value prec_max. This refers to the maximum precision of the underlying Laurent series. See the description of the generic Puiseux series in AbstractAlgebra.jl for details.","category":"page"},{"location":"Nemo/docs/src/puiseux/","page":"Puiseux series","title":"Puiseux series","text":"There are numerous important things to be aware of when working with Puiseux series, or series in general. Please refer to the documentation of generic Puiseux series and  series in general in AbstractAlgebra.jl for details.","category":"page"},{"location":"Nemo/docs/src/puiseux/#Puiseux-series-functionality","page":"Puiseux series","title":"Puiseux series functionality","text":"","category":"section"},{"location":"Nemo/docs/src/puiseux/","page":"Puiseux series","title":"Puiseux series","text":"Puiseux series rings in Nemo implement the AbstractAlgebra.jl series interface, with the exception of the pol_length and polcoeff functions:","category":"page"},{"location":"Nemo/docs/src/puiseux/","page":"Puiseux series","title":"Puiseux series","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/series_rings","category":"page"},{"location":"Nemo/docs/src/puiseux/","page":"Puiseux series","title":"Puiseux series","text":"In addition, generic Puiseux series are provided by AbstractAlgebra.jl:","category":"page"},{"location":"Nemo/docs/src/puiseux/","page":"Puiseux series","title":"Puiseux series","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/puiseux.","category":"page"},{"location":"Nemo/docs/src/puiseux/","page":"Puiseux series","title":"Puiseux series","text":"Puiseux series rings in Nemo also implement this generic functionality. We list below only the functionality that differs from this generic functionality, for specific rings provided by Nemo.","category":"page"},{"location":"Nemo/docs/src/puiseux/#Special-functions","page":"Puiseux series","title":"Special functions","text":"","category":"section"},{"location":"Nemo/docs/src/puiseux/","page":"Puiseux series","title":"Puiseux series","text":"Base.sqrt(a::FlintPuiseuxSeriesElem{fmpz_laurent_series})","category":"page"},{"location":"Nemo/docs/src/puiseux/#Base.sqrt-Tuple{Union{FlintPuiseuxSeriesFieldElem{fmpz_laurent_series}, FlintPuiseuxSeriesRingElem{fmpz_laurent_series}}}","page":"Puiseux series","title":"Base.sqrt","text":"sqrt(a::FlintPuiseuxSeriesElem{T}) where T <: RingElem\n\nReturn the square root of the given Puiseux series.\n\n\n\nBase.sqrt(f::AbstractAlgebra.PolyElem{T}, check::Bool=true) where T <: RingElement\n\nReturn the square root of f if it is a perfect square, otherwise an exception is raised. If check is set to false the function assumes the input is square and may not fully check this.\n\n\n\nsqrt(a::Generic.PuiseuxSeriesElem{T}) where T <: RingElement\n\nReturn the square root of the given Puiseux series a.\n\n\n\nBase.sqrt(a::AbstractAlgebra.FracElem{T}) where T <: RingElem\n\nReturn the square root of a if it is a square, otherwise raise an exception.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/puiseux/","page":"Puiseux series","title":"Puiseux series","text":"Base.exp(a::FlintPuiseuxSeriesElem{fmpz_laurent_series})","category":"page"},{"location":"Nemo/docs/src/puiseux/#Base.exp-Tuple{Union{FlintPuiseuxSeriesFieldElem{fmpz_laurent_series}, FlintPuiseuxSeriesRingElem{fmpz_laurent_series}}}","page":"Puiseux series","title":"Base.exp","text":"exp(a::FlintPuiseuxSeriesElem{T}) where T <: RingElem\n\nReturn the exponential of the given Puiseux series.\n\n\n\nexp(a::AbstractAlgebra.RelSeriesElem)\n\nReturn the exponential of the power series a.\n\n\n\nexp(a::AbstractAlgebra.AbsSeriesElem)\n\nReturn the exponential of the power series a.\n\n\n\nexp(a::Generic.LaurentSeriesElem)\n\nReturn the exponential of the power series a.\n\n\n\nexp(a::Generic.PuiseuxSeriesElem{T}) where T <: RingElement\n\nReturn the exponential of the given Puiseux series a.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/puiseux/","page":"Puiseux series","title":"Puiseux series","text":"eta_qexp(x::FlintPuiseuxSeriesElem{fmpz_laurent_series})","category":"page"},{"location":"Nemo/docs/src/puiseux/#Nemo.eta_qexp-Tuple{Union{FlintPuiseuxSeriesFieldElem{fmpz_laurent_series}, FlintPuiseuxSeriesRingElem{fmpz_laurent_series}}}","page":"Puiseux series","title":"Nemo.eta_qexp","text":"eta_qexp(x::FlintPuiseuxSeriesElem{fmpz_laurent_series})\n\nReturn the q-series for eta evaluated at x, which must currently be a rational power of the generator of the Puiseux series ring.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/puiseux/","page":"Puiseux series","title":"Puiseux series","text":"Examples","category":"page"},{"location":"Nemo/docs/src/puiseux/","page":"Puiseux series","title":"Puiseux series","text":"S, x = PuiseuxSeriesRing(ZZ, 30, \"x\")\n\na = 1 + z + 3z^2 + O(z^5)\n\nh = sqrt(a^2)\nk = eta_qexp(S)","category":"page"},{"location":"Hecke/docs/src/abelian/introduction/#Abelian-Groups","page":"Abelian Groups","title":"Abelian Groups","text":"","category":"section"},{"location":"Hecke/docs/src/abelian/introduction/#Introduction","page":"Abelian Groups","title":"Introduction","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/map/#Map-interface","page":"Map interface","title":"Map interface","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Maps in Nemo model maps on sets f  D to C for some domain D and codomain C, which have no real limitations except that elements of the codomain and domain be represented by element objects in the system.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Maps f  D to C in AbstractAlgebra are modeled by Julia objects that are able to be called on a single element d in D of the domain to yield an element f(d) in C of the codomain. We say that the map is being applied.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Maps can be constructed from Julia functions, or they can be represented by some other kind of data, e.g. a matrix, or built up from other maps.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"In the following, we will always use the word \"function\" to mean a Julia function, and reserve the word \"map\" for a map on sets, whether mathematically, or as an object in the system.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Maps in AbstractAlgebra have a domain and codomain, can be applied, composed and composed with the identity map (assuming its domain is compatible). Various special kinds of map provide more functionality.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/#Parent-objects","page":"Map interface","title":"Parent objects","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Maps in AbstractAlgebra currently don't have parents. This will change later when AbstractAlgebra has a category system, so that the parent of a map can be some sort of Hom set.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/#Map-classes","page":"Map interface","title":"Map classes","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"All maps in AbstractAlgebra belong to a class of maps. The classes are modeled as abstract types that lie in a hierarchy, inheriting from SetMap at the top of the hierarchy. Other classes that inherit from SetMap are FunctionalMap for maps that are constructed from a Julia function (or closure), and IdentityMap for the class of the identity maps within the system.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"One might naturally assume that map types belong directly to these classes in the way that types of other objects in the system belong to abstract types in the AbstractAlgebra type hierarchy. However, in order to provide an extensible system, this is not the case.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Instead, a map type MyMap will belong to an abstract type of the form Map{D, C, T, MyMap}, where D is the type of the object representing the domain of the map type (this can also be an abstract type, such as Group), C is the type of the object representing the codomain of the map type and T is the map class that MyMap belongs to, e.g. SetMap or FunctionalMap.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Because a four parameter type system becomes quite cumbersome to use, we provide a number of functions for referring to collections of map types.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"If writing a function that accepts any map type, one makes the type of its argument belong to Map. For example f(M::Map) = 1.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"If writing a function that accepts any map from a domain of type D to a codomain of type C, one makes writes for example f(M::Map{D, C}) = 2. Note that D and C can be abstract types, such as Group, but otherwise must be the types of the parent objects representing the domain and codomain.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"A function that accepts any map belonging to a given map class might be written as f(M::Map(FunctionalMap)) = 3 or f(M::Map(FunctionalMap){D, C}) = 4 for example, where D and C are the types of the parent objects for the domain and codomain.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Finally, if a function should only work for a map of a given map type MyMap, say, one writes this f(M::Map(MyMap)) or f(M::Map(MyMap){D, C}, where as usual D and C are the types of the domain and codomain parent objects.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/#Implementing-new-map-types","page":"Map interface","title":"Implementing new map types","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"There are two common kinds of map type that developers will need to write. The first has a fixed domain and codomain, and the second is a type parameterised by the types of the domain and codomain. We give two simple examples here of how this might look.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"In the case of fixed domain and codomain, e.g. Integers{BigInt}, we would write it as follows:","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"mutable struct MyMap <: Map{Integers{BigInt}, Integers{BigInt}, SetMap, MyMap}\n   # some data fields\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"In the case of parameterisation by the type of the domain and codomain:","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"mutable struct MyMap{D, C} <: Map{D, C, SetMap, MyMap}\n   # some data fields\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"As mentioned above, to write a function that only accepts maps of type MyMap, one writes the functions as follows:","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"function my_fun(M::Map(MyMap))","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"The Map function then computes the correct type to use, which is actually not MyMap if all features of the generic Map infrastructure are required. It is bad practice to write functions for MyMap directly instead of Map(MyMap), since other users will be unable to use generic constructions over the map type MyMap.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/#Getters-and-setters","page":"Map interface","title":"Getters and setters","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"When writing new map types, it is very important to define getters and setters of the fields of the new map type, rather than to access them directly.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Let us suppose that the MyMap type has a field called foo. Rather than access this field by writing M.foo, one must access it using foo(M) (at least until Julia 1.1).","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"If such a getter only needs to access the field foo of M, there is a standard way of defining such a getter and setter when defining a new map type.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"foo(M::Map(MyMap)) = get_field(M, :foo)","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"To set a field of a map, one needs a setter, which can be implemented as follows:","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"set_foo!(M::Map(MyMap), a) = set_field(M, :foo, a)","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"In general, setters should be used rarely for map types.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Note that by providing getter and setter functions, map types need not even contain fields with the given name. For example, for a MyMap map type for maps between integers, one does not wish to explicitly store the domain and codomain in MyMap. Instead, we can define the getter functions domain and codomain to return JuliaZZ for any MyMap object.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"domain(M::Map(MyMap)) = JuliaZZ\ncodomain(M::Map(MyMap)) = JuliaZZ","category":"page"},{"location":"AbstractAlgebra/docs/src/map/#Required-functionality-for-maps","page":"Map interface","title":"Required functionality for maps","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"All map types must implement a standard interface, which we specify here.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"We will define this interface for a custom map type MyMap belonging to Map(SetMap), SetMap being the map class that all maps types belong to.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Note that map types do not need to contain any specific fields, but must provide accessor functions (getters and setters) in the manner described above.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"The required accessors for map types of class SetMap are as follows.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"domain(M::Map(MyMap))\ncodomain(M::Map(MyMap))","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Return the domain and codomain parent objects respectively, for the map M. It is only necessary to define these functions if the map type MyMap does not contain fields domain and codomain containing these parent objects.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"It is also necessary to be able to apply a map. This amounts to overloading the call method for objects belonging to Map(MyMap).","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"(M::Map(MyMap)(a))","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Apply the map M to the element a of the domain of M. Note that it is usual to add a type assertion to the return value of this function, asserting that the return value has type elem_type(C) where C is the type of the codomain parent object.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/#Optional-functionality-for-maps","page":"Map interface","title":"Optional functionality for maps","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"The Generic module in AbstractAlgebra automatically provides certain functionality for map types, assuming that they satisfy the full interface described above.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"However, certain map types or map classes might like to provide their own implementation of this functionality, overriding the generic functionality.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"We describe this optional functionality here.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/#Show-method","page":"Map interface","title":"Show method","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Custom map types may like to provide a custom show method if the default of displaying the domain and codomain of the map is not sufficient.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"show(io::IO, M::Map(MyMap))","category":"page"},{"location":"AbstractAlgebra/docs/src/map/#Identity-maps","page":"Map interface","title":"Identity maps","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"There is a concrete map type Generic.IdentityMap{D} for the identity map on a given domain. Here D is the type of the object representing that domain.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Generic.IdentityMap belongs to the supertype Map{D, C, AbstractAlgebra.IdentityMap, IdentityMap}.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Note that the map class is also called IdentityMap. It is an abstract type, whereas Generic.IdentityMap is a concrete type in the Generic module.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"An identity map has the property that when composed with any map whose domain or codomain is compatible, that map will be returned as the composition. Identity maps can therefore serve as a starting point when building up a composition of maps, starting an identity map.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"We do not cached identity maps in the system, so that if more than one is created on the same domain, there will be more than one such map in the system. This underscores the fact that there is in general no way for the system to know if two maps compose to give an identity map, and therefore the only two maps that can be composed to give an identity map are identity maps on the same domain.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"To construct an identity map for a given domain, specified by a parent object R, say, we have the following function.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"identity_map(R::Set)","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Return an identity map on the domain R.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Of course there is nothing stopping a map type or class from implementing its own identity map type, and defining composition of maps of the same kind with such an identity map. In such a case, the class of such an identity map type must belong to AbstractAlgebra.IdentityMap so that composition with other map types still works.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/#Composition-of-maps","page":"Map interface","title":"Composition of maps","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Any two compatible maps in AbstractAlgebra can be composed and any composition can be applied.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"In order to facilitate this, the Generic module provides a type CompositeMap{D, C}, which contains two maps map1 and map2, corresponding to the two maps to be applied in a composition, in the order they should be applied.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"To construct a composition map from two existing maps, we have the following function:","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"compose(f::Map{D, U}, g::Map{U, C}) where {D, U, C}","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Compose the two maps f and g, i.e. return the map h such that h(x) = g(f(x)).","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"As a shortcut for this function we have the following operator:","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"*(f::Map{D, U}, g::Map{U, C}) where {D, U, C} = compose(f, g)","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Note the order of composition. If we have maps f  X to Y, g  Y to Z the correct order of the maps in this operator is f*g, so that (f*g)(x) = g(f(x)).","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"This is chosen so that for left R-module morphisms represented by a matrix, the order of matrix multiplication will match the order of composition of the corresponding morphisms.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Of course, a custom map type or class of maps can implement its own composition type and compose function.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"This is the case with the FunctionalMap class for example, which caches the Julia function/closure corresponding to the composition of two functional maps. As this cached function needs to be stored inside the composition, a special type is necessary for the composition of two functional maps.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"By default, compose will check that the two maps are composable, i.e. the codomain of the first map matches the domain of the second map. This is implemented by the following function:","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"check_composable(f::Map{D, U}, g::Map{U, C})","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Raise an exception if the codomain of f doesn't match the domain of g.","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Note that composite maps should keep track of the two maps they were constructed from. To access these maps, the following functions are provided:","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"map1(f::CompositeMap)\nmap2(f::CompositeMap)","category":"page"},{"location":"AbstractAlgebra/docs/src/map/","page":"Map interface","title":"Map interface","text":"Any custom composite map type must also provide these functions for that map type, even if there exist fields with those names. This is because there is no common map class for all composite map types. Therefore the Generic system cannot provide fallbacks for all such composite map types.","category":"page"},{"location":"AbstractAlgebra/docs/src/submodule/","page":"Submodules","title":"Submodules","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/submodule/#Submodules","page":"Submodules","title":"Submodules","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/submodule/","page":"Submodules","title":"Submodules","text":"AbstractAlgebra allows the construction of submodules/subvector spaces of AbstractAlgebra modules over euclidean domains. These are given as the submodule generated by a finite list of elements in the original module.","category":"page"},{"location":"AbstractAlgebra/docs/src/submodule/","page":"Submodules","title":"Submodules","text":"We define two submodules to be equal if they are (transitively) submodules of the same module M and their generators generate the same set of elements.","category":"page"},{"location":"AbstractAlgebra/docs/src/submodule/","page":"Submodules","title":"Submodules","text":"As well as implementing the entire Module interface, AbstractAlgebra submodules also provide the following interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/submodule/#Constructors","page":"Submodules","title":"Constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/submodule/","page":"Submodules","title":"Submodules","text":"sub(::AbstractAlgebra.FPModule{T}, ::Vector{AbstractAlgebra.FPModuleElem{T}}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/submodule/#AbstractAlgebra.Generic.sub-Union{Tuple{T}, Tuple{AbstractAlgebra.FPModule{T},Array{AbstractAlgebra.FPModuleElem{T},1}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Submodules","title":"AbstractAlgebra.Generic.sub","text":"sub(m::AbstractAlgebra.FPModule{T}, gens::Vector{<:AbstractAlgebra.FPModuleElem{T}}) where T <: RingElement\n\nReturn the submodule of the module m generated by the given generators, given as elements of m.\n\n\n\nsub(m::Module{T}, gens::Vector{<:ModuleElem{T}}) where T <: RingElement\n\nReturn the submodule S of the module m generated by the given generators, given as elements of m, and a map which is the canonical injection from S to m.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/submodule/","page":"Submodules","title":"Submodules","text":"sub(::AbstractAlgebra.FPModule{T}, ::Vector{Generic.Submodule{T}}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/submodule/#AbstractAlgebra.Generic.sub-Union{Tuple{T}, Tuple{AbstractAlgebra.FPModule{T},Array{AbstractAlgebra.Generic.Submodule{T},1}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Submodules","title":"AbstractAlgebra.Generic.sub","text":"sub(m::Module{T}, subs::Vector{<:Generic.Submodule{T}}) where T <: RingElement\n\nReturn the submodule S of the module m generated by the union of the given submodules of m, and a map which is the canonical injection from S to m.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/submodule/","page":"Submodules","title":"Submodules","text":"Note that the preimage of the canonical injection can be obtained using the preimage function described in the section on module homomorphisms. As the canonical injection is injective, this is unique.","category":"page"},{"location":"AbstractAlgebra/docs/src/submodule/","page":"Submodules","title":"Submodules","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/submodule/","page":"Submodules","title":"Submodules","text":"julia> M = FreeModule(ZZ, 2)\nFree module of rank 2 over Integers\n\njulia> m = M([ZZ(1), ZZ(2)])\n(1, 2)\n\njulia> n = M([ZZ(2), ZZ(-1)])\n(2, -1)\n\njulia> N, f = sub(M, [m, n])\n(Submodule over Integers with 2 generators and no relations\n, Module homomorphism with\nDomain: Submodule over Integers with 2 generators and no relations\n\nCodomain: Free module of rank 2 over Integers)\n\njulia> v = N([ZZ(3), ZZ(4)])\n(3, 4)\n\njulia> v2 = f(v)\n(3, 26)\n\njulia> V = VectorSpace(QQ, 2)\nVector space of dimension 2 over Rationals\n\njulia> m = V([QQ(1), QQ(2)])\n(1//1, 2//1)\n\njulia> n = V([QQ(2), QQ(-1)])\n(2//1, -1//1)\n\njulia> N, f = sub(V, [m, n])\n(Subspace over Rationals with 2 generators and no relations\n, Module homomorphism with\nDomain: Subspace over Rationals with 2 generators and no relations\n\nCodomain: Vector space of dimension 2 over Rationals)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/submodule/#Functionality-for-submodules","page":"Submodules","title":"Functionality for submodules","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/submodule/","page":"Submodules","title":"Submodules","text":"In addition to the Module interface, AbstractAlgebra submodules implement the following functionality.","category":"page"},{"location":"AbstractAlgebra/docs/src/submodule/#Basic-manipulation","page":"Submodules","title":"Basic manipulation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/submodule/","page":"Submodules","title":"Submodules","text":"supermodule(::AbstractAlgebra.Generic.Submodule{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/submodule/#AbstractAlgebra.Generic.supermodule-Union{Tuple{AbstractAlgebra.Generic.Submodule{T}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Submodules","title":"AbstractAlgebra.Generic.supermodule","text":"supermodule(M::Submodule{T}) where T <: RingElement\n\nReturn the module that this module is a submodule of.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/submodule/","page":"Submodules","title":"Submodules","text":"issubmodule(::AbstractAlgebra.FPModule{T}, ::AbstractAlgebra.FPModule{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/submodule/#AbstractAlgebra.Generic.issubmodule-Union{Tuple{T}, Tuple{AbstractAlgebra.FPModule{T},AbstractAlgebra.FPModule{T}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Submodules","title":"AbstractAlgebra.Generic.issubmodule","text":"issubmodule(M::AbstractAlgebra.FPModule{T}, N::AbstractAlgebra.FPModule{T}) where T <: RingElement\n\nReturn true if N was constructed as a submodule of M. The relation is taken transitively (i.e. subsubmodules are submodules for the purposes of this relation, etc). The module M is also considered a submodule of itself for this relation.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/submodule/","page":"Submodules","title":"Submodules","text":"iscompatible(::AbstractAlgebra.FPModule{T}, ::AbstractAlgebra.FPModule{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/submodule/#AbstractAlgebra.Generic.iscompatible-Union{Tuple{T}, Tuple{AbstractAlgebra.FPModule{T},AbstractAlgebra.FPModule{T}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Submodules","title":"AbstractAlgebra.Generic.iscompatible","text":"iscompatible(M::AbstractAlgebra.FPModule{T}, N::AbstractAlgebra.FPModule{T}) where T <: RingElement\n\nReturn true, P if the given modules are compatible, i.e. that they are (transitively) submodules of the same module, P. Otherwise return false, M.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/submodule/","page":"Submodules","title":"Submodules","text":"dim(N::AbstractAlgebra.Generic.Submodule{T}) where T <: FieldElement","category":"page"},{"location":"AbstractAlgebra/docs/src/submodule/#AbstractAlgebra.Generic.dim-Union{Tuple{AbstractAlgebra.Generic.Submodule{T}}, Tuple{T}} where T<:Union{FieldElem, AbstractFloat, Rational}","page":"Submodules","title":"AbstractAlgebra.Generic.dim","text":"dim(N::AbstractAlgebra.Generic.Submodule{T}) where T <: FieldElement\n\nReturn the dimension of the given vector subspace.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/submodule/","page":"Submodules","title":"Submodules","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/submodule/","page":"Submodules","title":"Submodules","text":"julia> M = FreeModule(ZZ, 2)\nFree module of rank 2 over Integers\n\njulia> m = M([ZZ(2), ZZ(3)])\n(2, 3)\n\njulia> n = M([ZZ(1), ZZ(4)])\n(1, 4)\n\njulia> N1, = sub(M, [m, n])\n(Submodule over Integers with 2 generators and no relations\n, Module homomorphism with\nDomain: Submodule over Integers with 2 generators and no relations\n\nCodomain: Free module of rank 2 over Integers)\n\njulia> N2, = sub(M, [m])\n(Submodule over Integers with 1 generator and no relations\n, Module homomorphism with\nDomain: Submodule over Integers with 1 generator and no relations\n\nCodomain: Free module of rank 2 over Integers)\n\njulia> supermodule(N1) == M\ntrue\n\njulia> iscompatible(N1, N2)\n(true, Free module of rank 2 over Integers)\n\njulia> issubmodule(N1, M)\nfalse\n\n\njulia> V = VectorSpace(QQ, 2)\nVector space of dimension 2 over Rationals\n\njulia> m = V([QQ(2), QQ(3)])\n(2//1, 3//1)\n\njulia> N, = sub(V, [m])\n(Subspace over Rationals with 1 generator and no relations\n, Module homomorphism with\nDomain: Subspace over Rationals with 1 generator and no relations\n\nCodomain: Vector space of dimension 2 over Rationals)\n\njulia> dim(V)\n2\n\njulia> dim(N)\n1\n","category":"page"},{"location":"AbstractAlgebra/docs/src/submodule/#Intersection","page":"Submodules","title":"Intersection","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/submodule/","page":"Submodules","title":"Submodules","text":"Base.intersect(M::AbstractAlgebra.FPModule{T}, N::AbstractAlgebra.FPModule{T}) where\nT <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/submodule/#Base.intersect-Union{Tuple{T}, Tuple{AbstractAlgebra.FPModule{T},AbstractAlgebra.FPModule{T}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Submodules","title":"Base.intersect","text":"Base.intersect(M::AbstractAlgebra.FPModule{T}, N::AbstractAlgebra.FPModule{T}) where T <: RingElement\n\nReturn the intersection of the modules M as a submodule of M. Note that M and N must be (constructed as) submodules (transitively) of some common module P.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/submodule/","page":"Submodules","title":"Submodules","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/submodule/","page":"Submodules","title":"Submodules","text":"julia> M = FreeModule(ZZ, 2)\nFree module of rank 2 over Integers\n\njulia> m = M([ZZ(2), ZZ(3)])\n(2, 3)\n\njulia> n = M([ZZ(1), ZZ(4)])\n(1, 4)\n\njulia> N1 = sub(M, [m, n])\n(Submodule over Integers with 2 generators and no relations\n, Module homomorphism with\nDomain: Submodule over Integers with 2 generators and no relations\n\nCodomain: Free module of rank 2 over Integers)\n\njulia> N2 = sub(M, [m])\n(Submodule over Integers with 1 generator and no relations\n, Module homomorphism with\nDomain: Submodule over Integers with 1 generator and no relations\n\nCodomain: Free module of rank 2 over Integers)\n\njulia> I = intersect(N1, N2)\nUnion{AbstractAlgebra.Generic.ModuleHomomorphism{BigInt}, AbstractAlgebra.Generic.Submodule{BigInt}}[]","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/developer/conventions/#Conventions","page":"Conventions","title":"Conventions","text":"","category":"section"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"AbstractAlgebra and Nemo have adopted a number of conventions to help maintain a uniform codebase.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/#Code-conventions","page":"Conventions","title":"Code conventions","text":"","category":"section"},{"location":"Nemo/docs/src/developer/conventions/#Function-and-type-names","page":"Conventions","title":"Function and type names","text":"","category":"section"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"Names of types in Julia follow the convention of CamelCase where the first letter of each word is capitalised, e.g. Int64 and AbstractString.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"Function/method names in Julia use all lowercase with underscores between the words, e.g. zip and jacobi_symbol.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"We follow these conventions in Nemo with some exceptions:","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"When interfacing C libraries the types use the same spelling and capitalisation in Nemo as they do in C, e.g. the Flint library's fmpz_poly remains uncapitalised in Nemo.\nTypes such as gfp_poly which don't exist under that name on the C side also use the lowercase convention as they wrap an actual C type which must be split into more than one type on the Julia side. For example nmod_poly and gfp_poly on the Julia side both represent Flint nmod_poly's on the C side.\nTypes of rings and fields, modules, maps, etc. are capitalised whether they correspond to a C type or not, e.g. FqNmodFiniteField for the type of an object representing the field that fq_nmod's belong to.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":".","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"We omit an underscore if the first word of a method is \"is\" or \"has\", e.g. iseven.\nUnderscores are omitted if the method name is already well established without an underscore in Julia itself, e.g. setindex.\nConstructors with the same name as a type use the same spelling and capitalisation as that type, e.g. fmpz(1).\nFunctions for creating rings, fields, modules, maps, etc. (rather than the elements thereof) use CamelCase, e.g. PolynomialRing. We refer to these  functions as parent constructors. Note that we do not follow the Julia convention here, e.g. PolynomialRing is a function and not a type constructor (in fact we often return a tuple consisting of a parent object and other objects such as generators with this type of function) yet we capitalise it.\nWe prefer words to not be abbreviated, e.g. denominator instead of den.\nExceptions always exist where the result would be offensive in any major spoken language (example omitted).","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"It is easy to find counterexamples to virtually all these rules. However we have been making efforts to remove the most egregious cases from our codebase over time. As perfect consistency is not possible, work on this has to at times take a back seat.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/#Use-of-ASCII-characters","page":"Conventions","title":"Use of ASCII characters","text":"","category":"section"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"All code and printed output in Nemo should use ASCII characters only. This is because we have developers who are using versions of the WSL that cannot correctly display non-ASCII characters.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"This extends to function and operator names, which saves people having to learn how to enter them to use the system.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/#Spacing-and-tabs","page":"Conventions","title":"Spacing and tabs","text":"","category":"section"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"All function bodies and control blocks should be indented using spaces.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"A survey of existing code shows 2, 3 or 4 space indenting commonly used in our files. Values outside this range should not be used.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"When contributing to an existing file, follow the majority convention in that file. Consistency within a file is valued highly.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"If you are new to Nemo development and do not already have a very strong preference, new files should be started with 3 space indenting. This maximises the likelihood that copy and paste between files will be straightforward, though modern editors ease this to some degree.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"Function signatures in docstrings should have four spaces before them.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"Where possible, line lengths should not exceed 80 characters.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"We use a term/factor convention for spacing. This means that all (additive) terms have spaces before and after them, (multiplicative) factors usually do not.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"In practice this means that +, -, =, ==, !=, <, >, <=, >= all have spaces before and after them. The operators *, /, ^ and unary minus do not.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"As per English, commas are followed by a single space in expressions. This applies for example to function arguments and tuples.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"We do not put spaces immediately inside or before parentheses.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"Colons used for ranges do not have spaces before or after them.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"Logical operators, &, |, &&, etc. usually have spaces before and after them.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/#Comments","page":"Conventions","title":"Comments","text":"","category":"section"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"Despite appearances to the contrary, we now prefer code comments explaining the algorithm as it proceeds.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"The hash when used for a comment should always be followed by a space. Full sentences are preferred.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"We do not generally use comments in Nemo for questions, complaints or proposals for future improvement. These are better off in a ticket on GitHub with a discussion that will be brought to the attention of all relevant parties.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"Any (necessary) limitations of the implementation should be noted in docstrings.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/#Layout-of-files","page":"Conventions","title":"Layout of files","text":"","category":"section"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"In Nemo, all types are places in special files with the word \"Types\" in their name, e.g. FlintTypes.jl. This is because Julia must be aware of all types before they are used. Separation of types from implementations makes it easy to ensure this happens.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"Abstract types should be put in the file called AbstractTypes.jl at the top level of the src directory.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"Most implementation files present functions in a particular order, which is as follows:","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"A header stating what the file is for, and if needed, any copyright notices\nFunctions applying to any \"types\" used in the file, e.g. parent_type, elem_type, base_ring, parent, check_parent.\nBasic manipulation, including hashes, predicates, getters/setters, functions for creating special values (e.g. one, zero and the like), deepcopy_internal. These are usually fairly short functions, often a single line.\nIndexing (getindex, setindex), iteration, views.\nString I/O (expressify and file access, etc.)\nArithmetic operations, usually in multiple sections, such as unary operations, binary operations, ad hoc binary operations (e.g. multiplication of a complex object by a scalar), comparisons, ad hoc comparisons, division, etc.\nMore complex functionality separated into sections based on functionality provided, e.g. gcd, interpolation, special functions, solving, etc.\nFunctions for mapping between different types, coercion, changing base ring, etc.\nUnsafe operators, e.g. mul!, add!, addeq! etc.\nRandom generation\nPromotion rules\nParent object call overload (e.g. for implementing R(2) where R is an object representing a ring or field, etc.)\nAdditional constructors, e.g. matrix, which might be used instead of a parent object to construct elements.\nParent object constructors, e.g. PolynomialRing, etc.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"The exact order within the file is less important than generally following something like the above. This aids in finding functions in a file since all files are more or less set out the same way.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"For an example to follow, see the src/generic/Poly.jl file in AbstractAlgebra which is the oldest and most canonical example.","category":"page"},{"location":"Nemo/docs/src/developer/conventions/","page":"Conventions","title":"Conventions","text":"Headings for sections should be 80 characters wide and formed of hashes in the style that can be seen in each Nemo file.","category":"page"},{"location":"Hecke/docs/src/FacElem/#Factored-Elements","page":"Factored Elements","title":"Factored Elements","text":"","category":"section"},{"location":"Hecke/docs/src/FacElem/","page":"Factored Elements","title":"Factored Elements","text":"CurrentModule = Hecke","category":"page"},{"location":"Hecke/docs/src/FacElem/","page":"Factored Elements","title":"Factored Elements","text":"In many applications in number theory related to the multiplicative structure of number fields, interesting elements, e.g. units, are extremely large when written wrt. to a fxied basis for the field: for the fundamental unit in Qsqrt d it is known that the coefficients wrt. the canonical basis 1 sqrt d can have O(exp sqrt d) many digits. All currently known, fast methods construct those elements as power products of smaller elements, allowing the computer to handle them.","category":"page"},{"location":"Hecke/docs/src/FacElem/","page":"Factored Elements","title":"Factored Elements","text":"Mathematically, one can think of factored elements to formally live in the ring ZK the group ring of the non-zero field elements. Thus elements are of the form $ \\prod ai^{ei}$ where a_i are elements in K, typically small and the e_iin Z are frequently  large exponents. We refer to the a_i as the base and the e_i as the  exponents of the factored element.","category":"page"},{"location":"Hecke/docs/src/FacElem/","page":"Factored Elements","title":"Factored Elements","text":"Since K is, in general, no PID, this presentation is non-unique, elements in this form can easily be multiplied, raised to large powers, but in general not compared and not added.","category":"page"},{"location":"Hecke/docs/src/FacElem/","page":"Factored Elements","title":"Factored Elements","text":"In Hecke, this is caputured more generally by the type FacElem,  parametrized by the type of the elements in the base and the type of their  parent.","category":"page"},{"location":"Hecke/docs/src/FacElem/","page":"Factored Elements","title":"Factored Elements","text":"Important special cases are","category":"page"},{"location":"Hecke/docs/src/FacElem/","page":"Factored Elements","title":"Factored Elements","text":"FacElem{fmpz, FlintIntegerRing}, factored integers\nFacElem{nf_elem, AnticNumberField}, factored algerbaic numbers\nFacElem{NfAbsOrdIdl, NfAbsOrdIdlSet}, factored ideals","category":"page"},{"location":"Hecke/docs/src/FacElem/","page":"Factored Elements","title":"Factored Elements","text":"It should be noted that an object of type `FacElemfmpz FlintIntegerRing  will, in general, not represent an integer as the exponents can be negative.","category":"page"},{"location":"Hecke/docs/src/FacElem/#Construction","page":"Factored Elements","title":"Construction","text":"","category":"section"},{"location":"Hecke/docs/src/FacElem/","page":"Factored Elements","title":"Factored Elements","text":"In general one can define factored elements by giving 2 arrays, the  base and the exponent, or a dictionary containing the pairs:","category":"page"},{"location":"Hecke/docs/src/FacElem/","page":"Factored Elements","title":"Factored Elements","text":"FacElem\nFacElem(a::nf_elem)","category":"page"},{"location":"Hecke/docs/src/FacElem/#Hecke.FacElem","page":"Factored Elements","title":"Hecke.FacElem","text":"FacElem{B}(R, base::Array{B, 1}, exp::Array{fmpz, 1}) -> FacElem{B}\n\nReturns the element prod b_i^e_i, un-expanded.\n\n\n\nFacElem{B}(base::Array{B, 1}, exp::Array{fmpz, 1}) -> FacElem{B}\n\nReturns the element prod b_i^e_i, un-expanded.\n\n\n\nFacElem{B}(R, d::Dict{B, fmpz}) -> FacElem{B}\nFacElem{B}(R, d::Dict{B, Integer}) -> FacElem{B}\n\nReturns the element prod b^dp, un-expanded.\n\n\n\nFacElem{B}(d::Dict{B, fmpz}) -> FacElem{B}\nFacElem{B}(d::Dict{B, Integer}) -> FacElem{B}\n\nReturns the element prod b^dp, un-expanded.\n\n\n\n","category":"type"},{"location":"Hecke/docs/src/FacElem/#Hecke.FacElem-Tuple{nf_elem}","page":"Factored Elements","title":"Hecke.FacElem","text":"FacElem{B}(R, base::Array{B, 1}, exp::Array{fmpz, 1}) -> FacElem{B}\n\nReturns the element prod b_i^e_i, un-expanded.\n\n\n\nFacElem{B}(base::Array{B, 1}, exp::Array{fmpz, 1}) -> FacElem{B}\n\nReturns the element prod b_i^e_i, un-expanded.\n\n\n\nFacElem{B}(R, d::Dict{B, fmpz}) -> FacElem{B}\nFacElem{B}(R, d::Dict{B, Integer}) -> FacElem{B}\n\nReturns the element prod b^dp, un-expanded.\n\n\n\nFacElem{B}(d::Dict{B, fmpz}) -> FacElem{B}\nFacElem{B}(d::Dict{B, Integer}) -> FacElem{B}\n\nReturns the element prod b^dp, un-expanded.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/","page":"Factored Elements","title":"Factored Elements","text":"ideal(::NfOrd, ::FacElem{nf_elem, AnticNumberField})","category":"page"},{"location":"Hecke/docs/src/FacElem/#Hecke.ideal-Tuple{NfAbsOrd{AnticNumberField,nf_elem},FacElem{nf_elem,AnticNumberField}}","page":"Factored Elements","title":"Hecke.ideal","text":" ideal(O::NfOrd, a::FacElem{nf_elem, AnticNumberField)\n\nThe factored fractional ideal a*O.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#Conversion","page":"Factored Elements","title":"Conversion","text":"","category":"section"},{"location":"Hecke/docs/src/FacElem/","page":"Factored Elements","title":"Factored Elements","text":"The process of computing the value defined by a factored element is available as evaluate. Depending on the types involved this can be very efficient.","category":"page"},{"location":"Hecke/docs/src/FacElem/","page":"Factored Elements","title":"Factored Elements","text":"evaluate(::FacElem{fmpz, S}) where S\nevaluate(::FacElem{fmpq, S} where S)\nevaluate(::FacElem{T,S} where S) where T\nevaluate_naive(::FacElem{T,S} where S) where T","category":"page"},{"location":"Hecke/docs/src/FacElem/#AbstractAlgebra.Generic.evaluate-Union{Tuple{FacElem{fmpz,S}}, Tuple{S}} where S","page":"Factored Elements","title":"AbstractAlgebra.Generic.evaluate","text":"evaluate{T}(x::FacElem{T}) -> T\n\nExpands or evaluates the factored element, i.e. actually computes the value. Does \"square-and-multiply\" on the exponent vectors.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#AbstractAlgebra.Generic.evaluate-Tuple{FacElem{fmpq,S} where S}","page":"Factored Elements","title":"AbstractAlgebra.Generic.evaluate","text":"evaluate(x::FacElem{fmpq}) -> fmpq\nevaluate(x::FacElem{fmpz}) -> fmpz\n\nExpands or evaluates the factored element, i.e. actually computes the the element.  Works by first obtaining a simplified version of the power product into coprime base elements.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#AbstractAlgebra.Generic.evaluate-Union{Tuple{FacElem{T,S} where S}, Tuple{T}} where T","page":"Factored Elements","title":"AbstractAlgebra.Generic.evaluate","text":"evaluate{T}(x::FacElem{T}) -> T\n\nExpands or evaluates the factored element, i.e. actually computes the value. Does \"square-and-multiply\" on the exponent vectors.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#Hecke.evaluate_naive-Union{Tuple{FacElem{T,S} where S}, Tuple{T}} where T","page":"Factored Elements","title":"Hecke.evaluate_naive","text":"evaluate_naive{T}(x::FacElem{T}) -> T\n\nExpands or evaluates the factored element, i.e. actually computes the value. Uses the obvious naive algorithm. Faster for input in finite rings.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#Special-functions","page":"Factored Elements","title":"Special functions","text":"","category":"section"},{"location":"Hecke/docs/src/FacElem/","page":"Factored Elements","title":"Factored Elements","text":"In the case where the parent of the base allows for efficient gcd computation, power products can be made unique:","category":"page"},{"location":"Hecke/docs/src/FacElem/","page":"Factored Elements","title":"Factored Elements","text":"simplify(x::FacElem{NfOrdIdl, NfOrdIdlSet})\nsimplify(x::FacElem{fmpq,S} where S)","category":"page"},{"location":"Hecke/docs/src/FacElem/#Hecke.simplify-Tuple{FacElem{NfAbsOrdIdl{AnticNumberField,nf_elem},Hecke.NfAbsOrdIdlSet{AnticNumberField,nf_elem}}}","page":"Factored Elements","title":"Hecke.simplify","text":"simplify(x::FacElem{NfOrdIdl, NfOrdIdlSet}) -> FacElem\nsimplify(x::FacElem{NfOrdFracIdl, NfOrdFracIdlSet}) -> FacElem\n\nUses coprime_base to obtain a simplified version of x, ie. in the simplified version all base ideals will be pariwise coprime but not neccessarily prime!.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#Hecke.simplify-Tuple{FacElem{fmpq,S} where S}","page":"Factored Elements","title":"Hecke.simplify","text":"simplify(x::FacElem{fmpq}) -> FacElem{fmpq}\nsimplify(x::FacElem{fmpz}) -> FacElem{fmpz}\n\nSimplfies the factored element, i.e. arranges for the base to be coprime.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/","page":"Factored Elements","title":"Factored Elements","text":"The simplified version can then be used further:","category":"page"},{"location":"Hecke/docs/src/FacElem/","page":"Factored Elements","title":"Factored Elements","text":"isone(x::FacElem{fmpq, S} where S)\nfactor_coprime(::FacElem{fmpz, S} where S)\nfactor_coprime(::FacElem{NfOrdIdl, NfOrdIdlSet})\nfactor_coprime(::FacElem{NfOrdFracIdl, NfOrdFracIdlSet})\nfactor_coprime(::FacElem{nf_elem, AnticNumberField}, ::NfOrdIdlSet)\nfactor(::FacElem{NfOrdFracIdl, NfOrdFracIdlSet})\nfactor(::FacElem{nf_elem, AnticNumberField}, ::NfOrdIdlSet)","category":"page"},{"location":"Hecke/docs/src/FacElem/#Base.isone-Tuple{FacElem{fmpq,S} where S}","page":"Factored Elements","title":"Base.isone","text":"isone(x::FacElem{fmpq}) -> Bool\nisone(x::FacElem{fmpz}) -> Bool\n\nTests if x represents 1 without an evaluation.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#Hecke.factor_coprime-Tuple{FacElem{fmpz,S} where S}","page":"Factored Elements","title":"Hecke.factor_coprime","text":"factor_coprime(x::FacElem{fmpz}) -> Fac{fmpz}\n\nComputed a partial factorisation of x, ie. writes x as a product of pariwise coprime integers.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#Hecke.factor_coprime-Tuple{FacElem{NfAbsOrdIdl{AnticNumberField,nf_elem},Hecke.NfAbsOrdIdlSet{AnticNumberField,nf_elem}}}","page":"Factored Elements","title":"Hecke.factor_coprime","text":"factor_coprime(x::FacElem{NfOrdIdl, NfOrdIdlSet}) -> Dict{NfOrdIdl, Int}\n\nComputed a partial factorisation of x, ie. writes x as a product of pariwise coprime integral ideals.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#Hecke.factor_coprime-Tuple{FacElem{Hecke.NfAbsOrdFracIdl{AnticNumberField,nf_elem},Hecke.NfAbsOrdFracIdlSet{AnticNumberField,nf_elem}}}","page":"Factored Elements","title":"Hecke.factor_coprime","text":"factor_coprime(Q::FacElem{NfOrdFracIdl, NfOrdFracIdlSet}) -> Dict{NfOrdIdl, Int}\n\nA coprime factorisation of Q: each ideal in Q is split using \\code{integral_split} and then a coprime basis is computed. This does {\\bf not} use any factorisation.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#Hecke.factor_coprime-Tuple{FacElem{nf_elem,AnticNumberField},Hecke.NfAbsOrdIdlSet{AnticNumberField,nf_elem}}","page":"Factored Elements","title":"Hecke.factor_coprime","text":"factor_coprime(a::FacElem{nf_elem, AnticNumberField}, I::NfOrdIdlSet) -> Dict{NfOrdIdl, fmpz}\n\nFactors the rincipal ideal generated by a into coprimes by computing a coprime basis from the principal ideals in the factorisation of a.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#Hecke.factor-Tuple{FacElem{Hecke.NfAbsOrdFracIdl{AnticNumberField,nf_elem},Hecke.NfAbsOrdFracIdlSet{AnticNumberField,nf_elem}}}","page":"Factored Elements","title":"Hecke.factor","text":" factor(Q::FacElem{NfOrdFracIdl, NfOrdFracIdlSet}) -> Dict{NfOrdIdl, Int}\n\nThe factorisation of Q, by refining a coprime factorisation.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#Hecke.factor-Tuple{FacElem{nf_elem,AnticNumberField},Hecke.NfAbsOrdIdlSet{AnticNumberField,nf_elem}}","page":"Factored Elements","title":"Hecke.factor","text":"factor(a::FacElem{nf_elem, AnticNumberField}, I::NfOrdIdlSet) -> Dict{NfOrdIdl, fmpz}\n\nFactors the principal ideal generated by a by refinind a coprime factorisation.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/","page":"Factored Elements","title":"Factored Elements","text":"For factorised algebraic numbers a unique simplification is not possible, however, this allows still do obtain partial results:","category":"page"},{"location":"Hecke/docs/src/FacElem/","page":"Factored Elements","title":"Factored Elements","text":"compact_presentation(a::FacElem{nf_elem, AnticNumberField}, n::Int = 2)","category":"page"},{"location":"Hecke/docs/src/FacElem/#Hecke.compact_presentation","page":"Factored Elements","title":"Hecke.compact_presentation","text":"compact_presentation(a::FacElem{nf_elem, AnticNumberField}, n::Int = 2; decom, arb_prec = 100, short_prec = 1000) -> FacElem\n\nComputes a presentation a = prod a_i^n_i where all the exponents n_i are powers of n and, the elements a_i are \"small\", generically, they have a norm bounded by d^n2 where d is the discriminant of the maximal order. As the algorithm needs the factorisation of the principal ideal generated by a, it can be passed in in \\code{decom}.\n\n\n\n","category":"function"},{"location":"Hecke/docs/src/FacElem/","page":"Factored Elements","title":"Factored Elements","text":"signs(::Union{FacElem{nf_elem,AnticNumberField}, nf_elem})\nsigns(::Union{FacElem{nf_elem,AnticNumberField}, nf_elem}, ::Array{InfPlc,1})\nsign(::Union{FacElem{nf_elem,AnticNumberField}, nf_elem}, ::InfPlc)\nispositive(::Union{FacElem{nf_elem,AnticNumberField}, nf_elem}, ::InfPlc)\nispositive(::Union{FacElem{nf_elem,AnticNumberField}, nf_elem}, ::Array{InfPlc,1})\nistotally_positive(::Union{FacElem{nf_elem,AnticNumberField}, nf_elem})","category":"page"},{"location":"Hecke/docs/src/FacElem/#Hecke.signs-Tuple{Union{FacElem{nf_elem,AnticNumberField}, nf_elem}}","page":"Factored Elements","title":"Hecke.signs","text":"signs(a::nf_elem)          -> Dict{InfPlc, Int}\nsigns(a::FacElem{nf_elem}) -> Dict{InfPlc, Int}\n\nThis function returns a dictionary of the signs of a at all infinite places of the ambient number field. The keys are infinite places of the ambient number field. The value is 1 if the sign is positive and -1 if the sign is negative.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#Hecke.signs-Tuple{Union{FacElem{nf_elem,AnticNumberField}, nf_elem},Array{InfPlc,1}}","page":"Factored Elements","title":"Hecke.signs","text":"signs(a::nf_elem, l::Vector{InfPlc})          -> Dict{InfPlc, Int}\nsigns(a::FacElem{nf_elem}, l::Vector{InfPlc}) -> Dict{InfPlc, Int}\n\nThis function returns a dictionary of the signs of a at places in l. The keys are the elements of l. The value is 1 if the sign is positive and -1 if the sign is negative. The result will contain as many signs as there are real places contained in l.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#Base.sign-Tuple{Union{FacElem{nf_elem,AnticNumberField}, nf_elem},InfPlc}","page":"Factored Elements","title":"Base.sign","text":"sign(a::nf_elem, P::InfPlc)          -> Int\nsign(a::FacElem{nf_elem}, P::InfPlc) -> Int\n\nThis function returns the sign of a at the place P. The value is 1 if the sign is positive and -1 if the sign is negative.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#Nemo.ispositive-Tuple{Union{FacElem{nf_elem,AnticNumberField}, nf_elem},InfPlc}","page":"Factored Elements","title":"Nemo.ispositive","text":"ispositive(a::nf_elem, P::InfPlc)          -> Bool\nispositive(a::FacElem{nf_elem}, P::InfPlc) -> Bool\n\nReturns whether the element a is positive at the embedding corresponding to P. The place P must be real.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#Nemo.ispositive-Tuple{Union{FacElem{nf_elem,AnticNumberField}, nf_elem},Array{InfPlc,1}}","page":"Factored Elements","title":"Nemo.ispositive","text":"ispositive(a::nf_elem, l::Vector{InfPlc})          -> Bool\nispositive(a::FacElem{nf_elem}, l::Vector{InfPlc}) -> Bool\n\nReturns whether the element a is positive at the embeddings corresponding to the real places of l.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#Hecke.istotally_positive-Tuple{Union{FacElem{nf_elem,AnticNumberField}, nf_elem}}","page":"Factored Elements","title":"Hecke.istotally_positive","text":"istotally_positive(a::nf_elem)          -> Bool\nistotally_positive(a::FacElem{nf_elem}) -> Bool\n\nReturns whether the element a is totally positive, that is, whether it is positive at all places of the ambient number field.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/","page":"Factored Elements","title":"Factored Elements","text":"valuation(::FacElem{nf_elem,AnticNumberField}, ::NfAbsOrdIdl{AnticNumberField,nf_elem})\nvaluation(::FacElem{NfAbsOrdIdl{AnticNumberField,nf_elem},Hecke.NfAbsOrdIdlSet{AnticNumberField,nf_elem}}, ::NfAbsOrdIdl{AnticNumberField,nf_elem})\nevaluate_mod(::FacElem{nf_elem,AnticNumberField}, ::NfOrdFracIdl)\nreduce_ideal(::FacElem{NfAbsOrdIdl{AnticNumberField,nf_elem},Hecke.NfAbsOrdIdlSet{AnticNumberField,nf_elem}})\nmodular_proj(::FacElem{nf_elem,AnticNumberField}, ::Hecke.modular_env)","category":"page"},{"location":"Hecke/docs/src/FacElem/#AbstractAlgebra.Generic.valuation-Tuple{FacElem{nf_elem,AnticNumberField},NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Factored Elements","title":"AbstractAlgebra.Generic.valuation","text":"valuation(a::FacElem{nf_elem, AnticNumberField}, P::NfOrdIdl) -> fmpz\n\nThe valuation of a at P.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#AbstractAlgebra.Generic.valuation-Tuple{FacElem{NfAbsOrdIdl{AnticNumberField,nf_elem},Hecke.NfAbsOrdIdlSet{AnticNumberField,nf_elem}},NfAbsOrdIdl{AnticNumberField,nf_elem}}","page":"Factored Elements","title":"AbstractAlgebra.Generic.valuation","text":"valuation(A::FacElem{NfOrdFracIdl, NfOrdFracIdlSet}, p::NfOrdIdl)\nvaluation(A::FacElem{NfOrdIdl, NfOrdIdlSet}, p::NfOrdIdl)\n\nThe valuation of A at P.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#Hecke.evaluate_mod-Tuple{FacElem{nf_elem,AnticNumberField},Hecke.NfAbsOrdFracIdl{AnticNumberField,nf_elem}}","page":"Factored Elements","title":"Hecke.evaluate_mod","text":"evaluate_mod(a::FacElem{nf_elem, AnticNumberField}, B::NfOrdFracIdl) -> nf_elem\n\nEvaluates a using CRT and small primes. Assumes that the ideal generated by a is in fact B. Useful in cases where a has huge exponents, but the evaluated element is actually \"small\".\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#Hecke.reduce_ideal-Tuple{FacElem{NfAbsOrdIdl{AnticNumberField,nf_elem},Hecke.NfAbsOrdIdlSet{AnticNumberField,nf_elem}}}","page":"Factored Elements","title":"Hecke.reduce_ideal","text":"reduce_ideal(A::FacElem{NfOrdIdl}) -> NfOrdIdl, FacElem{nf_elem}\n\nComputes B and alpha in factored form, such that alpha B = A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#Hecke.modular_proj-Tuple{FacElem{nf_elem,AnticNumberField},Hecke.modular_env}","page":"Factored Elements","title":"Hecke.modular_proj","text":"modular_proj(a::FacElem{nf_elem, AnticNumberField}, me::modular_env) -> Array{fq_nmod, 1}\n\nGiven an algebraic number a in factored form and data \\code{me} as computed by \\code{modular_init}, project a onto the residue class fields.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#Miscellaneous","page":"Factored Elements","title":"Miscellaneous","text":"","category":"section"},{"location":"Hecke/docs/src/FacElem/","page":"Factored Elements","title":"Factored Elements","text":"max_exp(a::FacElem)\nmin_exp(a::FacElem)\nmaxabs_exp(a::FacElem)","category":"page"},{"location":"Hecke/docs/src/FacElem/#Hecke.max_exp-Tuple{FacElem}","page":"Factored Elements","title":"Hecke.max_exp","text":"max_exp(a::FacElem)\n\nFinds the largest exponent in the factored element a.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#Hecke.min_exp-Tuple{FacElem}","page":"Factored Elements","title":"Hecke.min_exp","text":"min_exp(a::FacElem)\n\nFinds the smallest exponent in the factored element a.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/FacElem/#Hecke.maxabs_exp-Tuple{FacElem}","page":"Factored Elements","title":"Hecke.maxabs_exp","text":"maxabs_exp(a::FacElem)\n\nFinds the largest exponent by absolute value in the factored element a.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/internal/","page":"-","title":"-","text":"CurrentModule = Hecke","category":"page"},{"location":"Hecke/docs/src/number_fields/internal/","page":"-","title":"-","text":"Number fields, in Hecke, come in several different types:","category":"page"},{"location":"Hecke/docs/src/number_fields/internal/","page":"-","title":"-","text":"AnticNumberField: a finite simple extension of the rational numbers Q\nNfAbsNS: a finite extension of Q given by several polynomials.","category":"page"},{"location":"Hecke/docs/src/number_fields/internal/","page":"-","title":"-","text":"We will refer to this as a non-simple field - even though mathematically  we can find a primitive elements.","category":"page"},{"location":"Hecke/docs/src/number_fields/internal/","page":"-","title":"-","text":"NfRel: a finite simple extension of a number field. This is   actually parametried by the (element) type of the coefficient field.  The complete type of an extension of an absolute field (AnticNumberField)  is NfRel{nf_elem}. The next extension thus will be  NfRel{NfRelElem{nf_elem}}.\nNfRelNS: extensions of number fields given by several polynomials.  This too will be refered to as a non-simple field.","category":"page"},{"location":"Hecke/docs/src/number_fields/internal/","page":"-","title":"-","text":"The simple types AnticNumberField and NfRel are also calle simple fields in the rest of this document, NfRel and NfRelNS are referred to as relative extensions while AnticNumberField and NfAbsNS are called absolute.","category":"page"},{"location":"Hecke/docs/src/number_fields/internal/","page":"-","title":"-","text":"Internally, simple fields are essentially just (univariate) polynomial quotients in a dense representation, while non-simple fields are multivariate quotient rings, thus have a sparse presentation. In general, simple fields allow much faster arithmetic, while  the non-simple fields give easy access to large degree fields.","category":"page"},{"location":"Hecke/docs/src/number_fields/internal/#Absolute-Simple-Fields","page":"-","title":"Absolute Simple Fields","text":"","category":"section"},{"location":"Hecke/docs/src/number_fields/internal/","page":"-","title":"-","text":"The most basic number field type is that of AnticNumberField. Internally this is essentially represented as a unvariate quotient with the arithmetic provided by the antic-c-library and implemented in Nemo.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue_rings/","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/residue_rings/#Residue-Ring-Interface","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/residue_rings/","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"Residue rings (currently a quotient ring modulo a principal ideal) are supported in AbstractAlgebra.jl, at least for Euclidean base rings. In addition to the standard Ring interface, some additional functions are required to be present for residue rings.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue_rings/#Types-and-parents","page":"Residue Ring Interface","title":"Types and parents","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/residue_rings/","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"AbstractAlgebra provides four abstract types for residue rings and their elements:","category":"page"},{"location":"AbstractAlgebra/docs/src/residue_rings/","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"ResRing{T} is the abstract type for residue ring parent types\nResField{T} is the abstract type for residue rings known to be fields\nResElem{T} is the abstract type for types of elements of residue rings (residues)\nResFieldElem{T} is the abstract type for types of elements of residue fields","category":"page"},{"location":"AbstractAlgebra/docs/src/residue_rings/","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"We have that ResRing{T} <: AbstractAlgebra.Ring and  ResElem{T} <: AbstractAlgebra.RingElem.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue_rings/","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"Note that these abstract types are parameterised. The type T should usually be the type of elements of the base ring of the residue ring/field.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue_rings/","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"If the parent object for a residue ring has type MyResRing and residues in that ring have type MyRes then one would have:","category":"page"},{"location":"AbstractAlgebra/docs/src/residue_rings/","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"MyResRing <: ResRing{BigInt}\nMyRes <: ResElem{BigInt}","category":"page"},{"location":"AbstractAlgebra/docs/src/residue_rings/","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"Residue rings should be made unique on the system by caching parent objects (unless an optional cache parameter is set to false). Residue rings should at least be distinguished based on their base ring and modulus (the principal ideal one is taking a quotient of the base ring by).","category":"page"},{"location":"AbstractAlgebra/docs/src/residue_rings/","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"See src/generic/GenericTypes.jl for an example of how to implement such a cache (which usually makes use of a dictionary).","category":"page"},{"location":"AbstractAlgebra/docs/src/residue_rings/#Required-functionality-for-residue-rings","page":"Residue Ring Interface","title":"Required functionality for residue rings","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/residue_rings/","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"In addition to the required functionality for the Ring interface the Residue Ring interface has the following required functions.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue_rings/","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"We suppose that R is a fictitious base ring, m is an element of that ring, and that S is the residue ring (quotient ring) R(m) with parent object S of type MyResRing{T}. We also assume the residues r pmodm in the residue ring have type MyRes{T}, where T is the type of elements of the base ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue_rings/","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"Of course, in practice these types may not be parameterised, but we use parameterised types here to make the interface clearer.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue_rings/","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"Note that the type T must (transitively) belong to the abstract type RingElem.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue_rings/#Data-type-and-parent-object-methods","page":"Residue Ring Interface","title":"Data type and parent object methods","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/residue_rings/","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"modulus(S::MyResRing{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/residue_rings/","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"Return the modulus of the given residue ring, i.e. if the residue ring S was specified to be R(m), return m.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue_rings/","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/residue_rings/","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"julia> R, x = PolynomialRing(QQ, \"x\")\n(Univariate Polynomial Ring in x over Rationals, x)\n\njulia> S = ResidueRing(R, x^3 + 3x + 1)\nResidue ring of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1\n\njulia> m = modulus(S)\nx^3 + 3*x + 1\n","category":"page"},{"location":"AbstractAlgebra/docs/src/residue_rings/#Basic-manipulation-of-rings-and-elements","page":"Residue Ring Interface","title":"Basic manipulation of rings and elements","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/residue_rings/","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"data(f::MyRes{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/residue_rings/","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"Given a residue r pmodm, represented as such, return r.","category":"page"},{"location":"AbstractAlgebra/docs/src/residue_rings/","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/residue_rings/","page":"Residue Ring Interface","title":"Residue Ring Interface","text":"julia> R, x = PolynomialRing(QQ, \"x\")\n(Univariate Polynomial Ring in x over Rationals, x)\n\njulia> S = ResidueRing(R, x^3 + 3x + 1)\nResidue ring of Univariate Polynomial Ring in x over Rationals modulo x^3 + 3*x + 1\n\njulia> f = S(x^2 + 2)\nx^2 + 2\n\njulia> d = data(f)\nx^2 + 2\n","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/#The-type-system","page":"The type system","title":"The type system","text":"","category":"section"},{"location":"Nemo/docs/src/developer/typesystem/#Use-of-Julia-types-in-Nemo","page":"The type system","title":"Use of Julia types in Nemo","text":"","category":"section"},{"location":"Nemo/docs/src/developer/typesystem/#Concrete-and-abstract-types","page":"The type system","title":"Concrete and abstract types","text":"","category":"section"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"Julia does not provide a traditional class/inheritance approach to programming. Instead, the basic unit of its object oriented approach is the type definition (struct and mutable struct) and inheritance exists only on the function side of the language rather than data side. Julia provides a rich system of abstract types and unions on the data side and multimethods on the function side to effect this.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"For example Julia's Number type is an abstract type containing all concrete types that behave like numbers, e.g. Int64, Float64, and so on.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"Abstract types can also belong to other abstract types, forming a tree of abstract types.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"In Nemo the most important abstract types are Ring and Field, with the latter belonging to the former so that all fields are rings, and the abstract types RingElem and FieldElem for the objects that represent elements of rings and fields, again with the latter abstract type belonging to the former.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"Because this hierarchy of abstract types must form a tree, Julia is strictly speaking single inheritance, as each concrete and abstract type can belong to at most one other abstract type. For example, one could not have a diamond of abstract types with ExactField belonging to both Field and ExactRing.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/#Recovering-aspects-of-multiple-inheritance-in-Nemo","page":"The type system","title":"Recovering aspects of multiple inheritance in Nemo","text":"","category":"section"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"Various possibilities exist to get around the limitation that abstract types must form a 'tree' in Nemo and AbstractAlgebra.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"One such possibility is union types. If a function should accept one of a number of concrete or abstract types that can't all be made to belong to a single abstract type due to this limitation then one can use a union type.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"For example, Nemo defines RingElement to be a union of RingElem and all the Julia standard types which behave like ring elements, e.g. all Integer types and types of rationals with Integer components.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"A second feature we make use of in Nemo is parameterised types. Each concrete and abstract type can take one or more parameters. These parameter can be any other type, either concrete or abstract. For example, in Julia Rational{T} is for rationals with numerator and denominator of type T.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"A great deal of control over parameterised types is possible, e.g. one can restrict the type parameter T using a where clause, e.g. to write a function that accepts all rational types with integer components of the same type one can use the type Rational{T} where T <: Integer.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"Nemo makes use of such parameterised types for generic ring constructions such as generic polynomial rings and matrices over a given base ring. The type of the elements of the base ring is substituted for the parameter T in any concrete instantiation of the types Poly{T} and Mat{T}, which are defined in AbstractAlgebra in src/generic/GenericTypes.jl.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"The totality of all univariate polynomial types, including those of generic Poly{T} types and those coming from C libraries (such as fmpz_poly), is represented by the abstract type PolyElem{T} which in turn belongs to RingElem, both defined in AbstractAlgebra in src/AbstractTypes.jl.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"Similarly, the totality of all matrix types, including explicit C types like fmpz_mat and the generic Mat{T} types is given by the abstract type MatElem{T}, again defined in AbstractAlgebra in src/AbstractTypes.jl.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"This hierarchy of types allows one to write functions at any level, e.g. for all univariate polynomial types, just those with a given base type T, or for a specific concrete type corresponding to just one kind of univariate polynomial.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"A third possibility to get around the single inheritance limitation of Julia is type traits. There is currently no explicit compiler/language support for traits, however various implementations exist that make use of type parameters in tricky ways. This allows one to add 'traits' to types, so long as those traits can be expressed as types. In this way, types can have multiple 'properties' at the same time, instead of belonging to just a single abstract type.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"Nemo does not currently use type traits, though the map types in Nemo do make use of a custom analogue of this.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"Note that unlike class based systems that dispatch on the type of a (sometimes implicit) this or self parameter, Julia methods dispatch on the type of all arguments. This is a natural fit for mathematics where all sorts of ad hoc left and right operations may be required.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/#Encapsulation,-maps-and-runtime-flags","page":"The type system","title":"Encapsulation, maps and runtime flags","text":"","category":"section"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"One limitation of the Julia approach is that the type of an object cannot be changed at runtime. For example one might like to insist that a given ring is in fact a field. There are three standard ways to handle this in Julia.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"The first approach is to encapsulate the object in another object which does have the desired type. The second approach is to map the object to a different one of the required type (e.g. by applying a morphism). The third approach is to introduce data fields in the original type which can be changed at runtime, unlike its type. All three approaches come with downsides. ","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"Encapsulation can be time consuming for the developer as methods which applied to the original object do not automatically apply to the encapsulated object. One can write methods which do, but this is not automatic.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"Application of a map may come with a performance penalty and may be difficult for the user to navigate. Moreover, mutation of the resulting object does not result in mutation of the original object.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"The third option of adding runtime data fields essentially takes one back to writing a (possibly bug ridden) interpreter. It relies on the developer  implementing outer methods that make use of hand written control statements to determine which of a range of inner methods should be applied to the object. This misses the benefits of one of the main defining features of Julia, namely its multimethod system and can also make introspection more difficult.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"Nemo does not apply any of these three approaches widely at present, though information which can only be known at runtime such as whether a ring is Euclidean will eventually have to be encoded using one of these three methods.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/#Nemo's-custom-map-types","page":"The type system","title":"Nemo's custom map types","text":"","category":"section"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"It makes sense that map types in Nemo should be parameterised by the element types of both the domain and codomain of the map, and of course all maps in the system should somehow belong to an abstract type Map.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"This leads one to consider a two parameter system of types Map{D, C} where D and C are the domain and codomain types respectively.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"One may also wish to implement various types of map, e.g. linear maps (where the map contains a matrix representing the map) or functional maps (where the map is implemented by a Julia function) and so on. Notionally one imagines doing this with a hierarchy of two parameter abstract types all ultimately belonging to Map{D, C} as the root of the tree.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"This approach begins to break down when constructions from homological algebra begin to be applied to maps. In such cases, the maps themselves are the object of study and functions may be applied to maps to produce other maps.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"The simplest such function is composition. In a system where composition of maps always results in a map of the same type, no problem arises with the straightforward approach outlined above.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"However, for various reasons (including performance) it may not be desirable or even possible to construct a composition of two given maps using the same representation as the original maps. This means that the result of composing two maps of the same type may be a map of a different type, e.g. in the worst case a general composition type.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"This problem makes many homological and category theoretic operations on maps difficult or impossible to implement.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"Other operations which may be desirable to implement are caching of maps (e.g. where the map is extremely time consuming to compute, such as discrete logarithms) and attaching category theoretic information to maps. Such operations can be effected by encapsulating existing maps in objects containing the extra information, e.g. a cache or a category. However all the methods that applied to the original map objects now no longer apply to the encapsulated objects.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"To work around these limitations Nemo implements a four parameter Map type, Map{D, C, T, U}.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"The first two parameters are the domain and codomain types as discussed above.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"The parameter T is a \"map class\" which is itself an abstract type existing in a hierarchy of abstract types. This parameter is best thought of as a trait, independent of the hierarchy of abstract types belonging to Map, giving additional flexibility to the map types in the system.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"For example, T may be set to LinearMap or FunctionalMap. This may be useful if one wishes to distinguish maps in other ways, e.g. whether they are homomorphisms, isomorphisms, maps with section or retraction etc. As usual, offering traits partially gets around the single inheritance problem.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"The final parameter U is used to allow maps of a given type U to be composed and still result in a map of type U, even though the concrete type of the composition is different to that of the original maps. Methods can be written for all maps of type U by matching this parameter, rather than matching on the concrete type U of the original maps.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"For example, two maps with concrete type MyRingHomomorphism would belong to Map{D, C, T, MyRingHomomorphism} as would any composition of such maps, even if the concrete type of the composition was not a MyRingHomomorphism.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"Naturally four parameter types are rather unwieldy and so various helper functions are provided to compute four parameter map types. In the first instance one still has the type Map{D, C} which will give the union of all map types whose first two parameters are D and C, and where the remaining two parameters are arbitrary.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"However one can also pass a map class or a concrete type U to a Map function to compute the class of all maps of the given map class or type.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"For example, to write a function which accepts all maps of \"type\" MyRingHomomorphism, including all compositions of such maps, one inserts Map(MyRingHomomorphism) in place of the type, e.g.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"function myfun(f::Map(MyRingHomomorphism))","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"Note the parentheses here, rather than curly braces; it's a function to compute a type! Now the function myfun will accept any map type whose fourth parameter U is set to MyRingHomomorphism.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"This four parameter system is flexible, but may need to be expanded in the future. For example it may be useful to have more than one trait T. This could be achieved either by making T a tuple of traits or by introducing a parameterised MapTrait type which can be placed at that location. Naturally the Map functions for computing the four parameter types will have to be similarly expanded to make it easier for the user.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"The map type system is currently considered experimental and our observation so far is that it is not intuitive for developers.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/#Type-hierarchy-diagram","page":"The type system","title":"Type hierarchy diagram","text":"","category":"section"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"The most important abstract types in the system are the element types. Their hierarchy is shown in the following diagram.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"(Image: alt text)","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"Most of the element types have a corresponding parent abstract type. These are shown in the following diagram.","category":"page"},{"location":"Nemo/docs/src/developer/typesystem/","page":"The type system","title":"The type system","text":"(Image: alt text)","category":"page"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/finitefield/#Finite-fields","page":"Finite fields","title":"Finite fields","text":"","category":"section"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"Finite fields are provided in Nemo by Flint. This allows construction of finite fields of any characteristic and degree for which there are Conway polynomials. It is also possible for the user to specify their own irreducible polynomial generating a finite field.","category":"page"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"Finite fields are constructed using the FlintFiniteField function. However, for convenience we define","category":"page"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"FiniteField = FlintFiniteField","category":"page"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"so that finite fields can be constructed using FiniteField rather than FlintFiniteField. Note that this is the name of the constructor, but not of finite field type.","category":"page"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"The types of finite field elements in Nemo are given in the following table, along with the libraries that provide them and the associated types of the parent objects.","category":"page"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"Library Field Element type Parent type\nFlint mathbbF_p^n (small p) fq_nmod FqNmodFiniteField\nFlint mathbbF_p^n (large p) fq FqFiniteField","category":"page"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"The only difference between the fq and fq_nmod types is the representation. The former is for finite fields with multiprecision characteristic and the latter is for characteristics that fit into a single unsigned machine word. The FlintFiniteField constructor automatically picks the correct representation for the user, and so the average user doesn't need to know about the actual types.","category":"page"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"All the finite field types belong to the FinField abstract type and the finite field element types belong to the FinFieldElem abstract type.","category":"page"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"Since all the functionality for the fq finite field type is identical to that provided for the fq_nmod finite field type, we simply document the former.","category":"page"},{"location":"Nemo/docs/src/finitefield/#Finite-field-functionality","page":"Finite fields","title":"Finite field functionality","text":"","category":"section"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"Finite fields in Nemo implement the entire AbstractAlgebra.jl field interface.","category":"page"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/fields","category":"page"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"Below we describe the functionality that is provided in addition to this interface.","category":"page"},{"location":"Nemo/docs/src/finitefield/#Constructors","page":"Finite fields","title":"Constructors","text":"","category":"section"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"In order to construct finite field elements in Nemo, one must first construct the finite field itself. This is accomplished with one of the following constructors.","category":"page"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"FlintFiniteField","category":"page"},{"location":"Nemo/docs/src/finitefield/#Nemo.FlintFiniteField","page":"Finite fields","title":"Nemo.FlintFiniteField","text":"FlintFiniteField(char::Union{fmpz, Integer}, deg::Int, s::AbstractString; cached = true)\n\nReturns a tuple S x consisting of a finite field parent object S and generator x for the finite field of the given characteristic and degree. The string s is used to designate how the finite field generator will be printed. The characteristic must be prime. When a Conway polynomial is known, the field is generated using the Conway polynomial. Otherwise a random sparse, irreducible polynomial is used. The generator of the field is guaranteed to be a multiplicative generator only if the field is generated by a Conway polynomial. We require the degree to be positive.\n\n\n\nFlintFiniteField(pol::Union{fmpz_mod_poly, gfp_fmpz_poly}, s::AbstractString; cached = true, check = true)\n\nReturns a tuple S x consisting of a finite field parent object S and generator x for the finite field over F_p defined by the given polynomial, i.e. mathbbF_pt(pol). The characteristic is specified by the modulus of pol. The polynomial is required to be irreducible, but this is not checked. The base ring of the polynomial is required to be a field, which is checked by default. Use check = false to disable the check. The string s is used to designate how the finite field generator will be printed. The generator will not be multiplicative in general.\n\n\n\n","category":"function"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"Here are some examples of creating finite fields and making use of the resulting parent objects to coerce various elements into those fields.","category":"page"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"Examples","category":"page"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"R, x = FiniteField(7, 3, \"x\")\nS, y = FiniteField(ZZ(12431351431561), 2, \"y\")\nT, t = PolynomialRing(ResidueRing(ZZ, 12431351431561), \"t\")\nU, z = FiniteField(t^2 + 7, \"z\")\n\na = R(5)\nb = R(x)\nc = S(ZZ(11))\nd = U(7)","category":"page"},{"location":"Nemo/docs/src/finitefield/#Basic-manipulation","page":"Finite fields","title":"Basic manipulation","text":"","category":"section"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"gen(::FqFiniteField)","category":"page"},{"location":"Nemo/docs/src/finitefield/#AbstractAlgebra.gen-Tuple{FqFiniteField}","page":"Finite fields","title":"AbstractAlgebra.gen","text":"gen(a::FqFiniteField)\n\nReturn the generator of the finite field. Note that this is only guaranteed to be a multiplicative generator if the finite field is generated by a Conway polynomial automatically.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"isgen(::fq)","category":"page"},{"location":"Nemo/docs/src/finitefield/#AbstractAlgebra.isgen-Tuple{fq}","page":"Finite fields","title":"AbstractAlgebra.isgen","text":"isgen(a::fq)\n\nReturn true if the given finite field element is the generator of the finite field, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"coeff(::fq, ::Int)","category":"page"},{"location":"Nemo/docs/src/finitefield/#AbstractAlgebra.Generic.coeff-Tuple{fq,Int64}","page":"Finite fields","title":"AbstractAlgebra.Generic.coeff","text":"coeff(x::fq, n::Int)\n\nReturn the degree n coefficient of the polynomial representing the given finite field element.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"degree(::FqFiniteField)","category":"page"},{"location":"Nemo/docs/src/finitefield/#AbstractAlgebra.Generic.degree-Tuple{FqFiniteField}","page":"Finite fields","title":"AbstractAlgebra.Generic.degree","text":"degree(a::FqFiniteField)\n\nReturn the degree of the given finite field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"characteristic(::FqFiniteField)","category":"page"},{"location":"Nemo/docs/src/finitefield/#AbstractAlgebra.Generic.characteristic-Tuple{FqFiniteField}","page":"Finite fields","title":"AbstractAlgebra.Generic.characteristic","text":"characteristic(a::FqFiniteField)\n\nReturn the characteristic of the given finite field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"order(::FqFiniteField)","category":"page"},{"location":"Nemo/docs/src/finitefield/#AbstractAlgebra.Generic.order-Tuple{FqFiniteField}","page":"Finite fields","title":"AbstractAlgebra.Generic.order","text":"order(a::FqFiniteField)\n\nReturn the order, i.e. the number of elements in, the given finite field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"Examples","category":"page"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"R, x = FiniteField(ZZ(7), 5, \"x\")\n\nc = gen(R)\nd = characteristic(R)\nf = order(R)\ng = degree(R)\nn = isgen(x)","category":"page"},{"location":"Nemo/docs/src/finitefield/#Special-functions","page":"Finite fields","title":"Special functions","text":"","category":"section"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"Various special functions with finite field specific behaviour are defined.","category":"page"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"tr(::fq)","category":"page"},{"location":"Nemo/docs/src/finitefield/#LinearAlgebra.tr-Tuple{fq}","page":"Finite fields","title":"LinearAlgebra.tr","text":"tr(x::fq)\n\nReturn the trace of x. This is an element of mathbbF_p, but the value returned is this value embedded in the original finite field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"norm(::fq)","category":"page"},{"location":"Nemo/docs/src/finitefield/#LinearAlgebra.norm-Tuple{fq}","page":"Finite fields","title":"LinearAlgebra.norm","text":"norm(x::fq)\n\nReturn the norm of x. This is an element of mathbbF_p, but the value returned is this value embedded in the original finite field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"frobenius(::fq, ::Int)","category":"page"},{"location":"Nemo/docs/src/finitefield/#Nemo.frobenius-Tuple{fq,Int64}","page":"Finite fields","title":"Nemo.frobenius","text":"frobenius(x::fq, n = 1)\n\nReturn the iterated Frobenius sigma_p^n(x) where sigma_p is the Frobenius map sending the element a to a^p in the finite field of characteristic p. By default the Frobenius map is applied n = 1 times if n is not specified.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"pth_root(::fq)","category":"page"},{"location":"Nemo/docs/src/finitefield/#Nemo.pth_root-Tuple{fq}","page":"Finite fields","title":"Nemo.pth_root","text":"pth_root(x::fq)\n\nReturn the p-th root of x in the finite field of characteristic p. This is the inverse operation to the Frobenius map sigma_p.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"Examples","category":"page"},{"location":"Nemo/docs/src/finitefield/","page":"Finite fields","title":"Finite fields","text":"R, x = FiniteField(ZZ(7), 5, \"x\")\n\na = x^4 + 3x^2 + 6x + 1\n\nb = tr(a)\nc = norm(a)\nd = frobenius(a)\nf = frobenius(a, 3)\ng = pth_root(a)","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/acb/#Complex-balls","page":"Complex balls","title":"Complex balls","text":"","category":"section"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Arbitrary precision complex ball arithmetic is supplied by Arb which provides a ball representation which tracks error bounds rigorously. Complex numbers are  represented in rectangular form a+bi where ab are arb balls.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"The Arb complex field is constructed using the AcbField constructor. This constructs the parent object for the Arb complex field.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"We define","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"ComplexField = AcbField","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"so that one can construct the Arb complex field parent using ComplexField instead of AcbField.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"The types of complex boxes in Nemo are given in the following table, along with the libraries that provide them and the associated types of the parent objects.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Library Field Element type Parent type\nArb mathbbC (boxes) acb AcbField","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"All the complex field types belong to the Field abstract type and the types of elements in this field, i.e. complex boxes in this case, belong to the FieldElem abstract type.","category":"page"},{"location":"Nemo/docs/src/acb/#Complex-ball-functionality","page":"Complex balls","title":"Complex ball functionality","text":"","category":"section"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"The complex balls in Nemo implement the AbstractAlgebra.jl field interface.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/fields","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Below, we document the additional functionality provided for complex balls.","category":"page"},{"location":"Nemo/docs/src/acb/#Complex-field-constructors","page":"Complex balls","title":"Complex field constructors","text":"","category":"section"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"In order to construct complex boxes in Nemo, one must first construct the Arb complex field itself. This is accomplished with the following constructor.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"AcbField(prec::Int)","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Return the Arb complex field with precision in bits prec used for operations on interval midpoints. The precision used for interval radii is a fixed implementation-defined constant (30 bits).","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Here is an example of creating an Arb complex field and using the resulting parent object to coerce values into the resulting field.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"CC = ComplexField(64)\n\na = CC(\"0.25\")\nb = CC(\"0.1\")\nc = CC(0.5)\nd = CC(12)","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Note that whilst one can coerce double precision floating point values into an Arb complex field, unless those values can be represented exactly in double precision the resulting ball can't be any more precise than the double precision supplied.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"If instead, values can be represented precisely using decimal arithmetic then one can supply them to Arb using a string. In this case, Arb will store them to the precision specified when creating the Arb complex field.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"If the values can be stored precisely as a binary floating point number, Arb will store the values exactly. See the function isexact below for more information.","category":"page"},{"location":"Nemo/docs/src/acb/#Constructors","page":"Complex balls","title":"Constructors","text":"","category":"section"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"onei(::AcbField)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.onei-Tuple{AcbField}","page":"Complex balls","title":"Nemo.onei","text":"onei(r::AcbField)\n\nReturn exact one times i in the given Arb complex field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"CC = ComplexField(64)\n\nc = onei(CC)","category":"page"},{"location":"Nemo/docs/src/acb/#Basic-functionality","page":"Complex balls","title":"Basic functionality","text":"","category":"section"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"The following basic functionality is provided by the default Arb complex field implementation in Nemo, to support construction of generic rings over complex fields. Any custom complex field implementation in Nemo should provide analogues of these functions along with the usual arithmetic operations.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"parent_type(::Type{acb})","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Gives the type of the parent object of an Arb complex field element.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"elem_type(R::AcbField)","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Given the parent object for an Arb complex field, return the type of elements of the field.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"mul!(c::acb, a::acb, b::acb)","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Multiply a by b and set the existing Arb complex field element c to the result. This function is provided for performance reasons as it saves allocating a new object for the result and eliminates associated garbage collection.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"addeq!(c::acb, a::acb)","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"In-place addition adds a to c and sets c to the result. This function is provided for performance reasons as it saves allocating a new object for the result and eliminates associated garbage collection.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"deepcopy(a::acb)","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Return a copy of the Arb complex field element a, recursively copying the internal data. Arb complex field elements are mutable in Nemo so a shallow copy is not sufficient.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Given the parent object R for an Arb complex field, the following coercion functions are provided to coerce various elements into the Arb complex field. Developers provide these by overloading the call operator for the complex field parent objects.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"R()","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Coerce zero into the Arb complex field.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"R(n::Integer)\nR(f::fmpz)\nR(q::fmpq)","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Coerce an integer or rational value into the Arb complex field.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"R(f::Float64)\nR(f::BigFloat)","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Coerce the given floating point number into the Arb complex field.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"R(f::AbstractString)\nR(f::AbstractString, g::AbstractString)","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Coerce the decimal number, given as a string, into the Arb complex field. In each case f is the real part and g is the imaginary part.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"R(f::arb)","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Coerce the given Arb real ball into the Arb complex field.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"R(f::acb)","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Take an Arb complex field element that is already in an Arb field and simply return it. A copy of the original is not made.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Here are some examples of coercing elements into the Arb complex field.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"RR = RealField(64)\nCC = ComplexField(64)\n\na = CC(3)\nb = CC(QQ(2,3))\nc = CC(\"3 +/- 0.0001\")\nd = CC(\"-1.24e+12345\")\nf = CC(\"nan +/- inf\")\ng = CC(RR(3))","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"In addition to the above, developers of custom complex field types must ensure that they provide the equivalent of the function base_ring(R::AcbField) which should return Union{}. In addition to this they should ensure that each complex field element contains a field parent specifying the parent object of the complex field element, or at least supply the equivalent of the function parent(a::acb) to return the parent object of a complex field element.","category":"page"},{"location":"Nemo/docs/src/acb/#Basic-manipulation","page":"Complex balls","title":"Basic manipulation","text":"","category":"section"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"isfinite(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.isfinite-Tuple{acb}","page":"Complex balls","title":"Base.isfinite","text":"isfinite(x::acb)\n\nReturn true if x is finite, i.e. its real and imaginary parts have finite midpoint and radius, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"isexact(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.isexact-Tuple{acb}","page":"Complex balls","title":"Nemo.isexact","text":"isexact(x::acb)\n\nReturn true if x is exact, i.e. has its real and imaginary parts have zero radius, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"isint(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.isint-Tuple{acb}","page":"Complex balls","title":"Nemo.isint","text":"isint(x::acb)\n\nReturn true if x is an exact integer, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"isreal(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.isreal-Tuple{acb}","page":"Complex balls","title":"Base.isreal","text":"isreal(x::acb)\n\nReturn true if x is purely real, i.e. having zero imaginary part, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"real(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.real-Tuple{acb}","page":"Complex balls","title":"Base.real","text":"real(x::acb)\n\nReturn the real part of x as an arb.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"imag(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.imag-Tuple{acb}","page":"Complex balls","title":"Base.imag","text":"imag(x::acb)\n\nReturn the imaginary part of x as an arb.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"accuracy_bits(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.accuracy_bits-Tuple{acb}","page":"Complex balls","title":"Nemo.accuracy_bits","text":"accuracy_bits(x::acb)\n\nReturn the relative accuracy of x measured in bits, capped between typemax(Int) and -typemax(Int).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"CC = ComplexField(64)\n\na = CC(\"1.2 +/- 0.001\")\nb = CC(3)\n\nisreal(a)\nisfinite(b)\nisint(b)\nc = real(a)\nd = imag(b)\nf = accuracy_bits(a)","category":"page"},{"location":"Nemo/docs/src/acb/#Containment","page":"Complex balls","title":"Containment","text":"","category":"section"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"It is often necessary to determine whether a given exact value or box is contained in a given complex box or whether two boxes overlap. The following functions are provided for this purpose.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"overlaps(::acb, ::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.overlaps-Tuple{acb,acb}","page":"Complex balls","title":"Nemo.overlaps","text":"overlaps(x::acb, y::acb)\n\nReturns true if any part of the box x overlaps any part of the box y, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"contains(::acb, ::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.contains-Tuple{acb,acb}","page":"Complex balls","title":"Base.contains","text":"contains(x::acb, y::acb)\n\nReturns true if the box x contains the box y, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"contains(::acb, ::Integer)\ncontains(::acb, ::fmpz)\ncontains(::acb, ::fmpq)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.contains-Tuple{acb,Integer}","page":"Complex balls","title":"Base.contains","text":"contains(x::acb, y::Integer)\n\nReturns true if the box x contains the given integer value, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/#Base.contains-Tuple{acb,fmpz}","page":"Complex balls","title":"Base.contains","text":"contains(x::acb, y::fmpz)\n\nReturns true if the box x contains the given integer value, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/#Base.contains-Tuple{acb,fmpq}","page":"Complex balls","title":"Base.contains","text":"contains(x::acb, y::fmpq)\n\nReturns true if the box x contains the given rational value, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"The following functions are also provided for determining if a box intersects a certain part of the complex number plane.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"contains_zero(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.contains_zero-Tuple{acb}","page":"Complex balls","title":"Nemo.contains_zero","text":"contains_zero(x::acb)\n\nReturns true if the box x contains zero, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"CC = ComplexField(64)\nx = CC(\"1 +/- 0.001\")\ny = CC(\"3\")\n\noverlaps(x, y)\ncontains(x, y)\ncontains(y, 3)\ncontains(x, ZZ(1)//2)\ncontains_zero(x)","category":"page"},{"location":"Nemo/docs/src/acb/#Comparison","page":"Complex balls","title":"Comparison","text":"","category":"section"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Nemo provides a full range of comparison operations for Arb complex boxes. ","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"In addition to the standard comparisons, we introduce an exact equality. This is distinct from arithmetic equality implemented by ==, which merely compares up to the minimum of the precisions of its operands.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"isequal(::acb, ::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.isequal-Tuple{acb,acb}","page":"Complex balls","title":"Base.isequal","text":"isequal(x::acb, y::acb)\n\nReturn true if the boxes x and y are precisely equal, i.e. their real and imaginary parts have the same midpoints and radii.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"A full range of ad hoc comparison operators is provided. These are implemented directly in Julia, but we document them as though only == were provided.","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Function\n==(x::acb, y::Integer)\n==(x::Integer, y::acb)\n==(x::acb, y::fmpz)\n==(x::fmpz, y::acb)\n==(x::arb, y::fmpz)\n==(x::fmpz, y::arb)\n==(x::acb, y::Float64)\n==(x::Float64, y::acb)","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"CC = ComplexField(64)\nx = CC(\"1 +/- 0.001\")\ny = CC(\"3\")\nz = CC(\"4\")\n\nisequal(x, deepcopy(x))\nx == 3\nZZ(3) == z\nx != 1.23","category":"page"},{"location":"Nemo/docs/src/acb/#Absolute-value","page":"Complex balls","title":"Absolute value","text":"","category":"section"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"abs(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.abs-Tuple{acb}","page":"Complex balls","title":"Base.abs","text":"abs(x::acb)\n\nReturn the complex absolute value of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"CC = ComplexField(64)\nx = CC(\"-1 +/- 0.001\")\n\na = abs(x)","category":"page"},{"location":"Nemo/docs/src/acb/#Shifting","page":"Complex balls","title":"Shifting","text":"","category":"section"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"ldexp(x::acb, y::Int)\nldexp(x::acb, y::fmpz)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.Math.ldexp-Tuple{acb,Int64}","page":"Complex balls","title":"Base.Math.ldexp","text":"ldexp(x::acb, y::Int)\n\nReturn 2^yx. Note that y can be positive, zero or negative.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/#Base.Math.ldexp-Tuple{acb,fmpz}","page":"Complex balls","title":"Base.Math.ldexp","text":"ldexp(x::acb, y::fmpz)\n\nReturn 2^yx. Note that y can be positive, zero or negative.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"CC = ComplexField(64)\nx = CC(\"-3 +/- 0.001\")\n\na = ldexp(x, 23)\nb = ldexp(x, -ZZ(15))","category":"page"},{"location":"Nemo/docs/src/acb/#Miscellaneous-operations","page":"Complex balls","title":"Miscellaneous operations","text":"","category":"section"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"trim(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.trim-Tuple{acb}","page":"Complex balls","title":"Nemo.trim","text":"trim(x::acb)\n\nReturn an acb box containing x but which may be more economical, by rounding off insignificant bits from midpoints.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"unique_integer(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.unique_integer-Tuple{acb}","page":"Complex balls","title":"Nemo.unique_integer","text":"unique_integer(x::acb)\n\nReturn a pair where the first value is a boolean and the second is an fmpz integer. The boolean indicates whether the box x contains a unique integer. If this is the case, the second return value is set to this unique integer.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"conj(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.conj-Tuple{acb}","page":"Complex balls","title":"Base.conj","text":"conj(x::acb)\n\nReturn the complex conjugate of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"angle(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.angle-Tuple{acb}","page":"Complex balls","title":"Base.angle","text":"angle(x::acb)\n\nReturn the angle in radians that the complex vector x makes with the positive real axis in a counterclockwise direction.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"CC = ComplexField(64)\nx = CC(\"-3 +/- 0.001\", \"0.1\")\n\na = trim(x)\nb, c = unique_integer(x)\nd = conj(x)\nf = angle(x)","category":"page"},{"location":"Nemo/docs/src/acb/#Constants","page":"Complex balls","title":"Constants","text":"","category":"section"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"const_pi(::AcbField)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.const_pi-Tuple{AcbField}","page":"Complex balls","title":"Nemo.const_pi","text":"const_pi(r::AcbField)\n\nReturn pi = 314159ldots as an element of r.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"CC = ComplexField(200)\n\na = const_pi(CC)","category":"page"},{"location":"Nemo/docs/src/acb/#Mathematical-and-special-functions","page":"Complex balls","title":"Mathematical and special functions","text":"","category":"section"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Base.sqrt(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.sqrt-Tuple{acb}","page":"Complex balls","title":"Base.sqrt","text":"Base.sqrt(x::acb)\n\nReturn the square root of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"rsqrt(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.rsqrt-Tuple{acb}","page":"Complex balls","title":"Nemo.rsqrt","text":"rsqrt(x::acb)\n\nReturn the reciprocal of the square root of x, i.e. 1sqrtx.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"log(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.log-Tuple{acb}","page":"Complex balls","title":"Base.log","text":"log(x::acb)\n\nReturn the principal branch of the logarithm of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"log1p(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.log1p-Tuple{acb}","page":"Complex balls","title":"Base.log1p","text":"log1p(x::acb)\n\nReturn log(1+x), evaluated accurately for small x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Base.exp(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.exp-Tuple{acb}","page":"Complex balls","title":"Base.exp","text":"exp(x::acb)\n\nReturn the exponential of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"expm1(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.expm1-Tuple{acb}","page":"Complex balls","title":"Base.expm1","text":"expm1(x::acb)\n\nReturn exp(x)-1, evaluated accurately for small x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"exppii(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.exppii-Tuple{acb}","page":"Complex balls","title":"Nemo.exppii","text":"exppii(x::acb)\n\nReturn the exponential of pi i x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"root_of_unity(::AcbField, k::Int)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.root_of_unity-Tuple{AcbField,Int64}","page":"Complex balls","title":"Nemo.root_of_unity","text":"root_of_unity(C::AcbField, k::Int)\n\nReturn exp(2pi ik).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"sin(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.sin-Tuple{acb}","page":"Complex balls","title":"Base.sin","text":"sin(x::acb)\n\nReturn the sine of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"cos(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.cos-Tuple{acb}","page":"Complex balls","title":"Base.cos","text":"cos(x::acb)\n\nReturn the cosine of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"sinpi(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.Math.sinpi-Tuple{acb}","page":"Complex balls","title":"Base.Math.sinpi","text":"sinpi(x::acb)\n\nReturn the sine of pi x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"cospi(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.Math.cospi-Tuple{acb}","page":"Complex balls","title":"Base.Math.cospi","text":"cospi(x::acb)\n\nReturn the cosine of pi x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"tan(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.tan-Tuple{acb}","page":"Complex balls","title":"Base.tan","text":"tan(x::acb)\n\nReturn the tangent of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"cot(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.Math.cot-Tuple{acb}","page":"Complex balls","title":"Base.Math.cot","text":"cot(x::acb)\n\nReturn the cotangent of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"tanpi(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.tanpi-Tuple{acb}","page":"Complex balls","title":"Nemo.tanpi","text":"tanpi(x::acb)\n\nReturn the tangent of pi x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"cotpi(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.cotpi-Tuple{acb}","page":"Complex balls","title":"Nemo.cotpi","text":"cotpi(x::acb)\n\nReturn the cotangent of pi x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"sinh(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.sinh-Tuple{acb}","page":"Complex balls","title":"Base.sinh","text":"sinh(x::acb)\n\nReturn the hyperbolic sine of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"cosh(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.cosh-Tuple{acb}","page":"Complex balls","title":"Base.cosh","text":"cosh(x::acb)\n\nReturn the hyperbolic cosine of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"tanh(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.tanh-Tuple{acb}","page":"Complex balls","title":"Base.tanh","text":"tanh(x::acb)\n\nReturn the hyperbolic tangent of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"coth(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.Math.coth-Tuple{acb}","page":"Complex balls","title":"Base.Math.coth","text":"coth(x::acb)\n\nReturn the hyperbolic cotangent of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"atan(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.atan-Tuple{acb}","page":"Complex balls","title":"Base.atan","text":"atan(x::acb)\n\nReturn the arctangent of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"logsinpi(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.logsinpi-Tuple{acb}","page":"Complex balls","title":"Nemo.logsinpi","text":"logsinpi(x::acb)\n\nReturn logsin(pi x), constructed without branch cuts off the real line.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"gamma(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.gamma-Tuple{acb}","page":"Complex balls","title":"Nemo.gamma","text":"gamma(x::acb)\n\nReturn the Gamma function evaluated at x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"lgamma(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.lgamma-Tuple{acb}","page":"Complex balls","title":"Nemo.lgamma","text":"lgamma(x::acb)\n\nReturn the logarithm of the Gamma function evaluated at x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"rgamma(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.rgamma-Tuple{acb}","page":"Complex balls","title":"Nemo.rgamma","text":"rgamma(x::acb)\n\nReturn the reciprocal of the Gamma function evaluated at x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"digamma(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.digamma-Tuple{acb}","page":"Complex balls","title":"Nemo.digamma","text":"digamma(x::acb)\n\nReturn the  logarithmic derivative of the gamma function evaluated at x, i.e. psi(x).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"zeta(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.zeta-Tuple{acb}","page":"Complex balls","title":"Nemo.zeta","text":"zeta(x::acb)\n\nReturn the Riemann zeta function evaluated at x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"barnesg(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.barnesg-Tuple{acb}","page":"Complex balls","title":"Nemo.barnesg","text":"barnesg(x::acb)\n\nReturn the Barnes G-function, evaluated at x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"logbarnesg(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.logbarnesg-Tuple{acb}","page":"Complex balls","title":"Nemo.logbarnesg","text":"logbarnesg(x::acb)\n\nReturn the logarithm of the Barnes G-function, evaluated at x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"erf(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.erf-Tuple{acb}","page":"Complex balls","title":"Nemo.erf","text":"erf(x::acb)\n\nReturn the error function evaluated at x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"erfi(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.erfi-Tuple{acb}","page":"Complex balls","title":"Nemo.erfi","text":"erfi(x::acb)\n\nReturn the imaginary error function evaluated at x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"ei(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.ei-Tuple{acb}","page":"Complex balls","title":"Nemo.ei","text":"ei(x::acb)\n\nReturn the exponential integral evaluated at x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"si(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.si-Tuple{acb}","page":"Complex balls","title":"Nemo.si","text":"si(x::acb)\n\nReturn the sine integral evaluated at x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"ci(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.ci-Tuple{acb}","page":"Complex balls","title":"Nemo.ci","text":"ci(x::acb)\n\nReturn the exponential cosine integral evaluated at x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"shi(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.shi-Tuple{acb}","page":"Complex balls","title":"Nemo.shi","text":"shi(x::acb)\n\nReturn the hyperbolic sine integral evaluated at x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"chi(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.chi-Tuple{acb}","page":"Complex balls","title":"Nemo.chi","text":"chi(x::acb)\n\nReturn the hyperbolic cosine integral evaluated at x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"modeta(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.modeta-Tuple{acb}","page":"Complex balls","title":"Nemo.modeta","text":"modeta(x::acb)\n\nReturn the Dedekind eta function eta(tau) at tau = x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"modweber_f(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.modweber_f-Tuple{acb}","page":"Complex balls","title":"Nemo.modweber_f","text":"modweber_f(x::acb)\n\nReturn the modular Weber function mathfrakf(tau) = fraceta^2(tau)eta(tau2)eta(2tau) at x in the complex upper half plane.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"modweber_f1(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.modweber_f1-Tuple{acb}","page":"Complex balls","title":"Nemo.modweber_f1","text":"modweber_f1(x::acb)\n\nReturn the modular Weber function mathfrakf_1(tau) = fraceta(tau2)eta(tau) at x in the complex upper half plane.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"modweber_f2(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.modweber_f2-Tuple{acb}","page":"Complex balls","title":"Nemo.modweber_f2","text":"modweber_f2(x::acb)\n\nReturn the modular Weber function mathfrakf_2(tau) = fracsqrt2eta(2tau)eta(tau) at x in the complex upper half plane.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"modj(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.modj-Tuple{acb}","page":"Complex balls","title":"Nemo.modj","text":"modj(x::acb)\n\nReturn the j-invariant j(tau) at tau = x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"modlambda(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.modlambda-Tuple{acb}","page":"Complex balls","title":"Nemo.modlambda","text":"modlambda(x::acb)\n\nReturn the modular lambda function lambda(tau) at tau = x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"moddelta(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.moddelta-Tuple{acb}","page":"Complex balls","title":"Nemo.moddelta","text":"moddelta(x::acb)\n\nReturn the modular delta function Delta(tau) at tau = x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"ellipk(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.ellipk-Tuple{acb}","page":"Complex balls","title":"Nemo.ellipk","text":"ellipk(x::acb)\n\nReturn the complete elliptic integral K(x).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"ellipe(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.ellipe-Tuple{acb}","page":"Complex balls","title":"Nemo.ellipe","text":"ellipe(x::acb)\n\nReturn the complete elliptic integral E(x).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"sincos(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Base.Math.sincos-Tuple{acb}","page":"Complex balls","title":"Base.Math.sincos","text":"sincos(x::acb)\n\nReturn a tuple s c consisting of the sine s and cosine c of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"sincospi(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.sincospi-Tuple{acb}","page":"Complex balls","title":"Nemo.sincospi","text":"sincospi(x::acb)\n\nReturn a tuple s c consisting of the sine s and cosine c of pi x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"sinhcosh(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.sinhcosh-Tuple{acb}","page":"Complex balls","title":"Nemo.sinhcosh","text":"sinhcosh(x::acb)\n\nReturn a tuple s c consisting of the hyperbolic sine and cosine of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"agm(::acb)\nagm(::acb, ::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.agm-Tuple{acb}","page":"Complex balls","title":"Nemo.agm","text":"agm(x::acb)\n\nReturn the arithmetic-geometric mean of 1 and x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/#Nemo.agm-Tuple{acb,acb}","page":"Complex balls","title":"Nemo.agm","text":"agm(x::acb, y::acb)\n\nReturn the arithmetic-geometric mean of x and y.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"polygamma(::acb, ::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.polygamma-Tuple{acb,acb}","page":"Complex balls","title":"Nemo.polygamma","text":"polygamma(s::acb, a::acb)\n\nReturn the generalised polygamma function psi(sz).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"zeta(::acb, ::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.zeta-Tuple{acb,acb}","page":"Complex balls","title":"Nemo.zeta","text":"zeta(s::acb, a::acb)\n\nReturn the Hurwitz zeta function zeta(sa).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"risingfac(::acb, ::Int)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.risingfac-Tuple{acb,Int64}","page":"Complex balls","title":"Nemo.risingfac","text":"risingfac(x::acb, n::Int)\n\nReturn the rising factorial x(x + 1)ldots (x + n - 1) as an Acb.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"risingfac2(::acb, ::Int)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.risingfac2-Tuple{acb,Int64}","page":"Complex balls","title":"Nemo.risingfac2","text":"risingfac2(x::acb, n::Int)\n\nReturn a tuple containing the rising factorial x(x + 1)ldots (x + n - 1) and its derivative.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"polylog(::Union{acb,Int}, ::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.polylog-Tuple{Union{Int64, acb},acb}","page":"Complex balls","title":"Nemo.polylog","text":"polylog(s::Union{acb,Int}, a::acb)\n\nReturn the polylogarithm Li_s(a).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"li(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.li-Tuple{acb}","page":"Complex balls","title":"Nemo.li","text":"li(x::acb)\n\nReturn the logarithmic integral, evaluated at x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"lioffset(::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.lioffset-Tuple{acb}","page":"Complex balls","title":"Nemo.lioffset","text":"lioffset(x::acb)\n\nReturn the offset logarithmic integral, evaluated at x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"expint(::acb, ::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.expint-Tuple{acb,acb}","page":"Complex balls","title":"Nemo.expint","text":"expint(s::acb, x::acb)\n\nReturn the generalised exponential integral E_s(x).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"gamma(::acb, ::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.gamma-Tuple{acb,acb}","page":"Complex balls","title":"Nemo.gamma","text":"gamma(s::acb, x::acb)\n\nReturn the upper incomplete gamma function Gamma(sx).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"besselj(::acb, ::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.besselj-Tuple{acb,acb}","page":"Complex balls","title":"Nemo.besselj","text":"besselj(nu::acb, x::acb)\n\nReturn the Bessel function J_nu(x).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"bessely(::acb, ::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.bessely-Tuple{acb,acb}","page":"Complex balls","title":"Nemo.bessely","text":"bessely(nu::acb, x::acb)\n\nReturn the Bessel function Y_nu(x).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"besseli(::acb, ::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.besseli-Tuple{acb,acb}","page":"Complex balls","title":"Nemo.besseli","text":"besseli(nu::acb, x::acb)\n\nReturn the Bessel function I_nu(x).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"besselk(::acb, ::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.besselk-Tuple{acb,acb}","page":"Complex balls","title":"Nemo.besselk","text":"besselk(nu::acb, x::acb)\n\nReturn the Bessel function K_nu(x).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"hyp1f1(::acb, ::acb, ::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.hyp1f1-Tuple{acb,acb,acb}","page":"Complex balls","title":"Nemo.hyp1f1","text":"hyp1f1(a::acb, b::acb, x::acb)\n\nReturn the confluent hypergeometric function _1F1(abx).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"hyp1f1r(::acb, ::acb, ::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.hyp1f1r-Tuple{acb,acb,acb}","page":"Complex balls","title":"Nemo.hyp1f1r","text":"hyp1f1r(a::acb, b::acb, x::acb)\n\nReturn the regularized confluent hypergeometric function _1F1(abx)  Gamma(b).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"hyperu(::acb, ::acb, ::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.hyperu-Tuple{acb,acb,acb}","page":"Complex balls","title":"Nemo.hyperu","text":"hyperu(a::acb, b::acb, x::acb)\n\nReturn the confluent hypergeometric function U(abx).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"hyp2f1(::acb, ::acb, ::acb, ::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.hyp2f1-NTuple{4,acb}","page":"Complex balls","title":"Nemo.hyp2f1","text":"hyp2f1(a::acb, b::acb, c::acb, x::acb; flags=0)\n\nReturn the Gauss hypergeometric function _2F_1(abcx).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"jtheta(::acb, ::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.jtheta-Tuple{acb,acb}","page":"Complex balls","title":"Nemo.jtheta","text":"jtheta(z::acb, tau::acb)\n\nReturn a tuple of four elements containing the Jacobi theta function values theta_1 theta_2 theta_3 theta_4 evaluated at z tau.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"ellipwp(::acb, ::acb)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.ellipwp-Tuple{acb,acb}","page":"Complex balls","title":"Nemo.ellipwp","text":"ellipwp(z::acb, tau::acb)\n\nReturn the Weierstrass elliptic function wp(ztau).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"CC = ComplexField(64)\n\ns = CC(1, 2)\nz = CC(\"1.23\", \"3.45\")\n\na = sin(z)^2 + cos(z)^2\nb = zeta(z)\nc = besselj(s, z)\nd = hyp1f1(s, s+1, z)","category":"page"},{"location":"Nemo/docs/src/acb/#Linear-dependence","page":"Complex balls","title":"Linear dependence","text":"","category":"section"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"lindep(::Array{acb, 1}, n::Int)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.lindep-Tuple{Array{acb,1},Int64}","page":"Complex balls","title":"Nemo.lindep","text":"lindep(A::Array{acb, 1}, bits::Int)\n\nFind a small linear combination of the entries of the array A that is small (using LLL). The entries are first scaled by the given number of bits before truncating the real and imaginary parts to integers for use in LLL. This function can be used to find linear dependence between a list of complex numbers. The algorithm is heuristic only and returns an array of Nemo integers representing the linear combination.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"lindep(A::Array{acb, 2}, bits::Int)","category":"page"},{"location":"Nemo/docs/src/acb/#Nemo.lindep-Tuple{Array{acb,2},Int64}","page":"Complex balls","title":"Nemo.lindep","text":"lindep(A::Array{acb, 2}, bits::Int)\n\nFind a (common) small linear combination of the entries in each row of the array A, that is small (using LLL). It is assumed that the complex numbers in each row of the array share the same linear combination. The entries are first scaled by the given number of bits before truncating the real and imaginary parts to integers for use in LLL. This function can be used to find a common linear dependence shared across a number of lists of complex numbers. The algorithm is heuristic only and returns an array of Nemo integers representing the common linear combination.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/acb/","page":"Complex balls","title":"Complex balls","text":"CC = ComplexField(128)\n\n# These are two of the roots of x^5 + 3x + 1\na = CC(1.0050669478588622428791051888364775253, - 0.93725915669289182697903585868761513585)\nb = CC(-0.33198902958450931620250069492231652319)\n\n# We recover the polynomial from one root....\nV1 = [CC(1), a, a^2, a^3, a^4, a^5];\nW = lindep(V1, 20)\n\n# ...or from two\nV2 = [CC(1), b, b^2, b^3, b^4, b^5];\nVs = [V1 V2]\nX = lindep(Vs, 20)","category":"page"},{"location":"Nemo/docs/src/residue/","page":"Residue rings","title":"Residue rings","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/residue/#Residue-rings","page":"Residue rings","title":"Residue rings","text":"","category":"section"},{"location":"Nemo/docs/src/residue/","page":"Residue rings","title":"Residue rings","text":"Nemo allows the creation of residue rings of the form R(a) for an element a of a ring R.","category":"page"},{"location":"Nemo/docs/src/residue/","page":"Residue rings","title":"Residue rings","text":"We don't require (a) to be a prime or maximal ideal. Instead, we allow the creation of the residue ring R(a) for any nonzero a and simply raise an exception if an impossible inverse is encountered during computations  involving elements of R(a). Of course, a GCD function must be available for the base ring R.","category":"page"},{"location":"Nemo/docs/src/residue/","page":"Residue rings","title":"Residue rings","text":"There is a generic implementation of residue rings of this form in AbstractAlgebra.jl, which accepts any ring R as base ring.","category":"page"},{"location":"Nemo/docs/src/residue/","page":"Residue rings","title":"Residue rings","text":"The associated types of parent object and elements for each kind of residue rings in Nemo are given in the following table.","category":"page"},{"location":"Nemo/docs/src/residue/","page":"Residue rings","title":"Residue rings","text":"Base ring Library Element type Parent type\nGeneric ring R AbstractAlgebra.jl Generic.Res{T} Generic.ResRing{T}\nmathbbZ (Int modulus) Flint nmod NmodRing\nmathbbZ (ZZ modulus) Flint fmpz_mod FmpzModRing","category":"page"},{"location":"Nemo/docs/src/residue/","page":"Residue rings","title":"Residue rings","text":"The modulus a of a residue ring is stored in its parent object.","category":"page"},{"location":"Nemo/docs/src/residue/","page":"Residue rings","title":"Residue rings","text":"All residue element types belong to the abstract type ResElem and all the residue ring parent object types belong to the abstract type ResRing. This enables one to write generic functions that accept any Nemo residue type.","category":"page"},{"location":"Nemo/docs/src/residue/#Residue-functionality","page":"Residue rings","title":"Residue functionality","text":"","category":"section"},{"location":"Nemo/docs/src/residue/","page":"Residue rings","title":"Residue rings","text":"All the residue rings in Nemo implement the residue ring interface of AbstractAlgebra.jl:","category":"page"},{"location":"Nemo/docs/src/residue/","page":"Residue rings","title":"Residue rings","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/residue_rings","category":"page"},{"location":"Nemo/docs/src/residue/","page":"Residue rings","title":"Residue rings","text":"In addition, functionality for generic residue rings is available:","category":"page"},{"location":"Nemo/docs/src/residue/","page":"Residue rings","title":"Residue rings","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/residue","category":"page"},{"location":"Nemo/docs/src/residue/","page":"Residue rings","title":"Residue rings","text":"The other residue types in Nemo also implement this functionality.","category":"page"},{"location":"Nemo/docs/src/residue/#GCD","page":"Residue rings","title":"GCD","text":"","category":"section"},{"location":"Nemo/docs/src/residue/","page":"Residue rings","title":"Residue rings","text":"gcdx(::nmod, ::nmod)\ngcdx(::fmpz_mod, ::fmpz_mod)","category":"page"},{"location":"Nemo/docs/src/residue/#Base.gcdx-Tuple{Nemo.nmod,Nemo.nmod}","page":"Residue rings","title":"Base.gcdx","text":"gcdx(a::nmod, b::nmod)\n\nCompute the extended gcd with the Euclidean structure inherited from mathbbZ.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/residue/#Base.gcdx-Tuple{Nemo.fmpz_mod,Nemo.fmpz_mod}","page":"Residue rings","title":"Base.gcdx","text":"gcdx(a::fmpz_mod, b::fmpz_mod)\n\nCompute the extended gcd with the Euclidean structure inherited from mathbbZ.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/residue/","page":"Residue rings","title":"Residue rings","text":"Examples","category":"page"},{"location":"Nemo/docs/src/residue/","page":"Residue rings","title":"Residue rings","text":"R = ResidueRing(ZZ, 123456789012345678949)\n\ng, s, t = gcdx(R(123), R(456))","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#Generic-multivariate-series","page":"Generic multivariate series","title":"Generic multivariate series","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"AbstractAlgebra.jl provides generic multivariate series over a commutative ring, implemented in src/generic/AbsMSeries.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"Currently only series with capped absolute precision are provided. The precision in each variable can be set, but is capped at some maximum precision which is set when defining the ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"As well as implementing the Ring interface, there are numerous additional generic algorithms provided. We describe this generic functionality below.","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"All of the generic functionality is part of a submodule of AbstractAlgebra called Generic. This is exported by default so that it is not necessary to qualify the function names with the submodule name.","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"The series are implemented in terms of multivariate polynomials which are used internally to keep track of the coefficients of the series.","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"Only lex ordering is provided at present, though series print in reverse order to what multivariate polynomials would print, i.e. least significant term first, as would be expected for series.","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#Types-and-parent-objects","page":"Generic multivariate series","title":"Types and parent objects","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"Capped absolute generic series implemented using the AbstractAlgebra generics have type Generic.AbsMSeries{T} where T is the type of elements of the coefficient ring. Internally they consist of a multivariate polynomial and a vector of precisions, one for each variable. See the file src/generic/GenericTypes.jl for details.","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"Parent objects of such series have type Generic.AbsMSeriesRing{T}.","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"The symbol representation of the variables and the multivariate polynomial ring is stored in the parent object.","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"The series element types belong to the abstract type AbstractAlgebra.MSeriesElem{T} and the series ring types belong to the abstract type AbstractAlgebra.MSeriesRing{T}. This enables one to write generic functions that can accept any AbstractAlgebra multivariate series type.","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#Multivariate-series-ring-constructors","page":"Generic multivariate series","title":"Multivariate series ring constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"In order to construct multivariate series in AbstractAlgebra.jl, one must first construct the series ring itself. This is accomplished with the following constructor.","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"PowerSeriesRing(R::AbstractAlgebra.Ring, prec::Vector{Int}, s::Vector{U}; cached::Bool = true) where U <: AbstractString","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"Given a base ring R and vector of strings s specifying how the generators (variables) should be printed, along with a vector of precisions, one for each variable, return a tuple U, (x, y, ...) representing the new series ring S and the generators x y ldots of the ring as a tuple. By default the parent object S will depend only on R and the variable names x, y, ... and will be cached. Setting the optional argument cached to false will prevent the parent object S from being cached.","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"Here are some examples of creating multivariate series rings and making use of the resulting parent objects to coerce various elements into the series ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"Note that one can also use the function call O(x^n) to specify the precision in the variable x of a given series expression should be precision n.","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"Note that it is not possible to use x^0 in this function, since there is no distinction between x^0 and y^0 as far as the system is concerned. If one wishes to set the precision of a variable to precision 0, one must use the set_precision! function described below.","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"If one wants a series with the same precision in all variables, one can use O(R, n) where R is the series ring and n is the desired precision.","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"If all the precisions are to be the same, the vector of integers for the precisions can be replaced by a single integer.","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"julia> R, (x, y) = PowerSeriesRing(ZZ, [2, 3], [\"x\", \"y\"])\n(Multivariate power series ring in x, y over Integers, AbstractAlgebra.Generic.AbsMSeries{BigInt,AbstractAlgebra.Generic.MPoly{BigInt}}[x + O(y^3) + O(x^2), y + O(y^3) + O(x^2)])\n\njulia> f = R()\nO(y^3) + O(x^2)\n\njulia> g = R(123)\n123 + O(y^3) + O(x^2)\n\njulia> h = R(BigInt(1234))\n1234 + O(y^3) + O(x^2)\n\njulia> k = R(x + 1)\n1 + x + O(y^3) + O(x^2)\n\njulia> m = x + y + O(y^2)\ny + x + O(y^2) + O(x^2)\n\njulia> R, (x, y) = PowerSeriesRing(ZZ, 3, [\"x\", \"y\"])\n(Multivariate power series ring in x, y over Integers, AbstractAlgebra.Generic.AbsMSeries{BigInt,AbstractAlgebra.Generic.MPoly{BigInt}}[x + O(y^3) + O(x^3), y + O(y^3) + O(x^3)])\n\njulia> n = x + y + O(R, 2)\ny + x + O(y^2) + O(x^2)","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#Basic-ring-functionality","page":"Generic multivariate series","title":"Basic ring functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"Once a multivariate series ring is constructed, there are various ways to construct series in that ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"The easiest way is simply using the generators returned by the PowerSeriesRing constructor and build up the power series using basic arithmetic, as described in the Ring interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"The power series rings in AbstractAlgebra.jl implement the full Ring interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"We give some examples of such functionality. Note that divexact can currently only divide by unit series (i.e. whose constant coefficient is invertible).","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"julia> R, (x,) = PowerSeriesRing(ZZ, [5], [\"x\"])\n(Multivariate power series ring in x over Integers, AbstractAlgebra.Generic.AbsMSeries{BigInt,AbstractAlgebra.Generic.MPoly{BigInt}}[x + O(x^5)])\n\njulia> f = x^3 + 3x + 21\n21 + 3*x + x^3 + O(x^5)\n\njulia> h = zero(R)\nO(x^5)\n\njulia> k = one(R)\n1 + O(x^5)\n\njulia> isone(k)\ntrue\n\njulia> iszero(f)\nfalse\n\njulia> n = length(f)\n3\n\njulia> U = base_ring(R)\nIntegers\n\njulia> v = symbols(R)\n1-element Array{Symbol,1}:\n :x\n\njulia> T = parent(x + 1)\nMultivariate power series ring in x over Integers\n\njulia> f == deepcopy(f)\ntrue\n\njulia> t = divexact(f*x, 1 + x)\n21*x - 18*x^2 + 18*x^3 - 17*x^4 + O(x^5)","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#Power-series-functionality-provided-by-AbstractAlgebra.jl","page":"Generic multivariate series","title":"Power series functionality provided by AbstractAlgebra.jl","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"The functionality listed below is automatically provided by AbstractAlgebra.jl for absolute series over any commutative ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#Basic-functionality","page":"Generic multivariate series","title":"Basic functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"nvars(::Generic.AbsMSeriesRing)","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#AbstractAlgebra.Generic.nvars-Tuple{AbstractAlgebra.Generic.AbsMSeriesRing}","page":"Generic multivariate series","title":"AbstractAlgebra.Generic.nvars","text":"nvars(R::AbsMSeriesRing)\n\nReturn the number of variables in the series ring.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"symbols(::AbstractAlgebra.MSeriesRing)","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#AbstractAlgebra.Generic.symbols-Tuple{AbstractAlgebra.MSeriesRing}","page":"Generic multivariate series","title":"AbstractAlgebra.Generic.symbols","text":"symbols(R::AbstractAlgebra.MSeriesRing)\n\nReturn a vector of symbols, one for each of the variables of the series ring R.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"precision(::Generic.AbsMSeries)","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#Base.precision-Tuple{AbstractAlgebra.Generic.AbsMSeries}","page":"Generic multivariate series","title":"Base.precision","text":"precision(a::AbsMSeries)\n\nReturn a vector of precisions, one for each variable in the series ring.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"max_precision(::Generic.AbsMSeriesRing)","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#AbstractAlgebra.Generic.max_precision-Tuple{AbstractAlgebra.Generic.AbsMSeriesRing}","page":"Generic multivariate series","title":"AbstractAlgebra.Generic.max_precision","text":"max_precision(R::AbsMSeriesRing)\n\nReturn a vector of precision caps, one for each variable in the ring. Arithmetic operations will be performed to precisions not exceeding these values.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"valuation(::Generic.AbsMSeries)","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#AbstractAlgebra.Generic.valuation-Tuple{AbstractAlgebra.Generic.AbsMSeries}","page":"Generic multivariate series","title":"AbstractAlgebra.Generic.valuation","text":"valuation(a::AbsMSeries)\n\nReturn the valuation of a as a vector of integers, one for each variable.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"coeff(::Generic.AbsMSeries, ::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#AbstractAlgebra.Generic.coeff-Tuple{AbstractAlgebra.Generic.AbsMSeries,Int64}","page":"Generic multivariate series","title":"AbstractAlgebra.Generic.coeff","text":"coeff(a::AbsMSeries, n::Int)\n\nReturn the coefficient of the n-th nonzero term of the series (or zero if there are fewer than n nonzero terms). Terms are numbered from the least significant term, i.e. the first term displayed when the series is printed.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"characteristic(::Generic.AbsMSeries)","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#AbstractAlgebra.Generic.characteristic-Tuple{AbstractAlgebra.Generic.AbsMSeries}","page":"Generic multivariate series","title":"AbstractAlgebra.Generic.characteristic","text":"characteristic(R::AbstractAlgebra.FracField{T}) where T <: RingElem\n\nReturn the characteristic of the given field.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"gen(::Generic.AbsMSeriesRing, ::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#AbstractAlgebra.gen-Tuple{AbstractAlgebra.Generic.AbsMSeriesRing,Int64}","page":"Generic multivariate series","title":"AbstractAlgebra.gen","text":"gen(R::AbsMSeriesRing, i::Int)\n\nReturn the i-th generator (variable) of the series ring R. Numbering starts from 1 for the most significant variable.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"gens(::Generic.AbsMSeriesRing)","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#AbstractAlgebra.gens-Tuple{AbstractAlgebra.Generic.AbsMSeriesRing}","page":"Generic multivariate series","title":"AbstractAlgebra.gens","text":"gens(R::AbsMSeriesRing)\n\nReturn a vector of the generators (variables) of the series ring R, starting with the most significant.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"isgen(::Generic.AbsMSeries)","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#AbstractAlgebra.isgen-Tuple{AbstractAlgebra.Generic.AbsMSeries}","page":"Generic multivariate series","title":"AbstractAlgebra.isgen","text":"isgen(a::AbsMSeries)\n\nReturn true if the series a is a generator of its parent series ring.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"isunit(::Generic.AbsMSeries)","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#AbstractAlgebra.isunit-Tuple{AbstractAlgebra.Generic.AbsMSeries}","page":"Generic multivariate series","title":"AbstractAlgebra.isunit","text":"isunit(a::AbsMSeries)\n\nReturn true if the series is a unit in its series ring, i.e. if its constant term is a unit in the base ring.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"length(::Generic.AbsMSeries)","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#Base.length-Tuple{AbstractAlgebra.Generic.AbsMSeries}","page":"Generic multivariate series","title":"Base.length","text":"length(a::AbsMSeries)\n\nReturn the number of nonzero terms in the series a.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mseries/#Iteration","page":"Generic multivariate series","title":"Iteration","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"coefficients(::Generic.AbsMSeries)","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#AbstractAlgebra.Generic.coefficients-Tuple{AbstractAlgebra.Generic.AbsMSeries}","page":"Generic multivariate series","title":"AbstractAlgebra.Generic.coefficients","text":"coefficients(a::AbsMSeries)\n\nReturn an array of the nonzero coefficients of the series, in the order they would be displayed, i.e. least significant term first.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"exponent_vectors(::Generic.AbsMSeries)","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#AbstractAlgebra.Generic.exponent_vectors-Tuple{AbstractAlgebra.Generic.AbsMSeries}","page":"Generic multivariate series","title":"AbstractAlgebra.Generic.exponent_vectors","text":"exponent_vectors(a::AbsMSeries)\n\nReturn an array of the exponent vectors of the nonzero terms of the series, in the order they would be displayed, i.e. least significant term first.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mseries/#Truncation","page":"Generic multivariate series","title":"Truncation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"truncate(::Generic.AbsMSeries, ::Vector{Int})","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#Base.truncate-Tuple{AbstractAlgebra.Generic.AbsMSeries,Array{Int64,1}}","page":"Generic multivariate series","title":"Base.truncate","text":"truncate(a::AbstractAlgebra.AbsMSeries, prec::Vector{Int})\n\nReturn a truncated to (absolute) precisions given by the vector prec.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mseries/#Inversion","page":"Generic multivariate series","title":"Inversion","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"Base.inv(::Generic.AbsMSeries)","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#Base.inv-Tuple{AbstractAlgebra.Generic.AbsMSeries}","page":"Generic multivariate series","title":"Base.inv","text":"Base.inv(x::AbsMSeries)\n\nReturn the inverse of the series x. An exception is raised if the series is not a unit.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mseries/#Exact-division","page":"Generic multivariate series","title":"Exact division","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"divexact(::Generic.AbsMSeries{T}, ::Generic.AbsMSeries{T}) where T <: RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#AbstractAlgebra.Generic.divexact-Union{Tuple{T}, Tuple{AbstractAlgebra.Generic.AbsMSeries{T,S} where S,AbstractAlgebra.Generic.AbsMSeries{T,S} where S}} where T<:RingElem","page":"Generic multivariate series","title":"AbstractAlgebra.Generic.divexact","text":"divexact(x::AbsMSeries{T}, y::AbsMSeries{T}) where T <: RingElement\n\nReturn the exact quotient of the series x by the series y. This function currently assumes y is an invertible series.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mseries/#Evaluation","page":"Generic multivariate series","title":"Evaluation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"evaluate(::U, ::Vector{Int}, ::Vector{U}) where {T <: RingElement, U <: Generic.AbsMSeries{T}}","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#AbstractAlgebra.Generic.evaluate-Union{Tuple{U}, Tuple{T}, Tuple{U,Array{Int64,1},Array{U,1}}} where U<:(AbstractAlgebra.Generic.AbsMSeries{T,S} where S) where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic multivariate series","title":"AbstractAlgebra.Generic.evaluate","text":"evaluate(a::U, vars::Vector{Int}, vals::Vector{U}) where {T <: RingElement, U <: AbsMSeries{T}}\n\nEvaluate the series expression by substituting in the supplied values in the array vals for the corresponding variables with indices given by the array vars. The values must be in the same ring as a.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"evaluate(::U, ::Vector{U}, ::Vector{U}) where {T <: RingElement, U <: Generic.AbsMSeries{T}}","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#AbstractAlgebra.Generic.evaluate-Union{Tuple{U}, Tuple{T}, Tuple{U,Array{U,1},Array{U,1}}} where U<:(AbstractAlgebra.Generic.AbsMSeries{T,S} where S) where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic multivariate series","title":"AbstractAlgebra.Generic.evaluate","text":"evaluate(a::U, vars::Vector{U}, vals::Vector{U}) where {T <: RingElement, U <: AbsMSeries{T}}\n\nEvaluate the series expression by substituting in the supplied values in the array vals for the corresponding variables given by the array vars. The values must be in the same ring as a.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"evaluate(::U, ::Vector{U}) where {T <: RingElement, U <: Generic.AbsMSeries{T}}","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#AbstractAlgebra.Generic.evaluate-Union{Tuple{U}, Tuple{T}, Tuple{U,Array{U,1}}} where U<:(AbstractAlgebra.Generic.AbsMSeries{T,S} where S) where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Generic multivariate series","title":"AbstractAlgebra.Generic.evaluate","text":"evaluate(a::U, vals::Vector{U}) where {T <: RingElement, U <: AbsMSeries{T}}\n\nEvaluate the series expression by substituting in the supplied values in the array vals for the variables the series ring to which a belongs. The values must be in the same ring as a.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/mseries/#Random-generation","page":"Generic multivariate series","title":"Random generation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/mseries/","page":"Generic multivariate series","title":"Generic multivariate series","text":"rand(::AbstractAlgebra.MSeriesRing, term_range, v...)","category":"page"},{"location":"AbstractAlgebra/docs/src/mseries/#Base.rand-Tuple{AbstractAlgebra.MSeriesRing,Any,Vararg{Any,N} where N}","page":"Generic multivariate series","title":"Base.rand","text":"rand(S::AbstractAlgebra.MSeriesRing, term_range, v...)\n\nReturn a random element of the series ring S with number of terms in the range given by term_range and where coefficients of the series are randomly generated in the base ring using the data given by v. The exponents of the variable in the terms will be less than the precision caps for the Ring S when it was created.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/quotient_module/","page":"Quotient modules","title":"Quotient modules","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/quotient_module/#Quotient-modules","page":"Quotient modules","title":"Quotient modules","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/quotient_module/","page":"Quotient modules","title":"Quotient modules","text":"AbstractAlgebra allows the construction of quotient modules/spaces of AbstractAlgebra modules over euclidean domains. These are given as the quotient of a module by a submodule of that module.","category":"page"},{"location":"AbstractAlgebra/docs/src/quotient_module/","page":"Quotient modules","title":"Quotient modules","text":"We define two quotient modules to be equal if they are quotients of the same module M by two equal submodules.","category":"page"},{"location":"AbstractAlgebra/docs/src/quotient_module/","page":"Quotient modules","title":"Quotient modules","text":"As well as implementing the entire Module interface, AbstractAlgebra submodules also provide the following interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/quotient_module/#Constructors","page":"Quotient modules","title":"Constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/quotient_module/","page":"Quotient modules","title":"Quotient modules","text":"quo(M::AbstractAlgebra.FPModule{T}, v::Generic.Submodule{T}) where T <: RingElement","category":"page"},{"location":"AbstractAlgebra/docs/src/quotient_module/#AbstractAlgebra.quo-Union{Tuple{T}, Tuple{AbstractAlgebra.FPModule{T},AbstractAlgebra.Generic.Submodule{T}}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Quotient modules","title":"AbstractAlgebra.quo","text":"quo(m::Module{T}, N::Module{T}) where T <: RingElement\n\nReturn the quotient Q of the module m by the submodule N of m, and a map which is a lift of elements of Q to m.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/quotient_module/","page":"Quotient modules","title":"Quotient modules","text":"Note that a preimage of the canonical projection can be obtained using the preimage function described in the section on module homomorphisms. Note that a preimage element of the canonical projection is not unique and has no special properties.","category":"page"},{"location":"AbstractAlgebra/docs/src/quotient_module/","page":"Quotient modules","title":"Quotient modules","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/quotient_module/","page":"Quotient modules","title":"Quotient modules","text":"julia> M = FreeModule(ZZ, 2)\nFree module of rank 2 over Integers\n\njulia> m = M([ZZ(1), ZZ(2)])\n(1, 2)\n\njulia> N, f = sub(M, [m])\n(Submodule over Integers with 1 generator and no relations\n, Module homomorphism with\nDomain: Submodule over Integers with 1 generator and no relations\n\nCodomain: Free module of rank 2 over Integers)\n\njulia> Q, g = quo(M, N)\n(Quotient module over Integers with 1 generator and no relations\n, Module homomorphism with\nDomain: Free module of rank 2 over Integers\nCodomain: Quotient module over Integers with 1 generator and no relations\n)\n\njulia> p = M([ZZ(3), ZZ(1)])\n(3, 1)\n\njulia> v2 = g(p)\n(-5)\n\njulia> V = VectorSpace(QQ, 2)\nVector space of dimension 2 over Rationals\n\njulia> m = V([QQ(1), QQ(2)])\n(1//1, 2//1)\n\njulia> N, f = sub(V, [m])\n(Subspace over Rationals with 1 generator and no relations\n, Module homomorphism with\nDomain: Subspace over Rationals with 1 generator and no relations\n\nCodomain: Vector space of dimension 2 over Rationals)\n\njulia> Q, g = quo(V, N)\n(Quotient space over:\nRationals with 1 generator and no relations\n, Module homomorphism with\nDomain: Vector space of dimension 2 over Rationals\nCodomain: Quotient space over:\nRationals with 1 generator and no relations\n)\n","category":"page"},{"location":"AbstractAlgebra/docs/src/quotient_module/#Functionality-for-submodules","page":"Quotient modules","title":"Functionality for submodules","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/quotient_module/","page":"Quotient modules","title":"Quotient modules","text":"In addition to the Module interface, AbstractAlgebra submodules implement the following functionality.","category":"page"},{"location":"AbstractAlgebra/docs/src/quotient_module/#Basic-manipulation","page":"Quotient modules","title":"Basic manipulation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/quotient_module/","page":"Quotient modules","title":"Quotient modules","text":"supermodule(M::AbstractAlgebra.Generic.QuotientModule{T}) where T <: RingElement\n\ndim(N::AbstractAlgebra.Generic.QuotientModule{T}) where T <: FieldElement","category":"page"},{"location":"AbstractAlgebra/docs/src/quotient_module/#AbstractAlgebra.Generic.supermodule-Union{Tuple{AbstractAlgebra.Generic.QuotientModule{T}}, Tuple{T}} where T<:Union{RingElem, AbstractFloat, Integer, Rational}","page":"Quotient modules","title":"AbstractAlgebra.Generic.supermodule","text":"supermodule(M::QuotientModule{T}) where T <: RingElement\n\nReturn the module that this module is a quotient of.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/quotient_module/#AbstractAlgebra.Generic.dim-Union{Tuple{AbstractAlgebra.Generic.QuotientModule{T}}, Tuple{T}} where T<:Union{FieldElem, AbstractFloat, Rational}","page":"Quotient modules","title":"AbstractAlgebra.Generic.dim","text":"dim(N::AbstractAlgebra.Generic.QuotientModule{T}) where T <: FieldElement\n\nReturn the dimension of the given vector quotient space.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/quotient_module/","page":"Quotient modules","title":"Quotient modules","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/quotient_module/","page":"Quotient modules","title":"Quotient modules","text":"julia> M = FreeModule(ZZ, 2)\nFree module of rank 2 over Integers\n\njulia> m = M([ZZ(2), ZZ(3)])\n(2, 3)\n\njulia> N, g = sub(M, [m])\n(Submodule over Integers with 1 generator and no relations\n, Module homomorphism with\nDomain: Submodule over Integers with 1 generator and no relations\n\nCodomain: Free module of rank 2 over Integers)\n\njulia> Q, h = quo(M, N)\n(Quotient module over Integers with 2 generators and relations:\n[2 3], Module homomorphism with\nDomain: Free module of rank 2 over Integers\nCodomain: Quotient module over Integers with 2 generators and relations:\n[2 3])\n\njulia> supermodule(Q) == M\ntrue\n\njulia> V = VectorSpace(QQ, 2)\nVector space of dimension 2 over Rationals\n\njulia> m = V([QQ(1), QQ(2)])\n(1//1, 2//1)\n\njulia> N, f = sub(V, [m])\n(Subspace over Rationals with 1 generator and no relations\n, Module homomorphism with\nDomain: Subspace over Rationals with 1 generator and no relations\n\nCodomain: Vector space of dimension 2 over Rationals)\n\njulia> Q, g = quo(V, N)\n(Quotient space over:\nRationals with 1 generator and no relations\n, Module homomorphism with\nDomain: Vector space of dimension 2 over Rationals\nCodomain: Quotient space over:\nRationals with 1 generator and no relations\n)\n\njulia> dim(V)\n2\n\njulia> dim(Q)\n1\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/#Matrix-Interface","page":"Matrix Interface","title":"Matrix Interface","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Generic matrices are supported in AbstractAlgebra.jl. Both the space of mtimes n matrices and the algebra (ring) of mtimes m matrices are supported.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"As the space of mtimes n matrices over a commutative ring is not itself a commutative ring, not all of the Ring interface needs to be implemented for such matrices in.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"In particular, the following functions do not need to be implemented: isdomain_type, and divexact. The canonical_unit function should be implemented, but simply needs to return the corresponding value for entry 1 1 (the function is never called on empty matrices).","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"For matrix algebras, all of the ring interface must be implemented.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Note that AbstractAlgebra.jl matrices are not the same as Julia matrices. We store a base ring in our matrix and matrices are row major instead of column major in order to support the numerous large C libraries that use this convention.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"All AbstractAlgebra.jl matrices are assumed to be mutable. This is usually critical to performance.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/#Types-and-parents","page":"Matrix Interface","title":"Types and parents","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"AbstractAlgebra provides two abstract types for matrix spaces and their elements:","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"MatSpace{T} is the abstract type for matrix space parent types\nMatElem{T} is the abstract type for matrix types belonging to a matrix space","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"It also provides two abstract types for matrix algebras and their elements:","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"MatAlgebra{T} is the abstract type for matrix algebra parent types\nMatAlgElem{T} is the abstract type for matrix types belonging to a matrix algebra","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Note that these abstract types are parameterised. The type T should usually be the type of elements of the matrices.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Matrix spaces and matrix algebras should be made unique on the system by caching parent objects (unless an optional cache parameter is set to false). Matrix spaces and algebras should at least be distinguished based on their base (coefficient) ring and the dimensions of the matrices in the space.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"See src/generic/GenericTypes.jl for an example of how to implement such a cache (which usually makes use of a dictionary).","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/#Required-functionality-for-matrices","page":"Matrix Interface","title":"Required functionality for matrices","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"In addition to the required (relevant) functionality for the Ring interface (see above), the following functionality is required for the Matrix interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"We suppose that R is a fictitious base ring (coefficient ring) and that S is a space of mtimes n matrices over R, or algebra of mtimes m matrices with parent object S of type MyMatSpace{T} or MyMatAlgebra{T}, respectively. We also assume the matrices in the space have type MyMat{T}, where T is the type of elements of the base (element) ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Of course, in practice these types may not be parameterised, but we use parameterised types here to make the interface clearer.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Note that the type T must (transitively) belong to the abstract type RingElem.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Currently only matrices over commutative rings are supported.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/#Constructors","page":"Matrix Interface","title":"Constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"In addition to the standard constructors, the following constructors, taking an array of elements, must be available.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"(S::MyMatSpace{T})(A::Array{T, 2}) where T <: AbstractAlgebra.RingElem\n(S::MyMatAlgebra{T})(A::Array{T, 2}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Create the matrix in the given space/algebra whose (i j) entry is given by A[i, j].","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"(S::MyMatSpace{T})(A::Array{S, 2}) where {S <: AbstractAlgebra.RingElem, T <: AbstractAlgebra.RingElem}\n(S::MyMatAlgebra{T})(A::Array{S, 2}) where {S <: AbstractAlgebra.RingElem, T <: AbstractAlgebra.RingElem}","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Create the matrix in the given space/algebra whose (i j) entry is given by A[i, j], where S is the type of elements that can be coerced into the base ring of the matrix.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"(S::MyMatSpace{T})(A::Array{S, 1}) where {S <: AbstractAlgebra.RingElem, T <: AbstractAlgebra.RingElem}\n(S::MyMatAlgebra{T})(A::Array{S, 1}) where {S <: AbstractAlgebra.RingElem, T <: AbstractAlgebra.RingElem}","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Create the matrix in the given space/algebra of matrices (with dimensions mtimes n say), whose (i j) entry is given by A[i*(n - 1) + j] and where S is the type of elements that can be coerced into the base ring of the matrix.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"julia> S = MatrixSpace(QQ, 2, 3)\nMatrix Space of 2 rows and 3 columns over Rationals\n\njulia> T = MatrixAlgebra(QQ, 2)\nMatrix Algebra of degree 2 over Rationals\n\njulia> M1 = S(Rational{BigInt}[2 3 1; 1 0 4])\n[2//1   3//1   1//1]\n[1//1   0//1   4//1]\n\njulia> M2 = S(BigInt[2 3 1; 1 0 4])\n[2//1   3//1   1//1]\n[1//1   0//1   4//1]\n\njulia> M3 = S(BigInt[2, 3, 1, 1, 0, 4])\n[2//1   3//1   1//1]\n[1//1   0//1   4//1]\n\njulia> N1 = T(Rational{BigInt}[2 3; 1 0])\n[2//1   3//1]\n[1//1   0//1]\n\njulia> N2 = T(BigInt[2 3; 1 0])\n[2//1   3//1]\n[1//1   0//1]\n\njulia> N3 = T(BigInt[2, 3, 1, 1])\n[2//1   3//1]\n[1//1   1//1]\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"It is also possible to create matrices (in a matrix space only) directly, without first creating the corresponding matrix space (the inner constructor being called directly). Note that to support this, matrix space parent objects don't contain a reference to their parent. Instead, parents are constructed on-the-fly if requested. (The same strategy is used for matrix algebras.)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"matrix(R::Ring, arr::Array{T, 2}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Given an mtimes n Julia matrix of entries, construct the corresponding AbstractAlgebra.jl matrix over the given ring R, assuming all the entries can be coerced into R.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"matrix(R::Ring, r::Int, c::Int, A::Array{T, 1}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Construct the given rtimes c AbstractAlgebra.jl matrix over the ring R whose (i j) entry is given by A[c*(i - 1) + j], assuming that all the entries can be coerced into R.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"zero_matrix(R::Ring, r::Int, c::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Construct the rtimes c AbstractAlgebra.jl zero matrix over the ring R.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"julia> M = matrix(ZZ, BigInt[3 1 2; 2 0 1])\n[3   1   2]\n[2   0   1]\n\njulia> N = matrix(ZZ, 3, 2, BigInt[3, 1, 2, 2, 0, 1])\n[3   1]\n[2   2]\n[0   1]\n\njulia> P = zero_matrix(ZZ, 3, 2)\n[0   0]\n[0   0]\n[0   0]\n\njulia> R = MatrixAlgebra(ZZ, 2)\nMatrix Algebra of degree 2 over Integers\n\njulia> M = R()\n[0   0]\n[0   0]","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/#Views","page":"Matrix Interface","title":"Views","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Just as Julia supports views of matrices, AbstractAlgebra requires all matrix types to support views. These allow one to work with a submatrix of a given matrix. Modifying the submatrix also modifies the original matrix.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Note that deepcopy of a view type must return the same type, but it should return a view into a deepcopy of the original matrix. Julia enforces this for consistency.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"To support views, generic matrices in AbstractAlgebra of type Generic.MatSpaceElem have an associated Generic.MatSpaceView type. Both belong to the Generic.Mat abstract type, so that one can work with that in functions that can accept both views and actual matrices.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"The syntax for views is as for Julia's own views.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Note that the parent_type function returns the same type for a view as for the original matrix type. This could potentially cause a problem if the elem_type function is applied to the return value of parent_type and then used in a type assertion. For this reason, there may be some limitations on the use of views.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"The similar function also returns a matrix of type MatSpaceElem when applied to a view, rather than another view.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"M = matrix(ZZ, 3, 3, BigInt[1, 2, 3, 2, 3, 4, 3, 4, 5])\n\nN1 = @view M[1:2, :]\nN2 = @view M[:, 1:2]\n\nR = N1*N2","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/#Basic-manipulation-of-matrices","page":"Matrix Interface","title":"Basic manipulation of matrices","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"dense_matrix_type(::Type{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Return the type of dense matrices whose entries have the given type. E.g. in Nemo, which depends on AbstractAlgebra, we define dense_matrix_type(::Type{fmpz}) = fmpz_mat.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"nrows(f::MyMat{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Return the number of rows of the given matrix.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"ncols(f::MyMat{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Return the number of columns of the given matrix.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"getindex(M::MyMat{T}, r::Int, c::Int) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Return the (i j)-th entry of the matrix M.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"setindex!(M::MyMat{T}, d::T, r::Int, c::Int) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Set the (i j)-th entry of the matrix M to d, which is assumed to be in the base ring of the matrix. The matrix must have such an entry and the matrix is mutated in place and not returned from the function.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"julia> M = matrix(ZZ, BigInt[2 3 0; 1 1 1])\n[2   3   0]\n[1   1   1]\n\njulia> m = nrows(M)\n2\n\njulia> n = ncols(M)\n3\n\njulia> M[1, 2] = BigInt(4)\n4\n\njulia> c = M[1, 1]\n2\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/#Transpose","page":"Matrix Interface","title":"Transpose","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"transpose(::MyMat{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Return the transpose of the given matrix.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"The standard Julia tick notation can also be used for transposing a matrix.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"julia> R, t = PolynomialRing(QQ, \"t\")\n(Univariate Polynomial Ring in t over Rationals, t)\n\njulia> S = MatrixSpace(R, 3, 3)\nMatrix Space of 3 rows and 3 columns over Univariate Polynomial Ring in t over Rationals\n\njulia> A = S([t + 1 t R(1); t^2 t t; R(-2) t + 2 t^2 + t + 1])\n[t + 1       t             1]\n[  t^2       t             t]\n[   -2   t + 2   t^2 + t + 1]\n\njulia> B = transpose(A)\n[t + 1   t^2            -2]\n[    t     t         t + 2]\n[    1     t   t^2 + t + 1]\n\njulia> C = A'\n[t + 1   t^2            -2]\n[    t     t         t + 2]\n[    1     t   t^2 + t + 1]\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/#Optional-functionality-for-matrices","page":"Matrix Interface","title":"Optional functionality for matrices","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Especially when wrapping C libraries, some functions are best implemented directly, rather than relying on the generic functionality. The following are all provided by the AbstractAlgebra.jl generic code, but can optionally be implemented directly for performance reasons.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/#Optional-submatrices","page":"Matrix Interface","title":"Optional submatrices","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"The following are only available for matrix spaces, not for matrix algebras.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Base.getindex(M::MyMat, rows::AbstractVector{Int}, cols::AbstractVector{Int})","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Return a new matrix with the same entries as the submatrix with the given range of rows and columns.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"julia> M = matrix(ZZ, BigInt[1 2 3; 2 3 4; 3 4 5])\n[1   2   3]\n[2   3   4]\n[3   4   5]\n\njulia> N1 = M[1:2, :]\n[1   2   3]\n[2   3   4]\n\njulia> N2 = M[:, :]\n[1   2   3]\n[2   3   4]\n[3   4   5]\n\njulia> N3 = M[2:3, 2:3]\n[3   4]\n[4   5]\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/#Optional-row-swapping","page":"Matrix Interface","title":"Optional row swapping","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"swap_rows!(M::MyMat{T}, i::Int, j::Int) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Swap the rows of M in place. The function returns the mutated matrix (since matrices are assumed to be mutable in AbstractAlgebra.jl).","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"julia> M = identity_matrix(ZZ, 3)\n[1   0   0]\n[0   1   0]\n[0   0   1]\n\njulia> swap_rows!(M, 1, 2)\n[0   1   0]\n[1   0   0]\n[0   0   1]\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/#Optional-concatenation","page":"Matrix Interface","title":"Optional concatenation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"The following are only available for matrix spaces, not for matrix algebras.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"hcat(M::MyMat{T}, N::MyMat{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Return the horizontal concatenation of M and N. It is assumed that the number of rows of M and N are the same.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"vcat(M::MyMat{T}, N::MyMat{T}) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Return the vertical concatenation of M and N. It is assumed that the number of columns of M and N are the same.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"julia> M = matrix(ZZ, BigInt[1 2 3; 2 3 4; 3 4 5])\n[1   2   3]\n[2   3   4]\n[3   4   5]\n\njulia> N = matrix(ZZ, BigInt[1 0 1; 0 1 0; 1 0 1])\n[1   0   1]\n[0   1   0]\n[1   0   1]\n\njulia> P = hcat(M, N)\n[1   2   3   1   0   1]\n[2   3   4   0   1   0]\n[3   4   5   1   0   1]\n\njulia> Q = vcat(M, N)\n[1   2   3]\n[2   3   4]\n[3   4   5]\n[1   0   1]\n[0   1   0]\n[1   0   1]\n","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/#Optional-similar-and-zero","page":"Matrix Interface","title":"Optional similar and zero","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"The following functions are available for matrices in both matrix algebras and matrix spaces. Both similar and zero construct new matrices, with the same methods, but the entries are either undefined with similar or zero-initialized with zero.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"similar(x::MyMat{T}, R::Ring=base_ring(x)) where T <: AbstractAlgebra.RingElem\nzero(x::MyMat{T}, R::Ring=base_ring(x)) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Construct the matrix with the same dimensions as the given matrix, and the same base ring unless explicitly specified.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"similar(x::MyMat{T}, R::Ring, r::Int, c::Int) where T <: AbstractAlgebra.RingElem\nsimilar(x::MyMat{T}, r::Int, c::Int) where T <: AbstractAlgebra.RingElem\nzero(x::MyMat{T}, R::Ring, r::Int, c::Int) where T <: AbstractAlgebra.RingElem\nzero(x::MyMat{T}, r::Int, c::Int) where T <: AbstractAlgebra.RingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Construct the rtimes c matrix with R as base ring (which defaults to the base ring of the the given matrix). If x belongs to a matrix algebra and r neq c, an exception is raised, and it's also possible to specify only one Int as the order (e.g. similar(x, n)).","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Custom matrices and rings may choose which specific matrix type is best-suited to return for the given ring and dimensionality. If they do not specialize these functions, the default is a Generic.MatSpaceElem matrix, or Generic.MatAlgElem for matrix algebras. The default implementation of zero calls out to similar, so it's generally sufficient to specialize only similar. For both similar and zero, only the most general method has to be implemented (e.g. similar(x::MyMat, R::Ring, r::Int, c::Int), as all other methods (which have defaults) call out to this more general method.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Base.isassigned(M::MyMat, i, j)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Test whether the given matrix has a value associated with indices i and j. It is recommended to overload this method for custom matrices.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"julia> M = matrix(ZZ, BigInt[3 1 2; 2 0 1])\n[3   1   2]\n[2   0   1]\n\njulia> isassigned(M, 1, 2)\ntrue\n\njulia> isassigned(M, 4, 4)\nfalse\n\njulia> A = similar(M)\n[#undef   #undef   #undef]\n[#undef   #undef   #undef]\n\njulia> isassigned(A, 1, 2)\nfalse\n\njulia> B = zero(M)\n[0   0   0]\n[0   0   0]\n\njulia> C = similar(M, 4, 5)\n[#undef   #undef   #undef   #undef   #undef]\n[#undef   #undef   #undef   #undef   #undef]\n[#undef   #undef   #undef   #undef   #undef]\n[#undef   #undef   #undef   #undef   #undef]\n\njulia> base_ring(B)\nIntegers\n\njulia> D = zero(M, QQ, 2, 2)\n[0//1   0//1]\n[0//1   0//1]\n\njulia> base_ring(D)\nRationals","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/#Optional-symmetry-test","page":"Matrix Interface","title":"Optional symmetry test","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"LinearAlgebra.issymmetric(a::MatrixElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Return true if the given matrix is symmetric with respect to its main diagonal, otherwise return false.","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/matrix_spaces/","page":"Matrix Interface","title":"Matrix Interface","text":"julia> M = matrix(ZZ, [1 2 3; 2 4 5; 3 5 6])\n[1   2   3]\n[2   4   5]\n[3   5   6]\n\njulia> issymmetric(M)\ntrue\n\njulia> N = matrix(ZZ, [1 2 3; 4 5 6; 7 8 9])\n[1   2   3]\n[4   5   6]\n[7   8   9]\n\njulia> issymmetric(N)\nfalse","category":"page"},{"location":"Nemo/docs/src/rational/","page":"Rationals","title":"Rationals","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/rational/#Rationals","page":"Rationals","title":"Rationals","text":"","category":"section"},{"location":"Nemo/docs/src/rational/","page":"Rationals","title":"Rationals","text":"Nemo provides much functionality for the rational numbers. See the section on Fraction Fields where all the basic functionality is documented, along with the extra functionality only available for the rational numbers themselves.","category":"page"},{"location":"Hecke/docs/src/number_fields/elements/#Elements","page":"-","title":"Elements","text":"","category":"section"},{"location":"Hecke/docs/src/number_fields/elements/","page":"-","title":"-","text":"CurrentModule = Hecke","category":"page"},{"location":"Hecke/docs/src/number_fields/elements/#Creation","page":"-","title":"Creation","text":"","category":"section"},{"location":"Hecke/docs/src/number_fields/elements/","page":"-","title":"-","text":"gen(::SimpleNumField)\ngens(::NonSimpleNumField)","category":"page"},{"location":"Hecke/docs/src/number_fields/elements/#AbstractAlgebra.gen-Tuple{SimpleNumField}","page":"-","title":"AbstractAlgebra.gen","text":"gen(L::SimpleNumField) -> NumFieldElem\n\nGiven a simple number field L = Kx(x) over K, this functions returns the class of x, which is the canonical primitive element of L over K.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/elements/#AbstractAlgebra.gens-Tuple{NonSimpleNumField}","page":"-","title":"AbstractAlgebra.gens","text":"gens(L::NonSimpleNumField) -> Vector{NumFieldElem}\n\nGiven a non-simple number field L = Kx_1dotscx_n(f_1dotscf_n) over K, this functions returns the list bar x_1dotscbar x_n.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/elements/#Predicates","page":"-","title":"Predicates","text":"","category":"section"},{"location":"Hecke/docs/src/number_fields/elements/","page":"-","title":"-","text":"isintegral(::NumFieldElem)","category":"page"},{"location":"Hecke/docs/src/number_fields/elements/#Hecke.isintegral-Tuple{NumFieldElem}","page":"-","title":"Hecke.isintegral","text":"isintegral(a::NumFieldElem) -> Bool\n\nReturns whether a is integral, that is, whether the minimal polynomial of a has integral coefficients.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/elements/#Invariants","page":"-","title":"Invariants","text":"","category":"section"},{"location":"Hecke/docs/src/number_fields/elements/","page":"-","title":"-","text":"norm(::NumFieldElem)\nminpoly(::NumFieldElem)\nabsolute_minpoly(::NumFieldElem)\ncharpoly(::NumFieldElem)\nabsolute_charpoly(::NumFieldElem)","category":"page"},{"location":"Hecke/docs/src/number_fields/elements/#LinearAlgebra.norm-Tuple{NumFieldElem}","page":"-","title":"LinearAlgebra.norm","text":"norm(a::NumFieldElem) -> NumFieldElem\n\nReturns the norm of an element a of a number field extension LK. This will be an element of K.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/elements/#AbstractAlgebra.Generic.minpoly-Tuple{NumFieldElem}","page":"-","title":"AbstractAlgebra.Generic.minpoly","text":"minpoly(a::NumFieldElem) -> PolyElem\n\nGiven a number field element a of a number field K, this function returns the minimal polynomial of a over the base field of K.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/elements/#Hecke.absolute_minpoly-Tuple{NumFieldElem}","page":"-","title":"Hecke.absolute_minpoly","text":"absolute_minpoly(a::NumFieldElem) -> PolyElem\n\nGiven a number field element a of a number field K, this function returns the minimal polynomial of a over the rationals mathbfQ.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/elements/#AbstractAlgebra.Generic.charpoly-Tuple{NumFieldElem}","page":"-","title":"AbstractAlgebra.Generic.charpoly","text":"charpoly(a::NumFieldElem) -> PolyElem\n\nGiven a number field element a of a number field K, this function returns the characteristic polynomial of a over the base field of K.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/elements/#Hecke.absolute_charpoly-Tuple{NumFieldElem}","page":"-","title":"Hecke.absolute_charpoly","text":"absolute_charpoly(a::NumFieldElem) -> PolyElem\n\nGiven a number field element a of a number field K, this function returns the characteristic polynomial of a over the rationals mathbfQ.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/elements/#Implicit-Relative-Extensions","page":"-","title":"Implicit Relative Extensions","text":"","category":"section"},{"location":"Hecke/docs/src/number_fields/elements/","page":"-","title":"-","text":"Given two absolute fields K and k as well as an embedding phik to K we can regard K as an extension on k, hence invariante of K can be investigated relative to k rathern than over Q. Here we list functions achieving this without actually computing K as an extension of k.","category":"page"},{"location":"Hecke/docs/src/number_fields/elements/","page":"-","title":"-","text":"minimum(m::T, I::NfOrdIdl) where T<:(AbstractAlgebra.Map{Nemo.AnticNumberField,Nemo.AnticNumberField,S,T} where T where S)\nnorm(m::T, I::Hecke.NfAbsOrdIdl{Nemo.AnticNumberField,Nemo.nf_elem}) where T<:(AbstractAlgebra.Map{Nemo.AnticNumberField,Nemo.AnticNumberField,S,T} where T where S)\nnorm(m::T, a::nf_elem)  where T<:(AbstractAlgebra.Map{Nemo.AnticNumberField,Nemo.AnticNumberField,S,T} where T where S)\ndiscriminant(m::Map, R::NfOrd)","category":"page"},{"location":"Hecke/docs/src/number_fields/elements/#Base.minimum-Union{Tuple{T}, Tuple{T,NfAbsOrdIdl{AnticNumberField,nf_elem}}} where T<:(Map{AnticNumberField,AnticNumberField,S,T} where T where S)","page":"-","title":"Base.minimum","text":"minimum(m::T, I::NfOrdIdl) where T <: Map{AnticNumberField, AnticNumberField} -> NfOrdIdl\n\nGiven an embedding mkto K of number fields and an integral ideal in K, find the intersect I cap mathbfZ_k.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/elements/#LinearAlgebra.norm-Union{Tuple{T}, Tuple{T,NfAbsOrdIdl{AnticNumberField,nf_elem}}} where T<:(Map{AnticNumberField,AnticNumberField,S,T} where T where S)","page":"-","title":"LinearAlgebra.norm","text":"norm(m::T, I::NfOrdIdl) where T <: Map{AnticNumberField, AnticNumberField} -> NfOrdIdl\n\nGiven an embedding mkto K of number fields and an integral ideal in K, find the norm N_Kk(I).\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/elements/#LinearAlgebra.norm-Union{Tuple{T}, Tuple{T,nf_elem}} where T<:(Map{AnticNumberField,AnticNumberField,S,T} where T where S)","page":"-","title":"LinearAlgebra.norm","text":"norm(m::T, a::nf_elem) where T <: Map{AnticNumberField, AnticNumberField} -> nf_elem\n\nGiven an embedding mkto K of number fields and an element in K, find the norm N_Kk(a).\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/number_fields/elements/#AbstractAlgebra.Generic.discriminant-Tuple{Map,NfAbsOrd{AnticNumberField,nf_elem}}","page":"-","title":"AbstractAlgebra.Generic.discriminant","text":"discriminant(m::Map, R::NfOrd) -> NfOrdIdl\n\nThe discriminant ideal of R over the maximal order of the domain of the map m, that is, the ideal generated by all norms of differents of elements in R.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/laurent_polynomial/","page":"Generic Laurent polynomials","title":"Generic Laurent polynomials","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/laurent_polynomial/#Generic-Laurent-polynomials","page":"Generic Laurent polynomials","title":"Generic Laurent polynomials","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/laurent_polynomial/","page":"Generic Laurent polynomials","title":"Generic Laurent polynomials","text":"Laurent polynomials are similar to polynomials but can have terms of negative degrees, and form a ring denoted by Rx x^-1 where R is the coefficient ring. AbstractAlgebra.jl provides a generic implementation of Laurent polynomials, built in terms of regular polynomials.","category":"page"},{"location":"AbstractAlgebra/docs/src/laurent_polynomial/#Types-and-parent-objects","page":"Generic Laurent polynomials","title":"Types and parent objects","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/laurent_polynomial/","page":"Generic Laurent polynomials","title":"Generic Laurent polynomials","text":"Two abstract types LaurentPolyElem{T} and LaurentPolynomialRing{T} are defined to represent Laurent polynomials and rings thereof, parameterized on a base ring T.","category":"page"},{"location":"AbstractAlgebra/docs/src/laurent_polynomial/","page":"Generic Laurent polynomials","title":"Generic Laurent polynomials","text":"The type LaurentPolyWrap{T, ...} <: LaurentPolyElem{T} implements generic Laurent polynomials by wrapping regular polynomials: a Laurent polynomial l wraps a polynomial p and an integer n such that l = x^-n * p.","category":"page"},{"location":"AbstractAlgebra/docs/src/laurent_polynomial/","page":"Generic Laurent polynomials","title":"Generic Laurent polynomials","text":"The corresponding parent type is LaurentPolyWrapRing{T, ...} <: LaurentPolynomialRing{T}.","category":"page"},{"location":"AbstractAlgebra/docs/src/laurent_polynomial/#Laurent-polynomials-ring-constructor","page":"Generic Laurent polynomials","title":"Laurent polynomials ring constructor","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/laurent_polynomial/","page":"Generic Laurent polynomials","title":"Generic Laurent polynomials","text":"In order to instantiate Laurent polynomials, one must first construct the parent ring:","category":"page"},{"location":"AbstractAlgebra/docs/src/laurent_polynomial/","page":"Generic Laurent polynomials","title":"Generic Laurent polynomials","text":"LaurentPolynomialRing","category":"page"},{"location":"AbstractAlgebra/docs/src/laurent_polynomial/#AbstractAlgebra.LaurentPolynomialRing","page":"Generic Laurent polynomials","title":"AbstractAlgebra.LaurentPolynomialRing","text":"LaurentPolynomialRing(R::AbstractAlgebra.Ring, s::AbstractString)\n\nGiven a base ring R and string s specifying how the generator (variable) should be printed, return a tuple S, x representing the new Laurent polynomial ring S = Rx 1x and the generator x of the ring.\n\nExamples\n\njulia> R, x = LaurentPolynomialRing(ZZ, \"x\")\n(Univariate Laurent Polynomial Ring in x over Integers, x)\n\njulia> 2x^-3 + x^2\nx^2 + 2*x^-3\n\njulia> rand(R, -3:3 ,-9:9)\n-3*x^2 - 8*x + 4 + 3*x^-1 - 6*x^-2 + 9*x^-3\n\n\n\n\n\n","category":"type"},{"location":"AbstractAlgebra/docs/src/laurent_polynomial/#Basic-functionality","page":"Generic Laurent polynomials","title":"Basic functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/laurent_polynomial/","page":"Generic Laurent polynomials","title":"Generic Laurent polynomials","text":"Laurent polynomials implement the ring interface (except for divexact), and some methods from the polynomial interface, for example:","category":"page"},{"location":"AbstractAlgebra/docs/src/laurent_polynomial/","page":"Generic Laurent polynomials","title":"Generic Laurent polynomials","text":"julia> R, x = LaurentPolynomialRing(ZZ, \"x\")\n(Univariate Laurent Polynomial Ring in x over Integers, x)\n\njulia> var(R)\n:x\n\njulia> symbols(R)\n1-element Array{Symbol,1}:\n :x\n\njulia> nvars(R)\n1\n\njulia> f = x^-2 + 2x\n2*x + x^-2\n\njulia> coeff.(f, -2:2)\n5-element Array{BigInt,1}:\n 1\n 0\n 0\n 2\n 0\n\njulia> setcoeff!(f, 3, big(5))\n5*x^3 + 2*x + x^-2\n\njulia> isgen(f)\nfalse\n\njulia> shift_left(f,2)\n5*x^5 + 2*x^3 + 1\n\njulia> map_coeffs(x->2x, f)\n10*x^3 + 4*x + 2*x^-2\n\njulia> change_base_ring(RealField, f)\n5.0*x^3 + 2.0*x + x^-2\n\njulia> lead(f), trail(f)\n(5, 1)","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/fraction/#Fraction-fields","page":"Fraction fields","title":"Fraction fields","text":"","category":"section"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"Nemo allows the creation of fraction fields over any ring R. We don't require R to be an integral domain, however no attempt is made to deal with the general case. Two fractions ab and cd are equal in Nemo iff ad = bc. Thus, in practice, a greatest common divisor function is currently required for the ring R.","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"In order to make the representation ab unique for printing, we have a notion of canonical unit for elements of a ring R. When canonicalising ab, each of the elements a and b is first divided by the canonical unit of b.","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"The canonical_unit function is defined for elements of every Nemo ring. It must have the properties","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"canonical_unit(u) == u\ncanonical_unit(a*b) == canonical_unit(a)*canonical_unit(b)","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"for any unit u of the ring in question, and a and b arbitrary elements of the ring.","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"For example, the canonical unit of an integer is its sign. Thus a fraction of integers always has positive denominator after canonicalisation.","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"The canonical unit of a polynomial is the canonical unit of its leading coefficient, etc.","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"There are two different kinds of implementation of fraction fields in Nemo: a generic one for the case where no specific implementation exists (provided by AbstractAlgebra.jl), and efficient implementations of fractions over specific rings, usually provided by C/C++ libraries.","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"The following table shows each of the fraction types available in Nemo, the base ring R, and the Julia/Nemo types for that kind of fraction (the type information is mainly of concern to developers).","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"Base ring Library Element type Parent type\nGeneric ring R AbstractAlgebra.jl Generic.Frac{T} Generic.FracField{T}\nmathbbZ Flint fmpq FlintRationalField","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"All fraction element types belong to the abstract type FracElem and all of the fraction field types belong to the abstract type FracField. This enables one to write generic functions that can accept any Nemo fraction type.","category":"page"},{"location":"Nemo/docs/src/fraction/#Fraction-functionality","page":"Fraction fields","title":"Fraction functionality","text":"","category":"section"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"All fraction types in Nemo implement the AbstractAlgebra.jl fraction field interface:","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/fraction_fields","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"In addition, generic fractions fields are implemented in AbstractAlgebra.jl, with the following functionality:","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/fraction","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"All fraction types in Nemo also implement this generic functionality.","category":"page"},{"location":"Nemo/docs/src/fraction/#Basic-manipulation","page":"Fraction fields","title":"Basic manipulation","text":"","category":"section"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"abs(::fmpq)","category":"page"},{"location":"Nemo/docs/src/fraction/#Base.abs-Tuple{fmpq}","page":"Fraction fields","title":"Base.abs","text":"abs(a::fmpq)\n\nReturn the absolute value of a.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"sign(::fmpq)","category":"page"},{"location":"Nemo/docs/src/fraction/#Base.sign-Tuple{fmpq}","page":"Fraction fields","title":"Base.sign","text":"sign(a::fmpq)\n\nReturn the sign of a (-1, 0 or 1) as a fraction.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"height(::fmpq)","category":"page"},{"location":"Nemo/docs/src/fraction/#Nemo.height-Tuple{fmpq}","page":"Fraction fields","title":"Nemo.height","text":"height(a::fmpq)\n\nReturn the height of the fraction a, namely the largest of the absolute values of the numerator and denominator.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"height_bits(::fmpq)","category":"page"},{"location":"Nemo/docs/src/fraction/#Nemo.height_bits-Tuple{fmpq}","page":"Fraction fields","title":"Nemo.height_bits","text":"height_bits(a::fmpq)\n\nReturn the number of bits of the height of the fraction a.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"<<(::fmpq, ::Int)","category":"page"},{"location":"Nemo/docs/src/fraction/#Base.:<<-Tuple{fmpq,Int64}","page":"Fraction fields","title":"Base.:<<","text":"<<(a::fmpq, b::Int)\n\nReturn a times 2^b.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":">>(::fmpq, ::Int)","category":"page"},{"location":"Nemo/docs/src/fraction/#Base.:>>-Tuple{fmpq,Int64}","page":"Fraction fields","title":"Base.:>>","text":">>(a::fmpq, b::Int)\n\nReturn a2^b.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"Rational fractions can be compared with each other and with integers. Julia provides the full range of operators   leq geq which depend on the following functions.","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"isless(::fmpq, ::fmpq)\nisless(::Integer, ::fmpq)\nisless(::fmpq, ::Integer)\nisless(::fmpq, ::fmpz)\nisless(::fmpz, ::fmpq)","category":"page"},{"location":"Nemo/docs/src/fraction/#Base.isless-Tuple{fmpq,fmpq}","page":"Fraction fields","title":"Base.isless","text":"isless(a::fmpq, b::fmpq)\n\nReturn true if a  b, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/#Base.isless-Tuple{Integer,fmpq}","page":"Fraction fields","title":"Base.isless","text":"isless(a::Integer, b::fmpq)\n\nReturn true if a  b, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/#Base.isless-Tuple{fmpq,Integer}","page":"Fraction fields","title":"Base.isless","text":"isless(a::fmpq, b::Integer)\n\nReturn true if a  b, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/#Base.isless-Tuple{fmpq,fmpz}","page":"Fraction fields","title":"Base.isless","text":"isless(a::fmpq, b::fmpz)\n\nReturn true if a  b, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/#Base.isless-Tuple{fmpz,fmpq}","page":"Fraction fields","title":"Base.isless","text":"isless(a::fmpz, b::fmpq)\n\nReturn true if a  b, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"floor(::fmpq)\nceil(::fmpq)","category":"page"},{"location":"Nemo/docs/src/fraction/#Base.floor-Tuple{fmpq}","page":"Fraction fields","title":"Base.floor","text":"floor(a::fmpq)\n\nReturn the greatest integer that is less than or equal to a. The result is returned as a rational with denominator 1.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/#Base.ceil-Tuple{fmpq}","page":"Fraction fields","title":"Base.ceil","text":"ceil(a::fmpq)\n\nReturn the least integer that is greater than or equal to a. The result is returned as a rational with denominator 1.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"Examples","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"d = abs(ZZ(11)//3)\n4 <= ZZ(7)//ZZ(3)","category":"page"},{"location":"Nemo/docs/src/fraction/#Modular-arithmetic","page":"Fraction fields","title":"Modular arithmetic","text":"","category":"section"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"The following functions are available for rationals.","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"mod(a::fmpq, b::fmpz)","category":"page"},{"location":"Nemo/docs/src/fraction/#Base.mod-Tuple{fmpq,fmpz}","page":"Fraction fields","title":"Base.mod","text":"mod(a::fmpq, b::fmpz)\n\nReturn a pmodb where b is an integer coprime to the denominator of a.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"mod(a::fmpq, b::Integer)","category":"page"},{"location":"Nemo/docs/src/fraction/#Base.mod-Tuple{fmpq,Integer}","page":"Fraction fields","title":"Base.mod","text":"mod(a::fmpq, b::Integer)\n\nReturn a pmodb where b is an integer coprime to the denominator of a.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"Examples","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"a = -fmpz(2)//3\nb = fmpz(1)//2\n\nc = mod(a, 7)\nd = mod(b, fmpz(5))","category":"page"},{"location":"Nemo/docs/src/fraction/#Rational-Reconstruction","page":"Fraction fields","title":"Rational Reconstruction","text":"","category":"section"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"Rational reconstruction is available for rational numbers.","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"reconstruct(::fmpz, ::fmpz)\nreconstruct(::fmpz, ::Integer)\nreconstruct(::Integer, ::fmpz)\nreconstruct(::Integer, ::Integer)","category":"page"},{"location":"Nemo/docs/src/fraction/#Nemo.reconstruct-Tuple{fmpz,fmpz}","page":"Fraction fields","title":"Nemo.reconstruct","text":"reconstruct(a::fmpz, b::fmpz)\n\nAttempt to return a rational number nd such that 0 leq n leq lfloorsqrtm2rfloor and 0  d leq lfloorsqrtm2rfloor such that gcd(n d) = 1 and a equiv nd^-1 pmodm. If no solution exists, an exception is thrown.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/#Nemo.reconstruct-Tuple{fmpz,Integer}","page":"Fraction fields","title":"Nemo.reconstruct","text":"reconstruct(a::fmpz, b::Integer)\n\nAttempt to return a rational number nd such that 0 leq n leq lfloorsqrtm2rfloor and 0  d leq lfloorsqrtm2rfloor such that gcd(n d) = 1 and a equiv nd^-1 pmodm. If no solution exists, an exception is thrown.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/#Nemo.reconstruct-Tuple{Integer,fmpz}","page":"Fraction fields","title":"Nemo.reconstruct","text":"reconstruct(a::Integer, b::fmpz)\n\nAttempt to find a rational number nd such that 0 leq n leq lfloorsqrtm2rfloor and 0  d leq lfloorsqrtm2rfloor such that gcd(n d) = 1 and a equiv nd^-1 pmodm. If no solution exists, an exception is thrown.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/#Nemo.reconstruct-Tuple{Integer,Integer}","page":"Fraction fields","title":"Nemo.reconstruct","text":"reconstruct(a::Integer, b::Integer)\n\nAttempt to return a rational number nd such that 0 leq n leq lfloorsqrtm2rfloor and 0  d leq lfloorsqrtm2rfloor such that gcd(n d) = 1 and a equiv nd^-1 pmodm. If no solution exists, an exception is thrown.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"Examples","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"a = reconstruct(7, 13)\nb = reconstruct(fmpz(15), 31)\nc = reconstruct(fmpz(123), fmpz(237))","category":"page"},{"location":"Nemo/docs/src/fraction/#Rational-enumeration","page":"Fraction fields","title":"Rational enumeration","text":"","category":"section"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"Various methods exist to enumerate rationals.","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"next_minimal(::fmpq)","category":"page"},{"location":"Nemo/docs/src/fraction/#Nemo.next_minimal-Tuple{fmpq}","page":"Fraction fields","title":"Nemo.next_minimal","text":"next_minimal(a::fmpq)\n\nGiven a, return the next rational number in the sequence obtained by enumerating all positive denominators q, and for each q enumerating the numerators 1 le p  q in order and generating both pq and qp, but skipping all gcd(pq) neq 1. Starting with zero, this generates every nonnegative rational number once and only once, with the first few entries being 0 1 12 2 13 3 23 32 14 4 34 43 ldots. This enumeration produces the rational numbers in order of minimal height. It has the disadvantage of being somewhat slower to compute than the Calkin-Wilf enumeration. If a  0 we throw a DomainError().\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"next_signed_minimal(::fmpq)","category":"page"},{"location":"Nemo/docs/src/fraction/#Nemo.next_signed_minimal-Tuple{fmpq}","page":"Fraction fields","title":"Nemo.next_signed_minimal","text":"next_signed_minimal(a::fmpq)\n\nGiven a signed rational number a assumed to be in canonical form, return the next element in the minimal-height sequence generated by next_minimal but with negative numbers interleaved. The sequence begins 0 1 -1 12 -12 2 -2 13 -13 ldots. Starting with zero, this generates every rational number once and only once, in order of minimal height.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"next_calkin_wilf(::fmpq)","category":"page"},{"location":"Nemo/docs/src/fraction/#Nemo.next_calkin_wilf-Tuple{fmpq}","page":"Fraction fields","title":"Nemo.next_calkin_wilf","text":"next_calkin_wilf(a::fmpq)\n\nReturn the next number after a in the breadth-first traversal of the Calkin-Wilf tree. Starting with zero, this generates every nonnegative rational number once and only once, with the first few entries being 0 1 12 2 13 32 23 3 14 43 35 52 25 ldots. Despite the appearance of the initial entries, the Calkin-Wilf enumeration does not produce the rational numbers in order of height: some small fractions will appear late in the sequence. This order has the advantage of being faster to produce than the minimal-height order.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"next_signed_calkin_wilf(::fmpq)","category":"page"},{"location":"Nemo/docs/src/fraction/#Nemo.next_signed_calkin_wilf-Tuple{fmpq}","page":"Fraction fields","title":"Nemo.next_signed_calkin_wilf","text":"next_signed_calkin_wilf(a::fmpq)\n\nGiven a signed rational number a returns the next element in the Calkin-Wilf sequence with negative numbers interleaved. The sequence begins 0 1 -1 12 -12 2 -2 13 -13 ldots. Starting with zero, this generates every rational number once and only once, but not in order of minimal height.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"Examples","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"next_minimal(fmpz(2)//3)\nnext_signed_minimal(-fmpz(21)//31)\nnext_calkin_wilf(fmpz(321)//113)\nnext_signed_calkin_wilf(-fmpz(51)//(17))","category":"page"},{"location":"Nemo/docs/src/fraction/#Random-generation","page":"Fraction fields","title":"Random generation","text":"","category":"section"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"rand_bits(::FlintRationalField, b::Int)","category":"page"},{"location":"Nemo/docs/src/fraction/#Nemo.rand_bits-Tuple{FlintRationalField,Int64}","page":"Fraction fields","title":"Nemo.rand_bits","text":"rand_bits(::FlintRationalField, b::Int)\n\nReturn a random signed rational whose numerator and denominator both have b bits before canonicalisation. Note that the resulting numerator and denominator can be smaller than b bits.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/#Special-functions","page":"Fraction fields","title":"Special functions","text":"","category":"section"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"The following special functions are available for specific rings in Nemo.","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"harmonic(::Int)","category":"page"},{"location":"Nemo/docs/src/fraction/#Nemo.harmonic-Tuple{Int64}","page":"Fraction fields","title":"Nemo.harmonic","text":"harmonic(n::Int)\n\nReturn the harmonic number H_n = 1 + 12 + 13 + cdots + 1n. Table lookup is used for H_n whose numerator and denominator fit in a single limb. For larger n, a divide and conquer strategy is used.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"bernoulli(::Int)","category":"page"},{"location":"Nemo/docs/src/fraction/#Nemo.bernoulli-Tuple{Int64}","page":"Fraction fields","title":"Nemo.bernoulli","text":"bernoulli(n::Int)\n\nReturn the Bernoulli number B_n for nonnegative n.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"bernoulli_cache(::Int)","category":"page"},{"location":"Nemo/docs/src/fraction/#Nemo.bernoulli_cache-Tuple{Int64}","page":"Fraction fields","title":"Nemo.bernoulli_cache","text":"bernoulli_cache(n::Int)\n\nPrecomputes and caches all the Bernoulli numbers up to B_n. This is much faster than repeatedly calling bernoulli(k). Once cached, subsequent calls to bernoulli(k) for any k le n will read from the cache, making them virtually free.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"dedekind_sum(::fmpz, ::fmpz)\ndedekind_sum(::fmpz, ::Integer)\ndedekind_sum(::Integer, ::fmpz)\ndedekind_sum(::Integer, ::Integer)","category":"page"},{"location":"Nemo/docs/src/fraction/#Nemo.dedekind_sum-Tuple{fmpz,fmpz}","page":"Fraction fields","title":"Nemo.dedekind_sum","text":"dedekind_sum(h::fmpz, k::fmpz)\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/#Nemo.dedekind_sum-Tuple{fmpz,Integer}","page":"Fraction fields","title":"Nemo.dedekind_sum","text":"dedekind_sum(h::fmpz, k::Integer)\n\nReturn the Dedekind sum s(hk) for arbitrary h and k.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/#Nemo.dedekind_sum-Tuple{Integer,fmpz}","page":"Fraction fields","title":"Nemo.dedekind_sum","text":"dedekind_sum(h::Integer, k::fmpz)\n\nReturn the Dedekind sum s(hk) for arbitrary h and k.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/#Nemo.dedekind_sum-Tuple{Integer,Integer}","page":"Fraction fields","title":"Nemo.dedekind_sum","text":"dedekind_sum(h::Integer, k::Integer)\n\nReturn the Dedekind sum s(hk) for arbitrary h and k.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"Examples","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"a = harmonic(12)\n\nb = dedekind_sum(12, 13)\nc = dedekind_sum(-120, fmpz(1305))\n\nd = bernoulli(12)\n\nbernoulli_cache(100)\ne = bernoulli(100)","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"simplest_between(::fmpq, ::fmpq)","category":"page"},{"location":"Nemo/docs/src/fraction/#Nemo.simplest_between-Tuple{fmpq,fmpq}","page":"Fraction fields","title":"Nemo.simplest_between","text":"  simplest_between(l::fmpq, r::fmpq)\n\nReturn the simplest fraction in the closed interval l r. A canonical fraction a_1  b_1 is defined to be simpler than a_2  b_2 if and only if b_1  b_2 or b_1 = b_2 and a_1  a_2.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"Examples","category":"page"},{"location":"Nemo/docs/src/fraction/","page":"Fraction fields","title":"Fraction fields","text":"simplest_between(fmpq(1//10), fmpq(3//10))","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#Generic-univariate-polynomials-over-a-noncommutative-ring","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"AbstractAlgebra.jl provides a module, implemented in src/generic/NCPoly.jl for generic polynomials over any noncommutative ring belonging to the AbstractAlgebra abstract type hierarchy.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"As well as implementing the Univariate Polynomial interface, there are many additional generic algorithms implemented for such polynomial rings. We describe this generic functionality below.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"All of the generic functionality is part of a submodule of AbstractAlgebra called Generic. This is exported by default so that it is not necessary to qualify the function names with the submodule name.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#Types-and-parent-objects","page":"Generic univariate polynomials over a noncommutative ring","title":"Types and parent objects","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"Polynomials implemented using the AbstractAlgebra generics have type Generic.NCPoly{T} where T is the type of elements of the coefficient ring. Internally they consist of a Julia array of coefficients and some additional fields for length and a parent object, etc. See the file src/generic/GenericTypes.jl for details.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"Parent objects of such polynomials have type Generic.NCPolyRing{T}.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"The string representation of the variable of the polynomial ring and the base/coefficient ring R is stored in the parent object. ","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"The polynomial element types belong to the abstract type AbstractAlgebra.NCPolyElem{T} and the polynomial ring types belong to the abstract type AbstractAlgebra.NCPolyRing{T}. This enables one to write generic functions that can accept any AbstractAlgebra polynomial type.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"Note that both the generic polynomial ring type Generic.NCPolyRing{T} and the abstract type it belongs to, AbstractAlgebra.NCPolyRing{T} are both called NCPolyRing. The  former is a (parameterised) concrete type for a polynomial ring over a given base ring whose elements have type T. The latter is an abstract type representing all polynomial ring types in AbstractAlgebra.jl, whether generic or very specialised (e.g. supplied by a C library).","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#Polynomial-ring-constructors","page":"Generic univariate polynomials over a noncommutative ring","title":"Polynomial ring constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"In order to construct polynomials in AbstractAlgebra.jl, one must first construct the polynomial ring itself. This is accomplished with the following constructor.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"PolynomialRing(R::AbstractAlgebra.NCRing, s::AbstractString; cached::Bool = true)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"Given a base ring R and string s specifying how the generator (variable) should be printed, return a tuple S, x representing the new polynomial ring S = Rx and the generator x of the ring. By default the parent object S will depend only on R and  x and will be cached. Setting the optional argument cached to false will prevent the parent object S from being cached.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"A shorthand version of this function is provided: given a base ring R, we abbreviate the constructor as follows.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"R[\"x\"]","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"Here are some examples of creating polynomial rings and making use of the resulting parent objects to coerce various elements into the polynomial ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"julia> R = MatrixAlgebra(ZZ, 2)\nMatrix Algebra of degree 2 over Integers\n\njulia> S, x = PolynomialRing(R, \"x\")\n(Univariate Polynomial Ring in x over Matrix Algebra of degree 2 over Integers, x)\n\njulia> T, y = PolynomialRing(S, \"y\")\n(Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Matrix Algebra of degree 2 over Integers, y)\n\njulia> U, z = R[\"z\"]\n(Univariate Polynomial Ring in z over Matrix Algebra of degree 2 over Integers, z)\n\njulia> f = S()\n0\n\njulia> g = S(123)\n[123 0; 0 123]\n\njulia> h = T(BigInt(1234))\n[1234 0; 0 1234]\n\njulia> k = T(x + 1)\nx + 1\n\njulia> m = U(z + 1)\nz + 1\n","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"All of the examples here are generic polynomial rings, but specialised implementations of polynomial rings provided by external modules will also usually provide a PolynomialRing constructor to allow creation of their polynomial rings.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#Basic-ring-functionality","page":"Generic univariate polynomials over a noncommutative ring","title":"Basic ring functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"Once a polynomial ring is constructed, there are various ways to construct polynomials in that ring.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"The easiest way is simply using the generator returned by the PolynomialRing constructor and build up the polynomial using basic arithmetic, as described in the Ring interface. ","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"The Julia language also has special syntax for the construction of polynomials in terms of a generator, e.g. we can write 2x instead of 2*x.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"The polynomial rings in AbstractAlgebra.jl implement the full Ring interface. Of course the entire Univariate Polynomial Ring interface is also implemented.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"We give some examples of such functionality.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"julia> R = MatrixAlgebra(ZZ, 2)\nMatrix Algebra of degree 2 over Integers\n\njulia> S, x = PolynomialRing(R, \"x\")\n(Univariate Polynomial Ring in x over Matrix Algebra of degree 2 over Integers, x)\n\njulia> T, y = PolynomialRing(S, \"y\")\n(Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Matrix Algebra of degree 2 over Integers, y)\n\njulia> f = x^3 + 3x + 21\nx^3 + [3 0; 0 3]*x + [21 0; 0 21]\n\njulia> g = (x + 1)*y^2 + 2x + 1\n(x + 1)*y^2 + [2 0; 0 2]*x + 1\n\njulia> h = zero(T)\n0\n\njulia> k = one(S)\n1\n\njulia> isone(k)\ntrue\n\njulia> iszero(f)\nfalse\n\njulia> n = length(g)\n3\n\njulia> U = base_ring(T)\nUnivariate Polynomial Ring in x over Matrix Algebra of degree 2 over Integers\n\njulia> V = base_ring(y + 1)\nUnivariate Polynomial Ring in x over Matrix Algebra of degree 2 over Integers\n\njulia> v = var(T)\n:y\n\njulia> U = parent(y + 1)\nUnivariate Polynomial Ring in y over Univariate Polynomial Ring in x over Matrix Algebra of degree 2 over Integers\n\njulia> g == deepcopy(g)\ntrue","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#Polynomial-functionality-provided-by-AbstractAlgebra.jl","page":"Generic univariate polynomials over a noncommutative ring","title":"Polynomial functionality provided by AbstractAlgebra.jl","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"The functionality listed below is automatically provided by AbstractAlgebra.jl for any polynomial module that implements the full Univariate Polynomial Ring interface over a noncommutative ring. This includes AbstractAlgebra.jl's own generic polynomial rings.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"But if a C library provides all the functionality documented in the Univariate Polynomial Ring interface over a noncommutative ring, then all the functions described here will also be automatically supplied by AbstractAlgebra.jl for that polynomial type.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"Of course, modules are free to provide specific implementations of the functions described here, that override the generic implementation.","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#Basic-functionality","page":"Generic univariate polynomials over a noncommutative ring","title":"Basic functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"leading_coefficient(::NCPolyElem)\ntrailing_coefficient(::NCPolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#AbstractAlgebra.leading_coefficient-Tuple{NCPolyElem}","page":"Generic univariate polynomials over a noncommutative ring","title":"AbstractAlgebra.leading_coefficient","text":"leading_coefficient(a::Generic.PolynomialElem)\n\nReturn the leading coefficient of the given polynomial. This will be the nonzero coefficient of the term with highest degree unless the polynomial in the zero polynomial, in which case a zero coefficient is returned.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#AbstractAlgebra.trailing_coefficient-Tuple{NCPolyElem}","page":"Generic univariate polynomials over a noncommutative ring","title":"AbstractAlgebra.trailing_coefficient","text":"trailing_coefficient(a::Generic.PolynomialElem)\n\nReturn the trailing coefficient of the given polynomial. This will be the nonzero coefficient of the term with lowest degree unless the polynomial is the zero polynomial, in which case a zero coefficient is returned.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"gen(::NCPolyRing)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#AbstractAlgebra.gen-Tuple{AbstractAlgebra.NCPolyRing}","page":"Generic univariate polynomials over a noncommutative ring","title":"AbstractAlgebra.gen","text":"gen(R::AbstractAlgebra.NCPolyRing)\n\nReturn the generator of the given polynomial ring.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"isgen(::NCPolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#AbstractAlgebra.isgen-Tuple{NCPolyElem}","page":"Generic univariate polynomials over a noncommutative ring","title":"AbstractAlgebra.isgen","text":"isgen(a::Generic.PolynomialElem)\n\nReturn true if the given polynomial is the constant generator of its polynomial ring, otherwise return false.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"isunit(::NCPolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#AbstractAlgebra.isunit-Tuple{NCPolyElem}","page":"Generic univariate polynomials over a noncommutative ring","title":"AbstractAlgebra.isunit","text":"isunit(a::Generic.PolynomialElem)\n\nReturn true if the given polynomial is a unit in its polynomial ring, otherwise return false.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"ismonomial(::NCPolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#AbstractAlgebra.ismonomial-Tuple{NCPolyElem}","page":"Generic univariate polynomials over a noncommutative ring","title":"AbstractAlgebra.ismonomial","text":"ismonomial_recursive(a::PolynomialElem)\n\nReturn true if the given polynomial is a monomial.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"isterm(::NCPolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#AbstractAlgebra.Generic.isterm-Tuple{NCPolyElem}","page":"Generic univariate polynomials over a noncommutative ring","title":"AbstractAlgebra.Generic.isterm","text":"isterm(a::PolynomialElem)\n\nReturn true if the given polynomial has one term.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"julia> R = MatrixAlgebra(ZZ, 2)\nMatrix Algebra of degree 2 over Integers\n\njulia> S, x = PolynomialRing(R, \"x\")\n(Univariate Polynomial Ring in x over Matrix Algebra of degree 2 over Integers, x)\n\njulia> T, y = PolynomialRing(S, \"y\")\n(Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Matrix Algebra of degree 2 over Integers, y)\n\njulia> a = zero(T)\n0\n\njulia> b = one(T)\n1\n\njulia> c = BigInt(1)*y^2 + BigInt(1)\ny^2 + 1\n\njulia> d = x*y^2 + (x + 1)*y + 3\nx*y^2 + (x + 1)*y + [3 0; 0 3]\n\njulia> f = leading_coefficient(d)\nx\n\njulia> y = gen(T)\ny\n\njulia> g = isgen(y)\ntrue\n\njulia> m = isunit(b)\ntrue\n\njulia> n = degree(d)\n2\n\njulia> isterm(2y^2)\ntrue\n\njulia> ismonomial(y^2)\ntrue\n","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#Truncation","page":"Generic univariate polynomials over a noncommutative ring","title":"Truncation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"truncate(::NCPolyElem, ::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#Base.truncate-Tuple{NCPolyElem,Int64}","page":"Generic univariate polynomials over a noncommutative ring","title":"Base.truncate","text":"truncate(a::Generic.PolynomialElem, n::Int)\n\nReturn a truncated to n terms.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"mullow(::NCPolyElem{T}, ::NCPolyElem{T}, ::Int) where T <: NCRingElem","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#AbstractAlgebra.Generic.mullow-Union{Tuple{T}, Tuple{NCPolyElem{T},NCPolyElem{T},Int64}} where T<:NCRingElem","page":"Generic univariate polynomials over a noncommutative ring","title":"AbstractAlgebra.Generic.mullow","text":"mullow(a::AbstractAlgebra.NCPolyElem{T}, b::AbstractAlgebra.NCPolyElem{T}, n::Int) where {T <: NCRingElem}\n\nReturn atimes b truncated to n terms.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"julia> R = MatrixAlgebra(ZZ, 2)\nMatrix Algebra of degree 2 over Integers\n\njulia> S, x = PolynomialRing(R, \"x\")\n(Univariate Polynomial Ring in x over Matrix Algebra of degree 2 over Integers, x)\n\njulia> T, y = PolynomialRing(S, \"y\")\n(Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Matrix Algebra of degree 2 over Integers, y)\n\njulia> f = x*y^2 + (x + 1)*y + 3\nx*y^2 + (x + 1)*y + [3 0; 0 3]\n\njulia> g = (x + 1)*y + (x^3 + 2x + 2)\n(x + 1)*y + x^3 + [2 0; 0 2]*x + [2 0; 0 2]\n\njulia> h = truncate(f, 1)\n[3 0; 0 3]\n\njulia> k = mullow(f, g, 4)\n(x^2 + x)*y^3 + (x^4 + [3 0; 0 3]*x^2 + [4 0; 0 4]*x + 1)*y^2 + (x^4 + x^3 + [2 0; 0 2]*x^2 + [7 0; 0 7]*x + [5 0; 0 5])*y + [3 0; 0 3]*x^3 + [6 0; 0 6]*x + [6 0; 0 6]\n","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#Reversal","page":"Generic univariate polynomials over a noncommutative ring","title":"Reversal","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"reverse(::NCPolyElem, ::Int)\nreverse(::NCPolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#Base.reverse-Tuple{NCPolyElem,Int64}","page":"Generic univariate polynomials over a noncommutative ring","title":"Base.reverse","text":"reverse(x::Generic.PolynomialElem, len::Int)\n\nReturn the reverse of the polynomial x, thought of as a polynomial of the given length (the polynomial will be notionally truncated or padded with zeroes before the leading term if necessary to match the specified length). The resulting polynomial is normalised. If len is negative we throw a DomainError().\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#Base.reverse-Tuple{NCPolyElem}","page":"Generic univariate polynomials over a noncommutative ring","title":"Base.reverse","text":"reverse(x::Generic.PolynomialElem)\n\nReturn the reverse of the polynomial x, i.e. the leading coefficient of x becomes the constant coefficient of the result, etc. The resulting polynomial is normalised.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"julia> R = MatrixAlgebra(ZZ, 2)\nMatrix Algebra of degree 2 over Integers\n\njulia> S, x = PolynomialRing(R, \"x\")\n(Univariate Polynomial Ring in x over Matrix Algebra of degree 2 over Integers, x)\n\njulia> T, y = PolynomialRing(S, \"y\")\n(Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Matrix Algebra of degree 2 over Integers, y)\n\njulia> f = x*y^2 + (x + 1)*y + 3\nx*y^2 + (x + 1)*y + [3 0; 0 3]\n\njulia> g = reverse(f, 7)\n[3 0; 0 3]*y^6 + (x + 1)*y^5 + x*y^4\n\njulia> h = reverse(f)\n[3 0; 0 3]*y^2 + (x + 1)*y + x\n","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#Shifting","page":"Generic univariate polynomials over a noncommutative ring","title":"Shifting","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"shift_left(::NCPolyElem, ::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#AbstractAlgebra.Generic.shift_left-Tuple{NCPolyElem,Int64}","page":"Generic univariate polynomials over a noncommutative ring","title":"AbstractAlgebra.Generic.shift_left","text":"shift_left(f::Generic.PolynomialElem, n::Int)\n\nReturn the polynomial f shifted left by n terms, i.e. multiplied by x^n.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"shift_right(::NCPolyElem, ::Int)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#AbstractAlgebra.Generic.shift_right-Tuple{NCPolyElem,Int64}","page":"Generic univariate polynomials over a noncommutative ring","title":"AbstractAlgebra.Generic.shift_right","text":"shift_right(f::Generic.PolynomialElem, n::Int)\n\nReturn the polynomial f shifted right by n terms, i.e. divided by x^n.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"julia> R = MatrixAlgebra(ZZ, 2)\nMatrix Algebra of degree 2 over Integers\n\njulia> S, x = PolynomialRing(R, \"x\")\n(Univariate Polynomial Ring in x over Matrix Algebra of degree 2 over Integers, x)\n\njulia> T, y = PolynomialRing(S, \"y\")\n(Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Matrix Algebra of degree 2 over Integers, y)\n\njulia> f = x*y^2 + (x + 1)*y + 3\nx*y^2 + (x + 1)*y + [3 0; 0 3]\n\njulia> g = shift_left(f, 7)\nx*y^9 + (x + 1)*y^8 + [3 0; 0 3]*y^7\n\njulia> h = shift_right(f, 2)\nx\n","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#Evaluation","page":"Generic univariate polynomials over a noncommutative ring","title":"Evaluation","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"evaluate{T <: NCRingElem}(::NCPolyElem{T}, ::T)\nevaluate(::NCPolyElem, ::Integer)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#AbstractAlgebra.Generic.evaluate-Union{Tuple{T}, Tuple{NCPolyElem{T},T}} where T<:NCRingElem","page":"Generic univariate polynomials over a noncommutative ring","title":"AbstractAlgebra.Generic.evaluate","text":"evaluate(a::AbstractAlgebra.NCPolyElem, b::T) where {T <: NCRingElem}\n\nEvaluate the polynomial a at the value b and return the result.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#AbstractAlgebra.Generic.evaluate-Tuple{NCPolyElem,Integer}","page":"Generic univariate polynomials over a noncommutative ring","title":"AbstractAlgebra.Generic.evaluate","text":"evaluate(a::AbstractAlgebra.NCPolyElem, b::Union{Integer, Rational, AbstractFloat})\n\nEvaluate the polynomial a at the value b and return the result.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"We also overload the functional notation so that the polynomial f can be evaluated at a by writing f(a). ","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"julia> R = MatrixAlgebra(ZZ, 2)\nMatrix Algebra of degree 2 over Integers\n\njulia> S, x = PolynomialRing(R, \"x\")\n(Univariate Polynomial Ring in x over Matrix Algebra of degree 2 over Integers, x)\n\njulia> T, y = PolynomialRing(S, \"y\")\n(Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Matrix Algebra of degree 2 over Integers, y)\n\n\njulia> f = x*y^2 + (x + 1)*y + 3\nx*y^2 + (x + 1)*y + [3 0; 0 3]\n\njulia> k = evaluate(f, 3)\n[12 0; 0 12]*x + [6 0; 0 6]\n\njulia> m = evaluate(f, x^2 + 2x + 1)\nx^5 + [4 0; 0 4]*x^4 + [7 0; 0 7]*x^3 + [7 0; 0 7]*x^2 + [4 0; 0 4]*x + [4 0; 0 4]\n\njulia> r = f(23)\n[552 0; 0 552]*x + [26 0; 0 26]\n","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#Derivative","page":"Generic univariate polynomials over a noncommutative ring","title":"Derivative","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"derivative(::NCPolyElem)","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/#AbstractAlgebra.Generic.derivative-Tuple{NCPolyElem}","page":"Generic univariate polynomials over a noncommutative ring","title":"AbstractAlgebra.Generic.derivative","text":"derivative(a::Generic.PolynomialElem)\n\nReturn the derivative of the polynomial a.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/ncpolynomial/","page":"Generic univariate polynomials over a noncommutative ring","title":"Generic univariate polynomials over a noncommutative ring","text":"julia> R = MatrixAlgebra(ZZ, 2)\nMatrix Algebra of degree 2 over Integers\n\njulia> S, x = PolynomialRing(R, \"x\")\n(Univariate Polynomial Ring in x over Matrix Algebra of degree 2 over Integers, x)\n\njulia> T, y = PolynomialRing(S, \"y\")\n(Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Matrix Algebra of degree 2 over Integers, y)\n\njulia> f = x*y^2 + (x + 1)*y + 3\nx*y^2 + (x + 1)*y + [3 0; 0 3]\n\njulia> h = derivative(f)\n[2 0; 0 2]*x*y + x + 1\n","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/arb/#Real-balls","page":"Real balls","title":"Real balls","text":"","category":"section"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Arbitrary precision real ball arithmetic is supplied by Arb which provides a ball representation which tracks error bounds rigorously. Real numbers are  represented in mid-rad interval form m pm r = m-r m+r.","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"The Arb real field is constructed using the ArbField constructor. This constructs the parent object for the Arb real field.","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"However, we define","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"RealField = ArbField","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"so that one can construct the Arb real field parent object using RealField instead of ArbField.","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"The types of real balls in Nemo are given in the following table, along with the libraries that provide them and the associated types of the parent objects.","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Library Field Element type Parent type\nArb mathbbR (balls) arb ArbField","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"All the real field types belong to the Field abstract type and the types of elements in this field, i.e. balls in this case, belong to the FieldElem abstract type.","category":"page"},{"location":"Nemo/docs/src/arb/#Real-ball-functionality","page":"Real balls","title":"Real ball functionality","text":"","category":"section"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Real balls in Nemo implement the full AbstractAlgebra.jl field interface.","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/fields","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Below, we document the additional functionality provided for real balls.","category":"page"},{"location":"Nemo/docs/src/arb/#Constructors","page":"Real balls","title":"Constructors","text":"","category":"section"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"In order to construct real balls in Nemo, one must first construct the Arb real field itself. This is accomplished with the following constructor.","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"ArbField(prec::Int)","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Return the Arb field with precision in bits prec used for operations on interval midpoints. The precision used for interval radii is a fixed implementation-defined constant (30 bits).","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"We define","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"RealField = ArbField","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"so that one can use RealField in place of ArbField.","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Here is an example of creating an Arb real field and using the resulting parent object to coerce values into the resulting field.","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"RR = RealField(64)\n\na = RR(\"0.25\")\nb = RR(\"0.1 +/- 0.001\")\nc = RR(0.5)\nd = RR(12)","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Note that whilst one can coerce double precision floating point values into an Arb real field, unless those values can be represented exactly in double precision the resulting ball can't be any more precise than the double precision supplied.","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"If instead, values can be represented precisely using decimal arithmetic then one can supply them to Arb using a string. In this case, Arb will store them to the precision specified when creating the Arb field.","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"If the values can be stored precisely as a binary floating point number, Arb will store the values exactly. See the function isexact below for more information.","category":"page"},{"location":"Nemo/docs/src/arb/#Real-ball-constructors","page":"Real balls","title":"Real ball constructors","text":"","category":"section"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"ball(::arb, ::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.ball-Tuple{arb,arb}","page":"Real balls","title":"Nemo.ball","text":"ball(x::arb, y::arb)\n\nConstructs an Arb ball enclosing x_m pm (x_r + y_m + y_r), given the pair (x y) = (x_m pm x_r y_m pm y_r).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"RR = RealField(64)\n\nc = ball(RR(3), RR(\"0.0001\"))","category":"page"},{"location":"Nemo/docs/src/arb/#Conversions","page":"Real balls","title":"Conversions","text":"","category":"section"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"convert(::Type{Float64}, ::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.convert-Tuple{Type{Float64},arb}","page":"Real balls","title":"Base.convert","text":"convert(::Type{Float64}, x::arb)\n\nReturn the midpoint of x rounded down to a machine double.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/#Basic-manipulation","page":"Real balls","title":"Basic manipulation","text":"","category":"section"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"isnonzero(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.isnonzero-Tuple{arb}","page":"Real balls","title":"Nemo.isnonzero","text":"isnonzero(x::arb)\n\nReturn true if x is certainly not equal to zero, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"isfinite(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.isfinite-Tuple{arb}","page":"Real balls","title":"Base.isfinite","text":"isfinite(x::arb)\n\nReturn true if x is finite, i.e. having finite midpoint and radius, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"isexact(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.isexact-Tuple{arb}","page":"Real balls","title":"Nemo.isexact","text":"isexact(x::arb)\n\nReturn true if x is exact, i.e. has zero radius, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"isint(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.isint-Tuple{arb}","page":"Real balls","title":"Nemo.isint","text":"isint(x::arb)\n\nReturn true if x is an exact integer, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"ispositive(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.ispositive-Tuple{arb}","page":"Real balls","title":"Nemo.ispositive","text":"ispositive(x::arb)\n\nReturn true if x is certainly positive, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"isnonnegative(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.isnonnegative-Tuple{arb}","page":"Real balls","title":"Nemo.isnonnegative","text":"isnonnegative(x::arb)\n\nReturn true if x is certainly nonnegative, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"isnegative(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#AbstractAlgebra.isnegative-Tuple{arb}","page":"Real balls","title":"AbstractAlgebra.isnegative","text":"isnegative(x::arb)\n\nReturn true if x is certainly negative, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"isnonpositive(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.isnonpositive-Tuple{arb}","page":"Real balls","title":"Nemo.isnonpositive","text":"isnonpositive(x::arb)\n\nReturn true if x is certainly nonpositive, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"midpoint(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.midpoint-Tuple{arb}","page":"Real balls","title":"Nemo.midpoint","text":"midpoint(x::arb)\n\nReturn the midpoint of the ball x as an Arb ball.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"radius(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.radius-Tuple{arb}","page":"Real balls","title":"Nemo.radius","text":"radius(x::arb)\n\nReturn the radius of the ball x as an Arb ball.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"accuracy_bits(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.accuracy_bits-Tuple{arb}","page":"Real balls","title":"Nemo.accuracy_bits","text":"accuracy_bits(x::arb)\n\nReturn the relative accuracy of x measured in bits, capped between typemax(Int) and -typemax(Int).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"RR = RealField(64)\n\na = RR(\"1.2 +/- 0.001\")\nb = RR(3)\n\nispositive(a)\nisfinite(b)\nisint(b)\nisnegative(a)\nc = radius(a)\nd = midpoint(b)\nf = accuracy_bits(a)","category":"page"},{"location":"Nemo/docs/src/arb/#Printing","page":"Real balls","title":"Printing","text":"","category":"section"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Printing real balls can at first sight be confusing. Lets look at the following example:","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"RR = RealField(64)\n\na = RR(1)\nb = RR(2)\nc = RR(12)\n\nx = ball(a, b)\ny = ball(c, b)\n\nmid = midpoint(x)\nrad = radius(x)\n\nprint(x, \"\\n\", y, \"\\n\", mid, \"\\n\", rad)","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"which generates","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"[+/- 3.01]\n[1e+1 +/- 4.01]\n1.0000000000000000000\n[2.0000000037252902985 +/- 3.81e-20]","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"The first reason that c does not get printed as [1 +/- 2] is because the midpoint does not have a greater exponent than the radius in its scientific notation. By similair reasons we also have that y does not get printed as [12 +/- 2].","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"The second reason is that we get an additional error term after our addition. As we see, radius(c) is not equal to 2, which when printing rounds it up to a reasonable decimal place for printing. This is because real balls keep track of rounding errors of basic arithmetic.","category":"page"},{"location":"Nemo/docs/src/arb/#Containment","page":"Real balls","title":"Containment","text":"","category":"section"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"It is often necessary to determine whether a given exact value or ball is contained in a given real ball or whether two balls overlap. The following functions are provided for this purpose.","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"overlaps(::arb, ::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.overlaps-Tuple{arb,arb}","page":"Real balls","title":"Nemo.overlaps","text":"overlaps(x::arb, y::arb)\n\nReturns true if any part of the ball x overlaps any part of the ball y, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"contains(::arb, ::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.contains-Tuple{arb,arb}","page":"Real balls","title":"Base.contains","text":"contains(x::arb, y::arb)\n\nReturns true if the ball x contains the ball y, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"contains(::arb, ::Integer)\ncontains(::arb, ::fmpz)\ncontains(::arb, ::fmpq)\ncontains{T <: Integer}(::arb, ::Rational{T})\ncontains(::arb, ::BigFloat)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.contains-Tuple{arb,Integer}","page":"Real balls","title":"Base.contains","text":"contains(x::arb, y::Integer)\n\nReturns true if the ball x contains the given integer value, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/#Base.contains-Tuple{arb,fmpz}","page":"Real balls","title":"Base.contains","text":"contains(x::arb, y::fmpz)\n\nReturns true if the ball x contains the given integer value, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/#Base.contains-Tuple{arb,fmpq}","page":"Real balls","title":"Base.contains","text":"contains(x::arb, y::fmpq)\n\nReturns true if the ball x contains the given rational value, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/#Base.contains-Union{Tuple{T}, Tuple{arb,Rational{T}}} where T<:Integer","page":"Real balls","title":"Base.contains","text":"contains(x::arb, y::Rational{T}) where {T <: Integer}\n\nReturns true if the ball x contains the given rational value, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/#Base.contains-Tuple{arb,BigFloat}","page":"Real balls","title":"Base.contains","text":"contains(x::arb, y::BigFloat)\n\nReturns true if the ball x contains the given floating point value, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"The following functions are also provided for determining if a ball intersects a certain part of the real number line.","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"contains_zero(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.contains_zero-Tuple{arb}","page":"Real balls","title":"Nemo.contains_zero","text":"contains_zero(x::arb)\n\nReturns true if the ball x contains zero, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"contains_negative(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.contains_negative-Tuple{arb}","page":"Real balls","title":"Nemo.contains_negative","text":"contains_negative(x::arb)\n\nReturns true if the ball x contains any negative value, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"contains_positive(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.contains_positive-Tuple{arb}","page":"Real balls","title":"Nemo.contains_positive","text":"contains_positive(x::arb)\n\nReturns true if the ball x contains any positive value, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"contains_nonnegative(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.contains_nonnegative-Tuple{arb}","page":"Real balls","title":"Nemo.contains_nonnegative","text":"contains_nonnegative(x::arb)\n\nReturns true if the ball x contains any nonnegative value, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"contains_nonpositive(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.contains_nonpositive-Tuple{arb}","page":"Real balls","title":"Nemo.contains_nonpositive","text":"contains_nonpositive(x::arb)\n\nReturns true if the ball x contains any nonpositive value, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"RR = RealField(64)\nx = RR(\"1 +/- 0.001\")\ny = RR(\"3\")\n\noverlaps(x, y)\ncontains(x, y)\ncontains(y, 3)\ncontains(x, ZZ(1)//2)\ncontains_zero(x)\ncontains_positive(y)","category":"page"},{"location":"Nemo/docs/src/arb/#Comparison","page":"Real balls","title":"Comparison","text":"","category":"section"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Nemo provides a full range of comparison operations for Arb balls. Note that a ball is considered less than another ball if every value in the first ball is less than every value in the second ball, etc.","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"In addition to the standard comparison operators, we introduce an exact equality. This is distinct from arithmetic equality implemented by ==, which merely compares up to the minimum of the precisions of its operands.","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"isequal(::arb, ::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.isequal-Tuple{arb,arb}","page":"Real balls","title":"Base.isequal","text":"isequal(x::arb, y::arb)\n\nReturn true if the balls x and y are precisely equal, i.e. have the same midpoints and radii.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"We also provide a full range of ad hoc comparison operators. These are implemented directly in Julia, but we document them as though isless and == were provided.","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Function\n==(x::arb, y::Integer)\n==(x::Integer, y::arb)\n==(x::arb, y::fmpz)\n==(x::fmpz, y::arb)\n==(x::arb, y::Float64)\n==(x::Float64, y::arb)\nisless(x::arb, y::Integer)\nisless(x::Integer, y::arb)\nisless(x::arb, y::fmpz)\nisless(x::fmpz, y::arb)\nisless(x::arb, y::Float64)\nisless(x::Float64, y::arb)\nisless(x::arb, y::BigFloat)\nisless(x::BigFloat, y::arb)\nisless(x::arb, y::fmpq)\nisless(x::fmpq, y::arb)","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"RR = RealField(64)\nx = RR(\"1 +/- 0.001\")\ny = RR(\"3\")\nz = RR(\"4\")\n\nisequal(x, deepcopy(x))\nx == 3\nZZ(3) < z\nx != 1.23","category":"page"},{"location":"Nemo/docs/src/arb/#Absolute-value","page":"Real balls","title":"Absolute value","text":"","category":"section"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"abs(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.abs-Tuple{arb}","page":"Real balls","title":"Base.abs","text":"abs(x::arb)\n\nReturn the absolute value of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"RR = RealField(64)\nx = RR(\"-1 +/- 0.001\")\n\na = abs(x)","category":"page"},{"location":"Nemo/docs/src/arb/#Shifting","page":"Real balls","title":"Shifting","text":"","category":"section"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"ldexp(x::arb, y::Int)\nldexp(x::arb, y::fmpz)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.Math.ldexp-Tuple{arb,Int64}","page":"Real balls","title":"Base.Math.ldexp","text":"ldexp(x::arb, y::Int)\n\nReturn 2^yx. Note that y can be positive, zero or negative.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/#Base.Math.ldexp-Tuple{arb,fmpz}","page":"Real balls","title":"Base.Math.ldexp","text":"ldexp(x::arb, y::fmpz)\n\nReturn 2^yx. Note that y can be positive, zero or negative.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"RR = RealField(64)\nx = RR(\"-3 +/- 0.001\")\n\na = ldexp(x, 23)\nb = ldexp(x, -ZZ(15))","category":"page"},{"location":"Nemo/docs/src/arb/#Miscellaneous-operations","page":"Real balls","title":"Miscellaneous operations","text":"","category":"section"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"trim(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.trim-Tuple{arb}","page":"Real balls","title":"Nemo.trim","text":"trim(x::arb)\n\nReturn an arb interval containing x but which may be more economical, by rounding off insignificant bits from the midpoint.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"unique_integer(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.unique_integer-Tuple{arb}","page":"Real balls","title":"Nemo.unique_integer","text":"unique_integer(x::arb)\n\nReturn a pair where the first value is a boolean and the second is an fmpz integer. The boolean indicates whether the interval x contains a unique integer. If this is the case, the second return value is set to this unique integer.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"setunion(::arb, ::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.setunion-Tuple{arb,arb}","page":"Real balls","title":"Nemo.setunion","text":"setunion(x::arb, y::arb)\n\nReturn an arb containing the union of the intervals represented by x and y.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"RR = RealField(64)\nx = RR(\"-3 +/- 0.001\")\ny = RR(\"2 +/- 0.5\")\n\na = trim(x)\nb, c = unique_integer(x)\nd = setunion(x, y)","category":"page"},{"location":"Nemo/docs/src/arb/#Constants","page":"Real balls","title":"Constants","text":"","category":"section"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"const_pi(::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.const_pi-Tuple{ArbField}","page":"Real balls","title":"Nemo.const_pi","text":"const_pi(r::ArbField)\n\nReturn pi = 314159ldots as an element of r.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"const_e(::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.const_e-Tuple{ArbField}","page":"Real balls","title":"Nemo.const_e","text":"const_e(r::ArbField)\n\nReturn e = 271828ldots as an element of r.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"const_log2(::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.const_log2-Tuple{ArbField}","page":"Real balls","title":"Nemo.const_log2","text":"const_log2(r::ArbField)\n\nReturn log(2) = 069314ldots as an element of r.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"const_log10(::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.const_log10-Tuple{ArbField}","page":"Real balls","title":"Nemo.const_log10","text":"const_log10(r::ArbField)\n\nReturn log(10) = 2302585ldots as an element of r.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"const_euler(::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.const_euler-Tuple{ArbField}","page":"Real balls","title":"Nemo.const_euler","text":"const_euler(r::ArbField)\n\nReturn Euler's constant gamma = 0577215ldots as an element of r.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"const_catalan(::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.const_catalan-Tuple{ArbField}","page":"Real balls","title":"Nemo.const_catalan","text":"const_catalan(r::ArbField)\n\nReturn Catalan's constant C = 0915965ldots as an element of r.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"const_khinchin(::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.const_khinchin-Tuple{ArbField}","page":"Real balls","title":"Nemo.const_khinchin","text":"const_khinchin(r::ArbField)\n\nReturn Khinchin's constant K = 2685452ldots as an element of r.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"const_glaisher(::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.const_glaisher-Tuple{ArbField}","page":"Real balls","title":"Nemo.const_glaisher","text":"const_glaisher(r::ArbField)\n\nReturn Glaisher's constant A = 1282427ldots as an element of r.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"RR = RealField(200)\n\na = const_pi(RR)\nb = const_e(RR)\nc = const_euler(RR)\nd = const_glaisher(RR)","category":"page"},{"location":"Nemo/docs/src/arb/#Mathematical-and-special-functions","page":"Real balls","title":"Mathematical and special functions","text":"","category":"section"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"floor(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.floor-Tuple{arb}","page":"Real balls","title":"Base.floor","text":"floor(x::arb)\n\nCompute the floor of x, i.e. the greatest integer not exceeding x, as an Arb.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"ceil(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.ceil-Tuple{arb}","page":"Real balls","title":"Base.ceil","text":"ceil(x::arb)\n\nReturn the ceiling of x, i.e. the least integer not less than x, as an Arb.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Base.sqrt(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.sqrt-Tuple{arb}","page":"Real balls","title":"Base.sqrt","text":"sqrt(x::arb)\n\nReturn the square root of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"rsqrt(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.rsqrt-Tuple{arb}","page":"Real balls","title":"Nemo.rsqrt","text":"rsqrt(x::arb)\n\nReturn the reciprocal of the square root of x, i.e. 1sqrtx.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"sqrt1pm1(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.sqrt1pm1-Tuple{arb}","page":"Real balls","title":"Nemo.sqrt1pm1","text":"sqrt1pm1(x::arb)\n\nReturn sqrt1+x-1, evaluated accurately for small x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"sqrtpos(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.sqrtpos-Tuple{arb}","page":"Real balls","title":"Nemo.sqrtpos","text":"sqrtpos(x::arb)\n\nReturn the sqrt root of x, assuming that x represents a nonnegative number. Thus any negative number in the input interval is discarded.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"log(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.log-Tuple{arb}","page":"Real balls","title":"Base.log","text":"log(x::arb)\n\nReturn the principal branch of the logarithm of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"log1p(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.log1p-Tuple{arb}","page":"Real balls","title":"Base.log1p","text":"log1p(x::arb)\n\nReturn log(1+x), evaluated accurately for small x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Base.exp(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.exp-Tuple{arb}","page":"Real balls","title":"Base.exp","text":"exp(x::arb)\n\nReturn the exponential of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"expm1(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.expm1-Tuple{arb}","page":"Real balls","title":"Base.expm1","text":"expm1(x::arb)\n\nReturn exp(x)-1, evaluated accurately for small x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"sin(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.sin-Tuple{arb}","page":"Real balls","title":"Base.sin","text":"sin(x::arb)\n\nReturn the sine of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"cos(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.cos-Tuple{arb}","page":"Real balls","title":"Base.cos","text":"cos(x::arb)\n\nReturn the cosine of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"sinpi(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.Math.sinpi-Tuple{arb}","page":"Real balls","title":"Base.Math.sinpi","text":"sinpi(x::arb)\n\nReturn the sine of pi x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"cospi(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.Math.cospi-Tuple{arb}","page":"Real balls","title":"Base.Math.cospi","text":"cospi(x::arb)\n\nReturn the cosine of pi x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"tan(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.tan-Tuple{arb}","page":"Real balls","title":"Base.tan","text":"tan(x::arb)\n\nReturn the tangent of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"cot(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.Math.cot-Tuple{arb}","page":"Real balls","title":"Base.Math.cot","text":"cot(x::arb)\n\nReturn the cotangent of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"tanpi(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.tanpi-Tuple{arb}","page":"Real balls","title":"Nemo.tanpi","text":"tanpi(x::arb)\n\nReturn the tangent of pi x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"cotpi(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.cotpi-Tuple{arb}","page":"Real balls","title":"Nemo.cotpi","text":"cotpi(x::arb)\n\nReturn the cotangent of pi x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"sinh(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.sinh-Tuple{arb}","page":"Real balls","title":"Base.sinh","text":"sinh(x::arb)\n\nReturn the hyperbolic sine of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"cosh(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.cosh-Tuple{arb}","page":"Real balls","title":"Base.cosh","text":"cosh(x::arb)\n\nReturn the hyperbolic cosine of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"tanh(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.tanh-Tuple{arb}","page":"Real balls","title":"Base.tanh","text":"tanh(x::arb)\n\nReturn the hyperbolic tangent of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"coth(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.Math.coth-Tuple{arb}","page":"Real balls","title":"Base.Math.coth","text":"coth(x::arb)\n\nReturn the hyperbolic cotangent of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"atan(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.atan-Tuple{arb}","page":"Real balls","title":"Base.atan","text":"atan(x::arb)\n\nReturn the arctangent of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"asin(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.asin-Tuple{arb}","page":"Real balls","title":"Base.asin","text":"asin(x::arb)\n\nReturn the arcsine of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"acos(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.acos-Tuple{arb}","page":"Real balls","title":"Base.acos","text":"acos(x::arb)\n\nReturn the arccosine of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"atanh(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.atanh-Tuple{arb}","page":"Real balls","title":"Base.atanh","text":"atanh(x::arb)\n\nReturn the hyperbolic arctangent of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"asinh(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.asinh-Tuple{arb}","page":"Real balls","title":"Base.asinh","text":"asinh(x::arb)\n\nReturn the hyperbolic arcsine of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"acosh(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.acosh-Tuple{arb}","page":"Real balls","title":"Base.acosh","text":"acosh(x::arb)\n\nReturn the hyperbolic arccosine of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"gamma(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.gamma-Tuple{arb}","page":"Real balls","title":"Nemo.gamma","text":"gamma(x::arb)\n\nReturn the Gamma function evaluated at x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"lgamma(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.lgamma-Tuple{arb}","page":"Real balls","title":"Nemo.lgamma","text":"lgamma(x::arb)\n\nReturn the logarithm of the Gamma function evaluated at x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"rgamma(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.rgamma-Tuple{arb}","page":"Real balls","title":"Nemo.rgamma","text":"rgamma(x::arb)\n\nReturn the reciprocal of the Gamma function evaluated at x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"digamma(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.digamma-Tuple{arb}","page":"Real balls","title":"Nemo.digamma","text":"digamma(x::arb)\n\nReturn the  logarithmic derivative of the gamma function evaluated at x, i.e. psi(x).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"zeta(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.zeta-Tuple{arb}","page":"Real balls","title":"Nemo.zeta","text":"zeta(x::arb)\n\nReturn the Riemann zeta function evaluated at x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"sincos(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.Math.sincos-Tuple{arb}","page":"Real balls","title":"Base.Math.sincos","text":"sincos(x::arb)\n\nReturn a tuple s c consisting of the sine s and cosine c of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"sincospi(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.sincospi-Tuple{arb}","page":"Real balls","title":"Nemo.sincospi","text":"sincospi(x::arb)\n\nReturn a tuple s c consisting of the sine s and cosine c of pi x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"sinpi(::fmpq, ::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.Math.sinpi-Tuple{fmpq,ArbField}","page":"Real balls","title":"Base.Math.sinpi","text":"sinpi(x::fmpq, r::ArbField)\n\nReturn the sine of pi x in the given Arb field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"cospi(::fmpq, ::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.Math.cospi-Tuple{fmpq,ArbField}","page":"Real balls","title":"Base.Math.cospi","text":"cospi(x::fmpq, r::ArbField)\n\nReturn the cosine of pi x in the given Arb field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"sincospi(::fmpq, ::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.sincospi-Tuple{fmpq,ArbField}","page":"Real balls","title":"Nemo.sincospi","text":"sincospi(x::fmpq, r::ArbField)\n\nReturn a tuple s c consisting of the sine and cosine of pi x in the given Arb field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"sinhcosh(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.sinhcosh-Tuple{arb}","page":"Real balls","title":"Nemo.sinhcosh","text":"sinhcosh(x::arb)\n\nReturn a tuple s c consisting of the hyperbolic sine and cosine of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"atan2(::arb, ::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.atan2-Tuple{arb,arb}","page":"Real balls","title":"Nemo.atan2","text":"atan2(x::arb, y::arb)\n\nReturn atan2(ba) = arg(a+bi).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"agm(::arb, ::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.agm-Tuple{arb,arb}","page":"Real balls","title":"Nemo.agm","text":"agm(x::arb, y::arb)\n\nReturn the arithmetic-geometric mean of x and y\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"zeta(::arb, ::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.zeta-Tuple{arb,arb}","page":"Real balls","title":"Nemo.zeta","text":"zeta(s::arb, a::arb)\n\nReturn the Hurwitz zeta function zeta(sa).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"hypot(::arb, ::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.Math.hypot-Tuple{arb,arb}","page":"Real balls","title":"Base.Math.hypot","text":"hypot(x::arb, y::arb)\n\nReturn sqrtx^2 + y^2.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"root(::arb, ::Int)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.root-Tuple{arb,Int64}","page":"Real balls","title":"Nemo.root","text":"root(x::arb, n::Int)\n\nReturn the n-th root of x. We require x geq 0.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"fac(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.fac-Tuple{arb}","page":"Real balls","title":"Nemo.fac","text":"fac(x::arb)\n\nReturn the factorial of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"fac(::Int, ::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.fac-Tuple{Int64,ArbField}","page":"Real balls","title":"Nemo.fac","text":"fac(n::Int, r::ArbField)\n\nReturn the factorial of n in the given Arb field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"binom(::arb, ::UInt)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.binom-Tuple{arb,UInt64}","page":"Real balls","title":"Nemo.binom","text":"binom(x::arb, n::UInt)\n\nReturn the binomial coefficient x choose n.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"binom(::UInt, ::UInt, ::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.binom-Tuple{UInt64,UInt64,ArbField}","page":"Real balls","title":"Nemo.binom","text":"binom(n::UInt, k::UInt, r::ArbField)\n\nReturn the binomial coefficient n choose k in the given Arb field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"fib(::fmpz, ::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.fib-Tuple{fmpz,ArbField}","page":"Real balls","title":"Nemo.fib","text":"fib(n::fmpz, r::ArbField)\n\nReturn the n-th Fibonacci number in the given Arb field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"fib(::Int, ::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.fib-Tuple{Int64,ArbField}","page":"Real balls","title":"Nemo.fib","text":"fib(n::Int, r::ArbField)\n\nReturn the n-th Fibonacci number in the given Arb field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"gamma(::fmpz, ::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.gamma-Tuple{fmpz,ArbField}","page":"Real balls","title":"Nemo.gamma","text":"gamma(x::fmpz, r::ArbField)\n\nReturn the Gamma function evaluated at x in the given Arb field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"gamma(::fmpq, ::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.gamma-Tuple{fmpq,ArbField}","page":"Real balls","title":"Nemo.gamma","text":"gamma(x::fmpq, r::ArbField)\n\nReturn the Gamma function evaluated at x in the given Arb field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"zeta(::Int, ::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.zeta-Tuple{Int64,ArbField}","page":"Real balls","title":"Nemo.zeta","text":"zeta(n::Int, r::ArbField)\n\nReturn the Riemann zeta function zeta(n) as an element of the given Arb field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"bernoulli(::Int, ::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.bernoulli-Tuple{Int64,ArbField}","page":"Real balls","title":"Nemo.bernoulli","text":"bernoulli(n::Int, r::ArbField)\n\nReturn the n-th Bernoulli number as an element of the given Arb field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"risingfac(::arb, ::Int)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.risingfac-Tuple{arb,Int64}","page":"Real balls","title":"Nemo.risingfac","text":"risingfac(x::arb, n::Int)\n\nReturn the rising factorial x(x + 1)ldots (x + n - 1) as an Arb.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"risingfac(::fmpq, ::Int, ::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.risingfac-Tuple{fmpq,Int64,ArbField}","page":"Real balls","title":"Nemo.risingfac","text":"risingfac(x::fmpq, n::Int, r::ArbField)\n\nReturn the rising factorial x(x + 1)ldots (x + n - 1) as an element of the given Arb field.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"risingfac2(::arb, ::Int)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.risingfac2-Tuple{arb,Int64}","page":"Real balls","title":"Nemo.risingfac2","text":"risingfac2(x::arb, n::Int)\n\nReturn a tuple containing the rising factorial x(x + 1)ldots (x + n - 1) and its derivative.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"polylog(::Union{arb,Int}, ::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.polylog-Tuple{Union{Int64, arb},arb}","page":"Real balls","title":"Nemo.polylog","text":"polylog(s::Union{arb,Int}, a::arb)\n\nReturn the polylogarithm Li_s(a).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"chebyshev_t(::Int, ::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#AbstractAlgebra.Generic.chebyshev_t-Tuple{Int64,arb}","page":"Real balls","title":"AbstractAlgebra.Generic.chebyshev_t","text":"chebyshev_t(n::Int, x::arb)\n\nReturn the value of the Chebyshev polynomial T_n(x).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"chebyshev_u(::Int, ::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#AbstractAlgebra.Generic.chebyshev_u-Tuple{Int64,arb}","page":"Real balls","title":"AbstractAlgebra.Generic.chebyshev_u","text":"chebyshev_u(n::Int, x::arb)\n\nReturn the value of the Chebyshev polynomial U_n(x).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"chebyshev_t2(::Int, ::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.chebyshev_t2-Tuple{Int64,arb}","page":"Real balls","title":"Nemo.chebyshev_t2","text":"chebyshev_t2(n::Int, x::arb)\n\nReturn the tuple (T_n(x) T_n-1(x)).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"chebyshev_u2(::Int, ::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.chebyshev_u2-Tuple{Int64,arb}","page":"Real balls","title":"Nemo.chebyshev_u2","text":"chebyshev_u2(n::Int, x::arb)\n\nReturn the tuple (U_n(x) U_n-1(x))\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"bell(::fmpz, ::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.bell-Tuple{fmpz,ArbField}","page":"Real balls","title":"Nemo.bell","text":"bell(n::fmpz, r::ArbField)\n\nReturn the Bell number B_n as an element of r.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"bell(::Int, ::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.bell-Tuple{Int64,ArbField}","page":"Real balls","title":"Nemo.bell","text":"bell(n::Int, r::ArbField)\n\nReturn the Bell number B_n as an element of r.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"numpart(::fmpz, ::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.numpart-Tuple{fmpz,ArbField}","page":"Real balls","title":"Nemo.numpart","text":"numpart(n::fmpz, r::ArbField)\n\nReturn the number of partitions p(n) as an element of r.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"numpart(::Int, ::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.numpart-Tuple{Int64,ArbField}","page":"Real balls","title":"Nemo.numpart","text":"numpart(n::Int, r::ArbField)\n\nReturn the number of partitions p(n) as an element of r.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"RR = RealField(64)\n\na = floor(exp(RR(1)))\nb = sinpi(QQ(5,6), RR)\nc = gamma(QQ(1,3), RealField(256))\nd = bernoulli(1000, RealField(53))\nf = polylog(3, RR(-10))","category":"page"},{"location":"Nemo/docs/src/arb/#Linear-dependence","page":"Real balls","title":"Linear dependence","text":"","category":"section"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"lindep(::Array{arb, 1}, n::Int)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.lindep-Tuple{Array{arb,1},Int64}","page":"Real balls","title":"Nemo.lindep","text":"lindep(A::Array{arb, 1}, bits::Int)\n\nFind a small linear combination of the entries of the array A that is small (using LLL). The entries are first scaled by the given number of bits before truncating to integers for use in LLL. This function can be used to find linear dependence between a list of real numbers. The algorithm is heuristic only and returns an array of Nemo integers representing the linear combination.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"RR = RealField(128)\n\na = RR(-0.33198902958450931620250069492231652319)\n\nV = [RR(1), a, a^2, a^3, a^4, a^5]\nW = lindep(V, 20)","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"simplest_rational_inside(::arb)","category":"page"},{"location":"Nemo/docs/src/arb/#Nemo.simplest_rational_inside-Tuple{arb}","page":"Real balls","title":"Nemo.simplest_rational_inside","text":"  simplest_rational_inside(x::arb)\n\nReturn the simplest fraction inside the ball x. A canonical fraction a_1b_1 is defined to be simpler than a_2b_2 iff b_1  b_2 or b_1 = b_2 and a_1  a_2.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"RR = RealField(64)\nsimplest_rational_inside(const_pi(RR))","category":"page"},{"location":"Nemo/docs/src/arb/#Random-generation","page":"Real balls","title":"Random generation","text":"","category":"section"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"rand(::ArbField)","category":"page"},{"location":"Nemo/docs/src/arb/#Base.rand-Tuple{ArbField}","page":"Real balls","title":"Base.rand","text":"rand(r::ArbField; randtype::Symbol=:null)\n\nReturn a random element in the given Arb field. The values are distributed non-uniformly in order to exercise corner cases.\n\nThe randtype default is :null for which the midpoint and radius lie within 0 1. Another option is :null_exact which return a midpoint in 0 1 with a zero radius. The rest of the options are based on the option :randtype whose only contraint is to return finite numbers. The options include :exact which return a radius that is zero, precise which return a radius around 2^-mathrmprec the magnitude of the midpoint, :wide whose returned radius might be big relative to its midpoint, and :special which return a midpoint and radius that might be NaN or infinity.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"Examples","category":"page"},{"location":"Nemo/docs/src/arb/","page":"Real balls","title":"Real balls","text":"RR = RealField(100)\n\na = rand(RR)\nb = rand(RR; randtype = :null_exact)\nc = rand(RR; randtype = :exact)\nd = rand(RR; randtype = :special)","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"CurrentModule = AbstractAlgebra\nDocTestSetup = quote\n    using AbstractAlgebra\nend","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/#Rational-field","page":"Rational field","title":"Rational field","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"AbstractAlgebra.jl provides a module, implemented in src/julia/Rational.jl for making Julia Rational{BigInt}s conform to the AbstractAlgebra.jl Field interface.","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"In addition to providing a parent object QQ for Julia Rational{BigInt}s, we implement any additional functionality required by AbstractAlgebra.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"Because Rational{BigInt} cannot be directly included in the AbstractAlgebra.jl abstract type hierarchy, we achieve integration of Julia Rational{BigInt}s by introducing a type union, called FieldElement, which is a union of AbstractAlgebra.FieldElem and a number of Julia types, including Rational{BigInt}. Everywhere that FieldElem is notionally used in AbstractAlgebra.jl, we are in fact using FieldElement, with additional care being taken to avoid ambiguities.","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"The details of how this is done are technical, and we refer the reader to the implementation for details. For most intents and purposes, one can think of the Julia Rational{BigInt} type as belonging to AbstractAlgebra.FieldElem.","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"One other technicality is that Julia defines certain functions for Rational{BigInt}, such as sqrt and exp differently to what AbstractAlgebra.jl requires. To get around this, we redefine these functions internally to AbstractAlgebra.jl, without redefining them for users of AbstractAlgebra.jl. This allows the internals of AbstractAlgebra.jl to function correctly, without broadcasting pirate definitions of already defined Julia functions to the world.","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"To access the internal definitions, one can use AbstractAlgebra.sqrt and AbstractAlgebra.exp, etc.","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/#Types-and-parent-objects","page":"Rational field","title":"Types and parent objects","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"Rationals have type Rational{BigInt}, as in Julia itself. We simply supplement the functionality for this type as required for computer algebra.","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"The parent objects of such integers has type Rationals{BigInt}.","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"For convenience, we also make Rational{Int} a part of the AbstractAlgebra.jl type hierarchy and its parent object (accessible as qq) has type Rationals{Int}. But we caution that this type is not particularly useful as a model of the rationals and may not function as expected within AbstractAlgebra.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/#Rational-constructors","page":"Rational field","title":"Rational constructors","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"In order to construct rationals in AbstractAlgebra.jl, one can first construct the rational field itself. This is accomplished using either of the following constructors.","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"FractionField(R::Integers{BigInt})","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"Rationals{BigInt}()","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"This gives the unique object of type Rationals{BigInt} representing the field of rationals in AbstractAlgebra.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"In practice, one simply uses QQ which is assigned to be the return value of the above constructor. There is no need to call the constructor in practice.","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"Here are some examples of creating the rational field and making use of the resulting parent object to coerce various elements into the field.","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"julia> f = QQ()\n0//1\n\njulia> g = QQ(123)\n123//1\n\njulia> h = QQ(BigInt(1234))\n1234//1\n\njulia> k = QQ(BigInt(12), BigInt(7))\n12//7\n\njulia> QQ == FractionField(ZZ)\ntrue\n","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/#Basic-field-functionality","page":"Rational field","title":"Basic field functionality","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"The rational field in AbstractAlgebra.jl implements the full Field and Fraction Field interfaces.","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"We give some examples of such functionality.","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"julia> f = QQ(12, 7)\n12//7\n\njulia> h = zero(QQ)\n0//1\n\njulia> k = one(QQ)\n1//1\n\njulia> isone(k)\ntrue\n\njulia> iszero(f)\nfalse\n\njulia> U = base_ring(QQ)\nIntegers\n\njulia> V = base_ring(f)\nIntegers\n\njulia> T = parent(f)\nRationals\n\njulia> f == deepcopy(f)\ntrue\n\njulia> g = f + 12\n96//7\n\njulia> r = ZZ(12)//ZZ(7)\n12//7\n\njulia> n = numerator(r)\n12\n","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/#Rational-functionality-provided-by-AbstractAlgebra.jl","page":"Rational field","title":"Rational functionality provided by AbstractAlgebra.jl","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"The functionality below supplements that provided by Julia itself for its Rational{BigInt} type.","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/#Square-root","page":"Rational field","title":"Square root","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"AbstractAlgebra.sqrt(a::Rational{BigInt})","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/#AbstractAlgebra.sqrt-Tuple{Rational{BigInt}}","page":"Rational field","title":"AbstractAlgebra.sqrt","text":"sqrt(a::Rational{T}) where T <: Integer\n\nReturn the square root of a if it is the square of a rational, otherwise throw an error.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"issquare(a::Rational{BigInt})","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/#AbstractAlgebra.Generic.issquare-Tuple{Rational{BigInt}}","page":"Rational field","title":"AbstractAlgebra.Generic.issquare","text":"issquare(f::AbstractAlgebra.PolyElem{T}) where T <: RingElement\n\nReturn true if f is a perfect square.\n\n\n\nissquare(a::Rational{T}) where T <: Integer\n\nReturn true if a is the square of a rational.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"AbstractAlgebra.exp(a::Rational{BigInt})","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/#AbstractAlgebra.exp-Tuple{Rational{BigInt}}","page":"Rational field","title":"AbstractAlgebra.exp","text":"exp(a::Rational{T}) where T <: Integer\n\nReturn 1 if a = 0, otherwise throw an exception.\n\n\n\n","category":"method"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"Examples","category":"page"},{"location":"AbstractAlgebra/docs/src/rational/","page":"Rational field","title":"Rational field","text":"julia> d = AbstractAlgebra.sqrt(ZZ(36)//ZZ(25))\n6//5\n\njulia> issquare(ZZ(9)//ZZ(16))\ntrue\n\njulia> m = AbstractAlgebra.exp(ZZ(0)//ZZ(1))\n1//1","category":"page"},{"location":"Hecke/docs/src/sparse/intro/#Sparse-linear-algebra","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"","category":"section"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"CurrentModule = Hecke","category":"page"},{"location":"Hecke/docs/src/sparse/intro/#Introduction","page":"Sparse linear algebra","title":"Introduction","text":"","category":"section"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"This chapter deals with sparse linear algebra over commutative rings and fields.","category":"page"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"Sparse linear algebra, that is, linear algebra with sparse matrices,  plays an important role in various algorithms in algebraic number theory. For example, it is one of the key ingredients in the computation of class groups and discrete logarithms using index calculus methods.","category":"page"},{"location":"Hecke/docs/src/sparse/intro/#Sparse-rows","page":"Sparse linear algebra","title":"Sparse rows","text":"","category":"section"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"Building blocks for sparse matrices are sparse rows, which are modelled by objects of type \\texttt{SRow}. More precisely, the type is of parametrized form objects of type SRow. More precisely, the type is of parametrized form SRow{T}, where T is the element type of the base ring R. For example, SRow{fmpz} is the type for sparse rows over the integers.","category":"page"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"It is important to note that sparse rows do not have a fixed number of columns, that is, they represent elements of  (x_i)_i in R^mathbbN mid x_i = 0 text for almost all i. In particular any two sparse rows over the same base ring can be added.","category":"page"},{"location":"Hecke/docs/src/sparse/intro/#Creation","page":"Sparse linear algebra","title":"Creation","text":"","category":"section"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"sparse_row(::FlintIntegerRing, ::Vector{Tuple{Int, fmpz}})\nsparse_row(::FlintIntegerRing, ::Vector{Tuple{Int, Int}})\nsparse_row(::FlintIntegerRing, ::Vector{Int}, ::Vector{fmpz})","category":"page"},{"location":"Hecke/docs/src/sparse/intro/#Hecke.sparse_row-Tuple{FlintIntegerRing,Array{Tuple{Int64,fmpz},1}}","page":"Sparse linear algebra","title":"Hecke.sparse_row","text":"sparse_row(R::Ring, J::Vector{Tuple{Int, T}}) -> SRow{T}\n\nConstructs the sparse row (a_i)_i with a_i_j = x_j, where J = (i_j x_j)_j. The elements x_i must belong to the ring R.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Hecke.sparse_row-Tuple{FlintIntegerRing,Array{Tuple{Int64,Int64},1}}","page":"Sparse linear algebra","title":"Hecke.sparse_row","text":"sparse_row(R::Ring, J::Vector{Tuple{Int, T}}) -> SRow{T}\n\nConstructs the sparse row (a_i)_i with a_i_j = x_j, where J = (i_j x_j)_j. The elements x_i must belong to the ring R.\n\n\n\nsparse_row(R::Ring, J::Vector{Tuple{Int, Int}}) -> SRow\n\nConstructs the sparse row (a_i)_i over R with a_i_j = x_j, where J = (i_j x_j)_j.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Hecke.sparse_row-Tuple{FlintIntegerRing,Array{Int64,1},Array{fmpz,1}}","page":"Sparse linear algebra","title":"Hecke.sparse_row","text":"sparse_row(R::Ring, J::Vector{Int}, V::Vector{T}) -> SRow{T}\n\nConstructs the sparse row (a_i)_i over R with a_i_j = x_j, where J = (i_j)_j and V = (x_j)_j.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Basic-operations","page":"Sparse linear algebra","title":"Basic operations","text":"","category":"section"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"==(::SRow{fmpz}, ::SRow{fmpz})\n+(::SRow{fmpz}, ::SRow{fmpz})\ngetindex(::SRow{fmpz}, ::Int)\n*(::fmpz, ::SRow{fmpz})\ndiv(::SRow{fmpz}, ::fmpz)\ndivexact(::SRow{fmpz}, ::fmpz)\nadd_scaled_row(::SRow{fmpz}, ::SRow{fmpz}, ::fmpz)","category":"page"},{"location":"Hecke/docs/src/sparse/intro/#Base.:==-Tuple{SRow{fmpz},SRow{fmpz}}","page":"Sparse linear algebra","title":"Base.:==","text":"==(x::SRow, y::SRow)\n\nChecks whether x and y are the same sparse row, that is, whether x and y have the same non-zero entries.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Base.:+-Tuple{SRow{fmpz},SRow{fmpz}}","page":"Sparse linear algebra","title":"Base.:+","text":"+(A::SRow, B::SRow) -> SRow\n\nReturns the sum of A and B.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Base.getindex-Tuple{SRow{fmpz},Int64}","page":"Sparse linear algebra","title":"Base.getindex","text":"getindex(A::SRow, j::Int) -> RingElem\n\nGiven a sparse row (a_i)_i and an index j return a_j.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Base.:*-Tuple{fmpz,SRow{fmpz}}","page":"Sparse linear algebra","title":"Base.:*","text":"*(b::T, A::SRow{T}) -> SRow\n\nReturn the sparse row obtained by multiplying all elements of A by b.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Base.div-Tuple{SRow{fmpz},fmpz}","page":"Sparse linear algebra","title":"Base.div","text":"div(A::SRow{T}, b::T) -> SRow\n\nReturn the sparse row obtained by dividing all elements of A by b using div.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#AbstractAlgebra.Generic.divexact-Tuple{SRow{fmpz},fmpz}","page":"Sparse linear algebra","title":"AbstractAlgebra.Generic.divexact","text":"divexact(A::SRow{T}, b::T) -> SRow\n\nReturn the sparse row obtained by dividing all elements of A by b using divexact.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Hecke.add_scaled_row-Tuple{SRow{fmpz},SRow{fmpz},fmpz}","page":"Sparse linear algebra","title":"Hecke.add_scaled_row","text":"add_scaled_row(A::SRow{T}, B::SRow{T}, c::T) -> SRow{T}\n\nReturns the row c A + B.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Change-of-base-ring","page":"Sparse linear algebra","title":"Change of base ring","text":"","category":"section"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"change_base_ring(::FlintIntegerRing, ::SRow{fmpz})","category":"page"},{"location":"Hecke/docs/src/sparse/intro/#AbstractAlgebra.change_base_ring-Tuple{FlintIntegerRing,SRow{fmpz}}","page":"Sparse linear algebra","title":"AbstractAlgebra.change_base_ring","text":"change_base_ring(R::Ring, A::SRow) -> SRow\n\nCreate a new sparse row by coercing all elements into the ring R.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Maximum,-minimum-and-2-norm","page":"Sparse linear algebra","title":"Maximum, minimum and 2-norm","text":"","category":"section"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"maximum(::SRow{fmpz})\nminimum(::SRow{fmpz})\nnorm2(::SRow{fmpz})","category":"page"},{"location":"Hecke/docs/src/sparse/intro/#Base.maximum-Tuple{SRow{fmpz}}","page":"Sparse linear algebra","title":"Base.maximum","text":"maximum(A::SRow{T}) -> T\n\nReturns the largest entry of A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Base.minimum-Tuple{SRow{fmpz}}","page":"Sparse linear algebra","title":"Base.minimum","text":"  minimum(A::NfRelOrdIdl) -> NfOrdIdl\n  minimum(A::NfRelOrdIdl) -> NfRelOrdIdl\n\nReturns the ideal A cap O where O is the maximal order of the coefficient ideals of A.\n\n\n\nminimum(A::SRow{T}) -> T\n\nReturns the smallest entry of A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Hecke.norm2-Tuple{SRow{fmpz}}","page":"Sparse linear algebra","title":"Hecke.norm2","text":"norm2(A::SRow{T} -> T\n\nReturns A cdot A^t.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Functionality-for-integral-sparse-rows","page":"Sparse linear algebra","title":"Functionality for integral sparse rows","text":"","category":"section"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"lift(::SRow{nmod})\nmod!(::SRow{fmpz}, ::fmpz)\nmod_sym!(::SRow{fmpz}, ::fmpz)\nmaximum(::typeof(abs), ::SRow{fmpz})","category":"page"},{"location":"Hecke/docs/src/sparse/intro/#Nemo.lift-Tuple{SRow{Nemo.nmod}}","page":"Sparse linear algebra","title":"Nemo.lift","text":"lift(A::SRow{nmod}) -> SRow{fmpz}\n\nReturn the sparse row obtained by lifting all entries in A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Hecke.mod!-Tuple{SRow{fmpz},fmpz}","page":"Sparse linear algebra","title":"Hecke.mod!","text":"mod!(A::SRow{fmpz}, n::fmpz) -> SRow{fmpz}\n\nInplace reduction of all entries of A modulo n to the positive residue system.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Hecke.mod_sym!-Tuple{SRow{fmpz},fmpz}","page":"Sparse linear algebra","title":"Hecke.mod_sym!","text":"mod_sym!(A::SRow{fmpz}, n::fmpz) -> SRow{fmpz}\n\nInplace reduction of all entries of A modulo n to the symmetric residue system.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Base.maximum-Tuple{typeof(abs),SRow{fmpz}}","page":"Sparse linear algebra","title":"Base.maximum","text":"maximum(abs, A::SRow{fmpz}) -> fmpz\n\nReturns the largest, in absolute value, entry of A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Sparse-matrices","page":"Sparse linear algebra","title":"Sparse matrices","text":"","category":"section"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"Let R be a commutative ring. Sparse matrices with base ring R are modelled by objects of type SMat. More precisely, the type is of parametrized form SRow{T}, where T is the element type of the base ring. For example, SMat{fmpz} is the type for sparse matrices over the integers.","category":"page"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"In constrast to sparse rows, sparse matrices have a fixed number of rows and columns, that is, they represent elements of the matrices space mathrmMat_ntimes m(R). Internally, sparse matrices are implemented as an array of sparse rows.  As a consequence, unlike their dense counterparts, sparse matrices have a mutable number of rows and it is very performant to add additional rows.","category":"page"},{"location":"Hecke/docs/src/sparse/intro/#Construction","page":"Sparse linear algebra","title":"Construction","text":"","category":"section"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"sparse_matrix(::Ring)","category":"page"},{"location":"Hecke/docs/src/sparse/intro/#Hecke.sparse_matrix-Tuple{AbstractAlgebra.Ring}","page":"Sparse linear algebra","title":"Hecke.sparse_matrix","text":"sparse_matrix(R::Ring) -> SMat\n\nReturn an empty sparse matrix with base ring R.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"Sparse matrices can also be created from dense matrices as well as from julia arrays:","category":"page"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"sparse_matrix(::MatElem; keepzrows)\nsparse_matrix(::Array{T, 2}) where {T}\nsparse_matrix(::Ring, ::Array{T, 2}) where {T}","category":"page"},{"location":"Hecke/docs/src/sparse/intro/#Hecke.sparse_matrix-Tuple{MatElem}","page":"Sparse linear algebra","title":"Hecke.sparse_matrix","text":"sparse_matrix(A::MatElem; keepzrows::Bool = true)\n\nConstructs the sparse matrix corresponding to the dense matrix A. If keepzrows is false, then the constructor will drop any zero row of A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Hecke.sparse_matrix-Union{Tuple{Array{T,2}}, Tuple{T}} where T","page":"Sparse linear algebra","title":"Hecke.sparse_matrix","text":"sparse_matrix(R::Ring, A::Array{T, 2}) -> SMat\n\nConstructs the sparse matrix over R corresponding to A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Hecke.sparse_matrix-Union{Tuple{T}, Tuple{AbstractAlgebra.Ring,Array{T,2}}} where T","page":"Sparse linear algebra","title":"Hecke.sparse_matrix","text":"sparse_matrix(R::Ring, A::Array{T, 2}) -> SMat\n\nConstructs the sparse matrix over R corresponding to A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"The normal way however, is to add rows:","category":"page"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"push!(::SMat{T}, ::SRow{T}) where {T}","category":"page"},{"location":"Hecke/docs/src/sparse/intro/#Base.push!-Union{Tuple{T}, Tuple{SMat{T},SRow{T}}} where T","page":"Sparse linear algebra","title":"Base.push!","text":"push!(A::SMat{T}, B::SRow{T}) where T\n\nAppends the sparse row B to A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"Sparse matrices can also be concatenated to form larger ones:","category":"page"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"vcat!(::SMat{T}, ::SMat{T}) where {T}\nvcat(::SMat{T}, ::SMat{T}) where {T}\nhcat!(::SMat{T}, ::SMat{T}) where {T}\nhcat(::SMat{T}, ::SMat{T}) where {T}","category":"page"},{"location":"Hecke/docs/src/sparse/intro/#Hecke.vcat!-Union{Tuple{T}, Tuple{SMat{T},SMat{T}}} where T","page":"Sparse linear algebra","title":"Hecke.vcat!","text":"vcat!(A::SMat, B::SMat) -> SMat\n\nVertically joins A and B inplace, that is, the rows of B are appended to A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Base.vcat-Union{Tuple{T}, Tuple{SMat{T},SMat{T}}} where T","page":"Sparse linear algebra","title":"Base.vcat","text":"vcat(A::SMat, B::SMat) -> SMat\n\nVertically joins A and B.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Hecke.hcat!-Union{Tuple{T}, Tuple{SMat{T},SMat{T}}} where T","page":"Sparse linear algebra","title":"Hecke.hcat!","text":"hcat!(A::SMat, B::SMat) -> SMat\n\nHorizontally concatenates A and B, inplace, changing A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Base.hcat-Union{Tuple{T}, Tuple{SMat{T},SMat{T}}} where T","page":"Sparse linear algebra","title":"Base.hcat","text":"hcat(A::SMat, B::SMat) -> SMat\n\nHorizontally concatenates A and B.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"(Normal julia cat is also supported)","category":"page"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"There are special constructors:","category":"page"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"identity_matrix(::Type{SMat}, ::Ring, ::Int)\nzero_matrix(::Type{SMat}, ::Ring, ::Int)\nzero_matrix(::Type{SMat}, ::Ring, ::Int, ::Int)","category":"page"},{"location":"Hecke/docs/src/sparse/intro/#AbstractAlgebra.Generic.identity_matrix-Tuple{Type{SMat},AbstractAlgebra.Ring,Int64}","page":"Sparse linear algebra","title":"AbstractAlgebra.Generic.identity_matrix","text":"identity_matrix(::Type{SMat}, R::Ring, n::Int)\n\nReturn a sparse n times n identity matrix over R.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#AbstractAlgebra.Generic.zero_matrix-Tuple{Type{SMat},AbstractAlgebra.Ring,Int64}","page":"Sparse linear algebra","title":"AbstractAlgebra.Generic.zero_matrix","text":"zero_matrix(::Type{SMat}, R::Ring, n::Int)\n\nReturn a sparse n times n zero matrix over R.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#AbstractAlgebra.Generic.zero_matrix-Tuple{Type{SMat},AbstractAlgebra.Ring,Int64,Int64}","page":"Sparse linear algebra","title":"AbstractAlgebra.Generic.zero_matrix","text":"zero_matrix(::Type{SMat}, R::Ring, n::Int, m::Int)\n\nReturn a sparse n times m zero matrix over R.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"Slices:","category":"page"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"sub(::SMat, ::UnitRange, ::UnitRange)","category":"page"},{"location":"Hecke/docs/src/sparse/intro/#AbstractAlgebra.Generic.sub-Tuple{SMat,UnitRange,UnitRange}","page":"Sparse linear algebra","title":"AbstractAlgebra.Generic.sub","text":"sub(A::SMat, r::UnitRange, c::UnitRange) -> SMat\n\nReturn the submatrix of A, where the rows correspond to r and the columns correspond to c.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"Transpose:","category":"page"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"transpose(A::SMat)","category":"page"},{"location":"Hecke/docs/src/sparse/intro/#Base.transpose-Tuple{SMat}","page":"Sparse linear algebra","title":"Base.transpose","text":"transpose(A::SMat) -> SMat\n\nReturns the transpose of A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Elementary-Properties","page":"Sparse linear algebra","title":"Elementary Properties","text":"","category":"section"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"sparsity(::SMat)\ndensity(::SMat)\nnnz(::SMat)\nnrows(::SMat)\nncols(::SMat)\nisone(::SMat)\niszero(::SMat)","category":"page"},{"location":"Hecke/docs/src/sparse/intro/#Hecke.sparsity-Tuple{SMat}","page":"Sparse linear algebra","title":"Hecke.sparsity","text":"sparsity(A::SMat) -> Float64\n\nReturn the sparsity of A, that is, the number of zero-valued elements divided by the number of all elements.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Hecke.density-Tuple{SMat}","page":"Sparse linear algebra","title":"Hecke.density","text":"density(A::SMat) -> Float64\n\nReturn the density of A, that is, the number of nonzero-valued elements divided by the number of all elements.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#SparseArrays.nnz-Tuple{SMat}","page":"Sparse linear algebra","title":"SparseArrays.nnz","text":"nnz(A::SMat) -> Int\n\nReturn the number of non-zero entries of A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#AbstractAlgebra.Generic.nrows-Tuple{SMat}","page":"Sparse linear algebra","title":"AbstractAlgebra.Generic.nrows","text":"nrows(A::SMat) -> Int\n\nReturn the number of rows of A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#AbstractAlgebra.Generic.ncols-Tuple{SMat}","page":"Sparse linear algebra","title":"AbstractAlgebra.Generic.ncols","text":"ncols(A::SMat) -> Int\n\nReturn the number of columns of A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Base.isone-Tuple{SMat}","page":"Sparse linear algebra","title":"Base.isone","text":"isone(A::SMat)\n\nTests if A is an identity matrix.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Base.iszero-Tuple{SMat}","page":"Sparse linear algebra","title":"Base.iszero","text":"iszero(A::SMat)\n\nTests if A is a zero matrix.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Manipulation/-Access","page":"Sparse linear algebra","title":"Manipulation/ Access","text":"","category":"section"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"getindex(::SMat{T}, ::Int, ::Int) where {T}\ngetindex(::SMat{T}, ::Int) where {T}\nsetindex!(::SMat{T}, ::SRow{T}, ::Int) where {T}","category":"page"},{"location":"Hecke/docs/src/sparse/intro/#Base.getindex-Union{Tuple{T}, Tuple{SMat{T},Int64,Int64}} where T","page":"Sparse linear algebra","title":"Base.getindex","text":"getindex(A::SMat, i::Int, j::Int)\n\nGiven a sparse matrix A = (a_ij)_i j, return the entry a_ij.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Base.getindex-Union{Tuple{T}, Tuple{SMat{T},Int64}} where T","page":"Sparse linear algebra","title":"Base.getindex","text":"getindex(A::SMat, i::Int) -> SRow\n\nGiven a sparse matrix A and an index i, return the i-th row of A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Base.setindex!-Union{Tuple{T}, Tuple{SMat{T},SRow{T},Int64}} where T","page":"Sparse linear algebra","title":"Base.setindex!","text":"setindex!(A::SMat, b::SRow, i::Int)\n\nGiven a sparse matrix A, a sparse row b and an index i, set the i-th row of A equal to b.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"Changing of the ring:","category":"page"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"map_entries(f, ::SMat)\nchange_base_ring(::Ring, ::SMat)","category":"page"},{"location":"Hecke/docs/src/sparse/intro/#AbstractAlgebra.Generic.map_entries-Tuple{Any,SMat}","page":"Sparse linear algebra","title":"AbstractAlgebra.Generic.map_entries","text":"map_entries(f, A::SMat) -> SMat\n\nGiven a sparse matrix A and a callable object f, this function will construct a new sparse matrix by applying f to all elements of A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#AbstractAlgebra.change_base_ring-Tuple{AbstractAlgebra.Ring,SMat}","page":"Sparse linear algebra","title":"AbstractAlgebra.change_base_ring","text":"change_base_ring(R::Ring, A::SMat)\n\nCreate a new sparse matrix by coercing all elements into the ring R.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Arithmetic","page":"Sparse linear algebra","title":"Arithmetic","text":"","category":"section"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"Various products:","category":"page"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"Hecke.mul(::SMat{T}, ::AbstractVector{T}) where {T}\nHecke.mul(::SMat{T}, ::AbstractArray{T, 2})  where {T}\nHecke.mul(::SMat{T}, ::MatElem{T}) where {T}\nHecke.mul(::SRow{T}, ::SMat{T}) where {T}\n*(::T, ::SMat{T}) where {T <: RingElem}\n*(::Integer, ::SMat{T}) where {T}\n*(::fmpz, ::SMat{T}) where {T}","category":"page"},{"location":"Hecke/docs/src/sparse/intro/#Hecke.mul-Union{Tuple{T}, Tuple{SMat{T},AbstractArray{T,1}}} where T","page":"Sparse linear algebra","title":"Hecke.mul","text":"mul(A::SMat{T}, b::AbstractVector{T}) -> Vector{T}\n\nReturn the product A cdot b as a dense vector.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Hecke.mul-Union{Tuple{T}, Tuple{SMat{T},AbstractArray{T,2}}} where T","page":"Sparse linear algebra","title":"Hecke.mul","text":"mul(A::SMat{T}, b::AbstractArray{T, 2}) -> Array{T, 2}\n\nReturn the product A cdot b as a dense array.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Hecke.mul-Union{Tuple{T}, Tuple{SMat{T},MatElem{T}}} where T","page":"Sparse linear algebra","title":"Hecke.mul","text":"mul(A::SMat{T}, b::MatElem{T}) -> MatElem\n\nReturn the product A cdot b as a dense matrix.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Hecke.mul-Union{Tuple{T}, Tuple{SRow{T},SMat{T}}} where T","page":"Sparse linear algebra","title":"Hecke.mul","text":"mul(A::SRow, B::SMat) -> SRow\n\nReturn the product Acdot B as a sparse row.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Base.:*-Union{Tuple{T}, Tuple{T,SMat{T}}} where T<:RingElem","page":"Sparse linear algebra","title":"Base.:*","text":"*(b::T, A::SMat{T}) -> SMat{T}\n\nReturn the product b cdot A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Base.:*-Union{Tuple{T}, Tuple{Integer,SMat{T}}} where T","page":"Sparse linear algebra","title":"Base.:*","text":"*(b::Integer, A::SMat{T}) -> SMat{T}\n\nReturn the product b cdot A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Base.:*-Union{Tuple{T}, Tuple{fmpz,SMat{T}}} where T","page":"Sparse linear algebra","title":"Base.:*","text":"*(b::fmpz, A::SMat{T}) -> SMat{T}\n\nReturn the product b cdot A.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"Other:","category":"page"},{"location":"Hecke/docs/src/sparse/intro/","page":"Sparse linear algebra","title":"Sparse linear algebra","text":"+(::SMat{T}, ::SMat{T}) where {T}\n-(::SMat{T}, ::SMat{T}) where {T}\n==(::SMat{T}, ::SMat{T}) where {T}","category":"page"},{"location":"Hecke/docs/src/sparse/intro/#Base.:+-Union{Tuple{T}, Tuple{SMat{T},SMat{T}}} where T","page":"Sparse linear algebra","title":"Base.:+","text":"+(A::SMat, B::SMat) -> SMat\n\nReturn the sum A + B.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Base.:--Union{Tuple{T}, Tuple{SMat{T},SMat{T}}} where T","page":"Sparse linear algebra","title":"Base.:-","text":"-(A::SMat, B::SMat) -> SMat\n\nReturn the difference A - B.\n\n\n\n","category":"method"},{"location":"Hecke/docs/src/sparse/intro/#Base.:==-Union{Tuple{T}, Tuple{SMat{T},SMat{T}}} where T","page":"Sparse linear algebra","title":"Base.:==","text":"==(A::SMat, B::SMat) -> Bool\n\nReturn whether A is equal to B.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/integer/#Integers","page":"Integers","title":"Integers","text":"","category":"section"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"The default integer type in Nemo is provided by Flint. The associated ring of integers is represented by the constant parent object called FlintZZ.","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"For convenience we define","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"ZZ = FlintZZ","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"so that integers can be constructed using ZZ instead of FlintZZ. Note that this is the name of a specific parent object, not the name of its type.","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"The types of the integer ring parent objects and elements of the associated rings of integers are given in the following table according to the library provding them.","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Library Element type Parent type\nFlint fmpz FlintIntegerRing","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"All integer element types belong directly to the abstract type RingElem and all the integer ring parent object types belong to the abstract type Ring.","category":"page"},{"location":"Nemo/docs/src/integer/#Integer-functionality","page":"Integers","title":"Integer functionality","text":"","category":"section"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Nemo integers implement the whole of the ring and Euclidean ring interfaces of AbstractAlgebra.jl.","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/rings","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/euclidean.","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Below, we describe the functionality that is specific to the Nemo/Flint integer ring.","category":"page"},{"location":"Nemo/docs/src/integer/#Constructors","page":"Integers","title":"Constructors","text":"","category":"section"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"ZZ(n::Integer)","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Coerce a Julia integer value into the integer ring.","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"ZZ(n::String)","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Parse the given string as an integer.","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"ZZ(n::Float64)\nZZ(n::Float32)\nZZ(n::Float16)\nZZ(n::BigFloat)","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Coerce the given floating point number into the integer ring, assuming that it can be exactly represented as an integer.","category":"page"},{"location":"Nemo/docs/src/integer/#Basic-manipulation","page":"Integers","title":"Basic manipulation","text":"","category":"section"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"isunit(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#AbstractAlgebra.isunit-Tuple{fmpz}","page":"Integers","title":"AbstractAlgebra.isunit","text":"isunit(a::fmpz)\n\nReturn true if a is a unit, i.e. pm 1, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"sign(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Base.sign-Tuple{fmpz}","page":"Integers","title":"Base.sign","text":"sign(a::fmpz)\n\nReturn the sign of a, i.e. +1, 0 or -1.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"size(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Base.size-Tuple{fmpz}","page":"Integers","title":"Base.size","text":"size(a::fmpz)\n\nReturn the number of limbs required to store the absolute value of a.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"fits(::Type{UInt}, ::fmpz)\nfits(::Type{Int}, ::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.fits-Tuple{Type{UInt64},fmpz}","page":"Integers","title":"Nemo.fits","text":"fits(::Type{UInt}, a::fmpz)\n\nReturn true if a fits into a UInt, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/#Nemo.fits-Tuple{Type{Int64},fmpz}","page":"Integers","title":"Nemo.fits","text":"fits(::Type{Int}, a::fmpz)\n\nReturn true if a fits into an Int, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"denominator(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Base.denominator-Tuple{fmpz}","page":"Integers","title":"Base.denominator","text":"denominator(a::fmpz)\n\nReturn the denominator of a thought of as a rational. Always returns 1.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"numerator(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Base.numerator-Tuple{fmpz}","page":"Integers","title":"Base.numerator","text":"numerator(a::fmpz)\n\nReturn the numerator of a thought of as a rational. Always returns a.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Examples","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"a = ZZ(12)\n\nisunit(a)\nsign(a)\ns = size(a)\nfits(Int, a)\nn = numerator(a)\nd = denominator(a)","category":"page"},{"location":"Nemo/docs/src/integer/#Euclidean-division","page":"Integers","title":"Euclidean division","text":"","category":"section"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Nemo also provides a large number of Euclidean division operations. Recall that for a dividend a and divisor b, we can write a = bq + r with 0 leq r  b. We call q the quotient and r the remainder.","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"We distinguish three cases. If q is rounded towards zero, r will have the same sign as a. If q is rounded towards plus infinity, r will have the opposite sign to b. Finally, if q is rounded towards minus infinity, r will have the same sign as b.","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"In the following table we list the division functions and their rounding behaviour. We also give the return value of the function, with q representing return of the quotient and r representing return of the remainder.","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Function Return Rounding\nmod r towards minus infinity\nrem r towards zero\ndiv q towards minus infinity\ndivrem(a::fmpz, b::fmpz) q, r towards minus infinity\ntdivrem(a::fmpz, b::fmpz) q, r towards zero\nfdivrem(a::fmpz, b::fmpz) q, r towards minus infinity","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"N.B: the internal definition of Nemo.div and Nemo.divrem are the same as fdiv and fdivrem. The definitions in the table are of Base.div and Base.divrem which agree with Julia's definitions of div and divrem.","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Nemo also offers the following ad hoc division operators. The notation and description is as for the other Euclidean division functions.","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Function Return Rounding\nmod(a::fmpz, b::Int) r towards minus infinity\nrem(a::fmpz, b::Int) r towards zero\ndiv(a::fmpz, b::Int) q towards zero\ntdiv(a::fmpz, b::Int) q towards zero\nfdiv(a::fmpz, b::Int) q towards minus infinity\ncdiv(a::fmpz, b::Int) q towards plus infinity","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"N.B: the internal definition of Nemo.div is the same as fdiv. The definition in the table is Base.div which agrees with Julia's definition of div.","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"The following functions are also available, for the case where one is dividing by a power of 2. In other words, for Euclidean division of the form a = b2^d + r. These are useful for bit twiddling.","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Function Return Rounding\ntdivpow2(a::fmpz, d::Int) q towards zero\nfdivpow2(a::fmpz, d::Int) q towards minus infinity\nfmodpow2(a::fmpz, d::Int) r towards minus infinity\ncdivpow2(a::fmpz, d::Int) q towards plus infinity","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Examples","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"a = fmpz(12)\nb = fmpz(5)\n\nq, r = divrem(a, b)\nc = cdiv(a, b)\nd = fdiv(a, b)\nf = tdivpow2(a, 2)\ng = fmodpow2(a, 3)","category":"page"},{"location":"Nemo/docs/src/integer/#Comparison","page":"Integers","title":"Comparison","text":"","category":"section"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Instead of isless we implement a function cmp(a, b) which returns a positive value if a  b, zero if a == b and a negative value if a  b. We then implement all the other operators, including == in terms of cmp.","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"For convenience we also implement a cmpabs(a, b) function which returns a positive value if a  b, zero if a == b and a negative value if a  b. This can be slightly faster than a call to cmp or one of the comparison operators when comparing nonnegative values for example.","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Here is a list of the comparison functions implemented, with the understanding that cmp provides all of the comparison operators listed above.","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Function\ncmp(a::fmpz, b::fmpz)\ncmpabs(a::fmpz, b::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"We also provide the following ad hoc comparisons which again provide all of the comparison operators mentioned above.","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Function\ncmp(a::fmpz, b::Int)\ncmp(a::Int, b::fmpz)\ncmp(a::fmpz, b::UInt)\ncmp(a::UInt, b::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Examples","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"a = ZZ(12)\nb = ZZ(3)\n\na < b\na != b\na > 4\n5 <= b\ncmpabs(a, b)","category":"page"},{"location":"Nemo/docs/src/integer/#Shifting","page":"Integers","title":"Shifting","text":"","category":"section"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"<<(::fmpz, ::Int)","category":"page"},{"location":"Nemo/docs/src/integer/#Base.:<<-Tuple{fmpz,Int64}","page":"Integers","title":"Base.:<<","text":"<<(x::fmpz, c::Int)\n\nReturn 2^cx where c geq 0.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":">>(::fmpz, ::Int)","category":"page"},{"location":"Nemo/docs/src/integer/#Base.:>>-Tuple{fmpz,Int64}","page":"Integers","title":"Base.:>>","text":">>(x::fmpz, c::Int)\n\nReturn x2^c, discarding any remainder, where c geq 0.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Examples","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"a = fmpz(12)\n\na << 3\na >> 5","category":"page"},{"location":"Nemo/docs/src/integer/#Modular-arithmetic","page":"Integers","title":"Modular arithmetic","text":"","category":"section"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"sqrtmod(::fmpz, ::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.sqrtmod-Tuple{fmpz,fmpz}","page":"Integers","title":"Nemo.sqrtmod","text":"sqrtmod(x::fmpz, m::fmpz)\n\nReturn a square root of x (mod m) if one exists. The remainder will be in the range 0 m). We require that m is prime, otherwise the algorithm may not terminate.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"crt(::fmpz, ::fmpz, ::fmpz, m::fmpz, ::Bool)\ncrt(::fmpz, ::fmpz, ::Int, ::Int, ::Bool)","category":"page"},{"location":"Nemo/docs/src/integer/#AbstractAlgebra.crt-Tuple{fmpz,fmpz,fmpz,fmpz,Bool}","page":"Integers","title":"AbstractAlgebra.crt","text":"crt(r1::fmpz, m1::fmpz, r2::fmpz, m2::fmpz, signed=false)\n\nReturn r such that r equiv r_1 (mod m_1) and r equiv r_2 (mod m_2). If signed = true, r will be in the range -m_1m_22  r leq m_1m_22. If signed = false the value will be in the range 0 leq r  m_1m_2.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/#AbstractAlgebra.crt-Tuple{fmpz,fmpz,Int64,Int64,Bool}","page":"Integers","title":"AbstractAlgebra.crt","text":"crt(r1::fmpz, m1::fmpz, r2::Int, m2::Int, signed=false)\n\nReturn r such that r equiv r_1 (mod m_1) and r equiv r_2 (mod m_2). If signed = true, r will be in the range -m_1m_22  r leq m_1m_22. If signed = false the value will be in the range 0 leq r  m_1m_2.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Examples","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"c = sqrtmod(ZZ(12), ZZ(13))\nd = crt(ZZ(5), ZZ(13), ZZ(7), ZZ(37), true)","category":"page"},{"location":"Nemo/docs/src/integer/#Integer-logarithm","page":"Integers","title":"Integer logarithm","text":"","category":"section"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"flog(::fmpz, ::fmpz)\nflog(::fmpz, ::Int)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.flog-Tuple{fmpz,fmpz}","page":"Integers","title":"Nemo.flog","text":"flog(x::fmpz, c::fmpz)\n\nReturn the floor of the logarithm of x to base c.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/#Nemo.flog-Tuple{fmpz,Int64}","page":"Integers","title":"Nemo.flog","text":"flog(x::fmpz, c::Int)\n\nReturn the floor of the logarithm of x to base c.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"clog(::fmpz, ::fmpz)\nclog(::fmpz, ::Int)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.clog-Tuple{fmpz,fmpz}","page":"Integers","title":"Nemo.clog","text":"clog(x::fmpz, c::fmpz)\n\nReturn the ceiling of the logarithm of x to base c.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/#Nemo.clog-Tuple{fmpz,Int64}","page":"Integers","title":"Nemo.clog","text":"clog(x::fmpz, c::Int)\n\nReturn the ceiling of the logarithm of x to base c.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Examples","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"a = fmpz(12)\nb = fmpz(2)\n\nc = flog(a, b)\nd = clog(a, 3)","category":"page"},{"location":"Nemo/docs/src/integer/#Integer-roots","page":"Integers","title":"Integer roots","text":"","category":"section"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"isqrt(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Base.isqrt-Tuple{fmpz}","page":"Integers","title":"Base.isqrt","text":"isqrt(x::fmpz)\n\nReturn the floor of the square root of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"isqrtrem(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.isqrtrem-Tuple{fmpz}","page":"Integers","title":"Nemo.isqrtrem","text":"isqrtrem(x::fmpz)\n\nReturn a tuple s r consisting of the floor s of the square root of x and the remainder r, i.e. such that x = s^2 + r. We require x geq 0.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"root(::fmpz, ::Int)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.root-Tuple{fmpz,Int64}","page":"Integers","title":"Nemo.root","text":"root(x::fmpz, n::Int)\n\nReturn the floor of the n-the root of x. We require n  0 and that x geq 0 if n is even.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Examples","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"a = ZZ(13)\n\nb = isqrt(a)\ns, r = isqrtrem(a)\nc = root(a, 3)","category":"page"},{"location":"Nemo/docs/src/integer/#Number-theoretic-functionality","page":"Integers","title":"Number theoretic functionality","text":"","category":"section"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"divisible(::fmpz, ::Int)\ndivisible(::fmpz, ::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.divisible-Tuple{fmpz,Int64}","page":"Integers","title":"Nemo.divisible","text":"divisible(x::fmpz, y::Int)\n\nReturn true if x is divisible by y, otherwise return false. We require x neq 0.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/#Nemo.divisible-Tuple{fmpz,fmpz}","page":"Integers","title":"Nemo.divisible","text":"divisible(x::fmpz, y::fmpz)\n\nReturn true if x is divisible by y, otherwise return false. We require x neq 0.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"issquare(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#AbstractAlgebra.Generic.issquare-Tuple{fmpz}","page":"Integers","title":"AbstractAlgebra.Generic.issquare","text":"issquare(x::fmpz)\n\nReturn true if x is a square, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"isprime(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.isprime-Tuple{fmpz}","page":"Integers","title":"Nemo.isprime","text":"isprime(x::fmpz)\n\nReturn true if x is a prime number, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"isprobable_prime(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.isprobable_prime-Tuple{fmpz}","page":"Integers","title":"Nemo.isprobable_prime","text":"isprobable_prime(x::fmpz)\n\nReturn true if x is very probably a prime number, otherwise return false. No counterexamples are known to this test, but it is conjectured that infinitely many exist.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"factor(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#AbstractAlgebra.factor-Tuple{fmpz}","page":"Integers","title":"AbstractAlgebra.factor","text":"factor(a::fmpz)\n\nReturn a factorisation of a using a Fac struct (see the documentation on factorisation in Nemo).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"divisor_lenstra(::fmpz, ::fmpz, ::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.divisor_lenstra-Tuple{fmpz,fmpz,fmpz}","page":"Integers","title":"Nemo.divisor_lenstra","text":"divisor_lenstra(n::fmpz, r::fmpz, m::fmpz)\n\nIf n has a factor which lies in the residue class r (mod m) for 0  r  m  n, this function returns such a factor. Otherwise it returns 0. This is only efficient if m is at least the cube root of n. We require gcd(r m) = 1 and this condition is not checked.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"factorial(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Base.factorial-Tuple{fmpz}","page":"Integers","title":"Base.factorial","text":"factorial(x::fmpz)\n\nReturn the factorial of x, i.e. x = 123ldots x. We require x geq 0.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"rising_factorial(::fmpz, ::fmpz)\nrising_factorial(::fmpz, ::Int)\nrising_factorial(::Int, ::Int)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.rising_factorial-Tuple{fmpz,fmpz}","page":"Integers","title":"Nemo.rising_factorial","text":"rising_factorial(x::fmpz, n::fmpz)\n\nReturn the rising factorial of x, i.e. x(x + 1)(x + 2)cdots (x + n - 1). If n  0 we throw a DomainError().\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/#Nemo.rising_factorial-Tuple{fmpz,Int64}","page":"Integers","title":"Nemo.rising_factorial","text":"rising_factorial(x::fmpz, n::Int)\n\nReturn the rising factorial of x, i.e. x(x + 1)(x + 2)ldots (x + n - 1). If n  0 we throw a DomainError().\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/#Nemo.rising_factorial-Tuple{Int64,Int64}","page":"Integers","title":"Nemo.rising_factorial","text":"rising_factorial(x::Int, n::Int)\n\nReturn the rising factorial of x, i.e. x(x + 1)(x + 2)ldots (x + n - 1). If n  0 we throw a DomainError().\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"primorial(::fmpz)\nprimorial(::Int)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.primorial-Tuple{fmpz}","page":"Integers","title":"Nemo.primorial","text":"primorial(x::fmpz)\n\nReturn the primorial of x, i.e. the product of all primes less than or equal to x. If x  0 we throw a DomainError().\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/#Nemo.primorial-Tuple{Int64}","page":"Integers","title":"Nemo.primorial","text":"primorial(x::Int)\n\nReturn the primorial of x, i.e. the product of all primes less than or equal to x. If x  0 we throw a DomainError().\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"fibonacci(::Int)\nfibonacci(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.fibonacci-Tuple{Int64}","page":"Integers","title":"Nemo.fibonacci","text":"fibonacci(x::Int)\n\nReturn the x-th Fibonacci number F_x. We define F_1 = 1, F_2 = 1 and F_i + 1 = F_i + F_i - 1 for all integers i.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/#Nemo.fibonacci-Tuple{fmpz}","page":"Integers","title":"Nemo.fibonacci","text":"fibonacci(x::fmpz)\n\nReturn the x-th Fibonacci number F_x. We define F_1 = 1, F_2 = 1 and F_i + 1 = F_i + F_i - 1 for all integers i.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"bell(::fmpz)\nbell(::Int)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.bell-Tuple{fmpz}","page":"Integers","title":"Nemo.bell","text":"bell(x::fmpz)\n\nReturn the Bell number B_x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/#Nemo.bell-Tuple{Int64}","page":"Integers","title":"Nemo.bell","text":"bell(x::Int)\n\nReturn the Bell number B_x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"binomial(::fmpz, ::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Base.binomial-Tuple{fmpz,fmpz}","page":"Integers","title":"Base.binomial","text":"binomial(n::fmpz, k::fmpz)\n\nReturn the binomial coefficient fracn(n - k)k. If n k  0 or k  n we return 0.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"moebius_mu(::Int)\nmoebius_mu(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.moebius_mu-Tuple{Int64}","page":"Integers","title":"Nemo.moebius_mu","text":"moebius_mu(x::Int)\n\nReturn the Moebius mu function of x as an Int. The value returned is either -1, 0 or 1. If x leq 0 we throw a DomainError().\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/#Nemo.moebius_mu-Tuple{fmpz}","page":"Integers","title":"Nemo.moebius_mu","text":"moebius_mu(x::fmpz)\n\nReturn the Moebius mu function of x as an Int. The value returned is either -1, 0 or 1. If x leq 0 we throw a DomainError().\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"jacobi_symbol(::Int, ::Int)\njacobi_symbol(::fmpz, ::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.jacobi_symbol-Tuple{Int64,Int64}","page":"Integers","title":"Nemo.jacobi_symbol","text":"jacobi_symbol(x::Int, y::Int)\n\nReturn the value of the Jacobi symbol left(fracxyright). If y leq 0, we throw a DomainError().\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/#Nemo.jacobi_symbol-Tuple{fmpz,fmpz}","page":"Integers","title":"Nemo.jacobi_symbol","text":"jacobi_symbol(x::fmpz, y::fmpz)\n\nReturn the value of the Jacobi symbol left(fracxyright). If y leq 0, we throw a DomainError().\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"divisor_sigma(::Int, ::Int)\ndivisor_sigma(::fmpz, ::Int)\ndivisor_sigma(::fmpz, ::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.divisor_sigma-Tuple{Int64,Int64}","page":"Integers","title":"Nemo.divisor_sigma","text":"divisor_sigma(x::Int, y::Int)\n\nReturn the value of the sigma function, i.e. sum_0  d  x d^y. If x leq 0 or y  0 we throw a DomainError().\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/#Nemo.divisor_sigma-Tuple{fmpz,Int64}","page":"Integers","title":"Nemo.divisor_sigma","text":"divisor_sigma(x::fmpz, y::Int)\n\nReturn the value of the sigma function, i.e. sum_0  d  x d^y. If x leq 0 or y  0 we throw a DomainError().\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/#Nemo.divisor_sigma-Tuple{fmpz,fmpz}","page":"Integers","title":"Nemo.divisor_sigma","text":"divisor_sigma(x::fmpz, y::fmpz)\n\nReturn the value of the sigma function, i.e. sum_0  d  x d^y. If x leq 0 or y  0 we throw a DomainError().\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"euler_phi(::Int)\neuler_phi(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.euler_phi-Tuple{Int64}","page":"Integers","title":"Nemo.euler_phi","text":"euler_phi(x::Int)\n\nReturn the value of the Euler phi function at x, i.e. the number of positive integers up to x (inclusive) that are coprime with x. An exception is raised if x leq 0.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/#Nemo.euler_phi-Tuple{fmpz}","page":"Integers","title":"Nemo.euler_phi","text":"euler_phi(x::fmpz)\n\nReturn the value of the Euler phi function at x, i.e. the number of positive integers up to x (inclusive) that are coprime with x. An exception is raised if x leq 0.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"number_of_partitions(::Int)\nnumber_of_partitions(::fmpz) ","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.number_of_partitions-Tuple{Int64}","page":"Integers","title":"Nemo.number_of_partitions","text":"number_of_partitions(x::Int)\n\nReturn the number of partitions of x. This function is not available on Windows 64.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/#Nemo.number_of_partitions-Tuple{fmpz}","page":"Integers","title":"Nemo.number_of_partitions","text":"number_of_partitions(x::fmpz)\n\nReturn the number of partitions of x. This function is not available on Windows 64.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Examples","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"isprime(ZZ(13))\nn = factorial(ZZ(100))\ns = divisor_sigma(ZZ(128), 10)\na = euler_phi(ZZ(12480))\np = number_of_partitions(ZZ(1000))\nf = factor(ZZ(12))","category":"page"},{"location":"Nemo/docs/src/integer/#Digits-and-bases","page":"Integers","title":"Digits and bases","text":"","category":"section"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"bin(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Base.bin-Tuple{fmpz}","page":"Integers","title":"Base.bin","text":"bin(n::fmpz)\n\nReturn n as a binary string.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"oct(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Base.oct-Tuple{fmpz}","page":"Integers","title":"Base.oct","text":"oct(n::fmpz)\n\nReturn n as a octal string.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"dec(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Base.dec-Tuple{fmpz}","page":"Integers","title":"Base.dec","text":"dec(n::fmpz)\n\nReturn n as a decimal string.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"hex(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Base.hex-Tuple{fmpz}","page":"Integers","title":"Base.hex","text":"hex(n::fmpz) = base(n, 16)\n\nReturn n as a hexadecimal string.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"base(::fmpz, ::Integer)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.base-Tuple{fmpz,Integer}","page":"Integers","title":"Nemo.base","text":"base(n::fmpz, b::Integer)\n\nReturn n as a string in base b. We require 2 leq b leq 62.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"ndigits(::fmpz, ::Integer)","category":"page"},{"location":"Nemo/docs/src/integer/#Base.ndigits-Tuple{fmpz,Integer}","page":"Integers","title":"Base.ndigits","text":"ndigits(x::fmpz, b::Integer = 10)\n\nReturn the number of digits of x in the base b (default is b = 10).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"nbits(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.nbits-Tuple{fmpz}","page":"Integers","title":"Nemo.nbits","text":"nbits(x::fmpz)\n\nReturn the number of binary bits of x. We return zero if x = 0.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Examples","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"a = fmpz(12)\n\ns1 = bin(a)\ns2 = base(a, 13)\nn1 = nbits(a)\nn2 = ndigits(a, 3)","category":"page"},{"location":"Nemo/docs/src/integer/#Bit-twiddling","page":"Integers","title":"Bit twiddling","text":"","category":"section"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"popcount(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.popcount-Tuple{fmpz}","page":"Integers","title":"Nemo.popcount","text":"popcount(x::fmpz)\n\nReturn the number of ones in the binary representation of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"prevpow2(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.prevpow2-Tuple{fmpz}","page":"Integers","title":"Nemo.prevpow2","text":"prevpow2(x::fmpz)\n\nReturn the previous power of 2 up to including x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"nextpow2(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.nextpow2-Tuple{fmpz}","page":"Integers","title":"Nemo.nextpow2","text":"nextpow2(x::fmpz)\n\nReturn the next power of 2 that is at least x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"trailing_zeros(::fmpz)","category":"page"},{"location":"Nemo/docs/src/integer/#Base.trailing_zeros-Tuple{fmpz}","page":"Integers","title":"Base.trailing_zeros","text":"trailing_zeros(x::fmpz)\n\nReturn the number of trailing zeros in the binary representation of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"clrbit!(::fmpz, ::Int)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.clrbit!-Tuple{fmpz,Int64}","page":"Integers","title":"Nemo.clrbit!","text":"clrbit!(x::fmpz, c::Int)\n\nClear bit c of x, where the least significant bit is the 0-th bit. Note that this function modifies its input in-place.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"setbit!(::fmpz, ::Int)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.setbit!-Tuple{fmpz,Int64}","page":"Integers","title":"Nemo.setbit!","text":"setbit!(x::fmpz, c::Int)\n\nSet bit c of x, where the least significant bit is the 0-th bit. Note that this function modifies its input in-place.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"combit!(::fmpz, ::Int)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.combit!-Tuple{fmpz,Int64}","page":"Integers","title":"Nemo.combit!","text":"combit!(x::fmpz, c::Int)\n\nComplement bit c of x, where the least significant bit is the 0-th bit. Note that this function modifies its input in-place.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Examples","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"a = fmpz(12)\n\np = popcount(a)\nb = nextpow2(a)\ncombit!(a, 2)","category":"page"},{"location":"Nemo/docs/src/integer/#Random-generation","page":"Integers","title":"Random generation","text":"","category":"section"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"rand_bits(::FlintIntegerRing, ::Int)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.rand_bits-Tuple{FlintIntegerRing,Int64}","page":"Integers","title":"Nemo.rand_bits","text":"rand_bits(::FlintIntegerRing, b::Int)\n\nReturn a random signed integer whose absolute value has b bits.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"rand_bits_prime(::FlintIntegerRing, ::Int, ::Bool)","category":"page"},{"location":"Nemo/docs/src/integer/#Nemo.rand_bits_prime-Tuple{FlintIntegerRing,Int64,Bool}","page":"Integers","title":"Nemo.rand_bits_prime","text":"rand_bits_prime(::FlintIntegerRing, n::Int, proved::Bool=true)\n\nReturn a random prime number with the given number of bits. If only a probable prime is required, one can pass proved=false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"Examples","category":"page"},{"location":"Nemo/docs/src/integer/","page":"Integers","title":"Integers","text":"a = rand_bits(ZZ, 23)\nb = rand_bits_prime(ZZ, 7)","category":"page"},{"location":"AbstractAlgebra/docs/src/types/#Appendix-A:-Types-in-AbstractAlgebra.jl","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"On this page we discuss the abstract type hierarchy in AbstractAlgebra.jl and objects known as parents which contain additional information about groups, rings, fields and modules, etc., that can't be stored in types alone.","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"These details are technical and can be skipped or skimmed by new users of Julia/AbstractAlgebra.jl. Types are almost never dealt with directly when scripting AbstractAlgebra.jl to do mathematical computations.","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"In contrast, AbstractAlgebra.jl developers will want to know how we model mathematical objects and their rings, fields, groups, etc.","category":"page"},{"location":"AbstractAlgebra/docs/src/types/#The-abstract-type-hierarchy-in-AbstractAlgebra.jl","page":"Appendix A: Types in AbstractAlgebra.jl","title":"The abstract type hierarchy in AbstractAlgebra.jl","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"Abstract types in Julia can also belong to one another in a hierarchy. We make use of such a hierarchy to organise the kinds of mathematical objects in AbstractAlgebra.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"For example, the AbstractAlgebra.Field abstract type belongs to the AbstractAlgebra.Ring abstract type.","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"In practice, this means that any generic function in AbstractAlgebra.jl which is designed to work with ring objects will also work with field objects.","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"In AbstractAlgebra.jl we also distinguish between the elements of a field, say, and the field itself.","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"For example, we have an object of type Generic.PolyRing to model a generic polynomial ring, and elements of that polynomial ring would have type Generic.Poly.","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"For this purpose, we also have a hierarchy of abstract types, such as FieldElem, that the types of element objects can belong to.","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"(Image: alt text)","category":"page"},{"location":"AbstractAlgebra/docs/src/types/#Why-types-aren't-enough","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Why types aren't enough","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"Naively, one might have expected that rings in AbstractAlgebra.jl could be modeled as types and their elements as objects with the given type. But there are various reasons why this is not a good model.","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"Consider the ring R = mathbbZnmathbbZ for a multiprecision integer n. If we were to model the ring R as a type, then the type would somehow need to contain the modulus n. This is not possible in Julia, and in fact it is not desirable, since the compiler would then recompile all the associated functions every time a different modulus n was used.","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"We could attach the modulus n to the objects representing elements of the ring, rather than their type.","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"But now we cannot create new elements of the ring mathbbZnmathbbZ given only their type, since the type no longer contains the modulus n.","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"Instead, the way we get around this in AbstractAlgebra.jl is to have special (singleton) objects that act like types, but are really just ordinary Julia objects. These objects, called parent objects, can contain extra information, such as the modulus n.","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"In order to create new elements of mathbbZnmathbbZ as above, we overload the call operator for the parent object.","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"In the following AbstractAlgebra.jl example, we create the parent object R corresponding to the ring mathbbZ7mathbbZ. We then create a new element a of this ring by calling the parent object R.","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"R = ResidueRing(ZZ, 7)\na = R(3)","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"Here, R is the parent object, containing the modulus 7. So this example creates the element a = 3 pmod7.","category":"page"},{"location":"AbstractAlgebra/docs/src/types/#More-complex-example-of-parent-objects","page":"Appendix A: Types in AbstractAlgebra.jl","title":"More complex example of parent objects","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"Here is some Julia/AbstractAlgebra.jl code which constructs a polynomial ring over the integers, a polynomial in that ring and then does some introspection to illustrate the various relations between the objects and types.","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"using AbstractAlgebra\n\nR, x = ZZ[\"x\"]\n\nf = x^2 + 3x + 1\n\ntypeof(R) <: PolyRing\n\ntypeof(f) <: PolyElem\n\nparent(f) == R","category":"page"},{"location":"AbstractAlgebra/docs/src/types/#Concrete-types-in-AbstractAlgebra.jl","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Concrete types in AbstractAlgebra.jl","text":"","category":"section"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"Here we give a list of the concrete types in AbstractAlgebra.jl.","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"In parentheses we put the types of the corresponding parent objects.","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"Perm{<:Integer} (SymmetricGroup{<:Integer})\nGFElem{<:Integer} (GFField{<:Integer})","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"We also think of various Julia types as though they were AbstractAlgebra.jl types:","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"BigInt (Integers{BigInt})\nRational{BigInt} (Rationals{BigInt})","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"Then there are various types for generic constructions over a base ring. They are all parameterised by a type T which is the type of the elements of the base ring they are defined over.","category":"page"},{"location":"AbstractAlgebra/docs/src/types/","page":"Appendix A: Types in AbstractAlgebra.jl","title":"Appendix A: Types in AbstractAlgebra.jl","text":"Generic.Poly{T} (Generic.PolyRing{T})\nGeneric.MPoly{T} (Generic.MPolyRing{T})\nGeneric.RelSeries{T} (Generic.RelSeriesRing{T})\nGeneric.AbsSeries{T} (Generic.AbsSeriesRing{T})\nGeneric.LaurentSeriesRingElem{T} (Generic.LaurentSeriesRing{T})\nGeneric.LaurentSeriesFieldElem{T} (Generic.LaurentSeriesField{T})\nGeneric.Res{T} (Generic.ResRing{T})\nGeneric.Frac{T} (Generic.FracField{T})\nGeneric.Mat{T} (Generic.MatSpace{T})","category":"page"},{"location":"Nemo/docs/src/ff_embedding/","page":"Finite field embeddings","title":"Finite field embeddings","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/ff_embedding/#Finite-field-embeddings","page":"Finite field embeddings","title":"Finite field embeddings","text":"","category":"section"},{"location":"Nemo/docs/src/ff_embedding/#Introduction","page":"Finite field embeddings","title":"Introduction","text":"","category":"section"},{"location":"Nemo/docs/src/ff_embedding/","page":"Finite field embeddings","title":"Finite field embeddings","text":"Nemo allows the construction of finite field embeddings making use of the algorithm of Bosma, Cannon and Steel behind the scenes to ensure compatibility. Critical routines (e.g. polynomial factorization, matrix computations) are provided by the C library Flint, whereas high level tasks are written directly in Nemo.","category":"page"},{"location":"Nemo/docs/src/ff_embedding/#Embedding-functionality","page":"Finite field embeddings","title":"Embedding functionality","text":"","category":"section"},{"location":"Nemo/docs/src/ff_embedding/","page":"Finite field embeddings","title":"Finite field embeddings","text":"It is possible to explicitly call the embedding embed function to create an embedding, but it is also possible to directly ask for the conversion of a finite field element x in some other finite field k via calling k(x). The resulting embedding is of type FinFieldMorphism. It is also possible to compute the preimage map of an embedding via the preimage_map function, applied to an embedding or directly to the finite fields (this actually first computes the embedding), or via conversion. An error is thrown if the element you want to compute the preimage of is not in the image of the embedding.","category":"page"},{"location":"Nemo/docs/src/ff_embedding/#Computing-an-embedding","page":"Finite field embeddings","title":"Computing an embedding","text":"","category":"section"},{"location":"Nemo/docs/src/ff_embedding/","page":"Finite field embeddings","title":"Finite field embeddings","text":"embed(::FqNmodFiniteField, ::FqNmodFiniteField)","category":"page"},{"location":"Nemo/docs/src/ff_embedding/#Nemo.embed-Tuple{FqNmodFiniteField,FqNmodFiniteField}","page":"Finite field embeddings","title":"Nemo.embed","text":"embed(k::T, K::T) where T <: FinField\n\nEmbed k in K, with some additionnal computations in order to satisfy compatibility conditions with previous and future embeddings.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/ff_embedding/","page":"Finite field embeddings","title":"Finite field embeddings","text":"Examples","category":"page"},{"location":"Nemo/docs/src/ff_embedding/","page":"Finite field embeddings","title":"Finite field embeddings","text":"julia> k2, x2 = FiniteField(19, 2, \"x2\")\n(Finite field of degree 2 over F_19, x2)\n\njulia> k4, x4 = FiniteField(19, 4, \"x4\")\n(Finite field of degree 4 over F_19, x4)\n\njulia> f = embed(k2, k4)\nMorphism from Finite field of degree 2 over F_19\nto Finite field of degree 4 over F_19\n\njulia> y = f(x2)\n6*x4^3+5*x4^2+9*x4+17\n\njulia> z = k4(x2)\n6*x4^3+5*x4^2+9*x4+17","category":"page"},{"location":"Nemo/docs/src/ff_embedding/#Computing-the-preimage-of-an-embedding","page":"Finite field embeddings","title":"Computing the preimage of an embedding","text":"","category":"section"},{"location":"Nemo/docs/src/ff_embedding/","page":"Finite field embeddings","title":"Finite field embeddings","text":"preimage_map(::FqNmodFiniteField, ::FqNmodFiniteField)\npreimage_map(::FinFieldMorphism)","category":"page"},{"location":"Nemo/docs/src/ff_embedding/#AbstractAlgebra.Generic.preimage_map-Tuple{FqNmodFiniteField,FqNmodFiniteField}","page":"Finite field embeddings","title":"AbstractAlgebra.Generic.preimage_map","text":"preimage_map(k::T, k::T) where T <: FinField\n\nComputes the preimage map corresponding to the embedding of k into K.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/ff_embedding/#AbstractAlgebra.Generic.preimage_map-Tuple{Nemo.FinFieldMorphism}","page":"Finite field embeddings","title":"AbstractAlgebra.Generic.preimage_map","text":"preimage_map(f::FinFieldMorphism)\n\nCompute the preimage map corresponding to the embedding f.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/ff_embedding/","page":"Finite field embeddings","title":"Finite field embeddings","text":"Examples","category":"page"},{"location":"Nemo/docs/src/ff_embedding/","page":"Finite field embeddings","title":"Finite field embeddings","text":"julia> k7, x7 = FiniteField(13, 7, \"x7\")\n(Finite field of degree 7 over F_13, x7)\n\njulia> k21, x21 = FiniteField(13, 21, \"x21\")\n(Finite field of degree 21 over F_13, x21)\n\njulia> s = preimage_map(k7, k21)\nPreimage of the morphism from Finite field of degree 7 over F_13\nto Finite field of degree 21 over F_13\n\njulia> y = k21(x7);\n\njulia> z = s(y)\nx7\n\njulia> t = k7(y)\nx7","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"CurrentModule = Nemo","category":"page"},{"location":"Nemo/docs/src/matrix/#Matrices","page":"Matrices","title":"Matrices","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Nemo allow the creation of dense matrices over any computable ring R. There are two different kinds of implementation: a generic one for the case where no specific implementation exists (provided by AbstractAlgebra.jl), and efficient implementations of matrices over numerous specific rings, usually provided by C/C++ libraries.","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"The following table shows each of the matrix types available in Nemo, the base ring R, and the Julia/Nemo types for that kind of matrix (the type information is mainly of concern to developers).","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Base ring Library Element type Parent type\nGeneric ring R AbstractAlgebra.jl Generic.Mat{T} Generic.MatSpace{T}\nmathbbZ Flint fmpz_mat FmpzMatSpace\nmathbbZnmathbbZ (small n) Flint nmod_mat NmodMatSpace\nmathbbZnmathbbZ (large n) Flint fmpz_mod_mat FmpzModMatSpace\nmathbbQ Flint fmpq_mat FmpqMatSpace\nmathbbZpmathbbZ (small p) Flint gfp_mat GFPMatSpace\nmathbbF_p^n (small p) Flint fq_nmod_mat FqNmodMatSpace\nmathbbF_p^n (large p) Flint fq_mat `FqMatSpace\nmathbbR Arb arb_mat ArbMatSpace\nmathbbC Arb acb_mat AcbMatSpace","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"The dimensions and base ring R of a generic matrix are stored in its parent object.","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"All matrix element types belong to the abstract type MatElem and all of the matrix space types belong to the abstract type MatSpace. This enables one to write generic functions that can accept any Nemo matrix type.","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Note that the preferred way to create matrices is not to use the type constructors but to use the matrix function, see also the Constructors section of the AbstractAlgebra manual.","category":"page"},{"location":"Nemo/docs/src/matrix/#Matrix-functionality","page":"Matrices","title":"Matrix functionality","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"All matrix spaces in Nemo follow the AbstractAlgebra.jl matrix interface:","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/matrix_spaces","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"In addition, AbstractAlgebra.jl provides a great deal of generic functionality for matrices. Some of this functionality is also provided by C libraries, such as Flint, for various specific rings.","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"https://nemocas.github.io/AbstractAlgebra.jl/latest/matrix","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"In the following, we list the functionality which is provided in addition to the generic matrix functionality, for specific rings in Nemo.","category":"page"},{"location":"Nemo/docs/src/matrix/#Comparison-operators","page":"Matrices","title":"Comparison operators","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"overlaps(::arb_mat, ::arb_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.overlaps-Tuple{arb_mat,arb_mat}","page":"Matrices","title":"Nemo.overlaps","text":"overlaps(x::arb_mat, y::arb_mat)\n\nReturns true if all entries of x overlap with the corresponding entry of y, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"overlaps(::acb_mat, ::acb_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.overlaps-Tuple{acb_mat,acb_mat}","page":"Matrices","title":"Nemo.overlaps","text":"overlaps(x::acb_mat, y::acb_mat)\n\nReturns true if all entries of x overlap with the corresponding entry of y, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"contains(::arb_mat, ::arb_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#Base.contains-Tuple{arb_mat,arb_mat}","page":"Matrices","title":"Base.contains","text":"contains(x::arb_mat, y::arb_mat)\n\nReturns true if all entries of x contain the corresponding entry of y, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"contains(::acb_mat, ::acb_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#Base.contains-Tuple{acb_mat,acb_mat}","page":"Matrices","title":"Base.contains","text":"contains(x::acb_mat, y::acb_mat)\n\nReturns true if all entries of x contain the corresponding entry of y, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"In addition we have the following ad hoc comparison operators.","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Examples","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"C = RR[1 2; 3 4]\nD = RR[\"1 +/- 0.1\" \"2 +/- 0.1\"; \"3 +/- 0.1\" \"4 +/- 0.1\"]\noverlaps(C, D)\ncontains(D, C)","category":"page"},{"location":"Nemo/docs/src/matrix/#Scaling","page":"Matrices","title":"Scaling","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"<<(::fmpz_mat, ::Int)","category":"page"},{"location":"Nemo/docs/src/matrix/#Base.:<<-Tuple{fmpz_mat,Int64}","page":"Matrices","title":"Base.:<<","text":"<<(x::fmpz_mat, y::Int)\n\nReturn 2^yx.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":">>(::fmpz_mat, ::Int)","category":"page"},{"location":"Nemo/docs/src/matrix/#Base.:>>-Tuple{fmpz_mat,Int64}","page":"Matrices","title":"Base.:>>","text":">>(x::fmpz_mat, y::Int)\n\nReturn x2^y where rounding is towards zero.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Examples","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"S = MatrixSpace(ZZ, 3, 3)\n\nA = S([fmpz(2) 3 5; 1 4 7; 9 6 3])\n\nB = A<<5\nC = B>>2","category":"page"},{"location":"Nemo/docs/src/matrix/#Determinant","page":"Matrices","title":"Determinant","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"det_divisor(::fmpz_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.det_divisor-Tuple{fmpz_mat}","page":"Matrices","title":"Nemo.det_divisor","text":"det_divisor(x::fmpz_mat)\n\nReturn some positive divisor of the determinant of x, if the determinant is nonzero, otherwise return zero.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"det_given_divisor(::fmpz_mat, ::Integer, ::Bool)\ndet_given_divisor(::fmpz_mat, ::fmpz, ::Bool)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.det_given_divisor-Tuple{fmpz_mat,Integer,Bool}","page":"Matrices","title":"Nemo.det_given_divisor","text":"det_given_divisor(x::fmpz_mat, d::Integer, proved=true)\n\nReturn the determinant of x given a positive divisor of its determinant. If proved == true (the default), the output is guaranteed to be correct, otherwise a heuristic algorithm is used.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/#Nemo.det_given_divisor-Tuple{fmpz_mat,fmpz,Bool}","page":"Matrices","title":"Nemo.det_given_divisor","text":"det_given_divisor(x::fmpz_mat, d::fmpz, proved=true)\n\nReturn the determinant of x given a positive divisor of its determinant. If proved == true (the default), the output is guaranteed to be correct, otherwise a heuristic algorithm is used.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Examples","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"S = MatrixSpace(ZZ, 3, 3)\n\nA = S([fmpz(2) 3 5; 1 4 7; 9 6 3])\n\nc = det_divisor(A)\nd = det_given_divisor(A, c)","category":"page"},{"location":"Nemo/docs/src/matrix/#Linear-solving","page":"Matrices","title":"Linear solving","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"cansolve(::fmpz_mat, ::fmpz_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.cansolve-Tuple{fmpz_mat,fmpz_mat}","page":"Matrices","title":"Nemo.cansolve","text":"cansolve(a::fmpz_mat, b::fmpz_mat) -> Bool, fmpz_mat\n\nReturn true and a matrix x such that ax = b, or false and some matrix in case x does not exist.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"solve_dixon(::fmpz_mat, ::fmpz_mat)\nsolve_dixon(::fmpq_mat, ::fmpq_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.solve_dixon-Tuple{fmpz_mat,fmpz_mat}","page":"Matrices","title":"Nemo.solve_dixon","text":"solve_dixon(a::fmpz_mat, b::fmpz_mat)\n\nReturn a tuple (x m) consisting of a column vector x such that ax = b pmodm. The element  b must be a column vector with the same number > of rows as a and a must be a square matrix. If these conditions are not met or (x d) does not exist, an exception is raised.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/#Nemo.solve_dixon-Tuple{fmpq_mat,fmpq_mat}","page":"Matrices","title":"Nemo.solve_dixon","text":"solve_dixon(a::fmpq_mat, b::fmpq_mat)\n\nSolve ax = b by clearing denominators and using Dixon's algorithm. This is usually faster for large systems.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Examples","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"S = MatrixSpace(ZZ, 3, 3)\nT = MatrixSpace(ZZ, 3, 1)\n\nA = S([fmpz(2) 3 5; 1 4 7; 9 2 2])\nB = T([fmpz(4), 5, 7])\n\nX, m = solve_dixon(A, B)","category":"page"},{"location":"Nemo/docs/src/matrix/#Pseudo-inverse","page":"Matrices","title":"Pseudo inverse","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"pseudo_inv(::fmpz_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#AbstractAlgebra.Generic.pseudo_inv-Tuple{fmpz_mat}","page":"Matrices","title":"AbstractAlgebra.Generic.pseudo_inv","text":"pseudo_inv(x::fmpz_mat)\n\nReturn a tuple (z d) consisting of a matrix z and denominator d such that zd is the inverse of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Examples","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"S = MatrixSpace(ZZ, 3, 3)\n\nA = S([1 0 1; 2 3 1; 5 6 7])\n\nB, d = pseudo_inv(A)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nullspace","page":"Matrices","title":"Nullspace","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"nullspace_right_rational(x::fmpz_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.nullspace_right_rational-Tuple{fmpz_mat}","page":"Matrices","title":"Nemo.nullspace_right_rational","text":"nullspace_right_rational(x::fmpz_mat)\n\nReturn a tuple (r U) consisting of a matrix U such that the first r columns form the right rational nullspace of x, i.e. a set of vectors over mathbbZ giving a mathbbQ-basis  for the nullspace of x considered as a matrix over mathbbQ.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/#Modular-reduction","page":"Matrices","title":"Modular reduction","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"reduce_mod(::fmpz_mat, ::Integer)\nreduce_mod(::fmpz_mat, ::fmpz)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.reduce_mod-Tuple{fmpz_mat,Integer}","page":"Matrices","title":"Nemo.reduce_mod","text":"reduce_mod(x::fmpz_mat, y::Integer)\n\nReduce the entries of x modulo y and return the result.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/#Nemo.reduce_mod-Tuple{fmpz_mat,fmpz}","page":"Matrices","title":"Nemo.reduce_mod","text":"reduce_mod(x::fmpz_mat, y::fmpz)\n\nReduce the entries of x modulo y and return the result.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Examples","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"S = MatrixSpace(ZZ, 3, 3)\n\nA = S([fmpz(2) 3 5; 1 4 7; 9 2 2])\n\nreduce_mod(A, ZZ(5))\nreduce_mod(A, 2)","category":"page"},{"location":"Nemo/docs/src/matrix/#Lifting","page":"Matrices","title":"Lifting","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"lift(::nmod_mat)\nlift(::gfp_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.lift-Tuple{nmod_mat}","page":"Matrices","title":"Nemo.lift","text":"lift(a::T) where {T <: Zmodn_mat}\n\nReturn a lift of the matrix a to a matrix over mathbbZ, i.e. where the entries of the returned matrix are those of a lifted to mathbbZ.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/#Nemo.lift-Tuple{gfp_mat}","page":"Matrices","title":"Nemo.lift","text":"lift(a::gfp_mat)\n\nReturn a lift of the matrix a to a matrix over mathbbZ, i.e. where the entries of the returned matrix are those of a lifted to mathbbZ.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Examples","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"R = ResidueRing(ZZ, 7)\nS = MatrixSpace(R, 3, 3)\n\na = S([4 5 6; 7 3 2; 1 4 5])\n\n b = lift(a)","category":"page"},{"location":"Nemo/docs/src/matrix/#Special-matrices","page":"Matrices","title":"Special matrices","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"hadamard(::FmpzMatSpace)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.hadamard-Tuple{FmpzMatSpace}","page":"Matrices","title":"Nemo.hadamard","text":"hadamard(R::FmpzMatSpace)\n\nReturn the Hadamard matrix for the given matrix space. The number of rows and columns must be equal.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"ishadamard(::fmpz_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.ishadamard-Tuple{fmpz_mat}","page":"Matrices","title":"Nemo.ishadamard","text":"ishadamard(x::fmpz_mat)\n\nReturn true if the given matrix is Hadamard, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"hilbert(::FmpqMatSpace)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.hilbert-Tuple{FmpqMatSpace}","page":"Matrices","title":"Nemo.hilbert","text":"hilbert(R::FmpqMatSpace)\n\nReturn the Hilbert matrix in the given matrix space. This is the matrix with entries H_ij = 1(i + j - 1).\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Examples","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"R = MatrixSpace(ZZ, 3, 3)\nS = MatrixSpace(QQ, 3, 3)\n\nA = hadamard(R)\nishadamard(A)\nB = hilbert(R)","category":"page"},{"location":"Nemo/docs/src/matrix/#Hermite-Normal-Form","page":"Matrices","title":"Hermite Normal Form","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"hnf(::fmpz_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#AbstractAlgebra.Generic.hnf-Tuple{fmpz_mat}","page":"Matrices","title":"AbstractAlgebra.Generic.hnf","text":"hnf(x::fmpz_mat)\n\nReturn the Hermite Normal Form of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"hnf_with_transform(::fmpz_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#AbstractAlgebra.Generic.hnf_with_transform-Tuple{fmpz_mat}","page":"Matrices","title":"AbstractAlgebra.Generic.hnf_with_transform","text":"hnf_with_transform(x::fmpz_mat)\n\nCompute a tuple (H T) where H is the Hermite normal form of x and T is a transformation matrix so that H = Tx.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"hnf_modular(::fmpz_mat, ::fmpz)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.hnf_modular-Tuple{fmpz_mat,fmpz}","page":"Matrices","title":"Nemo.hnf_modular","text":"hnf_modular(x::fmpz_mat, d::fmpz)\n\nCompute the Hermite normal form of x given that d is a multiple of the determinant of the nonzero rows of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"hnf_modular_eldiv(::fmpz_mat, ::fmpz)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.hnf_modular_eldiv-Tuple{fmpz_mat,fmpz}","page":"Matrices","title":"Nemo.hnf_modular_eldiv","text":"hnf_modular_eldiv(x::fmpz_mat, d::fmpz)\n\nCompute the Hermite normal form of x given that d is a multiple of the largest elementary divisor of x. The matrix x must have full rank.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"ishnf(::fmpz_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#AbstractAlgebra.Generic.ishnf-Tuple{fmpz_mat}","page":"Matrices","title":"AbstractAlgebra.Generic.ishnf","text":"ishnf(x::fmpz_mat)\n\nReturn true if the given matrix is in Hermite Normal Form, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Examples","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"S = MatrixSpace(ZZ, 3, 3)\n\nA = S([fmpz(2) 3 5; 1 4 7; 19 3 7])\n\nB = hnf(A)\nH, T = hnf_with_transform(A)\nM = hnf_modular(A, fmpz(27))\nN = hnf_modular_eldiv(A, fmpz(27))\nishnf(M)","category":"page"},{"location":"Nemo/docs/src/matrix/#Lattice-basis-reduction","page":"Matrices","title":"Lattice basis reduction","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Nemo provides LLL lattice basis reduction. Optionally one can specify the setup using a context object created by the following function.","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"lll_ctx(delta::Float64, eta::Float64, rep=:zbasis, gram=:approx)","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Return a LLL context object specifying LLL parameters delta and eta and specifying the representation as either :zbasis or :gram and the Gram type as either :approx or :exact.","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"lll(::fmpz_mat, ::lll_ctx)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.lll-Tuple{fmpz_mat,lll_ctx}","page":"Matrices","title":"Nemo.lll","text":"lll(x::fmpz_mat, ctx::lll_ctx = lll_ctx(0.99, 0.51))\n\nReturn the LLL reduction of the matrix x. By default the matrix x is a mathbbZ-basis and the Gram matrix is maintained throughout in approximate form. The LLL is performed with reduction parameters delta = 099 and eta = 051. All of these defaults can be overridden by specifying an optional context object.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"lll_with_transform(::fmpz_mat, ::lll_ctx)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.lll_with_transform-Tuple{fmpz_mat,lll_ctx}","page":"Matrices","title":"Nemo.lll_with_transform","text":"lll_with_transform(x::fmpz_mat, ctx::lll_ctx = lll_ctx(0.99, 0.51))\n\nCompute a tuple (L T) where L is the LLL reduction of a and T is a transformation matrix so that L = Ta. All the default parameters can be overridden by supplying an optional context object.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"lll_gram(::fmpz_mat, ::lll_ctx)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.lll_gram-Tuple{fmpz_mat,lll_ctx}","page":"Matrices","title":"Nemo.lll_gram","text":"lll_gram(x::fmpz_mat, ctx::lll_ctx = lll_ctx(0.99, 0.51, :gram))\n\nGiven the Gram matrix x of a matrix, compute the Gram matrix of its LLL reduction.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"lll_gram_with_transform(::fmpz_mat, ::lll_ctx)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.lll_gram_with_transform-Tuple{fmpz_mat,lll_ctx}","page":"Matrices","title":"Nemo.lll_gram_with_transform","text":"lll_gram_with_transform(x::fmpz_mat, ctx::lll_ctx = lll_ctx(0.99, 0.51, :gram))\n\nGiven the Gram matrix x of a matrix M, compute a tuple (L T) where L is the gram matrix of the LLL reduction of the matrix and T is a transformation matrix so that L = TM.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"lll_with_removal(::fmpz_mat, ::fmpz, ::lll_ctx)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.lll_with_removal-Tuple{fmpz_mat,fmpz,lll_ctx}","page":"Matrices","title":"Nemo.lll_with_removal","text":"lll_with_removal(x::fmpz_mat, b::fmpz, ctx::lll_ctx = lll_ctx(0.99, 0.51))\n\nCompute the LLL reduction of x and throw away rows whose norm exceeds the given bound b. Return a tuple (r L) where the first r rows of L are the rows remaining after removal.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"lll_with_removal_transform(::fmpz_mat, ::fmpz, ::lll_ctx)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.lll_with_removal_transform-Tuple{fmpz_mat,fmpz,lll_ctx}","page":"Matrices","title":"Nemo.lll_with_removal_transform","text":"lll_with_removal_transform(x::fmpz_mat, b::fmpz, ctx::lll_ctx = lll_ctx(0.99, 0.51))\n\nCompute a tuple (r L T) where the first r rows of L are those remaining from the LLL reduction after removal of vectors with norm exceeding the bound b and T is a transformation matrix so that L = Tx.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"lll!(::fmpz_mat, ::lll_ctx)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.lll!-Tuple{fmpz_mat,lll_ctx}","page":"Matrices","title":"Nemo.lll!","text":"lll!(x::fmpz_mat, ctx::lll_ctx = lll_ctx(0.99, 0.51))\n\nPerform the LLL reduction of the matrix x inplace. By default the matrix x is a > mathbbZ-basis and the Gram matrix is maintained throughout in approximate form. The LLL is performed with reduction parameters delta = 099 and eta = 051. All of these defaults can be overridden by specifying an optional context object.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"lll_gram!(::fmpz_mat, ::lll_ctx)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.lll_gram!-Tuple{fmpz_mat,lll_ctx}","page":"Matrices","title":"Nemo.lll_gram!","text":"lll_gram!(x::fmpz_mat, ctx::lll_ctx = lll_ctx(0.99, 0.51, :gram))\n\nGiven the Gram matrix x of a matrix, compute the Gram matrix of its LLL reduction inplace.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Examples","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"S = MatrixSpace(ZZ, 3, 3)\n\nA = S([fmpz(2) 3 5; 1 4 7; 19 3 7])\n\nL = lll(A, lll_ctx(0.95, 0.55, :zbasis, :approx)\nL, T = lll_with_transform(A)\n\nG == lll_gram(gram(A))\nG, T = lll_gram_with_transform(gram(A))\n\nr, L = lll_with_removal(A, fmpz(100))\nr, L, T = lll_with_removal_transform(A, fmpz(100))","category":"page"},{"location":"Nemo/docs/src/matrix/#Smith-Normal-Form","page":"Matrices","title":"Smith Normal Form","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"snf(::fmpz_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#AbstractAlgebra.Generic.snf-Tuple{fmpz_mat}","page":"Matrices","title":"AbstractAlgebra.Generic.snf","text":"snf(x::fmpz_mat)\n\nCompute the Smith normal form of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"snf_diagonal(::fmpz_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.snf_diagonal-Tuple{fmpz_mat}","page":"Matrices","title":"Nemo.snf_diagonal","text":"snf_diagonal(x::fmpz_mat)\n\nGiven a diagonal matrix x compute the Smith normal form of x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"issnf(::fmpz_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#AbstractAlgebra.Generic.issnf-Tuple{fmpz_mat}","page":"Matrices","title":"AbstractAlgebra.Generic.issnf","text":"issnf(x::fmpz_mat)\n\nReturn true if x is in Smith normal form, otherwise return false.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Examples","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"S = MatrixSpace(ZZ, 3, 3)\n\nA = S([fmpz(2) 3 5; 1 4 7; 19 3 7])\n\nB = snf(A)\nissnf(B) == true\n\nB = S([fmpz(2) 0 0; 0 4 0; 0 0 7])\n\nC = snf_diagonal(B)","category":"page"},{"location":"Nemo/docs/src/matrix/#Strong-Echelon-Form","page":"Matrices","title":"Strong Echelon Form","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"strong_echelon_form(::nmod_mat)\nstrong_echelon_form(::gfp_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.strong_echelon_form-Tuple{nmod_mat}","page":"Matrices","title":"Nemo.strong_echelon_form","text":"strong_echelon_form(a::nmod_mat)\n\nReturn the strong echeleon form of a. The matrix a must have at least as many rows as columns.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/#Nemo.strong_echelon_form-Tuple{gfp_mat}","page":"Matrices","title":"Nemo.strong_echelon_form","text":"strong_echelon_form(a::gfp_mat)\n\nReturn the strong echeleon form of a. The matrix a must have at least as many rows as columns.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Examples","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"R = ResidueRing(ZZ, 12)\nS = MatrixSpace(R, 3, 3)\n\nA = S([4 1 0; 0 0 5; 0 0 0 ])\n\nB = strong_echelon_form(A)","category":"page"},{"location":"Nemo/docs/src/matrix/#Howell-Form","page":"Matrices","title":"Howell Form","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"howell_form(::nmod_mat)\nhowell_form(::gfp_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.howell_form-Tuple{nmod_mat}","page":"Matrices","title":"Nemo.howell_form","text":"howell_form(a::nmod_mat)\n\nReturn the Howell normal form of a. The matrix a must have at least as many rows as columns.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/#Nemo.howell_form-Tuple{gfp_mat}","page":"Matrices","title":"Nemo.howell_form","text":"howell_form(a::gfp_mat)\n\nReturn the Howell normal form of a. The matrix a must have at least as many rows as columns.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Examples","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"R = ResidueRing(ZZ, 12)\nS = MatrixSpace(R, 3, 3)\n\nA = S([4 1 0; 0 0 5; 0 0 0 ])\n\nB = howell_form(A)","category":"page"},{"location":"Nemo/docs/src/matrix/#Gram-Schmidt-Orthogonalisation","page":"Matrices","title":"Gram-Schmidt Orthogonalisation","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"gso(::fmpq_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.gso-Tuple{fmpq_mat}","page":"Matrices","title":"Nemo.gso","text":"gso(x::fmpq_mat)\n\nReturn the Gram-Schmidt Orthogonalisation of the matrix x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Examples","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"S = MatrixSpace(QQ, 3, 3)\n\nA = S([4 7 3; 2 9 1; 0 5 3])\n\nB = gso(A)","category":"page"},{"location":"Nemo/docs/src/matrix/#Exponential","page":"Matrices","title":"Exponential","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Base.exp(::arb_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#Base.exp-Tuple{arb_mat}","page":"Matrices","title":"Base.exp","text":"exp(x::arb_mat)\n\nReturns the exponential of the matrix x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Base.exp(::acb_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#Base.exp-Tuple{acb_mat}","page":"Matrices","title":"Base.exp","text":"exp(x::acb_mat)\n\nReturns the exponential of the matrix x.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Examples","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"A = RR[2 0 0; 0 3 0; 0 0 1]\n\nB = exp(A)","category":"page"},{"location":"Nemo/docs/src/matrix/#Norm","page":"Matrices","title":"Norm","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"bound_inf_norm(::arb_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.bound_inf_norm-Tuple{arb_mat}","page":"Matrices","title":"Nemo.bound_inf_norm","text":"bound_inf_norm(x::arb_mat)\n\nReturns a nonnegative element z of type arb, such that z is an upper bound for the infinity norm for every matrix in x\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"bound_inf_norm(::acb_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#Nemo.bound_inf_norm-Tuple{acb_mat}","page":"Matrices","title":"Nemo.bound_inf_norm","text":"bound_inf_norm(x::acb_mat)\n\nReturns a nonnegative element z of type acb, such that z is an upper bound for the infinity norm for every matrix in x\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Examples","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"A = RR[1 2 3; 4 5 6; 7 8 9]\n\nd = bound_inf_norm(A)","category":"page"},{"location":"Nemo/docs/src/matrix/#Shifting","page":"Matrices","title":"Shifting","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"ldexp(::arb_mat, ::Int)","category":"page"},{"location":"Nemo/docs/src/matrix/#Base.Math.ldexp-Tuple{arb_mat,Int64}","page":"Matrices","title":"Base.Math.ldexp","text":"ldexp(x::arb_mat, y::Int)\n\nReturn 2^yx. Note that y can be positive, zero or negative.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"ldexp(::acb_mat, ::Int)","category":"page"},{"location":"Nemo/docs/src/matrix/#Base.Math.ldexp-Tuple{acb_mat,Int64}","page":"Matrices","title":"Base.Math.ldexp","text":"ldexp(x::acb_mat, y::Int)\n\nReturn 2^yx. Note that y can be positive, zero or negative.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Examples","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"A = RR[1 2 3; 4 5 6; 7 8 9]\n\nB = ldexp(A, 4)\n\noverlaps(16*A, B)","category":"page"},{"location":"Nemo/docs/src/matrix/#Predicates","page":"Matrices","title":"Predicates","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"isreal(::acb_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#Base.isreal-Tuple{acb_mat}","page":"Matrices","title":"Base.isreal","text":"isreal(x::acb_mat)\n\nReturns whether every entry of x has vanishing imaginary part.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Examples","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"A = CC[1 2 3; 4 5 6; 7 8 9]\n\nisreal(A)\n\nisreal(onei(CC)*A)","category":"page"},{"location":"Nemo/docs/src/matrix/#Conversion-to-Julia-matrices","page":"Matrices","title":"Conversion to Julia matrices","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Julia matrices use a different data structure than Nemo matrices. Conversion to Julia matrices is usually only required for interfacing with other packages. It isn't necessary to convert Nemo matrices to Julia matrices in order to manipulate them.","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"This conversion can be performed with standard Julia syntax, such as the following, where A is an fmpz_mat:","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"Matrix{Int}(A)\nMatrix{BigInt}(A)","category":"page"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"In case the matrix cannot be converted without loss, an InexactError is thrown: in this case, cast to a matrix of BigInts rather than Ints.","category":"page"},{"location":"Nemo/docs/src/matrix/#Eigenvalues-and-Eigenvectors-(experimental)","page":"Matrices","title":"Eigenvalues and Eigenvectors (experimental)","text":"","category":"section"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"eigvals(::acb_mat)\neigvals_simple(a::acb_mat)","category":"page"},{"location":"Nemo/docs/src/matrix/#LinearAlgebra.eigvals-Tuple{acb_mat}","page":"Matrices","title":"LinearAlgebra.eigvals","text":"eigvals(A::acb_mat)\n\nReturns the eigenvalues of A as a vector of tuples (acb, Int). Each tuple (z, k) corresponds to a cluser of k eigenvalues of A.\n\nThis function is experimental.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/#Nemo.eigvals_simple-Tuple{acb_mat}","page":"Matrices","title":"Nemo.eigvals_simple","text":"eigvals_simple(A::acb_mat, alg = :default)\n\nReturns the eigenvalues of A as a vector of acb. It is assumed that A has only simple eigenvalues.\n\nThe algorithm used can be changed by setting the alg keyword to :vdhoeven_mourrain or :rump.\n\nThis function is experimental.\n\n\n\n","category":"method"},{"location":"Nemo/docs/src/matrix/","page":"Matrices","title":"Matrices","text":"A = CC[1 2 3; 0 4 5; 0 0 6]\neigvals_simple(A)\nA = CC[2 2 3; 0 2 5; 0 0 2])\neigvals(A)","category":"page"},{"location":"Hecke/docs/src/quad_forms/introduction/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/introduction/","page":"Introduction","title":"Introduction","text":"CurrentModule = Hecke","category":"page"},{"location":"Hecke/docs/src/quad_forms/introduction/","page":"Introduction","title":"Introduction","text":"This chapter deals with quadratic and Hermitian spaces and lattices there of. ","category":"page"},{"location":"Hecke/docs/src/quad_forms/introduction/#Definitions-and-vocabulary","page":"Introduction","title":"Definitions and vocabulary","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/introduction/","page":"Introduction","title":"Introduction","text":"We begin by collecting the necessary definitions and vocabulary.  The terminology follows mainly [Kir16]","category":"page"},{"location":"Hecke/docs/src/quad_forms/introduction/#Quadratic-and-Hermitian-spaces","page":"Introduction","title":"Quadratic and Hermitian spaces","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/introduction/","page":"Introduction","title":"Introduction","text":"Let E be a number field. A quadratic space is a finite-dimensional vector space V over E together with a bilinear morphism Phi colon V times V to E. We will always work with an implicit canonical basis e_1dotsce_n of V. In view of this, quadratic spaces are in bijection with symmetric matrices over E. If V is a quadratic space, we call the matrix G = (Phi(e_i e_j))_1 leq i j leq n in E^n times n the Gram matrix of V.","category":"page"},{"location":"Hecke/docs/src/quad_forms/introduction/","page":"Introduction","title":"Introduction","text":"Let EK be an extension of number fields of degree two with non-trivial automorphism overlinephantomx E to E. A Hermitian space is a finite-dimensional vector space V over E together with a sesquilinear (with respect to the involution overlinephantomx) morphism Phi colon V times V to K. We will always work with an implicit canonical basis e_1dotsce_n of V. In view of this, Hermitian spaces are in bijection with Hermitian matrices over E. If V is a Hermitian space, we call the matrix G = (Phi(e_i e_j))_1 leq i j leq n in E^n times n the Gram matrix of V. We call overlinephantomx the involution of V.","category":"page"},{"location":"Hecke/docs/src/quad_forms/introduction/","page":"Introduction","title":"Introduction","text":"In both cases we refer to the field E as the base ring V. In this chapter we will refer to quadratic and Hermitian spaces also just as spaces.  For Hermitian lattices, the field K will be refered to as the fixed field of V.","category":"page"},{"location":"Hecke/docs/src/quad_forms/introduction/#Quadratic-and-Hermitian-lattices","page":"Introduction","title":"Quadratic and Hermitian lattices","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/introduction/","page":"Introduction","title":"Introduction","text":"Let V be a space (either quadratic or Hermitian) with base field E. A finitely generated mathcal O_E-submodule L of V is called a quadratic lattice or Hermitian lattice respectively. We call V the ambient space of L and Lotimes_mathcal O_E E the rational span of L. The ring mathcal O_E will be referred to as the base ring of L.","category":"page"},{"location":"Hecke/docs/src/quad_forms/introduction/#References","page":"Introduction","title":"References","text":"","category":"section"},{"location":"Hecke/docs/src/quad_forms/introduction/","page":"Introduction","title":"Introduction","text":"Many of the implemented algorithms for computing with quadratic and hermitian lattices over number fields are based on the Magma implementation of Markus Kirschmer, which can be found here.","category":"page"},{"location":"Hecke/docs/src/quad_forms/introduction/","page":"Introduction","title":"Introduction","text":"[Kir16] : Definite quadratic and hermitian forms with small class number. Habilitationsschrift. RWTH Aachen University, 2016, pdf","category":"page"},{"location":"Nemo/docs/src/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"Nemo/docs/src/","page":"Getting Started","title":"Getting Started","text":"Nemo is a computer algebra package for the Julia programming language, maintained by William Hart,  Tommy Hofmann, Claus Fieker, Fredrik Johansson with additional code by Oleksandr Motsak, Marek Kaluba and other contributors.","category":"page"},{"location":"Nemo/docs/src/","page":"Getting Started","title":"Getting Started","text":"https://nemocas.org (Website)\nhttps://github.com/Nemocas/Nemo.jl (Source code)\nhttps://nemocas.github.io/Nemo.jl/latest/ (Online documentation)","category":"page"},{"location":"Nemo/docs/src/","page":"Getting Started","title":"Getting Started","text":"The features of Nemo so far include:","category":"page"},{"location":"Nemo/docs/src/","page":"Getting Started","title":"Getting Started","text":"Multiprecision integers and rationals\nIntegers modulo n\np-adic numbers\nFinite fields (prime and non-prime order)\nNumber field arithmetic\nArbitrary precision real and complex balls\nUnivariate and multivariate polynomials and matrices over the above","category":"page"},{"location":"Nemo/docs/src/","page":"Getting Started","title":"Getting Started","text":"Nemo depends on AbstractAlgebra.jl which provides Nemo with generic routines for:","category":"page"},{"location":"Nemo/docs/src/","page":"Getting Started","title":"Getting Started","text":"Univariate and multivariate polynomials\nAbsolute and relative power series\nLaurent series\nFraction fields\nResidue rings\nMatrices and linear algebra\nYoung Tableaux\nPermutation groups\nCharacters","category":"page"},{"location":"Nemo/docs/src/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"Nemo/docs/src/","page":"Getting Started","title":"Getting Started","text":"To use Nemo we require Julia 1.0 or higher. Please see https://julialang.org/downloads/ for instructions on how to obtain julia for your system.","category":"page"},{"location":"Nemo/docs/src/","page":"Getting Started","title":"Getting Started","text":"At the Julia prompt simply type","category":"page"},{"location":"Nemo/docs/src/","page":"Getting Started","title":"Getting Started","text":"julia> using Pkg; Pkg.add(\"Nemo\")","category":"page"},{"location":"Nemo/docs/src/#Quick-start","page":"Getting Started","title":"Quick start","text":"","category":"section"},{"location":"Nemo/docs/src/","page":"Getting Started","title":"Getting Started","text":"Here are some examples of using Nemo.","category":"page"},{"location":"Nemo/docs/src/","page":"Getting Started","title":"Getting Started","text":"This example computes recursive univariate polynomials.","category":"page"},{"location":"Nemo/docs/src/","page":"Getting Started","title":"Getting Started","text":"julia> using Nemo\n\njulia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integer Ring,x)\n\njulia> S, y = PolynomialRing(R, \"y\")\n(Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Integer Ring,y)\n\njulia> T, z = PolynomialRing(S, \"z\")\n(Univariate Polynomial Ring in z over Univariate Polynomial Ring in y over Univariate Polynomial Ring in x over Integer Ring,z)\n\njulia> f = x + y + z + 1\nz+(y+(x+1))\n\njulia> p = f^30; # semicolon supresses output\n\njulia> @time q = p*(p+1);\n  0.325521 seconds (140.64 k allocations: 3.313 MB)","category":"page"},{"location":"Nemo/docs/src/","page":"Getting Started","title":"Getting Started","text":"Here is an example using generic recursive ring constructions.","category":"page"},{"location":"Nemo/docs/src/","page":"Getting Started","title":"Getting Started","text":"julia> using Nemo\n\njulia> R, x = FiniteField(7, 11, \"x\")\n(Finite field of degree 11 over F_7,x)\n\njulia> S, y = PolynomialRing(R, \"y\")\n(Univariate Polynomial Ring in y over Finite field of degree 11 over F_7,y)\n\njulia> T = ResidueRing(S, y^3 + 3x*y + 1)\nResidue ring of Univariate Polynomial Ring in y over Finite field of degree 11 over F_7 modulo y^3+(3*x)*y+(1)\n\njulia> U, z = PolynomialRing(T, \"z\")\n(Univariate Polynomial Ring in z over Residue ring of Univariate Polynomial Ring in y over Finite field of degree 11 over F_7 modulo y^3+(3*x)*y+(1),z)\n\njulia> f = (3y^2 + y + x)*z^2 + ((x + 2)*y^2 + x + 1)*z + 4x*y + 3;\n\njulia> g = (7y^2 - y + 2x + 7)*z^2 + (3y^2 + 4x + 1)*z + (2x + 1)*y + 1;\n\njulia> s = f^12;\n\njulia> t = (s + g)^12;\n\njulia> @time resultant(s, t)\n  0.426612 seconds (705.88 k allocations: 52.346 MB, 2.79% gc time)\n(x^10+4*x^8+6*x^7+3*x^6+4*x^5+x^4+6*x^3+5*x^2+x)*y^2+(5*x^10+x^8+4*x^7+3*x^5+5*x^4+3*x^3+x^2+x+6)*y+(2*x^10+6*x^9+5*x^8+5*x^7+x^6+6*x^5+5*x^4+4*x^3+x+3)","category":"page"},{"location":"Nemo/docs/src/","page":"Getting Started","title":"Getting Started","text":"Here is an example using matrices.","category":"page"},{"location":"Nemo/docs/src/","page":"Getting Started","title":"Getting Started","text":"julia> using Nemo\n\njulia> R, x = PolynomialRing(ZZ, \"x\")\n(Univariate Polynomial Ring in x over Integer Ring,x)\n\njulia> S = MatrixSpace(R, 40, 40)\nMatrix Space of 40 rows and 40 columns over Univariate Polynomial Ring in x over Integer Ring\n\njulia> M = rand(S, 2:2, -20:20)\n\njulia> @time det(M);\n  0.131212 seconds (1.12 M allocations: 39.331 MiB, 4.77% gc time)","category":"page"},{"location":"Nemo/docs/src/","page":"Getting Started","title":"Getting Started","text":"And here is an example with power series.","category":"page"},{"location":"Nemo/docs/src/","page":"Getting Started","title":"Getting Started","text":"julia> using Nemo\n\njulia> R, x = QQ[\"x\"]\n(Univariate Polynomial Ring in x over Rational Field,x)\n\njulia> S, t = PowerSeriesRing(R, 100, \"t\")\n(Univariate power series ring in t over Univariate Polynomial Ring in x over Rational Field,t+O(t^101))\n\njulia> u = t + O(t^100)\nt+O(t^100)\n\njulia> @time divexact((u*exp(x*u)), (exp(u)-1));\n  0.042663 seconds (64.01 k allocations: 1.999 MB, 15.40% gc time)","category":"page"},{"location":"Nemo/docs/src/#Building-dependencies-from-source","page":"Getting Started","title":"Building dependencies from source","text":"","category":"section"},{"location":"Nemo/docs/src/","page":"Getting Started","title":"Getting Started","text":"Nemo depends on various C libraries which are installed using binaries by default. With julia version >= 1.3, the use of these binaries can be overridden by putting the following into the file ~/.julia/artifacts/Overrides.toml:","category":"page"},{"location":"Nemo/docs/src/","page":"Getting Started","title":"Getting Started","text":"[e134572f-a0d5-539d-bddf-3cad8db41a82]\nFLINT = \"/prefix/for/libflint\"\n\n[d9960996-1013-53c9-9ba4-74a4155039c3]\nArb = \"/prefix/for/libarb\"\n\n[e21ec000-9f72-519e-ba6d-10061e575a27]\nAntic = \"/prefix/for/libantic\"","category":"page"},{"location":"Nemo/docs/src/","page":"Getting Started","title":"Getting Started","text":"(If only a specific library should be overridden, only the specific entry should be added.)","category":"page"},{"location":"Nemo/docs/src/#Experimental-threading-support-for-flint","page":"Getting Started","title":"Experimental threading support for flint","text":"","category":"section"},{"location":"Nemo/docs/src/","page":"Getting Started","title":"Getting Started","text":"Enabling a threaded version of flint can be done by setting the evironment variable NEMO_THREADED=1. To set the actual number of threads, use Nemo.flint_set_num_threads($numberofthreads).","category":"page"}]
}
